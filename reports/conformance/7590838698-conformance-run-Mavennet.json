{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "55074bde-f01d-4c92-8d0d-33bc9d656bbe",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5706bcae-6e07-45eb-bbb6-b1bcc1693bd8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f155707e-5927-47a8-b704-3fc1752475cc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "05be6cda-c3c6-4bee-a1d7-7701d86ccb2c"
                }
              }
            ]
          },
          {
            "id": "7f76b3f7-9e22-4fcf-87db-f3ce01594484",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0670c425-e6b5-4349-bec9-e290f82d667a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "18851a9d-128d-4ab6-aee6-d40acc943100"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8481f72d-f125-42f9-b1d7-6f881dcf2f3a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7d8a352c-3bb5-4016-aa9e-bd0b57550379",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d7f597eb-66ed-45d9-bd4b-659b946d6443",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49b9addd-596e-4a20-b9aa-1c9649ddb0d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ae393bb6-9a31-4bf6-b984-81c660e5a530"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c4263319-e731-4f2c-8b98-4b08e7e51c12",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "84ac1346-2f93-46fc-8e15-2e29053bb24b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2d5e036-c4f1-4599-ab4e-23940e651787",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "95cf87eb-28c1-4f14-a8f3-49cbd69f7caa"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f5b84b5-9a9f-4311-a672-720f3815938e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b2c54350-3a2a-407e-9704-9845f9eb8cf8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "995ae4fd-0a45-4fe8-a243-c2f6576e2ee4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "557f8b5a-56c0-4780-b0d2-f26790fe3232"
            }
          }
        ]
      },
      {
        "id": "a9306ceb-0e49-4479-88fc-8a592c8b5bd3",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e5e2a381-0399-45fe-ab7c-5a03c83f3fad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cbfc478d-00fb-4452-9b1c-f25d811ed372",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fff0ba8a-33b7-45c5-9b0a-8b865de98204",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00998422-9f69-4425-9cab-7ca31fa547b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a70dc398-6588-421e-9624-5382808cb05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d0056c-ea13-4efa-b81f-e675f4cdac02",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03cb8332-523b-4d56-a6b5-3ade1437dbcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43709a03-baa6-415b-9f9f-dccafd2149fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e0d3d2-bf9b-4952-adbd-21cf33db70a1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa3c650-6857-4e2b-b4a2-fe0031fca93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6ed951a-d207-4748-a487-12989887d85a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e5f44dee-1b9d-49c3-9683-a1afe9f42fae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "565ca065-c3a0-4e86-a5d0-3f754bb81b3f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbae40a-184a-4854-a1b2-90e6d985000b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b68077d-f822-453c-91bc-573d4bd56aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456ab5f3-ae85-4787-87ba-4c91c8458171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a2f4036-6d6c-42b4-b5aa-14acd7ade151"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7b9dc0d8-b574-4b84-985a-5c7fc1134fbb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6621e5f2-7d69-4699-a1bb-fef8a487f9b3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "927be6b2-0df3-4897-9025-605c813b3836",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f8be5b3d-4077-4da6-bdb3-23424288f1ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea0e3838-9cc6-424f-979e-135ed41cfc5c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "110d18db-67b3-4c61-8919-aee609d83140"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "710ee629-4791-402d-8d13-bd853aab6420",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a326076-36cf-4b43-9623-4dc12e932d0f"
            }
          }
        ]
      },
      {
        "id": "2f5b9b1f-3474-4cde-b1ac-4ec9b7a12610",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b6a4c5dd-440b-4154-bedf-f25b7a6713b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab09c93d-d6e4-48a3-90af-78b99e26f939",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fc5a98cb-40c3-40de-a1e1-a83932a39d11",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbec5f1-e582-4f40-b2be-5d9e762d19bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a344e7a9-6305-485d-a585-f279f497a70f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d261ac7-c812-49a2-8d79-988bc551b100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c3b3b5b-c2dc-450b-beb5-f5f12fede6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4352dd-173b-4011-9dd8-732077164f1b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b285de8-96a8-4b08-9caf-439fd0f872ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f2a08c-0920-42c6-8aa1-f48d5bc3d42d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a2d010-b74f-4f67-aaed-d3890f1b222e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e46871bf-b2f7-4597-b2f5-cb17a3010edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec62fcc8-5e3b-4605-adb4-8fb181c6c859",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6709dcc3-38e3-4a0d-ad6a-8275c66dccdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3b068b-454b-4e8a-9293-6738a57f0087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02fc958-8f69-4aaa-ba7b-a7a391359dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e115ed2c-f7cd-4e0d-8f76-dc65d38c4475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4ec445-5c79-418a-963c-0a8b84593d90",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf203c3-719d-4147-af1c-757f74feb198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed45efe-9ad2-4dd9-8977-6ae434e5b6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9daf63c9-32d7-4830-8221-bdb5acba58de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3eaf877f-a60e-468c-9630-b384507c4d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4e7802-e07d-48cd-ab6f-9944cb473501",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ab66ab-1af0-435e-9d3e-09da38a8c32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8bbf8f-6d0b-4d22-909e-6ab321708463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b17cb7-32f6-4c7e-96ee-a177b2be4c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5144e2b3-1f9e-4a45-92a2-280fd60ec961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e3cf7a-dcc2-4b28-b2a7-6f0966cb1fab",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01254b96-3aac-4fdb-815f-f3795f601f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca24905e-5384-4a27-a5e2-102209bb6149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294ec417-1236-4b93-8d89-d3d0b15d43c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d06ef82c-4cc8-4b38-b44e-8f2f82bcb1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f33bfa-b99f-472e-baad-19be5ce320f0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a136e8ab-42ab-4660-a77b-c9f2ce8ff6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d17764-7dcc-4da6-ac64-fda3dac4cebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddf057c-6fe2-4088-a25c-16283281b630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b5c47d7-b41b-4284-9527-f38229d01760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1cb3bf-6a31-4858-a6c5-fd97d6403f7d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220b19d1-abbe-4265-bdc4-598f7bba426a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d735e8c8-edd9-4c55-957a-4abdb365eb6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1cc15e-45bf-484d-b681-19ceb3e05891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbd850ff-a75d-4708-bf5f-0b12f26f281d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effdf47b-14ec-43bb-ba11-7dd1b09efff8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b11602c-c4f3-409b-90d1-f226dda817e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88c4f9e-34cc-4051-806f-bdbe66963293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dd489a-d3a4-4c9d-b0af-c527b4804e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e564336b-b587-4f80-8181-495a652771c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fcd516-6f47-4a4d-8de8-d68de2cd682e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab15d1e-64e2-45da-8410-3f90847836e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a05c6c-ca53-4288-a854-e24435835937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1264555d-f29f-4cbd-bdef-964597e32279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d79bd0f-7e45-4765-a7aa-d409aab29763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fec5e3-eb87-4049-8142-50533674c569",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bbd8a1-64fb-4cc3-a6ff-83cc462647c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a811ac-c634-4452-8b4c-558700df3917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9c80bd-6940-4e6e-bab2-79dec23bfa82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cfd5c30-c673-4066-8a29-d97eec6d74d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06e8f25-d0f3-48f1-a021-583d707d295e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d7403d-2658-4a08-9b3e-92de7f95e448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb46fae-b272-4957-9ce6-149f6e77712c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b4accd-7c5d-4868-8176-4060a8e29071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8ee14b2-3066-4ebd-83a3-c724f1bc153c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a26342b-7bc7-47dc-b744-4119757363bf",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a306c4ce-1174-4b43-9ada-1b5df2f3a21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd7382a1-d588-44d7-b3a6-1ced78be39b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6228d49-8301-432a-b08c-8d51f69018f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab145aa3-f6a2-4fef-bda8-7ddb090b5e76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a39879-e061-4b12-a8c4-113dcce00b39",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158a7e41-ad95-4e84-bf08-3dc8c11567bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b651b0-d425-4b59-b98d-7ee7d4a0e143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c62cfe-9a4a-4eea-973f-af4d3ca7f97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32750ae9-495c-4c34-bab5-088a171344dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820f3e76-fa78-4592-b904-2013d2043278",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88cacc4-fc21-4385-a59e-3415b813596d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e326ac-7912-4c31-bb96-c1b7ae6a28e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c129d0b-f66f-4f1c-a13a-14241f382d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4527372-02dd-41c7-a3fe-59a026b2bb85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089f57d6-fd5b-4b4d-9535-53e1ea4f24ba",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc910c18-ac92-48d8-8ed6-a4bb6271fd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fbd199a-b3ba-4441-acc4-3770607a2cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4399a5b-0e3d-470a-9423-f79866d2ad1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5a4f444-d376-4ee2-970a-ba96b11bf4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efdb0e9-3670-4de1-a96b-811ac06fd0c4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c47cd2b-3eb9-4351-840d-d0d2919733b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa1d889-82f7-4aef-a083-7561f56f5e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9be858-d856-446e-95b6-a3bcedbf158c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce88084b-a88f-4b9a-86e7-f2721d646228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e073572-fc2b-44ad-a200-59beac243820",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f157b5d5-a612-4075-8c70-3b0719719b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b801def-8d5f-482d-aea7-e9275bbc77d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f41139-eb4a-4476-a749-9e79b1df8378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff82dc42-47e4-4579-bb7b-34d3b55e244a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad349df-bcee-4b37-8ff6-e6978bfac342",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a75888-e7ba-41bb-b83f-f10c51a91edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d582da1-0de5-475b-8e3e-25486307b9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0601ab31-a82f-4214-a374-83126340d466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b44e1d3-6e56-4adf-be52-213c119bcc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89853b96-f4ef-45ac-bcc6-1386aae97864",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f383407-a843-4619-a0cc-92272c85949f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92dcb23d-4ce1-4c99-95c4-9847757da1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d2273d-ada8-4466-9dd6-052631bcc5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef28100-19bf-4ad3-83b4-a737e28f14e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e0e75e-da47-43bd-ac14-fc46264dc798",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19791dfd-e43b-4d48-9b9d-9b5d76576f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d473dae1-51f0-4a6d-92ed-3747eca25abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42af84fc-4129-4388-bae6-51dbf3ce5cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d229d78-6d0e-40d4-8a20-f9ed4415b5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9577277b-752d-4025-a3fd-40eba594b428",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab8e96b-e3bc-4061-a08d-b78ee2e028c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "515cb12f-9a5c-4cdb-b766-49834b877bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2b6f3a-0beb-46d5-82a8-18e10dd8d757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd24c4a-5aa6-4a95-b255-13f126f5f262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63761fe0-195d-4078-957d-ef13ec03dc81",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe85d2a-dec0-4d2a-b843-976d94e4b617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91885615-4c96-4047-8f1d-d09ccbb584f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599f154b-8b69-46b6-89fa-e1908b1ed621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "400c8c54-8ba2-43aa-8417-71860da59ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e1fdf6-64cf-4684-bcae-732c035a8d77",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a81be3-ea9a-4542-886f-828354147b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46138517-70a1-40ec-a315-1321cf354006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7d9a84-1463-41e3-92e9-57bea20cd656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d26932c-7e2d-488d-b961-6596435d4750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a691c340-cacc-4713-aaa6-d93fff4b578f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0293bf34-1fc0-4c0d-84b0-9df8af49371f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5835d9e2-9561-456b-8150-5b06eda545f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517b6fa2-f69d-474b-9572-b289fa3db714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc455f40-516e-4a1a-9626-f95b56cd4ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80ffb49-895e-4511-b452-e24f016699f2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6be169-afab-4ea0-9223-72346472640b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc1769c-f2ac-425e-86ff-836f40bfa301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807c1b65-644a-46a5-a67d-ead1dcd8ee17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ccc3429-54c3-4d31-850a-3133ae531701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb3b5ae-f710-4ff6-9ef0-b7b50a426a8a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47611a9c-90fe-4c13-9a3d-f920fc4b3ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe46e90-6bd5-4148-84f1-c441879d1c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f150dd-200b-4374-9722-473027d2a928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "26fa48b4-eafc-49db-b26c-b4e2f008bb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9da8fb-130e-47e6-ac65-8f894f8ee133",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1dfcce-7cd4-458c-809f-6955af30b302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a74773-0643-4433-b044-43e2a6f5537b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9385bbdd-b60f-4f1f-baf7-628f91ec2562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6761cfe9-c610-4a5a-8a7f-ac5baef3058f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3d0ad8-179e-4aed-9de9-8cec95bc93ed",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33a8417-d8fe-44aa-8cc6-f9db19df20e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d5de52-f048-4a09-861c-33b28dcb5816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd17f3f-80d0-46f0-8462-83e69e05cf9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd76069c-8322-4312-adde-cad95acfbe32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636849bf-eb6d-4ae0-8d63-d32abc465211",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b1f203-2bc5-4af6-8679-b9c9a0ff2a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057cb312-074a-4b80-8617-a046d5cc44c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bdbbe5-b199-40ab-ab85-c57a0ab2fd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cae42f4-504e-4df9-9512-f8af80a7f6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89d672d-b81a-413c-aa57-a5f57d717d42",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be84e681-a7e9-413d-a641-83ea3939902a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261a72c0-23cc-403c-bf25-aba6a028f000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9e10a4-297b-48c3-a2b5-91b5020227ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2608d8c2-a9ad-4f6a-9b56-85a42476eacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d5c7a7-19d7-481d-a8ca-4079c1dbcc6e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4283230-9dae-467d-a5a5-b00899f6841a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59feb933-f1d2-4ed3-a63f-b74d2a645083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bccb2ff-c894-4f6c-a172-a4fd0601fb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "032dc6ce-25a2-42d8-8731-ef90feb08ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87e6fba-a813-431f-8ea9-5850c6adfe79",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de09aa0d-5135-4757-8171-252a05a189ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f63792-a1d2-440d-84c6-5c7a6d10c830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c626dc-28f2-4d31-aa8c-86f5b34eef47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80450e82-178d-4fe7-937b-55053d73a970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775c90d4-7ab5-4864-9ae0-b49552c0de0d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371fbdb5-00ff-444b-9b04-533a1df0839d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955abad8-c3f0-4bb4-a678-95c18084d9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7add79-7404-4f43-86c7-66c8dea22e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "320b2c5b-ea73-439c-8b02-c7835cfb7547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02a1b02-4f5d-4faa-91d9-216d6a25a158",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c991e7-2560-4e19-9c25-3b1ae0c9abf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "676a97b4-5883-47c9-8f11-ad90c4bc2595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35dc5b1-276d-4454-90ae-00fffae34db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9c308ea1-7b20-42e6-996f-510152c44267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac080726-c598-4a19-91a6-3f785f3ebe11",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b34770f-67cd-42a8-96cb-e8a6dfea732c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0820d9f8-9010-42b3-885d-61a3386dacc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9310c29b-0ecd-43da-9f5b-24119be615fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9937112-e2da-4391-bd9b-920c9f057f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a754ac7-5c2d-4880-b437-0f6b440dc38e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae31351-0850-49dc-8cf7-32efc638ec61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91a3ff56-1087-4665-a857-c7aaf2216184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9bc32f-8ffc-46e0-85f7-298ed4dba685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "385991a6-7438-4b3d-81f1-6535e918945a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9292fded-59f3-4fa1-810f-861cc15181de",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0e4605-4ea4-43dd-84b2-8539d906849f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c20f556-602b-48a7-9a66-88d65b1be274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8690b59d-0ffb-4ba0-9db2-a1de11d83b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff499a40-612d-4ffc-9bb3-c01e00052651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ee6188-d2f0-476a-ac63-3ee440bbcd55",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b596ee01-0c5e-4622-87a3-d549db9c4770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9f4d13-3031-45d0-a019-487fc339ddd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb4c20c-b07d-4cf5-a1c0-b771cbb0024b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c9b46c9-7765-4125-8679-6486c8584a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aea73df-5b5c-42f4-96f7-956a77fff685",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8833be-8c3a-4826-9c3e-bc0f69c9edbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5205da35-1763-4dc2-852e-f34a0776c117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6fad45-c8ba-4442-b1ad-ccbe85744ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf31f88-d59b-4b61-beb0-4ee903d2d3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a53ab64-251f-440b-a7d7-0f04929f14f4",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a58881-8764-4a91-a4b9-a353859fc77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09978b64-d2ba-450b-ae28-7a79819f9506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be397d90-2bfc-4227-a4fc-f329873a8a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "15ac40c4-d858-48fe-b29a-4c64bb926c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df4e7f1-a426-429a-a9bf-0b3aa0c0438d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c64853-7b4a-4c73-906b-48d73cd97e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bfacf4-56cd-4df9-9fea-b88bb4e63f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d2df3e-7689-4322-b854-60c229fd03d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a25a5e71-186a-4a88-966c-6a3283a403e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418c4118-a135-4344-aec3-6010925d1805",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327b44a5-051e-4dba-9a71-14eef08bac1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d550f3f-1459-4b19-9875-b2027ef25a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb000533-0d80-49ee-9a71-d8614bbb7126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b4b1fcf-31fc-45c6-a8eb-b63590cf4eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9eb7af-0f32-48ad-bcb7-6d2abc38cc24",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8111d7-8d79-49a7-ad8d-4d5d1d153df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f9ef431-6783-4acb-911f-875f1c6ef21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce50ca74-9652-4a31-8254-88b91b482c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b17f7069-4b9d-43f1-9602-881b89530fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6292d7dd-90a1-4010-bb7d-832b264b8edd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036503a4-f8b6-4def-8004-98122051bdd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2e44b1-e9c5-4ce6-931e-0d605a962d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605ff690-76e6-422b-869d-963ae1ebee60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d59a25d-7004-4ddc-befd-520523232b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a08f9729-07a3-498b-9358-472fd24a3578",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc14fb0-bb8c-4223-8087-82208b671130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef54f795-7ad7-4e1c-bfb8-a8aa39099013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b9bf6d-8276-4843-9756-1ba2f57abfb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dee7ffd6-3cb7-4da1-a99d-d8d29ffae977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46efa11-4005-4e8a-a2c2-d7bbaff81091",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ceb4be5-3494-4783-95f9-2ab823f8bcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e24474-b19b-4e39-875f-2589dc3fd7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84d69b4-f32e-4a92-b967-b640c3f0d458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0afbb558-ce6a-4521-be18-fcdb09e545a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e668cc02-5dc8-4fba-a45c-9894f6d43c5f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8e608c-a202-4e1a-a171-596b3ce191d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f94a6d-fdb2-497f-a1c4-57eb1784ca98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3628522-88e0-4ea0-8474-d48bc559d8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31ea8ed0-4ed4-4831-82f9-4e4240c62033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d7d8f7-4005-4f6e-b4db-6c4eab5dcf62",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f88529-ea9c-4106-812a-ffc03213325e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdee737b-aacd-4f61-9521-370526991f43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7560bb-8a2f-4e38-9c72-bcbf8e92e1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "585f6c0c-984d-46db-945d-ab3e5966a3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c558ba-92e4-40af-940e-f251b2a8d5f5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ef33d1-8fcd-435c-aeb7-82601850d42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf89d49e-3be6-4fdb-b033-1bca7cbb9afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773c22a1-a527-458d-a1e7-775f5f728d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5fca1a31-2748-40ad-9305-f3862a3827ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7eac21-f9c6-44df-a722-0b7ba1e49b78",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c44a66-b6a9-40a7-9437-345a5a1b36de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76319683-c9c8-450d-b450-caa92cd7f397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7dff25-1de8-469e-a153-ff01b215567a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3113fcd7-ce05-4ac8-b537-7be2d6ad0acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b56c1d-6d01-48cd-b53d-b3079b01e245",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1cf44c-a1d7-4f87-ae39-1f2c5d607be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb596c6b-577b-4f40-9c80-1e7a85d26cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d028be4e-be39-4421-a7a0-8cc6a5ba2d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "77f7c96a-7eba-4ddb-9a67-bdf5bebbcc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4e8ae6-ad77-4df2-9e30-5f8f878aa602",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a83480b-fc4c-4b43-ad7f-c54f937e29ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e6a7f4-d3cb-49d8-99ae-34e855d77e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91a4de1-1455-441c-8cf3-cbba5b8babfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c652d91e-38bc-4d58-accc-1d30ed48a3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce3a8c1-5d41-4e3b-8e8c-f1836288aca8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0d55f7-29c6-46dd-a998-1ad427830ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcde125b-862a-4e2b-81aa-ceec43c0e140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5c76dc-9e1e-474a-8a40-9fd095aef8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f2b078-5349-427d-94fe-52bba4a48a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8501f4-751c-4b8e-883e-2001a2d03b6d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14214a23-9a19-4770-bdb8-5a9e76d0008a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59df48ae-4125-4be5-9643-61e2be06d52d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8788a617-0cc9-422f-8599-396377d89619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6efc3a2-b323-4335-a83b-485d8657164b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9090159-f6d7-442f-bd74-4c040ab6fb3f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e89587a-0543-4fa7-942a-045c31914fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89100532-61a0-4d83-8aa8-d3b3d0836d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b409563-bd02-4203-a793-c2cd14538a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2377bf-3881-449a-84e8-79cc9019338a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6caa79-529d-4c9c-9edd-8189800f5347",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41a3246-0572-44c1-86a8-84eb6f5fb5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a4de48-b817-4a66-8f53-a988eee0c9bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca43882a-50a0-4353-abdf-6b0246bf3e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d893e3c3-5756-41a4-b29d-2e6bd595af63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cd7309-2f11-45e9-9a43-5c05d1b5dc6b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d581f41-b9de-4b75-9946-fb292d47e1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a052e0-78fb-43a3-a017-5148df77ca5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6960841-9611-4090-ab89-5f77555a8c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "439ffec6-4b29-4399-8e59-df08925b84b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19139d47-e80b-4b15-8aaf-29e43b11bc8e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c2e269-5c0b-4266-9682-72c811b4b031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1441c066-daa2-446c-a832-765ae76188e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a049dd-39e3-4e10-9722-b8e4682b83d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b405485-bb7d-4503-bb7c-a77db6738c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac19bf05-e799-4af0-8807-e072c98cb2a2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa08fc1c-ea17-4427-83eb-8f3c2da3cc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c85f7dc-cb60-4cab-8054-7f66f57d4e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d2c622-53b4-45b2-bde6-993e98198197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f9132d0-1c7b-4a58-a9e0-93f9e03039b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74317092-88b4-4eed-a7de-7fec19be92df",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34324790-05ab-46d4-8621-4d51e28c7ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dedaaedf-8d43-442b-a020-1e2384ebe00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f45647b-49d6-4236-84ac-b1da0be91794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6692cdff-e7cb-4f24-bd3d-8ac30b0aa30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b7d259-2831-403d-801d-45fd12e55903",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5b24a0-ca7a-4353-a3f4-e126b1302282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764025d5-3f37-4e93-a7f6-595d68aeac37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dabf5a34-4545-430b-a81f-ed97e33defe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e834f941-6813-4757-ada4-6d0b02157e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f95faf-b7e9-4dfd-8001-e5e77e2ab6a6",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9385776-8f83-4a7a-9488-ee50ece2ab9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efaf66a1-9b4a-4d3e-8474-ea49c8324ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0c56b4-b5ad-4633-84e5-30b3bed5fc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "67f4990f-9df8-448a-93c3-b09698ef8210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b843da87-c365-4819-b939-a92ada0c3b7f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc03121-6ed7-4f9d-8bba-0c5d1f0d6d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6086db3-950a-4015-805c-91e6500334dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e00927-9440-46b9-b990-b85f23a992cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "18c0fe6c-0868-4724-8512-fc1e5dbe5777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a740b3e4-294d-4689-a716-c9ae8fe82ff8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa08f83-09b1-43a2-852e-7f85507ad7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee85660-3bb1-49d8-b060-68509815e0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2388af9b-a8f2-4320-9ae2-57fff35e1879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10da5939-6cbd-4a82-a542-d745a1ae9874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a6f7e2-a55a-4d42-b320-817bd0586e0c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78939aea-70ed-494b-9b27-2def3eb42fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c67890-5aed-4389-b15f-b802bf61207a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa999114-95d9-449f-ab72-6e7245675cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eae59be-07b2-49f5-b990-c106a0ea27a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0338d06-e2fa-47a6-b087-d341db668d8d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b88583f-5ad9-4704-a30d-a1d357686023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7548fbd7-f486-47c0-8536-95d20d8d4737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799da626-4e34-4149-b1ba-5e3546a600e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93a01841-baf9-45ee-9110-fadc3c71583c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5119711f-3ed6-4cc0-a3ef-52f8ae7a04e3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c591504-401c-40be-bd9e-527378018349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5bdc812-c919-44c3-a80f-d6ca0cdcbf12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d361679-55ff-4dc2-befc-946039383ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5db21938-5eaa-4233-b35d-b5acee72de71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69adb7b9-0d60-410d-a0e1-700c0c144a89",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f90e25a-9b53-48c6-b4cf-d6b0c15c8d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010ead50-b79e-4fbc-b974-a49f8f9a0c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6868f3-fac3-4b95-ab01-d61975e96668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "df1d9d0f-b6b0-4689-a4c6-90105daa03b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35cdd475-c3f2-48fb-8c18-a1a28b1167bb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909f339c-a7cf-425c-aaa2-b8c0344db210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3cdb2a4-6eb7-4ed8-86fa-b37fdc509738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6235fe62-5e46-4449-b700-b75429efcf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "072af9d1-1fba-4d14-8042-dbc50880f649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9f7bde-b292-4a52-95b5-6e1af9614e87",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315443fa-e675-4b63-98b6-f6c615538826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3260324e-5704-4ba5-9c08-4146d982a778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3593f686-66e5-4e5d-b56a-ee80a445dc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4948a4e-1331-4494-bcd7-9e53ce10d219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61108dd3-2bac-4dc2-bd64-73aea18895a9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da114dc-cd19-4ad6-bb5e-c3c8a688e7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea01f2a7-dbe2-46dc-a85e-f04b408bddd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46112ccd-1c96-4d73-969e-09cf8cbac4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ef1a85f-54e2-450d-9e4c-f08db8539db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84850e5c-2657-4013-8c75-1b3a8aed763e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe13aed-a6c2-47d1-8e04-7c4ec9090f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c44e950-96ca-457f-b00d-988c82c31368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3c5810-91af-45f8-b129-389ca6c33bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d29b6eca-a556-4d17-b176-83802a2923c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0684e6c7-674b-4223-9739-70a5f0dfc11b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9407280-f4a6-4c33-9773-acbebb498e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0fe61d-1f9c-4782-a26a-34f303dba8b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9aa91b-77fc-4a4e-b237-5ce242b3d003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d80d7fe6-679e-4809-87d9-2df4c6717de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534a76b0-b4fb-439c-8b4c-44fbba8d665c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2b4048-7e6d-4c68-909c-6f8a7029d369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06f6d6ae-e210-4718-a9a9-6fb0ddc8b9a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1dc802-3dc7-4d73-a533-6649b9611db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36348173-09f2-416b-959f-6a7f183f3c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458d0860-2684-499f-a33a-1effbea3f513",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723fb7ee-7ba6-4bec-9861-f8888ce9d9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8897143-c6e6-486f-a375-36f1bf4dc0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3da2bf-89d2-434e-845b-1a3b3763dea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05acc05d-cbdc-4d2c-97af-b125f408e832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9793fc07-f3a4-403b-8bd9-52e338a1b9fe",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718fc4a0-d788-49ff-8cf4-3c3a8a481a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450b8028-7239-468f-8a7c-65a7ecc04bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf0b963-a084-4801-aad7-35cd15a7c920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c61590f-b5ea-48b7-a3b8-b22e50e57bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7706a1e1-ce60-4902-b449-3624d73493ed",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d425be70-a207-4e1b-a056-10400a7a782c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7bc7d78-504b-480c-ba24-76d0768f76dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f134ef36-8ed7-49f4-8263-f89d8c16ac8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f79b7c4-e3fa-4c12-ab48-731f3c4f1f30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60294d62-4b29-4fac-bd57-d7b4d121888f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5607418a-8754-469f-8e6d-fe2261c9eb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f4880e1-7666-419b-9c66-ba926c118b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdaa7fe9-eba0-4c90-a3ef-cdfc6606c3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "20f612b0-7a62-4988-b7fd-9fca9ceb629c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a2dd8c-4bbc-4455-9017-6f1b3d7a02e8",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d67f379-ad90-4844-9446-9fc8bb72991e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d492b9-16bc-49d0-b8d7-9f9f2fb970a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16427d16-d48d-42b1-b644-0f83b4d41b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d327ed13-f619-442c-a481-033f31b0b3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6a35b4-1950-4332-8ecc-35a2a7e73196",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec88c3b-18da-4b51-8653-0f400a11c908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d511b124-cd95-403d-a8a6-0c90bfc8cc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bef7e55-80ba-4329-bb24-2ef94ea2c219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1349af-e23f-4f1d-9b35-7c4e5348771d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4844ac-5267-4d2d-bdb2-a8af84dfd840",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f85d1d-c6e1-4f28-b98a-5a4fbab0d4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe96dd0-d4f4-4b73-b6eb-bfddfa4dbba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7804644-b3dd-49fc-b51b-c929fcebd435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8797b7a-cf7d-4941-8643-e9bb5419342c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "decccd66-7330-48ef-9b33-b07520094b99",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bf5977-f505-4feb-9762-d2f6496147e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81925c2-6945-4342-b4e1-7ebbaf874618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef244255-1dbf-4535-a14c-6f4e10e0c0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a899bc00-13f8-4dfc-b16f-aefd07970a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a377a4a-4b85-428d-acdc-d2e122a9fccd",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b5f72e-d136-42f2-9d76-5518d8976654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7980ba0c-dc35-4109-83a0-5051c7621f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b75bf2-efa6-4b50-8cc2-56bdd51973e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b2d125-679b-4c69-81f9-2880e60e7383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5326ea51-9c83-40c5-88fc-e405189d0590",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba5478c-28ca-42bf-8930-87398dce9e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e810cea-023f-40d2-83bb-ed5733e05898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc721c51-a0f8-4792-a7ec-bd15b29d3a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0047296-6ad0-44a8-ae91-c237fb05712b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c75b80-f7e9-4e5f-9fcc-7a14350ea50a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71cc2dc-38d6-4096-9800-5066fe923e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c1b63a-0f18-4072-8390-8a342f10fd74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a37887-79b5-429c-9848-129c9a6e5992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30d4d6ea-59d4-4b05-bd69-26856b7cfa85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea749d9c-6fc3-4f9e-8a13-0c0f35d13dce",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d934a88-340e-444c-963a-3581e8775a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff7219d-a99b-45f7-92f1-6b166892e543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a17ada-f761-4d88-ab07-ee1941672355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f86014e1-9ff2-4e05-aaed-bafe6c5082c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407d7a51-f2f2-488a-bb07-4496bd5132fc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04a707b-775b-4234-b424-a2f637f2b7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceaf9835-0939-4307-8bcb-c4b56b15d48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baeccf90-dd0b-43e8-8742-4d47370c97da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fbcc3d1-5e9a-4c24-98e8-ddcc1f014a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8958a376-012f-43dd-b324-74d26a51985c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "792f5e8a-8373-4621-87e2-eceb9d495cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10fb8dc2-23cc-41f6-84c6-b22ec1c1f7dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1a1d33-de0a-4a6b-9300-7bfa403cf341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "738911a3-fdde-466e-b3ad-54be7d52708c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9c7c61-115a-4f46-943c-c7d1b3810c66",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9097da65-7093-4882-b027-e86ef6bb1862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea5f92b-639c-4d31-9546-51656c4d86c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ba6a9f-d735-42c0-ae4e-2254973cccfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "878e8926-8712-41df-a9ec-1d019fe78068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8752d384-7d74-4fbe-afe4-4f4688c2bc35",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2d0abf-d3da-4ccc-af75-6a11de091d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6194aed5-64fc-40cd-8aa4-518c5a899049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246f2096-f1b4-4fc7-8642-763bb47ba3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "44d6e476-0aa3-46ff-bcb0-e73947340252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0f233d-3af5-4fd4-9ea2-9423e0e871a0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363522c6-f854-48de-86ce-81500750e9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f7087f03-2c27-49a1-b304-45ebf37d03f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41d6217-42fb-45ec-a85b-62c5fb15171f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "41647c26-7bdc-42ba-a061-c7ef77cdced1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "277bb4f4-9428-4ee9-a514-9a80c26c336a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b12c6d92-d80a-4817-88ab-5320dcd74b42",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d82b6c5-04b9-4b61-92df-e5ecb5bd6a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca6c06ca-576a-4390-b095-52fb8da0e270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd36dc5-e372-4686-b6d5-77155934168c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bc83702-8111-4cee-94a8-bc08a20c3e60"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ab50bf7-fed3-4291-b286-e88a6d22df41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22ad261f-52e2-41d5-96c7-3e02662c604b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35f423f7-b23f-4bf0-ab1c-2cd19b9e9291",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbe56bdf-06be-46d4-9fe9-ba6e1d84eddf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cd0911b4-6f27-486e-af29-0204fdf5c55e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e97d3db7-0838-4a7d-996d-c659eda93a4a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d7c831c-bfb2-4322-9223-fad228ab3457",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0dc9544d-5eae-47c8-a912-9c00a485ea2b"
                }
              }
            ]
          },
          {
            "id": "750b2c79-7a7f-42d2-b15c-ee2e92c8972d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "02b10eaa-d3cd-4f44-ae68-839c8cbd2f11",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "6a27e320-ff9c-45a2-8529-40e9d933bc37",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0acfb9-3637-4d4e-b557-4b6e26d82a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7f85b38a-89a5-4c69-92a3-9d336dc6c85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39fc536-7054-4fef-ad5f-45628388a8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c14e71e-e8d6-4ea7-9af4-a7bfe57de8ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "542f927c-1279-4414-8f8c-46b549376f11",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bd8ec41-11bb-4664-bff5-8d3f7fdaeca7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b6181f2d-4fd8-4fd1-8628-c6f97bb6b5a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be27e9b9-ced3-489c-a2c9-85229d40e016",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6ddac285-4195-433f-8638-a33e5720058e"
                    }
                  }
                ]
              },
              {
                "id": "fe7fbb33-66fd-4f59-80e3-fc75dacbeb72",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0d4cce8-e479-40d7-8d6c-56d0a9157a62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd38dc9d-f0c2-4f6c-8d6a-ae6586d68a27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92b9833c-7056-446f-b017-b3430487478a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0c7a18d9-76b3-4be0-a1f9-ed9b7bafc431"
                    }
                  }
                ]
              },
              {
                "id": "942a2467-d60b-419b-9e5e-2f159b3c848d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "124d8177-a556-4d75-9943-213485fbad30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b002a8f-b0d0-40af-9cf4-00da065608fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf499119-edf6-4b69-9210-4ddd70e12f50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5444cddf-3961-407b-9a3f-9f165a9cf1c3"
                    }
                  }
                ]
              },
              {
                "id": "93b6f204-02f2-4058-8d71-fec20bb4ed72",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9e7b202-791d-4a74-9c2a-f3c1fa997f00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b154048-6e03-4b17-bfe8-156b5042d7f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d234e087-f800-49ad-90de-052d90596c8f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "aaea23de-5bea-475f-911d-3abacb482aa5"
                    }
                  }
                ]
              },
              {
                "id": "a7b291f2-047e-4864-9148-4eafd23333de",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb73f6a4-ab5a-4037-ab2b-144f2a01a24e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "35d6efd7-f947-4c0e-a2b8-eb6ca0129b9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89bcec9a-21e8-4132-80aa-9fef1718ff19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f23332e5-5b3d-4deb-8b36-f196316c6609"
                    }
                  }
                ]
              },
              {
                "id": "30eff838-3d88-41dd-b404-d0bac7134bb0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "025f7b73-13d5-487e-8d9f-89281175e2c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6f8b777-4a9f-4ffc-9b5b-705d060a0289"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b55c4b1a-4a21-4a88-acbc-fd8150c3c15e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "92a9167d-85da-474f-b1d7-5b36390d0e8f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84d139f0-ba66-4db9-a11f-b68dabb13901",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "40a90370-c525-4453-91d9-e08b49ac8192"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d6a6f5ea-061d-4818-83de-0e0728758bc9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "da16e588-3069-47fc-8ebc-3a9a29ca8c1b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34be53e0-edf9-40e5-8cbb-f50187f384d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "41487f3b-94a4-444d-b75d-9570fb2bed38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0be0f765-7e2d-47b8-85e2-0997b590792f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5dac29d4-6d40-43cf-9983-35070842efc4"
            }
          }
        ]
      },
      {
        "id": "379f4840-7938-4fde-9467-b778a0f9b24d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7463d4eb-eb2e-4c5e-8a64-79a1b3637258",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7941a23d-595d-4e7b-a5fc-c124f769f297",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a707876e-22f4-4477-af7a-950361747355",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78b3690-99ca-4422-9d36-237578607de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1528bb30-3eb0-4dbc-b9b7-1e210a068473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "effa0571-fdee-4472-b55a-292512669c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9437dea-19a9-4bd8-b636-a98cba516397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358dbea5-01a6-49b2-ac12-5e0acdac8d0f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28beaeeb-9c21-4797-84a1-ec8788e84423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d51d74-a21f-488d-bb8f-c1484f95e32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99ae820-95e3-490f-ac7e-6638b7617c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d757222-dfd4-478f-80cc-c1e1c964e0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b688142d-1f82-45e4-827b-fc854f2d4daf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7913db19-ba7a-472e-add3-d15e8efd297f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb2a6cd-3483-4b4a-bf19-425dfb620ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b5b539-d105-4fb6-bc4b-af3ffc32e6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "905cdefa-9e81-42c2-b725-80af268312d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11b898a-7cf9-4571-821d-8c2d0eb21733",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedcdcb4-131a-4d4e-ac2d-d9b80adbc2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1530e2a1-c7da-413b-b050-68977ac8ccd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0582e8-58b1-4d56-8bfd-708d188521e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c959ed8-203b-4c39-836a-c8187bb9a7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4693eab1-e821-4a37-a2f9-7561b21105a9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd1aae7-b769-4f08-ac81-952d311a8f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f935fb12-5e5b-4692-a947-f886b3c207ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfa9572-48c7-4aa3-a980-5c75b2bb296f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "418a38f6-a1f7-49bc-ae01-5cf175a169cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2e313f-b0c9-4597-84ec-72d3e26b024e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bba50e4-22fe-431c-a935-08e9fb401a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e0d435-772b-404c-abfd-27ac5c3d3d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f08226c-8ea9-4361-927a-c861b0871086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "39d32daa-be69-4183-beff-1983b99fa844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5937f093-7a66-4614-9423-19b6796106f9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63a2ee0-65ca-48cd-846f-99dfd5339d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72114c23-74bd-4d3d-865c-fee76270354a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fb4470-6fb8-4a7e-8d4d-d4899489ba63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "18884b59-cf1d-43b0-822e-27554c617e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee4bc6f-1cca-425d-b1ea-c81fa7e5a49f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae2f5bc-014a-4b19-9b33-95be313414bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59cdca89-66d5-4e3c-9c04-f132a4963492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8246beb0-cba7-4c73-8384-a7d83a6e9aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34a18ead-9ad9-47ef-8fbf-9b82b5db1a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd00a09-964b-4897-84d4-87133790cb44",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0f0e06-4a97-413e-b977-592c5ccdb95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810b55d4-903d-4f71-8150-ce77a158d04d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125cbdf3-be78-4699-bac3-fa883b66d389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db11af9e-d8c2-45a1-b0ed-5c1621e9c4b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c636003e-7420-4057-832f-2e632edd2985",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10b76c1-1eac-4668-a6b8-cfd47f6e51af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0050d562-6447-4b44-9db9-96f0f105248b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b30ad19-f516-41c7-bf63-b2114b9ae9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0391df27-6b10-4b8c-bdfe-5f5e211a35d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20df3957-ef53-4e82-8a00-4ea6a0ebed63",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22831ea3-87cb-484c-bd87-6ef702e973e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b71995-a6ed-46f5-8a96-feabd611b3b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2d1bc5-e348-481b-8cf1-ee7e6aa23f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ea154e-fca0-4b95-8af2-7593e8c789db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470f4082-8bf7-4812-8159-a88587c11b47",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92f0a6f-f2e5-4137-b9b0-93a2b0f9b04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d03eaf6-8ca7-41e0-a156-ed6644026cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c00e658-1a95-4a4a-99b1-fee00a6ce738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c164151-ff71-4127-a136-b44eb9bb3fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69a572c-2175-407f-8ff9-0637f92ccc59",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e60eba-be09-415e-ae9e-4311cffecfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9938bd22-73d3-4681-ae23-788860c93f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768f7bcb-7222-451f-9c06-34f3b61215a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5f8f8d4-6964-4412-948d-151451c8e843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b2bfac-5fb2-43f6-a38f-7831575cbc09",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e132fd-f670-4499-b76b-374ee7b14209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25dab4fa-51fc-4347-9c9e-3db06a256d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b518994-06e7-487a-b051-c7d7c7a1dda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc53f7d4-a355-453f-b2ff-0db96c8f41a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a7d80d-e38f-4915-8a9c-73662fc0516b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ff5dd5-e3f9-4e9a-9f0f-a73183f629c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e565c2a5-1867-4847-9ac6-ba77f69f03cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f38553e-d31b-435d-8ead-6161a2f14d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9907ef62-463a-484c-b78c-6e3bf8e9cb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad57660-3790-4e1c-af40-6670844e5991",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a28efd2-d8ae-4a0c-9838-c34e2ec24300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae174350-0fbe-4d32-a6dc-b020eb5da92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fdbbcf9-a8a1-4138-a64e-5887f41bbbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "79d6a848-d5fd-42bd-b164-f958c9a1693b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86950cf-0567-4f1a-b529-d230bf0064f0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f253e656-ffe2-4aa2-a4b2-4817eee46793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052a1cb1-81de-44f7-a8a2-b94779e1f7a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed39880e-9c80-47cc-aa30-419bed76cbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "515d266b-00fa-497c-aef6-b40ee1af080b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49915fb7-3b98-4245-b0ee-79053b2536f1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea98bf1-3617-4eea-9f88-af9b6842ed64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e54c6a-9208-4e78-9b80-553c6804b15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0967fc3f-f307-4d2f-b25f-2fe1ba3d9096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "af6950d6-40aa-49d7-91a4-c78e8791d936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f98dd5-c1bc-4a13-a730-1a081be979eb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab300113-3fc5-4710-885e-d0414f433fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16725311-d93a-4410-b605-18f9d6600087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9b56d1-c75f-4d1c-be2d-81471f989de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bad8533-3c77-42a5-96f1-bc270623f0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55744419-4e87-487a-ba58-4a3ab29976b5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e423aa4-26ea-46d6-9fd6-7387502ce54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c967d27-3055-491b-964b-e61497e29254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba00a87-cba4-4f13-9d3c-ea222149fcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c6225e0-294f-4e65-8efc-fbd647f7134c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1d2341-f564-464a-b4de-eccdb26ff2c0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcaa82b-7649-4c33-99a8-25d2e46982b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6940ce62-0dfc-431c-8a13-743dd4b43a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3743a0db-6221-4e38-a54c-82208a2fc3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c896756-27a7-428d-bb22-990c113fc769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba01294e-07a5-4a77-afa9-86dac147587e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a399719-0946-4d82-9667-f5c49bdc99c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99aa318d-9dc8-4cf6-976a-68e16b5e7ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cbd69a-3d61-405f-8e05-ea93215a9df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5156e5d-8a9f-4ca6-86a5-2668bc27a76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c79f9b5-692a-469b-8c1c-2c88aca23967",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2b853e-c6fe-448b-b34f-ca0bb8d661b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febf0d96-4f47-4d45-a6aa-b184347f4751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a28dc2b-7b6e-4f9a-8d78-1033e0da1669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04420c0e-d787-46a2-8e0e-f081946b2b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d82831e-5266-47ef-aeef-dac49b205298",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fec704d-153c-4657-9192-dd6cf5206374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b735b12-9fb7-45a0-a2ee-f41b4b1a96f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1e3474-9226-4e05-aed9-c8e1c204e41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca982314-4290-42b1-be23-321953d13d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1e1ec3-0c47-4a5f-813f-ab74b6d21474",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a427897-26d9-4d55-be2b-2b746b4eae70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba01170f-fcf1-42c8-86ac-6d53f21b82b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59eaabe-64d6-4e7e-8e6f-3deb0b1c0eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2194a0-3018-4c1b-a399-fe163b246f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e6518e-e054-4285-bb17-8d1eef3bf36a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a0cd58-d917-4c99-89be-9b8dd04a256f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da987fb2-e245-499d-8743-56065bd6e41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7fac33-f182-471c-af84-a726a0e24577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce8e861-d516-40b0-8b0a-e2c198d54787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978979a9-e45c-4bda-95e9-8fbf8524102f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e602ab79-1b93-46d1-8625-a6049f00d191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8cb6fbd-12fb-4b36-ae67-ad159661cd0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077433fc-8a07-44f3-861b-64a8be5772e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "190fe2db-b8fa-4195-b2b2-b480cb0d6948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636b6605-2618-4f3b-a5ab-d3a7047a565e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb87cdc6-6dee-41f2-9110-352733a5ecb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8689431-6343-4cee-b6b1-de6cf2a844d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c35043-9624-4ce7-a20a-1f71d83bfec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "744428b6-6e6a-44af-b8ea-16d7e3815e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c775ea6-f74c-4068-bf2f-3f70e122256b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b49ab20-2e34-4e45-b90c-ba495bb18c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b647f5-a591-4f0d-b1e0-5f2092583fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0278a3e7-8e19-45cc-a41a-3522228839fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1273fe65-897f-4846-9093-a7f13808b002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dff80e4-0dc9-4248-8543-f07a47343d6e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064a1b9d-959f-404c-b02f-e776dcce5f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f06af3e-c749-4954-a241-99c7abfbc4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2117aebf-64cc-4dbd-b4c1-321df71d911d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88784ee1-92fc-44cb-ab4a-677a2175742c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e694dee7-1312-4cd6-acfa-89fc53bef366",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989f6f92-b16d-4057-b949-d49a061d9744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11a6304-ce0c-4223-ac09-7e33e53a9650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9b5b54-d74d-4116-9419-0a8c372d90e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33224895-d1aa-4d5e-8638-7d58e5648709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c37df5-96bc-4876-a4a2-ae51656bbf03",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30af2db0-c702-4590-a16d-bbff865545f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e29925-4825-42c3-9a3d-bac9db0d7d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83864772-8ade-45c8-92ac-98f21010395a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc406ef-3b84-48be-93c9-75cfd8224829"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d00a96f8-ca22-4783-84c3-60cc721353b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dea82c35-1bd2-4bc3-9167-cf1b1ea0bad8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7717dcc6-b8b0-47a6-a3b9-303ce1332001",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "151d16c5-5a7c-4d00-a5fc-f7f8e5596bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "143564eb-3b57-46f5-920d-8523afa3da81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91090747-d302-4610-841e-059ea590c69a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4a77455-b89e-4fae-b01c-02b52cad161f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d62b08f-b05f-4f72-a574-995740aa32dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cddeefd9-d30a-40c4-9f0e-51dc1be2d940",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6aeb4e3-182a-4cd4-ba9f-6d8172885f03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc8389c7-55c7-412b-b1ec-9ffa1adcf5ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "78040067-ee38-429c-afa8-ca503614e17e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc26844d-59dd-4966-881b-d87d2b303df6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3b20866e-0430-4cf5-85db-98174b44303e"
            }
          }
        ]
      },
      {
        "id": "5c1896d0-bd4a-47c1-a059-ce6475fb885f",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "11c7e821-90ed-4248-b5e9-4326a544769e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70d68a58-0c81-4710-8142-c1321b9272b5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "08779939-a69f-4e60-8684-d73be059b521",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57994eda-46d2-4e30-b7a4-8a2e3be9f7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3621c84-35cc-40d5-9f9b-a0675c2aad45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c07c44-6418-4351-b394-217ffa139730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "55d5f984-360b-4040-ae52-b1e199a74fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e57e30-ecd0-43d7-b243-f90d765420ed",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c9ed6d-3b76-4899-8977-baf338c629d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0710044-4bda-4366-ae89-1a53b52fdc57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87df4e32-7c29-4a16-9971-a859b128c6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdefebd5-3d0a-4479-9753-fd9117ddeb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2aa9eda-e9ea-439f-8b00-c05ab530a765",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d958200-918e-4a7a-98ec-d0d693a8b966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0790e7f7-21a4-4ec7-a7b6-5e12385f5430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df3b662-a013-4561-8094-2e23f68094f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dadc42f-2f04-4de3-a0b4-8d840fcbd1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab72f1f-890c-4b9c-ba45-08552d8d603c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6603c9b5-7e83-4822-a676-f469cde42863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa70cf9-aff5-4ba3-8ef1-7ecd8883ad6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df76da6c-66db-4850-beec-53b2d2520f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6eee8454-30cc-478b-9f77-6ef6d8aae2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36049d99-6093-41b1-83a2-17d4ad21da64",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70929d5f-9d27-4134-b9b8-d37a02a42ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc663323-f00f-4986-a686-a36d4a8a04c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f718eb47-1885-4782-a7cc-2887dee205ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2e43add-9668-4c0e-8fab-07a2b7ece788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48505c1d-45aa-459a-94f7-c4145977a169",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1371a328-7bee-4811-af48-304d5c3523c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "550a4335-d747-4c53-9032-642bbdb5bb84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9b6e4f-3fe0-4495-b288-775bd6d82972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc6e4342-10b9-42fe-b4ec-ead86a18fd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79da6d88-ca9a-4a4c-aaaa-44c7914fc6d2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96bf9768-627a-4dda-b21d-cda249e640a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f9f00b-669c-49be-ba8c-8f0146de87d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c847b729-e04d-4893-b280-412a267b6cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d534f4e0-b434-4a4f-b1dc-f867bafc91f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669b7337-1ba8-45fe-a7ca-36c72a65e502",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b88bb7-61d8-4d5c-9e04-bef802479faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29abe5f8-be57-4702-8d77-c24c3895f443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c293bd5-cd1d-44dc-a4cf-4312e8a76df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc184cc-5e29-4453-bb70-869b6ab8d744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a76181-6445-4f11-a93e-792474ce8da7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a798ac-437b-4503-8b7d-2d5a671b6064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46ec28e-e8a4-451e-9675-844031c9752c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f566d6-96b0-4588-b7b5-c1b5a48e3245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f90be7b-f964-432d-8cec-95695747905c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3d4078-7bc7-433f-ae20-034b694630ed",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a973e4-c1fa-435a-b5f3-ad93835cd239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01bec331-f780-4ab5-af29-fba52f1892ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573a40ae-2b87-4923-b933-9210bcb986cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23a1418b-0fde-42c6-9596-09234dfe0cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee970745-a25c-4545-a6a5-149d7507bee9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac3982a-ae97-4cc9-b44b-f5ce03d2e1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d119bfe1-5dbb-4e6f-82c1-dec6c1f7429b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712b2be8-783c-4619-b9e5-acb6232cf9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "20a8b659-eab9-44b3-beba-f99b8070848f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b21a247-d0f3-47ae-a6a9-08787d23b2e6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc88b69f-8e28-4cb0-a734-78029d888e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7bd0c73-d1cd-4555-b3c9-312b3b30ba00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0a8d44-e2d3-4d3c-ae06-4a3a1a77d906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "405533f5-b777-4380-90ae-1f75a6f6bad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5ff03f-7621-4f7b-a599-298e876513e0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce879c2-7646-4bcf-a397-1641782490af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55edd4a5-30c7-4dad-b461-101b75990f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfdfbcb-59f2-47c4-8b82-2ce1f87ad1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c56faabf-b129-49bb-94ad-7530471292f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3b9bd5-0040-4c3e-8d34-3126741dd0e6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b139eac-a107-4365-ae11-5504534f4cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fdd36a-6712-44e4-9629-200d3d285202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8ca2fb-25eb-49f3-ac38-097676cb3a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6195b1b4-1f5b-4119-8f40-38b5acefa173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a97de52-a3ec-4fc9-a360-2dc6553333f0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc097ac0-fbfd-4d78-8d45-010ca21cb1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1113fbb-6956-4b2b-8b95-55910c757017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d08a6fb-2476-4888-bb55-6b4ab2a16520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "037b5585-e2fc-4e37-8852-dfbaabe0bd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd92c281-c930-46b1-a8fd-d24b610ba9bb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb1f7bc-f132-44a5-be5f-fd0fd6ac2e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6784c29-e835-4231-8275-bd26d8078440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2294a5f-b30e-47f3-b9b4-cb9574971f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "565c1897-9a20-4217-91ac-30764d379b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9696a06-4498-46bb-9d46-83d39ea24616",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e176d3-7a80-48f7-b7de-1c939a32d8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598b136b-eda3-4417-b8fb-fb92d090ed0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc41620-ba17-496e-9669-53368adcc048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b78afc2e-9175-447a-bb7b-d946f56d55d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af91d32f-a64e-43db-b3f6-9f3fbe8cd6cb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87929fc5-9347-4c0d-953e-ed65779bb69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ed2d28-7595-4ebf-aa15-1d82f4c6f6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dada2b7-3741-4d1a-8555-34f4c4a9cb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2846f577-85c1-4508-b3fd-287bdb25492f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f399aa3-8dba-45e4-9bde-e9c81ca0bb8b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "655efeda-64da-46d6-bdc2-7ebce09e676d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf725e7-d1f1-4c83-9a9d-00bdc28aca2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4f5fea-ab50-4edd-b2b4-8e51ecd2f3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42f203f2-d7c5-49c1-b8a6-31115c17a4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abb9ab6-9a4e-49a5-9e2d-baba153866b6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6d587f-749e-4d08-a852-5336997b76ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a71464f2-647e-4fe8-b14d-8fa24b372cac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25254942-9611-4f8d-9e8a-a0d2bf812de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2d9784-ac76-40de-a1f0-5115b544be6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082f8591-8650-4d46-ab20-6aa54ad4d294",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e3c917-eccb-440a-8814-9fbc5597b939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121f8b9b-a58e-42a8-ae2f-b437d17c6f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc67095e-6116-49e1-9d6a-3b4ddc4d27f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51f5b477-1cb9-4f38-a558-4f64e2f04d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290c3c62-9f39-4714-8a89-90baca7ef675",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c013c97-6979-4e1a-ac8b-e1f32cd76600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2218f45-dfb3-4bc7-bf23-9795a270a532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef16871e-cf50-4d7d-b45a-224ec7cf2c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb686d7-1ff6-46eb-99c3-89bad180bd05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a7aab8-c417-46d1-bbee-9e5ba8e675f6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "773ded36-6fd1-4aef-b19a-0399becad314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df97223c-bcc6-4d74-9a23-888970bd7575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa619ca2-310a-4eb6-8d2d-61123aec78fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d157f29-7099-434d-867a-bb6c96e52a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a043090-100c-4e0f-8008-672a8fe340d0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7532d6d-ae41-490c-871f-cf64eadca105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a9eb515-c22a-4573-b9e1-05a82b79257c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a317b705-b8e2-413e-8c4a-a90a2b7a5d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f246654d-af3b-476b-9b11-b00ed228739b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8eede2-b039-4883-bf0f-ce68b95ad4a9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f98126-b156-4a60-9782-d5ddc1abff07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105a2bda-7a44-4ffb-b60e-895b0b3616f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6c4c85-ec32-48a3-945f-78c351951136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45ed2445-dc9b-4765-b153-ad13d3012a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d72dee1-3fad-4945-b55f-93ea517c0bfc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401f4bb7-64c4-44d8-a89a-961e6e024317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945a967c-6aef-4a20-a22e-78f0ed142fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a04ec8-a2ff-4a5c-aba1-6578fee61119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5b64d2-a5ef-46e4-a324-1beb9c3872b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb39f1c6-ce97-4ba0-9f58-46f8b96e9755",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183fec4c-a18f-4689-8c99-c6fe3c9a309c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed74cbe-bf9c-4074-a7d1-617535e42cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5e3beb-062e-4fd5-98e0-64d422530e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a65127e-81d0-4df0-93e4-66e34a512f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ef3fb3-99b3-4c23-b1c4-bef4c500895f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab8a00c-0ec9-42b2-bfc9-2ac841150fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69457e6b-cb1d-4efb-b5e6-e80ef095e988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88af467f-f9fd-44d0-abd3-285cade5f0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27e3a51c-f0a8-44d2-a708-2b0a6b6a9f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac05886-17c0-45c4-a618-465501acebc1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7d49d8-1e04-4f31-9a02-ce3522de7e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b7f369-4f4d-4273-a233-1a3443bb546f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832d65e2-e3a3-4e0a-b740-241ebb3e34df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc11dd1b-f875-465b-a666-7ee1e03e790d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ccfb5a8-6521-4731-951d-08fe437b9abb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d71606b-2384-49a7-b846-97806379fc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5920bdf3-be39-4646-ba1a-ef62d81caa46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ce5373-f5cc-4142-857f-d8ade01533f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aad08c2-1b5b-44de-ad90-3fca32a4a2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e4241b-f0e1-4524-bc44-ee0d535a92dc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f716bef6-2c1b-49d4-a9e6-bc0199765522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed69182e-11d0-490c-8c76-a8a277f75e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2d7f0f-0c56-46db-b831-d3d00537c5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe0092c-6344-4bc6-8a48-59a2b3e0fa04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a9c825-da1d-4746-8dc8-d67d9f2f75eb",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd048de8-5e71-4281-ab2e-11180f3c6d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d126fb-af80-4c17-aadf-1894110f4ad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57efefa-4942-4448-b3d4-77b689113c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "129e34ff-f78a-4e52-a16d-dc61327e389f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b40b0ff-c184-4a21-816d-a90a91fcab38",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f30fa14-2798-465b-9b09-5cd2918a776b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e61e32-f7a7-4a07-9eae-be83e4da94f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497f6631-4879-4c72-ac0e-e57470ed7b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51c2aff4-00ab-4909-b80e-f6850dab43a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc392f2-3259-4f5a-bbd6-a077b4dd8d3b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fd702e-1e1c-4b10-b97e-d578fe47264f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91bcd601-89f1-4fad-8cf5-2a8718bf8111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed54e02d-4d23-410a-abbe-b7f293223e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9aa95c8-cc09-4736-8127-1d57a794e8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb84cca-425c-4f33-a159-bc4896cd4598",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6fcd9f-da2f-4067-942f-9209e1c62441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b766477f-0931-4c60-8048-73b3c45a0335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adf060a-9305-4348-ac86-4409416580ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2eceb63-7b79-4bd2-b91a-1ef3d3e69bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b746fd-5a6d-4a35-8bed-9ab5d7e6e1c7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a03403-a099-4346-bccd-2e0f7b960913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f8b1dd-577d-4aed-8f40-5d8f56c905e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c3f4a5-f9fe-42bc-a023-b685d260270e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf96021-5474-4535-8266-5e41351a5eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989658c7-31fc-48d2-b40a-60e1f46200b3",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73db88cd-315b-49a6-bcb9-afe46708df22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d8c24b-5675-4bb3-83f4-25a1c4112ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31aeaf5-78bd-43bd-892a-4fcedb24c9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c56dc130-ef78-4f07-b5a3-66dfe54e1667"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "676a27dc-7820-4b10-8b04-f9c5c2c6b790",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "afb55054-b94d-497c-9cb7-7ef2494cce7d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd520f69-88e8-43ad-b632-658ded54e7f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d255bac2-b287-4731-b8f6-efb2b2b35b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba708527-315b-4381-ba5c-fa5001e27b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "244eaeec-e297-429b-a94d-f50f82699c57"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34d984c7-1e4b-48bc-8aa5-02fec3903b77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aeab4759-4a82-41f1-a6de-5cb5774b77bc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a06b2f13-7129-4cb9-bc62-ae450f9ad1aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce7042c5-c7f7-4595-ab7f-e6cdee1f06bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6beb945e-9a7d-4d27-ad64-19e071a669ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "be4b6f06-695f-49e0-a4f5-d5ca4ff2393b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4d92f72-dc70-4b09-9884-bcaa8cbee7c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e98083f7-f081-495c-85fe-91be704c7c50"
            }
          }
        ]
      },
      {
        "id": "6e960b7d-c931-4130-b889-81726746ff8e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bc94eb6b-891b-49fe-b7aa-056f7f700dfb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b000b765-33f9-4c73-9f64-a05e46234c7a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d2cbb8bd-50f8-4051-82cd-554412bb572e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad2e436-4903-4b0b-8126-fbdf03e99449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30880a34-9779-4b5a-8386-b0c292cfd1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f9c2cc-308e-45db-adf1-e3bfe79f0b3e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f243770f-b598-4ffd-81fb-a7899a154352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208f1602-5cae-475d-a89f-0ae06febbeb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6cf99b-4bc7-46b0-9969-b37705774909",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8157a1c2-6e16-4bdf-9765-ab39a44a63cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18db6a4f-81fe-487e-b0b3-b3c3e6e389a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea6c597-53c5-4612-a6af-f2ddeaf990b0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d5ef96-4c56-4c30-a26c-a03903ccd5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "745c4829-9d66-4a2b-9097-8a5164c439f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee5ffc9-cb5f-4b22-a420-9f5d15a66154",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93bf5594-2c18-4b70-993c-8739e800aa7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d1c499-3508-494e-89d1-fa9115995fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30a70f7-326f-455a-b489-a4b2cbd6d103",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ad837e-1fa1-4bc8-8b79-f3aeaac95e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9c2583-6022-4c02-88a6-d5cdf4655ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd540481-9ba6-48e6-bb46-d58bc82779aa",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34b25a8-623d-4dd7-abc8-5bef85c755db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9239d0-340f-4307-a016-4bf0db803b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d584fc9f-401f-4e4f-9764-d8e3138aa5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee24400-fa4e-4418-872f-1831af8b23e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1637047a-093c-469d-a012-85617fe3715d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a89e8c-9e7e-4040-8d60-64ea2e07f2c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afb6d214-1f74-494c-a674-eed666e3636f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23526dc4-dcfb-451c-a3b8-b763af8503ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ff7a2a-3c8f-4786-bc2f-8af4f093fb58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc7006f-e179-409f-94ac-b3424c61027e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e326e4ae-d684-4b1b-a322-94c56cb58ef6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faeece31-d141-4cd2-bd70-d9fb6605d950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda01188-716d-4303-bf84-d131355bea5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52331504-263e-45dc-999e-98ef3fade55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37416579-817b-4598-8f92-3c1202ae9834",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0043f9bb-d453-49d4-a1b1-1472c3c8c0f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed22e23a-e38c-40bf-91e7-c3c275fb159b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4df93ce-b765-486d-8585-7a156fb43e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce3d231-e7fa-4e63-9499-c73277fea35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8aa1d9-b931-45d2-9c5b-94c850f63236",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0cbfa56-fc96-43be-aae3-a04818b7a184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63aa00b-c732-4d56-a485-1b78607fa3d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e44dff9-08c6-4aee-8d7c-f5068af85910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0c508e-95c7-4238-81f0-32f314242be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4785103-6894-4092-b983-40417df05539",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2854a226-edb1-4e94-b056-cd4b4c5ffa49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd1de07-d5a1-4fa1-a1e5-ba59ac7f3743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7806a9-689f-4f30-8ee7-d8c95b97b4b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf4b837-9332-451f-87d2-4103b23147fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388ad939-c6b9-487d-9769-89897a942783",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b26123-d413-49b2-a541-a78286046617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e151aa60-aaa1-471c-af0f-1292d85331ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b250b068-2b8b-4361-95c0-d2dc254004b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4adb3b0-0771-4153-916a-ca44e0da937a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda387c4-cffc-4653-b46e-70ab06aa8036",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22fb505e-5bd7-49ba-b353-8eb6014a12d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef31ab0-c1f1-4413-be2c-41546666df8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ba82c7-4a49-4069-904e-43aea2755dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc6b168-9ff2-4bd2-b6b4-a6225d7b959f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ac4665-28a7-4fcc-9fc6-216e70ecba49",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ee2e23-445d-45e2-b8a1-c26203894d23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c8667a6-882a-49d6-ad96-669bcd656dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c06ffd-9013-4715-8a4d-a1d14b939d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfb6133-99ee-4d54-a370-11f3ceb21696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f152379-a3d9-4009-aaf6-39832b2bf0f7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1ca421-cb3b-4c2d-968c-4725ad7a31b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d01235e2-c331-42b5-8551-b0e488dd2774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bcc9b5-eda6-4476-ab04-67f1a72164ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c99bf39-7f55-42bf-bce4-c54ff5c5e36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71238076-14c5-4fde-a59c-ee624faf8b7c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b9c9a7-6d04-4d78-b373-20463af088f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f70918-022f-4e26-83ce-121baea799e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27da4d7-d32a-4920-afab-3617afc06964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c51d2c9-a4c9-46e2-9229-89393d87fe1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0894ea-8fac-4eaa-bd34-e32d4135cfef",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7b2c46-bcf4-4739-ba34-95f50f476844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460026e5-2740-4660-b374-682f1cb16721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b667004-58fe-4ed1-a565-52d0981136dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35dfb188-52c2-43ec-8dc5-6f374e54373f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebd0c1d-7aee-4c84-b298-4b7bb7d79eed",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ba4fc9-06c1-444f-ade7-6179e39cbcb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cfa9e0e-207c-4616-89c1-083beb527832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8746ad-71f8-447c-863c-c9976435bbff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c9e8cf-5c10-438a-a1a9-d01188aaec93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518d701f-ef2c-4298-863e-67f5d6c769a2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf66dbe2-1ba4-42bd-9558-9369ab633f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d85dee6-cb0c-4496-beb2-1773a0269ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efeb220-3055-48d3-b104-92dbe5b7334e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d61381ef-11db-4f22-8b32-cb748acaed10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b030b15-8f0b-43ba-9c3a-6efe191ade19",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c82106-352d-4b93-af10-179f20574f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70dfcccd-a1a3-46e7-9ad2-b0dc71961bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9ded5c-7660-43ec-a411-6fdf43473c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d447b09-5954-4709-ac4e-512b7be2d11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b39b75d-a371-41df-8aec-7307fac197f8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb925da-b57f-4572-88dd-57fc85e1ad6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d04ebd68-5e20-4083-a7f7-5d190d77da88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2999fb7-5e88-469c-8e40-75189fcdc9ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b3c885c-03d7-41ec-ba8b-60fb9a4cff6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2364f890-06e7-41db-856d-a93d9c687f6d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3f4364-776e-4a7f-8f48-b2c23b5c2b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e3e80f-c4bb-4bbb-a799-44abf1466b2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263b336b-2e12-4bf2-bd3e-ed91b3a96aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e34c443-661d-4efe-b80b-6b2b2ccba0ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587c2264-26a7-475c-92e6-7950cb6e7f44",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bf8d4d-d1b3-40d3-9238-6edefee5aab2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee9de69b-a91d-4e17-9164-39513332ce85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb74207-414e-4bbf-86ba-aff1da7cda89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "132e4346-8b13-40fd-9014-150a9a7b1da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1582c9c9-32d1-492c-b6cf-cdd71d00e6b0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1a38ab-285b-4067-abfc-9382658b7549",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6824046d-a080-44ba-bc83-c8072676cc5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45c22f5-4916-4d1a-bee0-1628a2c90da8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7dce84-5582-4b61-b76a-0a71d64f1cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6188a21b-3327-40c3-864a-a7775827f8bf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4654856-9aba-4822-952c-4e6164161127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bbafc4e-82fe-405b-b145-e65c697e2e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1524f3ac-4bdb-441a-ac8a-0211eb75bea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5bc7ce0-0663-4faa-bdff-6e449ff735fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcc26cd-0632-4566-bccd-57e5ee87154a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10912775-58b4-47bf-a362-37dafaf27353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0f8502b-3d94-4c87-a2ad-bc5c51d0c3f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "702979cb-a768-4461-8f6e-7d2bb9a804c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148677e4-b994-4718-bb9d-eb1efe55c543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1731c74c-fe4a-462e-9edf-5ef4da286ee2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e69a1cf-08a1-4fd4-8bdf-cf9887a4a1d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "017cb6d3-f712-4841-8cc5-6476a8902741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5a3edd-9697-43f9-8ff4-9e5944522914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daaeabd5-67d3-4b1a-9e99-44a4a3f3de1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337af15e-0a39-463d-8b81-71b5a00b7bb2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3396cce3-6456-4f1a-8818-95387390a052",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65dc7ce3-8e6e-4ae2-af88-55b68c96a36d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48ff4f8-db36-4897-92aa-0cceb28a01e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ee9e1f-67cd-49cb-b195-136745c060ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d72454-4122-495a-99db-9e9eb7b42def",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3ebe2d-14fa-4a00-9bc5-ef2985608e9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427f668d-347f-448f-bc1b-b2ca43c68893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ba67af-9892-45a7-a8fd-eaf09f2b7f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9149718-0d8d-4b9f-89cd-93b692f908ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47396c0b-0ffe-4495-842b-6227689efd7e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f8ad24-7c41-4797-9b2e-9b42b6beebf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "753d89d7-dad0-4cd3-90e5-b1618e3b03e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7e59e0-ed14-46b1-b092-179e06ae8969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792e51a5-a452-4aac-b481-03940316b639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed384b3-c6ec-4cd3-8a2c-fc3f93b6dee6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40024746-3524-4b83-a104-6d6539c24c0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38dcffc5-a3dc-4363-9d39-604620194dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b397b4-6d58-481e-be24-cb25fbf37b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97704b84-e1d8-45fb-bb38-b70bad3f86f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861607cb-686a-4ded-971a-51353ee18a1d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b41208-5ca7-41cb-ac9d-4e4c2f6a03b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71640d9a-015d-4311-8eb1-b6f1c550f391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "577a604b-fe13-460c-871a-1f73f26e22e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16fd0b28-a52e-4396-9da0-bbe13bd6d952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37db34a-19bb-4f8a-ab46-fcf303edda46",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60fd3a8d-95ab-40c9-b4f0-ec3377fcf18d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f902f973-1313-4f22-8897-a1242427857c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63259559-fc6f-46ff-894a-3adc193ac7d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169541ce-ca00-4c6e-8f52-ed2dcdee3902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4cfbb2a-b86a-49a6-a4b3-4ffb9e6884c2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1045e26-cc5e-4c67-974e-49384299c24a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea887a2a-8ce1-4e04-8850-da321bdc5dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02cfd88-40ba-4322-aade-493ce5630fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0151923f-a9c3-49a7-9546-18e9e3de2cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1bfaa0-d578-439d-a097-fb3e0bb5632b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bebd1b-0949-4819-b4d9-eae33b84d7f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcfeda2-26a8-4271-a0e5-e6bb0bbf0c86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "126c4d87-c1c2-4ef1-b3c4-27d50a41ae93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cecb6fb7-46c5-4f3e-a191-34d25d466f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3942c62-35bb-48c8-81e0-0671423b66ef",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1791619-ec12-4c7b-9908-eac174187d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bfeba42-c0ca-44c5-bc03-49695961c753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44171d1c-ef78-46d9-aba9-9990001bf441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d073ed64-78fb-4191-aab4-2d2942cb39ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e627220-38ec-4266-a633-fa082ca6ec87",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd614ad-fd0e-45f6-83ff-d6fe3195bee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f76eb872-ce3d-414e-b4dc-e276278f5436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f33e62b-2524-435a-8157-51f19fb5f28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2191408a-ae0c-41e1-9c57-cdde4b47aadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8060704c-aede-47a3-8ddb-f380baff3ef2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc243588-0eef-46e9-96ec-f3a5a9a81a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1223865-da0c-4d73-83ad-19473ae41e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c7e9eb-24f3-4bd8-9fc7-661f40224f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be5ed0c-adb1-453f-b228-d32adc2b3cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fbe0c7-988c-4c5d-b2a5-51161ddab93e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67536c63-6f43-473a-88bd-c95fb1b7e96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73915762-f161-4e49-924b-75154abd4ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49b5b09-cf54-4d0b-9c28-cf5a8a669d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a84363a-2582-43ff-9224-22eb80cd7df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea8cb73-92f9-466b-854b-abbada0ee4dc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbc360b-4fe4-4c42-a6e9-99f194dd7752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50381983-0b3e-4f8f-a73a-f6a857d0740e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d4a0f7-fa47-4d19-9272-5e3cfe961037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64ac6f0-c18d-4d05-bdd4-175f68edf5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f123e9cd-631c-4ebc-8e1b-fb3e716565a3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f849bb-fed6-4912-a791-18a60103a64c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11f0c6c-cf1a-498a-bc0e-3a86ac36313f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63462897-b731-4557-9773-df318b100723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557d0c68-0f42-4b9c-9d5a-5e1070bd0a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc914ce-6f2c-4880-8c3b-0ce93ff313c8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1016510-6c21-47f3-af77-abe714e04074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c504cc-7ef4-4647-907a-012a0a9a1a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2627628e-8837-477e-b825-e5b9fb90ec3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1acaea02-a35e-45e5-bf13-94122fd2f43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae473ff-520e-47d0-ba14-95c71eb1c0be",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfa322d-a1f9-4221-a350-07b8cbe1212e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f28a342-c609-4407-a3b3-439a19f76478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea9a5f6-61d9-4107-ae78-83c3a6c9ee19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca245d8a-8c3d-40e1-9078-9cd90cea77bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9e5ba5-41f2-4361-9b54-702d0b89fe50",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb87af9-d6c1-4086-841e-b344695daf3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5787cba7-31a9-4a36-826e-2e8d53313670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb13efe1-c7e9-4362-802d-f5ca9e01b10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46cc982-9646-41fb-b80d-ce0d16e8433d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d2d450-679d-4b1e-8d9b-7746adac185c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8cc550-7121-4cc1-9364-746ed3deb729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55b9149-bc3e-40bb-bacd-f11557740ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc76e1c3-77a3-49e7-b6fd-0226da2372f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3f0a22-95ef-4d4b-bb2c-b024b7ca9578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71e37ab-9002-424e-b461-332b8f90917b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c394f8-5e0d-4b6a-8fea-c2db21c3e752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93e5a83-ed6f-4808-b47e-8495d46ad71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26006f09-e887-463d-bf1f-6ad7347a47f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29c8105-5739-4d56-8dc6-41569f672021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f97287-17a4-42c2-a1de-52c0e71e7cd1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14294f62-1a80-49e6-8ac2-641e44338d69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ca3c2d-db40-46f0-a08f-cd164d44bdf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d43451-9f5e-4f79-870e-40f89487b62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3ea9bc-c89d-4b91-a697-444030638b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33dd51d6-e197-4478-85ff-3a23e064b122",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c2cc0b-ce43-4352-9447-351bfe69acbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e406430c-54b4-4427-900f-2db016d7d860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02efa6f2-6caf-4afa-a65a-f17776baa7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27cdad24-9adc-4680-92b4-72a42aa2095e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff01abd-1283-4ed3-afed-4bb117683bef",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e29a9b2-ed0a-4120-a193-b8c90aa1b82b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76cfc8aa-b01e-4403-af9f-600411fe1db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4126e9-2e9a-4509-abb5-4df53ea16746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "628ebf71-0147-49f3-9254-d153a985f102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8923805-cd0d-4da4-ab1f-11c870d49ccb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac99252-82a6-4a42-92d1-5a67178759ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fbb2c89-7882-4453-8ec4-b60ad06edeeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85db6b66-5d8a-4d54-87a5-d0f3e1ba8bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679c561c-a231-424e-89ef-6e3d6651b6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5ff9af-2661-416f-be18-251cf9ac511c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0ead3b-6aae-4f98-b0b6-d678ed2c2af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa9084e-fde2-4306-bb93-f9cd941a70ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "208c4129-be21-41f6-b6d0-7fce2797c53d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d153516f-daad-4acb-90d5-a532e8ddd1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac064ad-689e-4e0a-a098-a30b0a906e3c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3730075-668f-469f-828f-2aaca8b5783e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa7e2a7a-0fb7-4194-8084-617a8aea94d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25340b4c-6151-43ac-80f9-471607347049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c45e5ce-213e-4a9e-be51-64cacb3fc66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b88170-6408-47ac-b573-46206878fcb0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bd59bc-6180-4ff5-a538-dc989cac22ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b7b187-aeb3-41eb-8df8-04aed798596c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ba7682-b919-4bf0-ab45-fda3202457a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8720cf-6ad0-4878-af58-7b6297f2719d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eafaf58-9fd2-4e15-9b84-f7ef899e4221",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935b5b0d-b4c3-43de-961b-6f81226f0691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e7cd03-0922-479f-8381-8e8c36564117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e3a804-136b-4aff-9fd8-1f0fa370cdbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a9dd3c6-2965-4f2b-a9cb-db28d33f6318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e30cdf7-ebc4-4662-860e-03f707da40f4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4093a108-2647-4279-ba06-75598ad71a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55b41bd-43d5-450d-834d-cf65d65ddeb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc059d15-aa70-42bb-a9ef-10e9041a7d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c8aea00-d231-442e-badd-01dddb887827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30f3330-b73d-42db-b993-054616a77ce2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d946e4cf-a673-4f05-89cb-c14e2cf6182c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e73f3c4-205a-4d60-b902-071430d5d46d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3321f0-1f5c-41f6-bb76-01a9260e70b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7220db-321d-47c5-9c39-bc9ca771fa5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8324c9-3a25-4002-88b1-a56ec8506745",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aab70c8-7b85-4383-901d-87d9c90bc48a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc7f188d-a411-418f-8386-e28063b57cb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b065c8d1-b7a3-46f9-bed5-cc38e85ee9e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed7e0ab-b77a-4815-a729-f11bd52e1fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e645e3-00f3-4bea-a4fe-f9b1893ff46c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e21ec2-099a-4a36-b07e-ac2930d5a621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be91274-b808-4b09-8972-4ed4ec4695c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1caaec-f8d5-4d48-a41e-43914d46be30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54b79a8-950a-415a-90d7-bd0c707d9747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3efa1b-df12-471b-b9e6-728b19ccb214",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053aa70a-8608-41aa-8e39-70bef53ae010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6957b3-d159-4e4b-b037-8e7a5ea84784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c5c8f9-8bfd-4c72-b29b-71647157f8d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4487d9c3-4721-4f22-88b2-68143ad1ccdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b47008-2fbf-4182-a6c1-ef6cf6622c2b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4de659-84d7-4602-ac3c-c37f173dc99f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602c2c68-f695-4c7f-ab8b-044b52e07553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afcb5366-537b-4e69-a500-45bd8f3e0547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3e83c1-bdd4-4021-89e8-241c3ccaf3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691c1899-1e18-4e38-8e71-bc626f005480",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0609fa35-0a3d-461b-b9c4-d4a5183dbd05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff93e3f-e14e-47f5-8b03-998da35ae423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce823441-09cf-4ee5-b6f5-490db4c96095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73606fe8-899a-4a4e-8073-d51eac95c5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a78211-ea3f-4926-a066-97fccbb5431e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01829dd-94a4-4ae2-8929-0cc339b6ec6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17835816-49d0-4a60-a8f7-dfbdbfee6959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc52eb95-6a7d-4e0f-8f78-60aded5c6c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cfc22ad-70b6-493f-b7a8-8ed4110880d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b18bf7-d02f-491d-9c4f-e9b382432bee",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecec8fdb-c264-4273-9f31-bbadb6b8eef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e415496c-5fe4-4224-a0d5-66ad77efd6f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adfb2b3-ffb2-4acf-a7cd-a56c6e149d5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daaf6e13-b704-4b4d-b3dc-7def2d33eebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5933b096-a39f-4a88-bcec-ab6b421fdfc5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e5f06e-0e9b-406a-b601-8d2ad2302057",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "971fc2bd-9779-4f43-bf2b-fae10a0163bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8a3078-2ebc-4ba0-a484-10af83b74ef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c8d238-fcbc-4201-8156-1cbc9bbf907b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47a7c82-7113-4591-80e4-08420314034b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1f79e1-4b97-4d3b-88f8-1b159611d63e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10be4abb-87cd-45ab-9d65-00ff13fe3e73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6bba423-36fd-49e7-ad16-8011f08ac256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5104e92d-ddd8-48ec-b991-11e52a65d790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ecd1943-811e-4677-ae04-03b82a8161c1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c7fa6d-5167-4c46-b9b8-061913eb1114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52dde189-8b23-4099-ae88-bd19fb9f40ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbb42f4-be5e-4ccf-aa5d-8a0e3717af86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc6e1a7-3f86-4043-814f-20be3aa470cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0fb2238-1df6-47fd-a0e1-91c40ad31948",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576c7574-d3db-42af-a0da-548996b70b0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89d35eda-d9d6-4a86-a5c1-7d25e3e3a914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5703ff9-581e-431b-a57c-9546533958de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5514b051-6eec-4eb0-8480-0531baa4d9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7244cc41-dd99-416e-9df6-c7485cdc25e9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2d3280-88ff-445a-a685-0bb32089aa6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89eceb79-e7dc-4a75-b173-a6b7ee127b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c4b9f5-4769-4caf-9e78-68b8128e6fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65617a4c-228f-4787-91ba-392aa52a9058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fbd07dd-8d5d-4023-b665-9e896545430d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcff6e08-3b32-4e10-b569-04374b282bca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cbff5b0-ddd8-4094-bd48-598427fc3707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e2afb9-678c-470f-98d8-e8d36f5e384f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf8acb0e-b28b-4a49-bff8-c91c02926083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407999b8-2afa-4bb0-bd4e-f66e508e3a21",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb86f37-48a9-4e33-b1ec-ac78c65b935b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "000156b4-e63b-4c08-b5f6-463221e0e4f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df408fd0-19d3-4791-8b29-303cb631dea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a4a7cd-e169-493c-8245-215f16ba54f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46e1163-b7ed-4f11-bc82-d16bc6bff02a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bb43fc-8aa6-4ef7-a811-1238a3e8dd3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc4a13e5-82b5-4864-9961-c0515b3c98aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6fb4e1-2c38-4e8c-a359-0fa2097d882d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68dad2eb-7033-4b54-8e0c-7f9c5eb8575f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b27c156-79f3-4087-95c5-95f2d6612a6b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29e7251-0ede-4455-9a2b-cbb0c6fe2ebe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10299e3b-5c15-46fa-845d-4cc1bd169bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e5be2c-d32a-4684-b945-48fcd4f9551b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a5cb6b-fdc1-4722-9679-bf5eb10e5161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a4432e-e21d-42ec-b945-47ea4866d0f1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be989725-9ddb-428f-b645-1a463b386e5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ee6e7f8-6973-467b-884c-c1bbfc081954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863ea64e-73b8-43f3-9b67-7a9c459ed34f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eff3e1f-fbef-4fe7-b669-e734b7b707a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250a1cef-3e73-4b8d-aa2c-1ec12d887395",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35aef3cd-6555-4ddf-9138-2189c253ead4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b08132e-81c5-4e27-84b8-be843a35fc22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e8b150-dcd8-4520-8325-d73a05dfe98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18027936-c18a-4d10-8fd6-0af431146b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3718d23-e0f5-4d8c-bede-9e99b84c332e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317c8634-5961-4614-bef0-9a37c736339f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "706ac947-2db9-40b0-b541-6646667207ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7df169-b883-4db8-8d18-febe48171249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb698843-9777-4f0d-aad9-b4cedc2d918a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae26069f-621e-47f2-a72f-3952f60008c8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a1ef61-cb99-42a8-b3c0-5487e5186f40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5701c379-78c1-4ea1-a1d8-cf93966b976a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f467045-fb0d-4f89-a57d-c8b8afc6370b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5ed6c6-eb24-473e-a2dc-715189a9d98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981095ca-eb2b-41e5-bee6-3025d8a30da6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d2534d-c6d5-4925-b6b0-2c208ccbaf58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fac8d99b-7a70-4e7e-adc6-ef37f9178e43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d377a55-2446-4fea-9e7e-c2fc70859bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcfdc6b-feb7-409b-b46e-fa2d821927b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "633c30e5-9cf7-4edd-8bfb-76d700db0070",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc5eccd-5edd-41d0-8501-1d17130bf178",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b49d1637-c73f-40ce-a874-802a3916dfb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecfa6e0-dda2-4907-a0f8-fbb2448be1d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f378e3-4fca-45f3-95ca-151d2c32dbf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eba4fee-38c4-490e-b1c5-57915b4ed869",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1352466f-ba1a-42b5-93c5-2aed9c616917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b014f71a-d82c-4a69-9e0f-84f7ceee9c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c4f204-4df4-4fd7-83a2-9a3894e0cd69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "388c893f-835a-4135-ba92-c40f5ecd383e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927cabc2-3721-4eca-8bca-65b6044e51fe",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e78e3d3-6949-4908-8855-5caf527e998e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9591d171-a1b7-4530-82b6-a96b7ea99b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4ca5ea-4a86-4be5-bc30-26203ab6d396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5858d7c-e14c-474a-b5d9-7a8a19897254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef206032-febe-4fea-be6e-43ffb68815ed",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b41839d-2832-42cd-9552-8a9e3ff486ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ada78a25-8788-4a03-8984-4575addbab10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d8ff61-05d6-4411-b8ad-f15903a172c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346831ae-36cf-4d61-9d9a-3fe7820ce79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c909a3a-573b-4c80-acd6-bf8e09e6d661",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17afc1ad-74e9-42a4-825c-aa008e7c7b1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca3973c8-c3f3-4b44-a7e7-870b31bbf9ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4882cd25-c6f6-4331-8216-8c2d3c0e565e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d8114d-cec1-486d-a149-28e82188c3a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7981bcb-e437-4f9f-ac49-03721961636d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed48f3b5-7b08-4a56-9231-b87db1a4323e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e283c7db-92b8-4426-a335-b479a843abd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456814e9-5537-470d-84c7-c978a78e3736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e9d0ec-f651-4685-a50b-edb25c67e043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b398a35e-c0a6-4b94-b9d7-e41a763160ae",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539e0895-22f7-4113-832e-130eb988729d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ef5a6e9-f041-49db-a931-a00a876d38ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae1aff1-1fd6-42a7-adfd-5f62d9eef9ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b893e962-fa21-4b82-8edc-1bcf0cd28353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf135169-7b45-4572-8ec0-6c0c6338ef1e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971004be-56da-4fa7-b0f2-b84dae62d387",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1a364e7-7793-460b-b2dc-0172cb74b02e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c687bb2e-5300-451d-a9de-3c91b38e40d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe43ef6-3146-4fe5-b4f7-cfa4e6e46d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3bc255-9b51-45c2-8ca6-d23af34de9d6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bc93d5-2552-4ce7-a793-405ab1d55b1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d0890d7-f8ed-454e-a98c-4b715315b3f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "333841db-84a8-4774-bdc7-16147c1573f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4691324-5d67-4618-a23f-f7067c918579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df148b1c-1b3b-444e-9d0f-f354024f526b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a6c731-6d1a-4c88-a580-0d66ee6a1f48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44bcbde9-5a1c-4861-9848-72c9fb82ea0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e461370a-f371-4c79-9202-247fc77f0fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8574fc-4fe9-4dde-8498-4a8cdf8625f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6af3a3-3c9b-45f0-8e8a-40ac422e1096",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122bac35-2442-4d3c-a6b4-482b3495bda6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eade6396-cf2c-4bb6-b317-57d6a0b16ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ce63b6-c4a7-4f07-98ad-b2b8d813cd93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d31dcfc-ad26-4ad6-8e13-d4043feab02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302da484-0a38-47cb-8485-ff9992dd0811",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918a6eb8-9219-4a2f-94ba-81b4418b7641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "197315ae-0eaa-4e39-8a2b-24b92d795629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "492f8df3-b0d0-4889-b7f8-6ed09387338a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42455f66-4052-49ff-84cb-8d32c68e4eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbfc27c-313d-4521-b920-0005cfae595f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da834c34-4a69-40d7-ad16-601717f3e6c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "204cfe23-7bf5-417d-838e-ba3695a8dcfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77f3f93-42f1-43a2-8c2e-07da17a5b42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f62be12-0747-4ecf-8e10-9b71a2375dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b4c46d-6820-4587-b1e9-37468ea425ee",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4935b2f-705f-493d-a76c-47096de410dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "841a7a9f-1011-4c99-b5e4-68c17f5ed2b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09c18e1-e690-454c-aec4-fcc07a85e9f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1425098a-79c7-49f6-91fa-63dcd407b6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de9cbf7-23fb-4dcd-bfb1-2db7147b8dc5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011c96cc-cbbf-4548-b61e-3b4f6056a524",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "969950ff-0df6-4eca-b887-785e3d169ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028e66b9-0ab6-47f4-a784-9dfacf602e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca037ae-436a-479a-9e27-8435fa9e137d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b03272-a591-4de5-8781-96009b9d55f2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e82dafd-e014-4671-8069-b07d16ce2b09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20c134a4-e47b-45ba-ae40-6bb8b0c26e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ea48d9-210f-4872-b909-e7d8e11e94a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a84208-47c5-47e1-b417-2f5c057496d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a98a422-42dd-4e3c-a714-ebb48996bd96",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754c1aa5-ab4b-440e-828c-42c9fdc10e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd84b9aa-6f6b-4ef0-8b9b-84589df0347b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f66376-22a2-4f07-b5ac-66efb009da35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e917214-3431-4dd4-b8db-152c4854aeba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d808cb72-a6bb-4048-8de1-7916b49d175f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa8c98b-96b9-4071-bd8d-051a8afcc1ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba4788aa-2197-4559-ae9b-aa0dce062288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a646924-cd83-4317-aca9-bcd26f02b669",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276d8fd2-c2a7-474f-8c83-b9ea83629072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70458545-c4d0-4e90-9177-4be471b46e8b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043f83cf-b4a7-4e4e-8e8e-64509905891e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bef4ca56-c47e-4cee-9899-1204f6bc2e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c2e5cb-f5ef-474b-9544-13d04a42e486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bf4b26-5309-4229-bdc3-dfd21d27e001"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89a19905-69df-42fe-b557-88ddfdcdb263",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07bd9cf2-1d14-4850-8f1f-d44b2bc8f83b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02fec4c4-cb2d-481c-b061-77c695e6ba9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d6c3462-2888-4d87-b00f-a292b55bd393"
                    }
                  }
                ]
              },
              {
                "id": "e7d7c159-61ad-4201-ab0e-71d66912417b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6148ebd5-37aa-4734-a21c-3dfaaa628fb1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4352ebd6-1575-4313-868e-e30d57a4453c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fdff72a0-7322-4645-899d-96b2f742ca53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03feb5b-77c2-4d07-9770-c289cb379871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ff9972e-6410-478e-9e4e-2247933daa8e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce6b8f9f-686a-4994-a3a5-e33e9f9d0fc7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3de750fc-6def-470c-bf10-70a173e623de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc5deba7-4e10-406c-ad38-c2ea6e672ac6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd34aa13-e3cf-4fcf-b916-b27cd225c836"
                    }
                  }
                ]
              },
              {
                "id": "976f76ff-95f3-48e0-8226-49f073738b16",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c1126e8a-e447-478e-8e09-396f46148fbf",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8f2197-7979-4131-ab8a-5624888f6e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dd7c246c-cad3-4089-92d4-da3b6a9c6d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a3125f-033c-4f36-8d53-9cf8659e9eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79bc7b1-0e5c-4d71-89cc-70d76975f24a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c1ec8e65-cc22-4ea2-8d32-f9ef65ed590e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "50fd5e92-f37d-40f3-837b-62fa3417064e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a98711c-86fb-42b2-8667-194bf170b5f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b6373c79-edb1-4adb-b718-1194aacdabaa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5deb6b33-2f38-407a-adc8-298fe529d7c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67aafc54-6439-4f4a-b7b0-d678cdfdf972"
                    }
                  }
                ]
              },
              {
                "id": "3c6b8e0c-bc4c-4853-96c6-3c80a91c8d0d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa18630a-82ec-4347-8e4f-2d3141becd49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ed5977df-42a3-40cd-8c8a-4f552c240055"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49aa0542-f66e-4f76-a69f-e361a69f1f55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07b7833d-863f-488c-8b74-8df791fa7707"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2cff68a8-bede-44d3-b84f-f0c05529b5a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4f9372dc-c8df-40e6-92ac-f50ef51a53d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5d37fab-1558-418f-96ff-279d9a1a0fd4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40d7cbd0-644e-47e7-a214-7742f4f74f6c"
            }
          }
        ]
      },
      {
        "id": "33c3e088-995c-4644-9b39-00235d0a7af9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cf338eb8-6c8c-4d05-a9e9-d0f0f391b360",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99af1333-7982-4fa8-8755-4a89ea86b088",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f6c85f61-32cf-4827-9401-e51a34fe7ff7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb0faa5-5c26-4e67-90e1-f993eceb016d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "46188fd4-a91f-4ca1-b0f8-ef6d3c357a8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77224722-d02f-4b6a-b967-dbc4d7cbab73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d5bdcab-228b-4d7c-afbd-1f274c1ceac3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0be6a730-8de3-4225-b130-a6dba2b33282",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8996f8c0-1fad-449c-a931-edc69b52cafa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4245da22-65e1-40fd-a912-9f74b8c86afe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35b20cb3-e3c9-4aac-a0e2-b29cae71f810"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c15f054e-55cb-4856-b24f-25774b5d8dc4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1aef0553-59e9-447d-bbce-e0cf7417d0c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4f77140-34f0-4404-ad89-f36c5db2c62c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "822cec7c-f274-4b35-94c2-b0f43b229087"
            }
          }
        ]
      },
      {
        "id": "ce1fc09b-f8ae-44f2-85ac-ab8827dad72a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c3d9a9b8-508a-4a3d-a72a-f814efd494d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a97a43eb-b98a-4638-b2a4-43c0c8ace475",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3fd2cf8-09cf-46b6-b6a3-e7faa15ae998",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11642abd-e5f1-4096-8cba-92af8c9af581",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b242982-9dbc-4ea3-a6d0-180715fb5f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15fbb52-3686-48a1-bc76-2d3fca6f6d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bec0dcc7-13ed-4d01-b9c3-6c2f58da44f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "167bcfbc-29fd-42b7-a812-c7710883e9d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87c8ff12-2ea6-4bf1-ba2a-9b6bdc28d153"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77d17f6e-8c3c-4483-b555-c8ccfb1134ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "435ec4d4-32d3-415b-b6e4-a5231bc77e92"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "956619b3-c3b1-4727-b18c-b4c49675cd13",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cf8c7ed4-8e80-4090-a89d-723abba5ea8b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10138ba2-ac57-4f89-8238-6f482a98a130",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "497297f6-1026-41a8-8e09-ab46d2225e80"
            }
          }
        ]
      },
      {
        "id": "30fdf4d1-c20e-438d-87d8-2a5480ac771e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "45ae6283-3787-4390-9629-570b6507d351",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce348066-336c-4d4f-8cf6-7758fc71dc21",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66cc5c2c-6d08-4355-853b-ee3e504c3d0a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c465d330-427f-4b81-9044-442b151889a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfe9911a-6e0e-4257-b615-a272ea008cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "356d5ea8-0d54-4156-b68f-744428551afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "701c67e8-b8f4-4628-8f88-72b077eae7cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "598c31ed-ac1f-472c-bfc4-13c188731754",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2064a780-fd43-4dcc-b6c9-06489ca07531"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53a51153-284c-4ece-bbcc-b5db9e31d0f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53fa4943-4222-483c-938f-2389ee5853e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a4d1b53-2a4e-496e-8b45-22ef13f376b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7e0ea113-da81-43e6-8d7f-4612a0da32ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c779102-c438-4e35-84c8-e4787134ef19",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6500057-d1b1-4b1e-815e-221a29bdbee8"
            }
          }
        ]
      },
      {
        "id": "49b42cd4-fc9d-4d0a-917e-8ee3a45a2088",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24c6442a-b9ae-45b7-8729-81618b5daa7e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9a31e3c-c96a-4609-9f2f-14d541553526",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4d42aea4-c000-457d-a017-c64025d7433e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4940a6a6-f5e4-4ea8-ba64-2c164d7d4ad9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e0b174f-d4d2-42e7-9aec-af22acb04d56",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 118.0140350877193,
      "responseMin": 6,
      "responseMax": 747,
      "responseSd": 71.9531022668469,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705710958587,
      "completed": 1705711001518
    },
    "executions": [
      {
        "id": "5706bcae-6e07-45eb-bbb6-b1bcc1693bd8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "746e2687-8b74-4134-adcd-eeb73095271d",
          "httpRequestId": "a7ab235a-1e4a-45e3-8699-bf249774e1e6"
        },
        "item": {
          "id": "5706bcae-6e07-45eb-bbb6-b1bcc1693bd8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "325d2807-041b-4e88-b17a-5f9f918f522b",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 0
        }
      },
      {
        "id": "7f76b3f7-9e22-4fcf-87db-f3ce01594484",
        "cursor": {
          "ref": "8f5e60b3-85b5-4784-a86d-642fed7a28cf",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d76c60df-a343-4760-a5d1-25877305cee3"
        },
        "item": {
          "id": "7f76b3f7-9e22-4fcf-87db-f3ce01594484",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8156aaac-a3bd-4ae3-9539-f625f50234ee",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "d7f597eb-66ed-45d9-bd4b-659b946d6443",
        "cursor": {
          "ref": "daf28602-daf2-4ba0-b55d-3cffb8c7eda2",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "890a2b35-6677-4a0c-9dda-f0bf91ed7b40"
        },
        "item": {
          "id": "d7f597eb-66ed-45d9-bd4b-659b946d6443",
          "name": "did_json"
        },
        "response": {
          "id": "faa17d4c-200a-4f8b-bc14-59c0786f0c3a",
          "status": "OK",
          "code": 200,
          "responseTime": 250,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff0ba8a-33b7-45c5-9b0a-8b865de98204",
        "cursor": {
          "ref": "7f991957-eca5-45ca-80f1-64661acc09bf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dcd920c4-5f4c-4665-9036-c23edfe644d9"
        },
        "item": {
          "id": "fff0ba8a-33b7-45c5-9b0a-8b865de98204",
          "name": "did:invalid"
        },
        "response": {
          "id": "50b79aa1-4a89-4ca2-8e6b-9c610a0ac995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff0ba8a-33b7-45c5-9b0a-8b865de98204",
        "cursor": {
          "ref": "7f991957-eca5-45ca-80f1-64661acc09bf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dcd920c4-5f4c-4665-9036-c23edfe644d9"
        },
        "item": {
          "id": "fff0ba8a-33b7-45c5-9b0a-8b865de98204",
          "name": "did:invalid"
        },
        "response": {
          "id": "50b79aa1-4a89-4ca2-8e6b-9c610a0ac995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d0056c-ea13-4efa-b81f-e675f4cdac02",
        "cursor": {
          "ref": "8aab1b21-d3e5-43e6-94d3-ce9d0cc202d0",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "158c0506-0565-44c5-bbf9-89f4910992ce"
        },
        "item": {
          "id": "48d0056c-ea13-4efa-b81f-e675f4cdac02",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d98124c8-fd38-4500-bf10-51fcf96a89fa",
          "status": "Not Found",
          "code": 404,
          "responseTime": 140,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e0d3d2-bf9b-4952-adbd-21cf33db70a1",
        "cursor": {
          "ref": "35ab78db-25ce-4fe6-8e92-f79690860a1a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3d192d7d-0f82-4464-9f71-95c84ac808eb"
        },
        "item": {
          "id": "91e0d3d2-bf9b-4952-adbd-21cf33db70a1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5aa120a4-e44d-4fa3-83ee-5a363353863c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 93,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565ca065-c3a0-4e86-a5d0-3f754bb81b3f",
        "cursor": {
          "ref": "92df8a17-5d4a-4a2f-a54c-46715e5e2b33",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fd78713d-971d-4750-a705-0c7f5e9df1fe"
        },
        "item": {
          "id": "565ca065-c3a0-4e86-a5d0-3f754bb81b3f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7b67597c-fede-412b-9049-8cc26a0b62cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6621e5f2-7d69-4699-a1bb-fef8a487f9b3",
        "cursor": {
          "ref": "adb71eea-ad93-4b6b-a703-906876dfd37f",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "611ee355-318b-49e5-8213-d81760131380"
        },
        "item": {
          "id": "6621e5f2-7d69-4699-a1bb-fef8a487f9b3",
          "name": "identifiers"
        },
        "response": {
          "id": "9f845c13-6f0a-47a6-bf3f-321c401e2580",
          "status": "OK",
          "code": 200,
          "responseTime": 217,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5a98cb-40c3-40de-a1e1-a83932a39d11",
        "cursor": {
          "ref": "68addd6c-9d85-4e09-94de-70f50aec5d30",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a1b7b3cf-307b-4fed-9eb1-9d60a85ac320"
        },
        "item": {
          "id": "fc5a98cb-40c3-40de-a1e1-a83932a39d11",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d6d5c73-51cd-4be4-9280-af465d2904da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4352dd-173b-4011-9dd8-732077164f1b",
        "cursor": {
          "ref": "e012dca1-734d-4e3f-8a98-2ad2e6d12388",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "699d14d9-d7a2-4f35-84b2-eed705adb788"
        },
        "item": {
          "id": "5f4352dd-173b-4011-9dd8-732077164f1b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7aabe2bd-b1f4-41df-b201-c469048a3e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec62fcc8-5e3b-4605-adb4-8fb181c6c859",
        "cursor": {
          "ref": "518e04bf-7af3-4c88-848c-2c1a1136bb9e",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bc1abc72-4d8a-476b-93b0-0fc889239cb2"
        },
        "item": {
          "id": "ec62fcc8-5e3b-4605-adb4-8fb181c6c859",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7eca4bfe-80a0-4beb-abab-d449577c3ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4ec445-5c79-418a-963c-0a8b84593d90",
        "cursor": {
          "ref": "a02151f3-89f2-4360-b3b6-0be521564a17",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0aed8b29-9098-468a-967d-f17490c33d12"
        },
        "item": {
          "id": "6a4ec445-5c79-418a-963c-0a8b84593d90",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "95a255d5-5a2a-45ef-86c0-91abf0e8b50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d4e7802-e07d-48cd-ab6f-9944cb473501",
        "cursor": {
          "ref": "8fb37e95-9bdf-4432-b7dc-90f5b2105694",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "507eb3e6-b172-43ae-8777-32eb7e43eb50"
        },
        "item": {
          "id": "5d4e7802-e07d-48cd-ab6f-9944cb473501",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d33574bb-d519-4ed1-b263-18623801577d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e3cf7a-dcc2-4b28-b2a7-6f0966cb1fab",
        "cursor": {
          "ref": "ec2a4643-7661-4542-8001-64654088ed19",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b5ab74eb-922d-4806-bf44-81adead5a481"
        },
        "item": {
          "id": "93e3cf7a-dcc2-4b28-b2a7-6f0966cb1fab",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6b5bdb61-608d-4d73-9302-4dafb0fe4377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f33bfa-b99f-472e-baad-19be5ce320f0",
        "cursor": {
          "ref": "99305bc4-dbb5-485c-a58f-0c91fafb38cd",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "81a8b031-cfb4-40d9-88a3-6ffbd71b4e61"
        },
        "item": {
          "id": "66f33bfa-b99f-472e-baad-19be5ce320f0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5ebb4244-4f5b-4ecb-9a09-9c2a4a0ae755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1cb3bf-6a31-4858-a6c5-fd97d6403f7d",
        "cursor": {
          "ref": "48704ad5-d203-4280-94aa-c9175f4978b4",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "628efc39-d0f4-4ba4-b659-97c0369c3556"
        },
        "item": {
          "id": "bf1cb3bf-6a31-4858-a6c5-fd97d6403f7d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "72206f3c-ac69-4f63-864c-c279971b91a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effdf47b-14ec-43bb-ba11-7dd1b09efff8",
        "cursor": {
          "ref": "cedb718b-4814-48ce-8c7f-f9c82648d769",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b0c21ad0-2bd1-4506-8eb3-58580a44eb3e"
        },
        "item": {
          "id": "effdf47b-14ec-43bb-ba11-7dd1b09efff8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d2f67586-bb90-4ba6-8f9e-7b8bf69e2546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fcd516-6f47-4a4d-8de8-d68de2cd682e",
        "cursor": {
          "ref": "19d5f987-2165-497e-8e12-fedeb2207567",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "df0d9e4d-a23a-4838-948d-adefcc6ce390"
        },
        "item": {
          "id": "42fcd516-6f47-4a4d-8de8-d68de2cd682e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7d99a952-9077-4c13-b0e5-186c63c68190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fec5e3-eb87-4049-8142-50533674c569",
        "cursor": {
          "ref": "84b5ee81-c4f1-48c0-aed2-9ec0bb82760c",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5f2e03bf-e259-4fab-8462-7a1fd286bd87"
        },
        "item": {
          "id": "b2fec5e3-eb87-4049-8142-50533674c569",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4fccfc14-f2a1-4f86-9aff-f1c37522f8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06e8f25-d0f3-48f1-a021-583d707d295e",
        "cursor": {
          "ref": "01b58cac-5ad7-4f7d-a9f8-9b95d741e3dc",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "fd2341a6-d1f7-45fb-8e1b-4e9f6d116036"
        },
        "item": {
          "id": "e06e8f25-d0f3-48f1-a021-583d707d295e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f865b20b-1527-4541-9396-cf994d94585e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a26342b-7bc7-47dc-b744-4119757363bf",
        "cursor": {
          "ref": "1296662e-f591-49d6-be6c-5d982bb3725a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d08b9cae-98c1-4f5f-bd1c-1c879de47e41"
        },
        "item": {
          "id": "7a26342b-7bc7-47dc-b744-4119757363bf",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9bc12c8d-52f8-4db6-a050-3a15d34ced89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a39879-e061-4b12-a8c4-113dcce00b39",
        "cursor": {
          "ref": "f1f97e3b-bb5b-4add-b937-060a6c9f8fd5",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b994cde5-d5e4-4213-9fc8-837154671f10"
        },
        "item": {
          "id": "75a39879-e061-4b12-a8c4-113dcce00b39",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "25296420-97b8-4ec3-bbbb-52c130629b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820f3e76-fa78-4592-b904-2013d2043278",
        "cursor": {
          "ref": "badc5d7a-7ea7-4392-8bf3-79d3e3e8cb96",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2dd49cb7-aa3a-4ae5-88c2-a181e64d0ec8"
        },
        "item": {
          "id": "820f3e76-fa78-4592-b904-2013d2043278",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "34cbddea-55b6-4c2a-87d9-aea78cafee05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089f57d6-fd5b-4b4d-9535-53e1ea4f24ba",
        "cursor": {
          "ref": "0bc85654-6bf1-4b59-a13b-5385d29cbeaf",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fb269762-7c65-4f68-936f-23364b54e0e6"
        },
        "item": {
          "id": "089f57d6-fd5b-4b4d-9535-53e1ea4f24ba",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a2297dc4-417d-4de1-8683-c71671d377f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efdb0e9-3670-4de1-a96b-811ac06fd0c4",
        "cursor": {
          "ref": "d77b5b57-292f-4439-8a58-d9cf15dc5b70",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "75bcbc3e-1f6d-44bf-852a-cc995f5f743f"
        },
        "item": {
          "id": "9efdb0e9-3670-4de1-a96b-811ac06fd0c4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a1ea5451-7f69-48e7-900e-df1051f9cf85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e073572-fc2b-44ad-a200-59beac243820",
        "cursor": {
          "ref": "78f5ddc6-dcc4-498e-990e-a1551562fb35",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f542b131-d720-4bef-9513-19e985f5a94b"
        },
        "item": {
          "id": "3e073572-fc2b-44ad-a200-59beac243820",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e856e8db-c91c-417c-93a0-14c0e254bb73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad349df-bcee-4b37-8ff6-e6978bfac342",
        "cursor": {
          "ref": "3679e4d8-091e-4f23-b478-51bbcd59037a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "686b707c-7826-44af-91bf-c179e3c8fb8d"
        },
        "item": {
          "id": "1ad349df-bcee-4b37-8ff6-e6978bfac342",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3acac8e0-c458-42af-8822-e1c1ea9327fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89853b96-f4ef-45ac-bcc6-1386aae97864",
        "cursor": {
          "ref": "d195ee44-206d-4734-bc39-73d374e59674",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b5fd7ba0-cdf9-4502-ba98-38b4ea21c36c"
        },
        "item": {
          "id": "89853b96-f4ef-45ac-bcc6-1386aae97864",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "347c8aca-e01b-420a-ab69-b9d89ded27d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e0e75e-da47-43bd-ac14-fc46264dc798",
        "cursor": {
          "ref": "f15442ec-b692-40b1-ab15-566b68f916db",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ec8426b6-c939-4df7-a080-4546bd2baffe"
        },
        "item": {
          "id": "10e0e75e-da47-43bd-ac14-fc46264dc798",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "675ff229-52e2-4c64-b9c1-c69161def83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9577277b-752d-4025-a3fd-40eba594b428",
        "cursor": {
          "ref": "df3cf258-6fdc-43bb-85ff-f99b45252726",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "44dfce04-fcb9-4dc6-b35b-029f7a188415"
        },
        "item": {
          "id": "9577277b-752d-4025-a3fd-40eba594b428",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "349f2d31-5254-4926-a741-38e09335a241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63761fe0-195d-4078-957d-ef13ec03dc81",
        "cursor": {
          "ref": "439686ed-dd88-4d04-9873-9a4304d4e7fc",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "526184b5-a963-4e37-82c4-04dda236ea83"
        },
        "item": {
          "id": "63761fe0-195d-4078-957d-ef13ec03dc81",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dfdd1828-8629-4d20-9a19-f4645b3a3489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e1fdf6-64cf-4684-bcae-732c035a8d77",
        "cursor": {
          "ref": "4a1ab6ef-07ed-40f8-b5ca-5be816faa29b",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "03ddb7a9-ea7d-4bf3-9ec7-d6f48feebe0b"
        },
        "item": {
          "id": "48e1fdf6-64cf-4684-bcae-732c035a8d77",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cb688b94-0d64-4792-a9ac-03f4775cd1b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a691c340-cacc-4713-aaa6-d93fff4b578f",
        "cursor": {
          "ref": "0c213131-3630-413c-94ff-c4eff0cc5b79",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f4623d36-f903-49f3-b2f8-241e95352043"
        },
        "item": {
          "id": "a691c340-cacc-4713-aaa6-d93fff4b578f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "aa2e1c86-0596-4360-b16b-302926897579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80ffb49-895e-4511-b452-e24f016699f2",
        "cursor": {
          "ref": "bdba745f-5fab-43ae-b6a3-3c0e60208c99",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c622e2f3-8382-4ca3-9b5c-7ee0a4d9533b"
        },
        "item": {
          "id": "c80ffb49-895e-4511-b452-e24f016699f2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a0f06f24-07a8-4496-9f6c-a5b698396251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb3b5ae-f710-4ff6-9ef0-b7b50a426a8a",
        "cursor": {
          "ref": "78220be6-1c1f-4c6f-a972-f4e4244594c1",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "373ecb31-b0b2-4ed2-89fb-2a4eedcfdd97"
        },
        "item": {
          "id": "deb3b5ae-f710-4ff6-9ef0-b7b50a426a8a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "74c29d76-77ba-4a3e-81cf-cb6cef2566fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9da8fb-130e-47e6-ac65-8f894f8ee133",
        "cursor": {
          "ref": "2c1c4cf7-6b24-4977-ad52-aaff32b1b8f0",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2ae2a29b-cc7a-4a5a-9522-c53fad650c93"
        },
        "item": {
          "id": "ba9da8fb-130e-47e6-ac65-8f894f8ee133",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6888a23b-4976-4cd1-bc94-1e0ec193b2b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3d0ad8-179e-4aed-9de9-8cec95bc93ed",
        "cursor": {
          "ref": "40f5032b-fa34-4320-a621-6fe092323fee",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0b09a8cb-b5b0-409f-b7e3-6b13753557f4"
        },
        "item": {
          "id": "2f3d0ad8-179e-4aed-9de9-8cec95bc93ed",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "72209cbc-cdb3-4812-8027-3254d6abf89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636849bf-eb6d-4ae0-8d63-d32abc465211",
        "cursor": {
          "ref": "f00971f8-5830-4513-b625-3ba09f9d5721",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "326ab682-8547-4c54-a27d-c32a4a94e0c7"
        },
        "item": {
          "id": "636849bf-eb6d-4ae0-8d63-d32abc465211",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "80cea2bd-d314-4f05-9cdc-895d9162dce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89d672d-b81a-413c-aa57-a5f57d717d42",
        "cursor": {
          "ref": "7c4cd764-398f-4302-92e6-fbb0963caca9",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9d2a91c4-a1fc-4f9f-a4af-210483cc5cef"
        },
        "item": {
          "id": "d89d672d-b81a-413c-aa57-a5f57d717d42",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "bd549359-1364-4507-b0a1-b8d27c73711b",
          "status": "Created",
          "code": 201,
          "responseTime": 747,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e0d5c7a7-19d7-481d-a8ca-4079c1dbcc6e",
        "cursor": {
          "ref": "6aedb0a0-8b26-4010-a641-93c9aa6e8c12",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "035b4718-1a60-4b80-ba43-c007b2105553"
        },
        "item": {
          "id": "e0d5c7a7-19d7-481d-a8ca-4079c1dbcc6e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b1949f07-6416-41a8-ae92-bcecb7a549ae",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d87e6fba-a813-431f-8ea9-5850c6adfe79",
        "cursor": {
          "ref": "a5555453-ceaa-4ea3-9c67-4cce9a6b44d2",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2f706ad0-ccbc-406e-bbfd-e05511b1fbe9"
        },
        "item": {
          "id": "d87e6fba-a813-431f-8ea9-5850c6adfe79",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "95e99b2f-01f0-4efa-877b-322d9ee3a3e8",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "775c90d4-7ab5-4864-9ae0-b49552c0de0d",
        "cursor": {
          "ref": "2ce61982-b398-4111-b4fb-6770d24e2374",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "735ee4b8-e889-490a-8307-8643c99d4c2e"
        },
        "item": {
          "id": "775c90d4-7ab5-4864-9ae0-b49552c0de0d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8fd09caa-94f8-42bb-a92c-be55637dd20d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02a1b02-4f5d-4faa-91d9-216d6a25a158",
        "cursor": {
          "ref": "259939df-da00-416d-b36d-7fb3d9a9d326",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b1451cde-2eba-463b-ad23-31936e96d19f"
        },
        "item": {
          "id": "b02a1b02-4f5d-4faa-91d9-216d6a25a158",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "af76afbe-6dc5-46a3-b017-96f9e0b026d7",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "ac080726-c598-4a19-91a6-3f785f3ebe11",
        "cursor": {
          "ref": "4b7bacea-b4bd-4bf1-bfab-90cb64211d7b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "790c7c3e-5ca8-4a97-8ba9-300bc528fff3"
        },
        "item": {
          "id": "ac080726-c598-4a19-91a6-3f785f3ebe11",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0f7541b3-7c5f-4759-9d7f-1e6d2874f33e",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9a754ac7-5c2d-4880-b437-0f6b440dc38e",
        "cursor": {
          "ref": "4054cdd1-bee2-4b75-aa67-ced3de10d576",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "44283afb-f46b-446e-92bd-07b4d23c40b4"
        },
        "item": {
          "id": "9a754ac7-5c2d-4880-b437-0f6b440dc38e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "68999e24-5dbc-4be0-b00f-34875cd793ea",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9292fded-59f3-4fa1-810f-861cc15181de",
        "cursor": {
          "ref": "69f15697-1222-4690-9324-5d5df40f2989",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "04bd3e1d-9c10-4b10-b76b-1cdd94b395db"
        },
        "item": {
          "id": "9292fded-59f3-4fa1-810f-861cc15181de",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4e03d616-73a1-4ec5-a10e-7b5472371bab",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "81ee6188-d2f0-476a-ac63-3ee440bbcd55",
        "cursor": {
          "ref": "0087c60a-d5ea-4b0d-92b2-6775195fd477",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8f341c95-373b-4424-82bd-ea50b21298c2"
        },
        "item": {
          "id": "81ee6188-d2f0-476a-ac63-3ee440bbcd55",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "370e9dd2-356f-4726-a30a-0c7659cdf0c2",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7aea73df-5b5c-42f4-96f7-956a77fff685",
        "cursor": {
          "ref": "a0739cb8-3d02-4466-afbb-4376f42333f8",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "31fbdf5f-af97-4093-8b13-d3785baccad4"
        },
        "item": {
          "id": "7aea73df-5b5c-42f4-96f7-956a77fff685",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9991421d-6d57-493d-8553-b5bd6e4983b3",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1a53ab64-251f-440b-a7d7-0f04929f14f4",
        "cursor": {
          "ref": "c1362bb7-ebf0-4788-95f7-0fe5e0afa38b",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8dc1b821-92dc-4e0b-b717-9a45669077ab"
        },
        "item": {
          "id": "1a53ab64-251f-440b-a7d7-0f04929f14f4",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c4d20cf6-31ab-4989-a3a5-64ee5b64b28c",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1df4e7f1-a426-429a-a9bf-0b3aa0c0438d",
        "cursor": {
          "ref": "fcb8ae3e-62c4-42ee-a6f2-e0ffc1514407",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "919f9514-2220-4695-bf02-e3592f9c81d7"
        },
        "item": {
          "id": "1df4e7f1-a426-429a-a9bf-0b3aa0c0438d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c9dd8b0d-7708-4dfc-a8de-8573589e04fe",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "418c4118-a135-4344-aec3-6010925d1805",
        "cursor": {
          "ref": "c8c9f2b3-16a9-4d7d-9c9d-52304eafae15",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cfbb918b-4922-4131-bc58-a6a0d1d7f082"
        },
        "item": {
          "id": "418c4118-a135-4344-aec3-6010925d1805",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "19134b08-672c-4738-be76-99ab7a46af30",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ce9eb7af-0f32-48ad-bcb7-6d2abc38cc24",
        "cursor": {
          "ref": "21c9aa7d-379f-417e-bf55-d997b16d4f3f",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0e2190ad-6439-4346-87e2-9cee6145bcf7"
        },
        "item": {
          "id": "ce9eb7af-0f32-48ad-bcb7-6d2abc38cc24",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "05dc93bb-cbd7-4e71-a973-13cc48b4b895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6292d7dd-90a1-4010-bb7d-832b264b8edd",
        "cursor": {
          "ref": "9cb049f9-a10b-46d7-a3d5-b2648c9c1464",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8bb6f9e0-cf45-4d4c-8b52-827dd760ae6f"
        },
        "item": {
          "id": "6292d7dd-90a1-4010-bb7d-832b264b8edd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "05164760-9172-4cd5-b501-f373f8a5ceb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a08f9729-07a3-498b-9358-472fd24a3578",
        "cursor": {
          "ref": "489b4849-55f7-4bbe-b006-2116452759d6",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9e1b815d-5eaf-4b64-b088-da17a1003da1"
        },
        "item": {
          "id": "a08f9729-07a3-498b-9358-472fd24a3578",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4d9f3710-95ad-47de-8d8d-4fae6327ae2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46efa11-4005-4e8a-a2c2-d7bbaff81091",
        "cursor": {
          "ref": "d5cc101b-52bc-4c87-bfb7-7272bd3b0569",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "03ebe6d5-6ff6-461c-9fe5-b553b249dcb5"
        },
        "item": {
          "id": "f46efa11-4005-4e8a-a2c2-d7bbaff81091",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "afb8fdba-9567-4fb7-8d68-d352e49849cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e668cc02-5dc8-4fba-a45c-9894f6d43c5f",
        "cursor": {
          "ref": "94c2bbc6-f331-4879-9290-b3a18ac2986f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "dbed1ad9-b977-4308-82b6-2ca69f4a1d87"
        },
        "item": {
          "id": "e668cc02-5dc8-4fba-a45c-9894f6d43c5f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a2c975a0-6342-4a0f-8517-915591e447df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d7d8f7-4005-4f6e-b4db-6c4eab5dcf62",
        "cursor": {
          "ref": "0b61352d-7987-44f0-ac0f-ebe7758eeed7",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "78a2d732-9a9d-4c99-acad-d7af5c1a3e2b"
        },
        "item": {
          "id": "b8d7d8f7-4005-4f6e-b4db-6c4eab5dcf62",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9bd8dbf9-b086-4c87-a6db-539d56a3a393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c558ba-92e4-40af-940e-f251b2a8d5f5",
        "cursor": {
          "ref": "2b040d93-5559-420c-a5dc-57bb5074833a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a0d94cbf-5266-405a-b766-78191f45888c"
        },
        "item": {
          "id": "25c558ba-92e4-40af-940e-f251b2a8d5f5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6fc9a363-0435-48f1-b944-2c81822e9322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7eac21-f9c6-44df-a722-0b7ba1e49b78",
        "cursor": {
          "ref": "f113ecd8-b6b3-41b4-9dc0-2387cf2d86dc",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "29f645cd-a2ef-468f-b664-b4af63a585e7"
        },
        "item": {
          "id": "cd7eac21-f9c6-44df-a722-0b7ba1e49b78",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5e146f11-eb38-4fb9-b6a3-d72562df1607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b56c1d-6d01-48cd-b53d-b3079b01e245",
        "cursor": {
          "ref": "d64d222f-3d21-4686-a46e-f7b171d63235",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b5150baa-3a05-485c-a7a0-7a5abd71d782"
        },
        "item": {
          "id": "f9b56c1d-6d01-48cd-b53d-b3079b01e245",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "59eb8cd4-4a3e-4b84-be50-150042f19b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4e8ae6-ad77-4df2-9e30-5f8f878aa602",
        "cursor": {
          "ref": "e6f11b73-945c-4512-8374-94565218ecb8",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d4b5825e-98cd-4636-9265-12b26970ba10"
        },
        "item": {
          "id": "aa4e8ae6-ad77-4df2-9e30-5f8f878aa602",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "54b15ed1-2fdc-4292-bcdf-9b469c3b3bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce3a8c1-5d41-4e3b-8e8c-f1836288aca8",
        "cursor": {
          "ref": "ad8f2066-5ec6-45f5-b999-0e99c8af88e5",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bdc1f964-16b4-495e-8e4a-ca233402dbbb"
        },
        "item": {
          "id": "8ce3a8c1-5d41-4e3b-8e8c-f1836288aca8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8ed545ef-8859-4a89-9b06-d5bbefbe8407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8501f4-751c-4b8e-883e-2001a2d03b6d",
        "cursor": {
          "ref": "6eb82056-a202-4d63-994e-f4fe86e27a28",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f3219362-c61f-4a86-9124-03d4b2551b75"
        },
        "item": {
          "id": "ca8501f4-751c-4b8e-883e-2001a2d03b6d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "306accb9-4513-4b7c-8140-f47047322aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9090159-f6d7-442f-bd74-4c040ab6fb3f",
        "cursor": {
          "ref": "684fa1d4-ae0b-46fd-abe5-0fe365e1481c",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e8d324f7-d579-40f5-b602-e3c5254961df"
        },
        "item": {
          "id": "f9090159-f6d7-442f-bd74-4c040ab6fb3f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7da1dbd1-3510-4fcb-b452-a69a453c3fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf6caa79-529d-4c9c-9edd-8189800f5347",
        "cursor": {
          "ref": "5f2f8f13-62fd-4086-babb-1ff977ff336b",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "34ff7018-3380-4554-a0d6-6768923d545a"
        },
        "item": {
          "id": "bf6caa79-529d-4c9c-9edd-8189800f5347",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "33609eeb-3304-46cd-bb78-f74b80235581",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "04cd7309-2f11-45e9-9a43-5c05d1b5dc6b",
        "cursor": {
          "ref": "089e55ad-073c-4c7c-9edc-fc19bd9401a5",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ccf786ba-a658-48dd-b125-f384a9b42919"
        },
        "item": {
          "id": "04cd7309-2f11-45e9-9a43-5c05d1b5dc6b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ee578036-fde2-4803-af10-4625c2f629e2",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "19139d47-e80b-4b15-8aaf-29e43b11bc8e",
        "cursor": {
          "ref": "2be593e3-564c-4d3a-b98a-6e7b8b45ed9c",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "96f4f4f6-b23c-48cb-a4bc-88d1a288dc83"
        },
        "item": {
          "id": "19139d47-e80b-4b15-8aaf-29e43b11bc8e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ca9394af-921a-4e5e-9573-ee19aed48803",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ac19bf05-e799-4af0-8807-e072c98cb2a2",
        "cursor": {
          "ref": "6c913aa8-5143-4fa9-9344-cdafd3891ce9",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6953d20b-4480-4aae-ac81-3e1aeba3b8d1"
        },
        "item": {
          "id": "ac19bf05-e799-4af0-8807-e072c98cb2a2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5b6b4cb9-91ae-4f66-b7c2-d608c09050f0",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "74317092-88b4-4eed-a7de-7fec19be92df",
        "cursor": {
          "ref": "04f95e22-ec64-493f-994d-af8a73d2c63b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5c762799-df97-49a9-8856-a11b41f37c50"
        },
        "item": {
          "id": "74317092-88b4-4eed-a7de-7fec19be92df",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6badc9fd-25d2-457c-9f61-1977a300e757",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a7b7d259-2831-403d-801d-45fd12e55903",
        "cursor": {
          "ref": "e9b849af-9e15-4b92-96d1-2e8b9f698251",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0954ee78-090b-4b63-b6d7-3251af5cf4e7"
        },
        "item": {
          "id": "a7b7d259-2831-403d-801d-45fd12e55903",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "91a298b2-c1f0-4842-bd89-795dbb28971c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f95faf-b7e9-4dfd-8001-e5e77e2ab6a6",
        "cursor": {
          "ref": "4b587bea-bb82-480d-a76e-81ccaf19d220",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "da6638e6-d077-47f3-a0a1-db1c6a946a2a"
        },
        "item": {
          "id": "b3f95faf-b7e9-4dfd-8001-e5e77e2ab6a6",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "88b1fac0-e51b-4957-8453-1dc9311581bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b843da87-c365-4819-b939-a92ada0c3b7f",
        "cursor": {
          "ref": "d252007d-7b78-41d6-a85f-51607953ed27",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "96af60d1-01f0-4bf5-a9d9-028295155e9c"
        },
        "item": {
          "id": "b843da87-c365-4819-b939-a92ada0c3b7f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f6e73d3f-0405-4b6b-a36d-66fe0106b576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a740b3e4-294d-4689-a716-c9ae8fe82ff8",
        "cursor": {
          "ref": "3cd9e947-4c1a-4901-8310-a9f57e587312",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f33dadb4-ef00-4a35-a6fd-dc252413fe55"
        },
        "item": {
          "id": "a740b3e4-294d-4689-a716-c9ae8fe82ff8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8590359b-d058-4c8d-9f8f-50d3aad6fa34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a6f7e2-a55a-4d42-b320-817bd0586e0c",
        "cursor": {
          "ref": "bcfaf069-10f9-4d90-9691-691a9b7e25f2",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "554e0ffa-36b4-4eba-a113-79996834113c"
        },
        "item": {
          "id": "23a6f7e2-a55a-4d42-b320-817bd0586e0c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9cc75bf3-2f07-4529-8276-b4975824e690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0338d06-e2fa-47a6-b087-d341db668d8d",
        "cursor": {
          "ref": "6e9bfe96-cab7-4879-80c5-8ca959ca9453",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "26628fc7-1a3c-4ebd-b3ac-ad08f8abedf2"
        },
        "item": {
          "id": "f0338d06-e2fa-47a6-b087-d341db668d8d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "94ff90c9-63b0-4c72-a4f8-63c9f9c8e250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5119711f-3ed6-4cc0-a3ef-52f8ae7a04e3",
        "cursor": {
          "ref": "b778c512-68f5-4810-abbc-87102258966b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bf4c3925-5c51-4b29-9d76-3bdb77b93f37"
        },
        "item": {
          "id": "5119711f-3ed6-4cc0-a3ef-52f8ae7a04e3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c1abf542-bd21-4428-8602-75ee03a583a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69adb7b9-0d60-410d-a0e1-700c0c144a89",
        "cursor": {
          "ref": "802921b6-c92c-421d-9c88-d42ac5ba230d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c67d4dd5-c9e7-4bd8-a30e-313785d203e3"
        },
        "item": {
          "id": "69adb7b9-0d60-410d-a0e1-700c0c144a89",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1b55fe8b-15d5-426b-96f8-bd9caf0f54ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35cdd475-c3f2-48fb-8c18-a1a28b1167bb",
        "cursor": {
          "ref": "37bf6c3c-d23b-4d98-a32c-6e97d5edcf4f",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2148341d-3bcd-433b-8e6b-98f45c23fa65"
        },
        "item": {
          "id": "35cdd475-c3f2-48fb-8c18-a1a28b1167bb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d7ea291a-d48a-4feb-9c63-f3c14e252043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9f7bde-b292-4a52-95b5-6e1af9614e87",
        "cursor": {
          "ref": "63995ee8-ae24-413e-9107-b499b2b318c3",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "561d19ac-8b80-4b67-a6c5-010fb301aab9"
        },
        "item": {
          "id": "2a9f7bde-b292-4a52-95b5-6e1af9614e87",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7ae4af2d-637d-41eb-a4fa-14d6771b2454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61108dd3-2bac-4dc2-bd64-73aea18895a9",
        "cursor": {
          "ref": "89b6f686-7421-4550-a56c-1b9b2f0ebf20",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6f44b93a-efdb-40f4-84e9-8bc56dd57f70"
        },
        "item": {
          "id": "61108dd3-2bac-4dc2-bd64-73aea18895a9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "79e872b0-6b4c-44cc-a198-2d99f39d7b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84850e5c-2657-4013-8c75-1b3a8aed763e",
        "cursor": {
          "ref": "f29b08dc-4f1b-4fa8-8923-58013641c783",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5ebeb42d-6b78-4164-b594-0d43b6a3965d"
        },
        "item": {
          "id": "84850e5c-2657-4013-8c75-1b3a8aed763e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "df880af0-aadb-429c-837f-f25def76bd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0684e6c7-674b-4223-9739-70a5f0dfc11b",
        "cursor": {
          "ref": "672a32af-1ed1-48fb-81bf-0caf8a8258e6",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9551ef2e-9964-4fde-af58-756350929973"
        },
        "item": {
          "id": "0684e6c7-674b-4223-9739-70a5f0dfc11b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "520db37d-63ec-43db-a881-3ef42434136e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534a76b0-b4fb-439c-8b4c-44fbba8d665c",
        "cursor": {
          "ref": "65e1d517-4684-4069-b7fd-363165e54efa",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5812b782-0ce5-4b3b-bc54-371f8aeec7b9"
        },
        "item": {
          "id": "534a76b0-b4fb-439c-8b4c-44fbba8d665c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ae2a8499-a910-4c69-b842-809ed2f21f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458d0860-2684-499f-a33a-1effbea3f513",
        "cursor": {
          "ref": "42fdee5e-a694-4fe5-ae3b-eb59721d3e47",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0ddd8496-b3c6-4734-9575-4ff935d2badd"
        },
        "item": {
          "id": "458d0860-2684-499f-a33a-1effbea3f513",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ea0d7eb3-5893-4dd0-b30f-4f2289ea29fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9793fc07-f3a4-403b-8bd9-52e338a1b9fe",
        "cursor": {
          "ref": "f9dcef67-69ef-4ffb-a546-e5e24c3b31af",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c6785217-72c3-424a-9474-443bb06a6e0f"
        },
        "item": {
          "id": "9793fc07-f3a4-403b-8bd9-52e338a1b9fe",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b7c605bf-1ed4-4174-8a3c-6f3b6ada3333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7706a1e1-ce60-4902-b449-3624d73493ed",
        "cursor": {
          "ref": "6cd117d7-348b-4134-8dea-ce61bdfa40f8",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "14fd3b8e-fc4a-4b3d-b164-1efbbaacaf28"
        },
        "item": {
          "id": "7706a1e1-ce60-4902-b449-3624d73493ed",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a8fef635-ab9f-4b2b-bf94-d6ba151d171a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60294d62-4b29-4fac-bd57-d7b4d121888f",
        "cursor": {
          "ref": "b5025422-dff1-4715-aa25-7f6b2d217b60",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "99ed8c58-04f5-4d75-a29e-bed40b1a1ebc"
        },
        "item": {
          "id": "60294d62-4b29-4fac-bd57-d7b4d121888f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f61b5d8f-1619-4a04-a7e6-bca3e52f8a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a2dd8c-4bbc-4455-9017-6f1b3d7a02e8",
        "cursor": {
          "ref": "42f42775-552e-44ed-a9e1-d327e4188266",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7a144483-840d-44e2-8b79-f2ffa26e2eae"
        },
        "item": {
          "id": "88a2dd8c-4bbc-4455-9017-6f1b3d7a02e8",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "11c880a9-f6b0-443e-a514-e18d3428bcd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6a35b4-1950-4332-8ecc-35a2a7e73196",
        "cursor": {
          "ref": "24c49367-7610-4aed-b7a7-695f069ea912",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a1e6ee9b-9372-4c6f-8235-731a4d019537"
        },
        "item": {
          "id": "9e6a35b4-1950-4332-8ecc-35a2a7e73196",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "df362fee-4043-47d2-9314-1e7b9fd86270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4844ac-5267-4d2d-bdb2-a8af84dfd840",
        "cursor": {
          "ref": "1c633e04-710a-4118-a0af-9f9f260b67e4",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6325944d-5698-4e6a-bd69-a8fcfdffa12c"
        },
        "item": {
          "id": "ae4844ac-5267-4d2d-bdb2-a8af84dfd840",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "292b5e44-d45f-4825-a772-f2eb35d99b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "decccd66-7330-48ef-9b33-b07520094b99",
        "cursor": {
          "ref": "4d2c8dc3-bea8-4bc3-84dd-20bbc5b34645",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c115548c-38e5-4234-afdd-813fd3bbac2c"
        },
        "item": {
          "id": "decccd66-7330-48ef-9b33-b07520094b99",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7a231a72-4e34-4b1e-8022-39ab8174e44f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a377a4a-4b85-428d-acdc-d2e122a9fccd",
        "cursor": {
          "ref": "d63cea01-5f27-4dc0-8364-84d9a22018ea",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0c14e5fa-4a60-4181-986f-c39de73ab50b"
        },
        "item": {
          "id": "2a377a4a-4b85-428d-acdc-d2e122a9fccd",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4c3d244f-c340-4bba-acf3-64d5c0e4e392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5326ea51-9c83-40c5-88fc-e405189d0590",
        "cursor": {
          "ref": "4595ab68-7c6f-4d48-894b-5a4d6e9a1c84",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0df24613-5dfb-4c16-921a-398d6bdccf4b"
        },
        "item": {
          "id": "5326ea51-9c83-40c5-88fc-e405189d0590",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d29680b3-2946-4b85-a8bd-e2331c43c803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c75b80-f7e9-4e5f-9fcc-7a14350ea50a",
        "cursor": {
          "ref": "dd5d11fa-ab4d-4486-afd0-c378da59ce59",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "25828f67-8ce2-48a0-96b5-3d1bc3181f6a"
        },
        "item": {
          "id": "66c75b80-f7e9-4e5f-9fcc-7a14350ea50a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4cf59151-50f0-49f9-a2f9-e69255441208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea749d9c-6fc3-4f9e-8a13-0c0f35d13dce",
        "cursor": {
          "ref": "9e70b2e2-161c-4477-aeb2-e50122ae954a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "048fa84e-1cf8-4652-a57e-0b34a375217c"
        },
        "item": {
          "id": "ea749d9c-6fc3-4f9e-8a13-0c0f35d13dce",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e71201e3-6fe6-48e1-b86b-34ddc8adafc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407d7a51-f2f2-488a-bb07-4496bd5132fc",
        "cursor": {
          "ref": "e6d28c2f-5b6c-41bf-ac74-520144a38cdc",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3a5da3ea-51cc-4244-8366-041331592e78"
        },
        "item": {
          "id": "407d7a51-f2f2-488a-bb07-4496bd5132fc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ed86adab-eec9-4445-b9ec-00ce59f73d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8958a376-012f-43dd-b324-74d26a51985c",
        "cursor": {
          "ref": "e4c7a359-1b69-4a5f-8274-4be824a0ad42",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "afd0b86f-d60e-43d0-a922-a6e01e114844"
        },
        "item": {
          "id": "8958a376-012f-43dd-b324-74d26a51985c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d93318e2-025f-4583-90d9-31264337ffb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9c7c61-115a-4f46-943c-c7d1b3810c66",
        "cursor": {
          "ref": "f45dab2b-5fcb-4cde-96f0-0ccfdb033725",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bf13aa37-c2ed-4a7b-94cf-b21f4f869344"
        },
        "item": {
          "id": "3f9c7c61-115a-4f46-943c-c7d1b3810c66",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "fa15558c-b1d7-4847-a135-cec088c739e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8752d384-7d74-4fbe-afe4-4f4688c2bc35",
        "cursor": {
          "ref": "bfb0da9b-3bf2-436d-b1dc-5c94fc922a63",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7c36f6dd-341b-422b-8756-cdfa139fa605"
        },
        "item": {
          "id": "8752d384-7d74-4fbe-afe4-4f4688c2bc35",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ce145af0-d05c-410f-bbd8-59a908aa327f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0f233d-3af5-4fd4-9ea2-9423e0e871a0",
        "cursor": {
          "ref": "1b8345b3-f93b-40db-b9ed-292b0ff3295c",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6a6adccb-b83b-4bdf-870c-51c33b83ebc1"
        },
        "item": {
          "id": "1a0f233d-3af5-4fd4-9ea2-9423e0e871a0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "069139cd-921a-4967-8662-ba3dc9862daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12c6d92-d80a-4817-88ab-5320dcd74b42",
        "cursor": {
          "ref": "0d80e6cc-abe0-4ec8-a368-2e3e0ffb1907",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7314d2cf-ecbe-4bbc-97e6-4082f5e59a37"
        },
        "item": {
          "id": "b12c6d92-d80a-4817-88ab-5320dcd74b42",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "664d5723-1595-4ba0-bfa1-ab4db60521a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a27e320-ff9c-45a2-8529-40e9d933bc37",
        "cursor": {
          "ref": "a092af06-1c6f-498b-8cf7-8683e9e398d8",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7ff19de3-fd6d-4811-aee4-8ffa1b949a3b"
        },
        "item": {
          "id": "6a27e320-ff9c-45a2-8529-40e9d933bc37",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d722c5be-6b2f-411c-81ec-a0027646b47f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "542f927c-1279-4414-8f8c-46b549376f11",
        "cursor": {
          "ref": "649da42b-af8a-4649-b96b-71da269c7e66",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f65e837d-2121-4ea7-870a-f94c03cdcf04"
        },
        "item": {
          "id": "542f927c-1279-4414-8f8c-46b549376f11",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0761fcfa-d038-423a-b8db-9b724bba67ed",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7fbb33-66fd-4f59-80e3-fc75dacbeb72",
        "cursor": {
          "ref": "37099ab8-e5f5-4085-9f49-5b270fbbe095",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "805e22bd-0fb2-4330-ad70-5f8d3d2ef157"
        },
        "item": {
          "id": "fe7fbb33-66fd-4f59-80e3-fc75dacbeb72",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7972a7fc-97a0-46c3-9ff7-7eeba779602d",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "942a2467-d60b-419b-9e5e-2f159b3c848d",
        "cursor": {
          "ref": "bbc97594-4ff0-4194-91d8-fabb2ee0f4a6",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b8f2aebc-f5e4-4fc2-8d9e-86d8eeb54976"
        },
        "item": {
          "id": "942a2467-d60b-419b-9e5e-2f159b3c848d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3aa82021-3b79-473c-a2ca-d78ed1e09991",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b6f204-02f2-4058-8d71-fec20bb4ed72",
        "cursor": {
          "ref": "d0ba890e-0c00-438f-a06b-0fee402b2eba",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f7ed5056-47fc-41bc-a294-177094e9ceb4"
        },
        "item": {
          "id": "93b6f204-02f2-4058-8d71-fec20bb4ed72",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "990bef54-468f-4eda-9cd9-5b83702b6f69",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b291f2-047e-4864-9148-4eafd23333de",
        "cursor": {
          "ref": "32650e96-5bb0-4c7f-9381-a979d3ab5ed2",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bc57ba65-de01-4f48-b424-b57c5c83c8c7"
        },
        "item": {
          "id": "a7b291f2-047e-4864-9148-4eafd23333de",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fa8f16a3-4da8-48f6-a193-d99d53a0528e",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-20T00:36:17.789Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-20T00:36:17.789Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "30eff838-3d88-41dd-b404-d0bac7134bb0",
        "cursor": {
          "ref": "2b5f879a-30b7-4bcb-97b2-d2b35a6a2e61",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "01fcfb36-a6bb-43a3-a1a3-048b278853cc"
        },
        "item": {
          "id": "30eff838-3d88-41dd-b404-d0bac7134bb0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a2c545f1-9d52-4f75-a11f-dc49bf1d8969",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a707876e-22f4-4477-af7a-950361747355",
        "cursor": {
          "ref": "99b4a273-bbfa-4b28-950a-42b28fe43c4c",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "248d0a37-1a15-4878-8f4e-c675e8697ad1"
        },
        "item": {
          "id": "a707876e-22f4-4477-af7a-950361747355",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7ba20d9e-18d4-40c4-a006-d9eee21eda0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358dbea5-01a6-49b2-ac12-5e0acdac8d0f",
        "cursor": {
          "ref": "f61a5317-42f8-4e97-b044-f5a4c80a296a",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d544047e-ec72-4765-8e24-7ac765d9b5e2"
        },
        "item": {
          "id": "358dbea5-01a6-49b2-ac12-5e0acdac8d0f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "13befdd4-88a5-407b-a449-c1bb2ec0ca5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b688142d-1f82-45e4-827b-fc854f2d4daf",
        "cursor": {
          "ref": "7c0f7ccf-e92b-4590-b483-701d11952f67",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "67d4c9fc-cae9-4fc9-bd6a-4a97769c0fc9"
        },
        "item": {
          "id": "b688142d-1f82-45e4-827b-fc854f2d4daf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "706e0dd8-010f-4259-894a-44a764a2efec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11b898a-7cf9-4571-821d-8c2d0eb21733",
        "cursor": {
          "ref": "92086ef7-2697-4f79-9712-8dcd292f9556",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6f91f690-5f1d-4ad0-891f-00fd5cdb0902"
        },
        "item": {
          "id": "a11b898a-7cf9-4571-821d-8c2d0eb21733",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f08278eb-80bb-4298-aab9-1066536c9530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4693eab1-e821-4a37-a2f9-7561b21105a9",
        "cursor": {
          "ref": "aded581d-b12d-499e-9188-fb315e096484",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "234e5894-46fd-494d-ad44-6da6209ad70f"
        },
        "item": {
          "id": "4693eab1-e821-4a37-a2f9-7561b21105a9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "02b10251-c5b2-43cc-a4a4-d4a260960aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2e313f-b0c9-4597-84ec-72d3e26b024e",
        "cursor": {
          "ref": "67329487-e548-4f0d-9cf2-037621e4e2e6",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a5f3aab9-8cad-4699-be0d-cde5f03ef7dc"
        },
        "item": {
          "id": "8b2e313f-b0c9-4597-84ec-72d3e26b024e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ff32f357-846a-4539-b172-9b47ab6005c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5937f093-7a66-4614-9423-19b6796106f9",
        "cursor": {
          "ref": "b9cdefca-787a-4f3e-a6ed-d876d38edc76",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "89876d04-8cb3-47ec-a316-833b38556dce"
        },
        "item": {
          "id": "5937f093-7a66-4614-9423-19b6796106f9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8dc7df3c-d0b3-45cd-93fa-e5631159bc8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee4bc6f-1cca-425d-b1ea-c81fa7e5a49f",
        "cursor": {
          "ref": "f18a079f-397b-4a10-b223-b3338033b851",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4f86b669-e3af-453c-b31a-846bb046f7e9"
        },
        "item": {
          "id": "3ee4bc6f-1cca-425d-b1ea-c81fa7e5a49f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3466172f-9598-487b-8f60-6fa94f30670b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd00a09-964b-4897-84d4-87133790cb44",
        "cursor": {
          "ref": "88de5901-1c64-41d1-8da5-ae7c0ca2f5d6",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7b5bb11f-03f5-4cd2-907f-32f7b4763729"
        },
        "item": {
          "id": "0bd00a09-964b-4897-84d4-87133790cb44",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "699eda2e-621c-480d-a83c-698ed192a850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c636003e-7420-4057-832f-2e632edd2985",
        "cursor": {
          "ref": "cd5ce7ea-09ae-4c0f-bc4e-334a6d9141c0",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "24cb40bb-6f7b-4b82-ae6e-a4af814c4cd2"
        },
        "item": {
          "id": "c636003e-7420-4057-832f-2e632edd2985",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c98483f8-8a9b-4071-92b5-21720532ac91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20df3957-ef53-4e82-8a00-4ea6a0ebed63",
        "cursor": {
          "ref": "69196444-dd50-437c-bfe1-a2f5bc7d7337",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "be978a8a-33cd-417f-8b92-be93df392358"
        },
        "item": {
          "id": "20df3957-ef53-4e82-8a00-4ea6a0ebed63",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4d65d5fd-c05e-42bf-ac51-c67911901a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470f4082-8bf7-4812-8159-a88587c11b47",
        "cursor": {
          "ref": "198be650-9b86-4e16-bc5d-55472e007601",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2e3ce8bb-c934-472b-ac07-530232ce36b5"
        },
        "item": {
          "id": "470f4082-8bf7-4812-8159-a88587c11b47",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "45b7c04a-ec3e-4eb5-b956-ebe19eb6e6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69a572c-2175-407f-8ff9-0637f92ccc59",
        "cursor": {
          "ref": "b4a767e1-41b7-4a85-a203-b7e47572f7f7",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "00f7827f-106a-4249-9402-13527d25c9f3"
        },
        "item": {
          "id": "f69a572c-2175-407f-8ff9-0637f92ccc59",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "406deee2-330b-4ca9-b1e8-4ca816cbaa61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 137,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f7b2bfac-5fb2-43f6-a38f-7831575cbc09",
        "cursor": {
          "ref": "9c753be5-1959-45fa-92f6-100d26e2f9c8",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "550b44a6-d7f3-4bf0-b400-c6bc3b35716c"
        },
        "item": {
          "id": "f7b2bfac-5fb2-43f6-a38f-7831575cbc09",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "943fa110-4234-4d1f-8b75-0f5f3db9bfe7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 144,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "57a7d80d-e38f-4915-8a9c-73662fc0516b",
        "cursor": {
          "ref": "f65bea32-b32d-4345-ac55-173c34aa3569",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "980bec1a-abb5-4746-b836-7cee28b4523a"
        },
        "item": {
          "id": "57a7d80d-e38f-4915-8a9c-73662fc0516b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9efe2b8a-c63e-41cf-b685-46c2756272b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad57660-3790-4e1c-af40-6670844e5991",
        "cursor": {
          "ref": "613811b1-4def-4a35-af26-9822b23195d0",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0ddf3354-3620-4d21-94bb-676094318166"
        },
        "item": {
          "id": "fad57660-3790-4e1c-af40-6670844e5991",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a50ccab2-43fc-40cf-ba56-ba6c61b2be2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86950cf-0567-4f1a-b529-d230bf0064f0",
        "cursor": {
          "ref": "36ed6dae-dfea-4d35-94d4-e674b92cc7f2",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b76d3c32-e042-4d67-8a52-063fcb4fa7bb"
        },
        "item": {
          "id": "c86950cf-0567-4f1a-b529-d230bf0064f0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2f2571f1-a59f-47a8-9e8f-74646de7b289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49915fb7-3b98-4245-b0ee-79053b2536f1",
        "cursor": {
          "ref": "bcb10f48-5631-4f85-866e-f3ade31a73f9",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7d6e35c3-7b0d-4987-b673-36d18330be61"
        },
        "item": {
          "id": "49915fb7-3b98-4245-b0ee-79053b2536f1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b8fcd350-1559-4f2b-8e74-cfabf670f1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f98dd5-c1bc-4a13-a730-1a081be979eb",
        "cursor": {
          "ref": "d8d11f66-034a-458b-afe4-1c66076dc044",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "eb01dfa4-1f76-4a71-b2b5-91fb6591fbbe"
        },
        "item": {
          "id": "a9f98dd5-c1bc-4a13-a730-1a081be979eb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5af827d0-0fa7-4941-8b90-e6e6c89a6626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55744419-4e87-487a-ba58-4a3ab29976b5",
        "cursor": {
          "ref": "52637624-fcb4-473d-9332-d38b061e8eee",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2f9b081b-3e72-4f72-8f23-fe36aaa22b9c"
        },
        "item": {
          "id": "55744419-4e87-487a-ba58-4a3ab29976b5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cb445ce9-f6a0-4fe6-a123-20c41b4c45a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1d2341-f564-464a-b4de-eccdb26ff2c0",
        "cursor": {
          "ref": "e20e1de4-9ea6-47e9-bb00-881ff79adc3e",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "72445399-e3c0-48b0-9d3c-9aeb99c14430"
        },
        "item": {
          "id": "2c1d2341-f564-464a-b4de-eccdb26ff2c0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0c839ce4-75d6-41cc-8df9-a3069678f24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba01294e-07a5-4a77-afa9-86dac147587e",
        "cursor": {
          "ref": "c33be581-09f8-47a6-8f5f-d9b7f64402ca",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cb877667-36b6-42ef-9cdc-db7753e6620f"
        },
        "item": {
          "id": "ba01294e-07a5-4a77-afa9-86dac147587e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "79993097-75e2-460c-90da-33fb8f987c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c79f9b5-692a-469b-8c1c-2c88aca23967",
        "cursor": {
          "ref": "559a5b87-0da4-4c64-a495-b2d8744b059c",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "91654879-b15e-4ba1-b905-0848868717bb"
        },
        "item": {
          "id": "2c79f9b5-692a-469b-8c1c-2c88aca23967",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "03142e16-a7ce-470f-833c-a94dde8e10bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d82831e-5266-47ef-aeef-dac49b205298",
        "cursor": {
          "ref": "5f81f788-2180-4fa2-8da8-c5a8d7297563",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "57780fb2-87c2-4089-9db1-c0fd079a39c6"
        },
        "item": {
          "id": "0d82831e-5266-47ef-aeef-dac49b205298",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b8e261d7-e31b-4c18-a287-af868d8994e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1e1ec3-0c47-4a5f-813f-ab74b6d21474",
        "cursor": {
          "ref": "34075c9a-cba7-469b-8a12-5690cb2661f5",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b35cfd82-d889-43fb-8c5e-5f82be6b2327"
        },
        "item": {
          "id": "bd1e1ec3-0c47-4a5f-813f-ab74b6d21474",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8242dd6b-b984-4ec7-a8c5-4af8840104d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e6518e-e054-4285-bb17-8d1eef3bf36a",
        "cursor": {
          "ref": "fe88751d-1545-48a7-a442-41f02336ba70",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "959d59b0-88f2-4d1e-88ff-7fec4e7f0a2d"
        },
        "item": {
          "id": "59e6518e-e054-4285-bb17-8d1eef3bf36a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "26a07f6e-a33a-4e5c-bb46-70bf6816e914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978979a9-e45c-4bda-95e9-8fbf8524102f",
        "cursor": {
          "ref": "04300b7e-d845-4a10-af4b-096e9a22c5de",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "61f4fb79-9552-4326-a493-4d287a56a4ef"
        },
        "item": {
          "id": "978979a9-e45c-4bda-95e9-8fbf8524102f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "450eeeb7-ac35-4670-8654-945424cffe65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636b6605-2618-4f3b-a5ab-d3a7047a565e",
        "cursor": {
          "ref": "cd5aebc0-4095-46ff-8f7d-49b92e54a2dc",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ef5feec2-7146-436d-a7ac-7723e3fd2ff5"
        },
        "item": {
          "id": "636b6605-2618-4f3b-a5ab-d3a7047a565e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "313507c9-8cae-4a72-abed-8b7696c38f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c775ea6-f74c-4068-bf2f-3f70e122256b",
        "cursor": {
          "ref": "b68a034d-8124-49f1-a1c2-5c3c30cc3fe8",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "29189c29-d5af-40b3-be55-c111cec7eac3"
        },
        "item": {
          "id": "1c775ea6-f74c-4068-bf2f-3f70e122256b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "06da0ca2-7059-418d-b91e-ff4678ebc320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dff80e4-0dc9-4248-8543-f07a47343d6e",
        "cursor": {
          "ref": "fa39aa87-7bfc-4886-bf63-2b04350eb764",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "bb5e85d4-474b-4a38-8d0f-a534cf4fd472"
        },
        "item": {
          "id": "5dff80e4-0dc9-4248-8543-f07a47343d6e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e0c294d0-2398-499d-acca-4fcf51565222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e694dee7-1312-4cd6-acfa-89fc53bef366",
        "cursor": {
          "ref": "4750b719-9fd4-4227-b7ff-ff729ed01cc6",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ac1436a9-bf84-484c-b5d0-64d242a212d5"
        },
        "item": {
          "id": "e694dee7-1312-4cd6-acfa-89fc53bef366",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "479b4ef9-b116-4a7d-8bef-b5ac8508f54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c37df5-96bc-4876-a4a2-ae51656bbf03",
        "cursor": {
          "ref": "23fa7346-f9ea-4d46-89e9-1ea08a70e970",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9bbc7f2b-083a-42df-9a89-39796464840a"
        },
        "item": {
          "id": "f9c37df5-96bc-4876-a4a2-ae51656bbf03",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f75f42e8-bf71-4d00-81a2-106eb2e7a98b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 137,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "dea82c35-1bd2-4bc3-9167-cf1b1ea0bad8",
        "cursor": {
          "ref": "c92288f4-d6a8-409c-ba0b-a0743d579f39",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4d371a8e-cc73-4058-9501-7561fd133baa"
        },
        "item": {
          "id": "dea82c35-1bd2-4bc3-9167-cf1b1ea0bad8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "14064f1e-8e23-44f6-85d9-7496ca8eeeab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08779939-a69f-4e60-8684-d73be059b521",
        "cursor": {
          "ref": "540261b8-3dba-4e78-abb7-0b3ee4520732",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ba7b3d94-97c2-41c4-9309-882b925a8f66"
        },
        "item": {
          "id": "08779939-a69f-4e60-8684-d73be059b521",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "de92a860-8c91-4dac-8610-274d0753dbda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e57e30-ecd0-43d7-b243-f90d765420ed",
        "cursor": {
          "ref": "0c0a8795-66e2-43bd-8b20-82c7eb5006e4",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "980018ee-295b-4ce2-9fbd-fad2b6c323b9"
        },
        "item": {
          "id": "83e57e30-ecd0-43d7-b243-f90d765420ed",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "780fe425-54ae-4a4c-89ee-d79da11fb16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2aa9eda-e9ea-439f-8b00-c05ab530a765",
        "cursor": {
          "ref": "baa19b16-e2c7-4013-ba3a-550e9243adf5",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "be8d11a8-2909-4028-a701-e9bad14477b7"
        },
        "item": {
          "id": "c2aa9eda-e9ea-439f-8b00-c05ab530a765",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "eabe839c-6156-4776-b5c4-2e481fa8fe1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab72f1f-890c-4b9c-ba45-08552d8d603c",
        "cursor": {
          "ref": "5c663ad0-df05-4c6e-8460-adc1166241c6",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2d28099b-dfbb-4062-bac5-dadd110eecb0"
        },
        "item": {
          "id": "eab72f1f-890c-4b9c-ba45-08552d8d603c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "781bb930-0e2c-43fe-86ac-071b6d997da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36049d99-6093-41b1-83a2-17d4ad21da64",
        "cursor": {
          "ref": "99fe4582-99a5-46a9-b6cf-67a96dde14f8",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c88dc50d-42d1-42d6-ac8a-040adbd40b05"
        },
        "item": {
          "id": "36049d99-6093-41b1-83a2-17d4ad21da64",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5d600a50-4188-4e34-a911-51454396426e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48505c1d-45aa-459a-94f7-c4145977a169",
        "cursor": {
          "ref": "7f34bdee-a554-4609-977c-510dbb74dc1e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bdaa5c8c-1279-40bd-af6a-158675a46f74"
        },
        "item": {
          "id": "48505c1d-45aa-459a-94f7-c4145977a169",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b06df26a-14fc-41d8-acc1-06444db7ccc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79da6d88-ca9a-4a4c-aaaa-44c7914fc6d2",
        "cursor": {
          "ref": "7e9544a7-f4d3-49e0-8b75-5999f9a8b9a0",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e60ffb41-f050-4e13-82d6-b8cfa39d1fbf"
        },
        "item": {
          "id": "79da6d88-ca9a-4a4c-aaaa-44c7914fc6d2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "903e7bd3-5e01-4254-ba97-f2125debbf44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "669b7337-1ba8-45fe-a7ca-36c72a65e502",
        "cursor": {
          "ref": "cc7e8569-1f9b-44db-93fa-464d27e8e89e",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "007fc4ae-b8c0-4422-9f17-993a20ed94f8"
        },
        "item": {
          "id": "669b7337-1ba8-45fe-a7ca-36c72a65e502",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4eea4839-2023-4e62-aedf-88aaba80e871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a76181-6445-4f11-a93e-792474ce8da7",
        "cursor": {
          "ref": "e346b3b1-1cad-4b9c-a796-1a1676651184",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7fa53080-a4d1-49a1-a45b-04602493ded5"
        },
        "item": {
          "id": "a5a76181-6445-4f11-a93e-792474ce8da7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "349b05f2-7c85-480c-9056-9e3905925870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3d4078-7bc7-433f-ae20-034b694630ed",
        "cursor": {
          "ref": "d4728b57-8e91-43f5-bd15-4ab5e81b34c8",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "411861e5-eeec-448c-a068-f181e04a9edb"
        },
        "item": {
          "id": "ca3d4078-7bc7-433f-ae20-034b694630ed",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4360386d-3de8-435f-84c7-d6cee8b5d489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee970745-a25c-4545-a6a5-149d7507bee9",
        "cursor": {
          "ref": "ad96ef2d-4cc8-42b0-ae82-d2e6f22bba3f",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2afe6c43-ec31-4228-951f-c1d443030050"
        },
        "item": {
          "id": "ee970745-a25c-4545-a6a5-149d7507bee9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3dfef127-f605-4fac-8cdc-5cef1daa5b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b21a247-d0f3-47ae-a6a9-08787d23b2e6",
        "cursor": {
          "ref": "c432e8d6-4a1f-4408-b7a8-f558380b9f19",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "25bec866-519a-4b96-a009-10f239420031"
        },
        "item": {
          "id": "7b21a247-d0f3-47ae-a6a9-08787d23b2e6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e958f47b-bfbd-4bd5-af6a-c9fc445ca27f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5ff03f-7621-4f7b-a599-298e876513e0",
        "cursor": {
          "ref": "9160cdb0-eda8-45f1-9f1b-6f70a318a3be",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c7ee1333-3f0b-4341-abf3-63ad46b14cbe"
        },
        "item": {
          "id": "dc5ff03f-7621-4f7b-a599-298e876513e0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1dad6c14-fe8c-450f-b5f1-a4dfa92a7ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3b9bd5-0040-4c3e-8d34-3126741dd0e6",
        "cursor": {
          "ref": "1506ad78-b716-44ae-af88-090771ac11e9",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "be3a5a6b-dc21-4520-a173-88b8bf2cdb09"
        },
        "item": {
          "id": "0f3b9bd5-0040-4c3e-8d34-3126741dd0e6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "52cb6160-ad43-4154-9186-31d065f8dd01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 228,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "8a97de52-a3ec-4fc9-a360-2dc6553333f0",
        "cursor": {
          "ref": "c4af5e38-3c87-4a96-817c-65f3e50b87c1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b6b1eece-e431-4e0d-9c6d-1265fed5b998"
        },
        "item": {
          "id": "8a97de52-a3ec-4fc9-a360-2dc6553333f0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b66d802c-c285-46e6-abc8-4c990dc97aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd92c281-c930-46b1-a8fd-d24b610ba9bb",
        "cursor": {
          "ref": "a1aa1946-ff4c-499a-ab59-ae6acb76fe23",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "189230d6-3b78-47d6-b996-b8faecb42f1c"
        },
        "item": {
          "id": "fd92c281-c930-46b1-a8fd-d24b610ba9bb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "20dbd050-8c54-48c0-a548-5c5ba3fd6a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9696a06-4498-46bb-9d46-83d39ea24616",
        "cursor": {
          "ref": "9e10e49a-8d5b-497b-b502-53f3437c0c88",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "82020ad2-049c-416f-9ed4-f182b726f978"
        },
        "item": {
          "id": "b9696a06-4498-46bb-9d46-83d39ea24616",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "98cbd0bd-4e62-4171-8a87-090fc77632d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af91d32f-a64e-43db-b3f6-9f3fbe8cd6cb",
        "cursor": {
          "ref": "cfbc5b26-6f74-4a7d-a359-014c1fb91f2f",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3eb7a827-e6b4-4fd3-a9d3-fc6e711bd284"
        },
        "item": {
          "id": "af91d32f-a64e-43db-b3f6-9f3fbe8cd6cb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c785ab3f-1b88-4549-8636-07ec8ed8877e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f399aa3-8dba-45e4-9bde-e9c81ca0bb8b",
        "cursor": {
          "ref": "c82a4c5b-6014-4e9d-88bc-869880ba0e89",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "df6306ba-bafd-43e2-9a69-3b6886ccb8e9"
        },
        "item": {
          "id": "6f399aa3-8dba-45e4-9bde-e9c81ca0bb8b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b36dee81-7eb9-4a8a-95f0-3c718a70f6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9abb9ab6-9a4e-49a5-9e2d-baba153866b6",
        "cursor": {
          "ref": "fa9f7763-2a24-4ab1-ada8-45f9ffb6ad6b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6ead3dee-3343-4b04-a415-7e2e1f54e008"
        },
        "item": {
          "id": "9abb9ab6-9a4e-49a5-9e2d-baba153866b6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1af2c476-6d7d-4c34-9c26-babd0d0f6a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082f8591-8650-4d46-ab20-6aa54ad4d294",
        "cursor": {
          "ref": "cda1e9be-5e89-44e3-8831-84de2c80bd62",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "598f3b25-921d-4013-be8d-031316ca022f"
        },
        "item": {
          "id": "082f8591-8650-4d46-ab20-6aa54ad4d294",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c70c0fa0-7f94-43ca-a50b-41d27183df26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290c3c62-9f39-4714-8a89-90baca7ef675",
        "cursor": {
          "ref": "07b40ac5-dc2f-4f04-b35f-cc506afc3172",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "429efb5a-8bb3-43ee-953c-df5139705ba2"
        },
        "item": {
          "id": "290c3c62-9f39-4714-8a89-90baca7ef675",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7429963a-3a2b-435c-9d8c-3eb8d83420fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a7aab8-c417-46d1-bbee-9e5ba8e675f6",
        "cursor": {
          "ref": "a1214cc4-b0e5-47de-99d7-dac556a01c81",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "802ca531-d862-4896-9f0f-ff5b9b9f26ab"
        },
        "item": {
          "id": "59a7aab8-c417-46d1-bbee-9e5ba8e675f6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "86e2122c-05eb-4a30-ab42-f42a2c938c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a043090-100c-4e0f-8008-672a8fe340d0",
        "cursor": {
          "ref": "548232d6-a644-4711-bba2-75b4c8b333ab",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "964fef7a-9939-4271-933d-ea89fd45c691"
        },
        "item": {
          "id": "3a043090-100c-4e0f-8008-672a8fe340d0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ffa5432a-077b-4c9a-81c4-648e96aad934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8eede2-b039-4883-bf0f-ce68b95ad4a9",
        "cursor": {
          "ref": "9fdec98e-0155-4434-8f58-2a5f19b1f93a",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2189ef23-ed25-47cf-b0c4-4b49bace5cd2"
        },
        "item": {
          "id": "9d8eede2-b039-4883-bf0f-ce68b95ad4a9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "abfe1fef-02f5-4da2-96c0-c1dd997b1ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d72dee1-3fad-4945-b55f-93ea517c0bfc",
        "cursor": {
          "ref": "0adb0119-f8d3-43d0-970d-07850accb69f",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d29068ae-b6d3-4eb1-9576-d422cfb40855"
        },
        "item": {
          "id": "5d72dee1-3fad-4945-b55f-93ea517c0bfc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9a90a439-1504-4fab-b53a-a3e96d9ac591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb39f1c6-ce97-4ba0-9f58-46f8b96e9755",
        "cursor": {
          "ref": "3e5a3380-1ec1-4a47-acce-5c7362985622",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5d30df66-9195-4247-a1b0-2442f50f4c28"
        },
        "item": {
          "id": "cb39f1c6-ce97-4ba0-9f58-46f8b96e9755",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fe21b378-0a93-42f3-8d21-ff35a645c969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ef3fb3-99b3-4c23-b1c4-bef4c500895f",
        "cursor": {
          "ref": "29ea2f2b-6df6-4613-83fc-de23cfe3cadb",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a20e1a6c-5bed-4efc-b9a7-b382b1807244"
        },
        "item": {
          "id": "f1ef3fb3-99b3-4c23-b1c4-bef4c500895f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "585cc5fa-5712-42c9-a394-7624e7e69665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac05886-17c0-45c4-a618-465501acebc1",
        "cursor": {
          "ref": "716388d2-f11a-471d-9954-ca6f234df9a0",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "96e952fe-a0ff-4c73-949a-7f02755c0f1c"
        },
        "item": {
          "id": "5ac05886-17c0-45c4-a618-465501acebc1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0afa49e5-6906-4de8-aa0f-5b48c2ec68bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccfb5a8-6521-4731-951d-08fe437b9abb",
        "cursor": {
          "ref": "b43d8ea3-8428-4682-b250-5099d5cfee0e",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "38014e94-885c-481e-b519-aebef29824e7"
        },
        "item": {
          "id": "7ccfb5a8-6521-4731-951d-08fe437b9abb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "09100102-a0fa-4ae9-bf76-010c2a3bd7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e4241b-f0e1-4524-bc44-ee0d535a92dc",
        "cursor": {
          "ref": "7c0b3d9e-6274-4b79-8761-718456efdc49",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "96b2a23d-d59d-49d0-ae92-2174561a11f8"
        },
        "item": {
          "id": "62e4241b-f0e1-4524-bc44-ee0d535a92dc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "31576bde-f297-4484-b332-a59d15ca279a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a9c825-da1d-4746-8dc8-d67d9f2f75eb",
        "cursor": {
          "ref": "554cc14b-d4ee-45eb-9541-b85706a1e7f1",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "92cccf1e-e561-41de-ae30-0ad813b1b130"
        },
        "item": {
          "id": "e9a9c825-da1d-4746-8dc8-d67d9f2f75eb",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4cbe7235-2dc0-43ea-8574-df7434ad9e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b40b0ff-c184-4a21-816d-a90a91fcab38",
        "cursor": {
          "ref": "f8618075-57c8-4faf-a594-410cd1621294",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "31d6ba49-f7cf-454e-b597-da4970f1b182"
        },
        "item": {
          "id": "9b40b0ff-c184-4a21-816d-a90a91fcab38",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d34862d0-acfe-44c0-b8b9-f2190682b9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc392f2-3259-4f5a-bbd6-a077b4dd8d3b",
        "cursor": {
          "ref": "ce8007f7-87a0-4d28-9f24-094e1562584d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a2b139b7-ac19-4556-80fc-ddb466e77677"
        },
        "item": {
          "id": "8dc392f2-3259-4f5a-bbd6-a077b4dd8d3b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "189e95ab-aac2-4dc7-8bf2-9ba606dd21aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb84cca-425c-4f33-a159-bc4896cd4598",
        "cursor": {
          "ref": "0bf3a53f-cbc3-481f-a7f0-d3b8fdd7a978",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fa777814-c825-4b5d-a502-48377a4b96b2"
        },
        "item": {
          "id": "2fb84cca-425c-4f33-a159-bc4896cd4598",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e55a9618-e30e-4ae5-9bd7-314299c370df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b746fd-5a6d-4a35-8bed-9ab5d7e6e1c7",
        "cursor": {
          "ref": "26df7317-8b34-4ac8-b399-4a5fd4c55a82",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f6df8c89-c8d7-421e-9017-409c9c1931ff"
        },
        "item": {
          "id": "78b746fd-5a6d-4a35-8bed-9ab5d7e6e1c7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9ba96e2b-6046-4895-ae35-6634d270877b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989658c7-31fc-48d2-b40a-60e1f46200b3",
        "cursor": {
          "ref": "8cf26588-3b71-4a57-aae8-7f40caa25648",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9ce450fc-8fc0-4694-80f5-821a8db98eac"
        },
        "item": {
          "id": "989658c7-31fc-48d2-b40a-60e1f46200b3",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1ab90b9e-faa3-4f5f-a45f-3135e7b84424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb55054-b94d-497c-9cb7-7ef2494cce7d",
        "cursor": {
          "ref": "e35be138-617c-4d88-8dac-246e97c19a13",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4e76d8d9-ff89-4818-82dd-4e5fdc8f315c"
        },
        "item": {
          "id": "afb55054-b94d-497c-9cb7-7ef2494cce7d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f4f7f53e-33e4-4283-a605-9d8246d9aa8c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2cbb8bd-50f8-4051-82cd-554412bb572e",
        "cursor": {
          "ref": "97fdea6d-8b2c-43fb-986e-30a1063601d5",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b76f5c9f-74b6-4953-a3d1-2b27e1f89443"
        },
        "item": {
          "id": "d2cbb8bd-50f8-4051-82cd-554412bb572e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b3b64fba-bad5-4dab-acfb-c9c26bcb17f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f9c2cc-308e-45db-adf1-e3bfe79f0b3e",
        "cursor": {
          "ref": "b327b8ee-7e02-4752-a24a-29fb10d3af16",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d5326af4-af7e-4ce8-8391-c561a9f36d4b"
        },
        "item": {
          "id": "39f9c2cc-308e-45db-adf1-e3bfe79f0b3e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8b551434-801e-4681-bb64-5c1e22d159a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6cf99b-4bc7-46b0-9969-b37705774909",
        "cursor": {
          "ref": "cd86e24a-6a17-4aa2-b11e-b377d18e9805",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "17a5d8d0-1d0a-4e6b-b4dc-01b40a0f0cd5"
        },
        "item": {
          "id": "6c6cf99b-4bc7-46b0-9969-b37705774909",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "62287355-cbba-4fe3-8a74-9bdcdc79d4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea6c597-53c5-4612-a6af-f2ddeaf990b0",
        "cursor": {
          "ref": "f91e5a7e-54e6-42b7-b920-2d165d9effd0",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "223f6f88-f798-49af-8e05-536c27ca4515"
        },
        "item": {
          "id": "dea6c597-53c5-4612-a6af-f2ddeaf990b0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "86f6f88d-5f48-4d5c-9284-ba7a1c8eaf67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee5ffc9-cb5f-4b22-a420-9f5d15a66154",
        "cursor": {
          "ref": "1c17dfcf-0b29-4088-a371-118338a2fefe",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "abc8a4b0-fafc-4ef0-bc6f-da527704f956"
        },
        "item": {
          "id": "eee5ffc9-cb5f-4b22-a420-9f5d15a66154",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3496cd02-7dea-4701-9270-ae403ac786d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30a70f7-326f-455a-b489-a4b2cbd6d103",
        "cursor": {
          "ref": "ca096677-9c01-4e27-9fc2-575246066bde",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "efb7825e-eea5-455e-bf18-8f71133d1068"
        },
        "item": {
          "id": "d30a70f7-326f-455a-b489-a4b2cbd6d103",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a87c275b-9b6b-43e8-b772-223a659eb1e4",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "fd540481-9ba6-48e6-bb46-d58bc82779aa",
        "cursor": {
          "ref": "73ecd14b-ae42-46d7-9c69-a264ae2a5e36",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "be1f3c1a-ba0d-4c5a-896f-a9f220e58b51"
        },
        "item": {
          "id": "fd540481-9ba6-48e6-bb46-d58bc82779aa",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "25e56fb1-3a30-4bf1-aa01-54ee9a5f4a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1637047a-093c-469d-a012-85617fe3715d",
        "cursor": {
          "ref": "e2cd81ed-283a-4d78-a728-ff38f26bc015",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9cc9d1c3-a1b9-443f-8ae4-7141436f60ff"
        },
        "item": {
          "id": "1637047a-093c-469d-a012-85617fe3715d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a3e61ac7-9f07-4220-9e32-7dc5ec4145d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc7006f-e179-409f-94ac-b3424c61027e",
        "cursor": {
          "ref": "69d6d0a4-1199-477f-8867-d3f29634f6d4",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "dc75c2b5-951c-4f3e-8c99-71363f5e3842"
        },
        "item": {
          "id": "0dc7006f-e179-409f-94ac-b3424c61027e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a9db2e0e-af61-4c15-9c82-a8adee6b7c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37416579-817b-4598-8f92-3c1202ae9834",
        "cursor": {
          "ref": "0f9f49e8-2f2b-4efc-8ea6-271731bdd29b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "33de6e3e-23df-4a95-94b6-1559c481e3c7"
        },
        "item": {
          "id": "37416579-817b-4598-8f92-3c1202ae9834",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fc9ffed1-f9dd-4f27-b909-b3805d52991d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8aa1d9-b931-45d2-9c5b-94c850f63236",
        "cursor": {
          "ref": "979d5fc7-3d22-4642-b224-d1595e444fb4",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fe432fea-984c-426b-9556-4c8d266cf74a"
        },
        "item": {
          "id": "bb8aa1d9-b931-45d2-9c5b-94c850f63236",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f454ce35-6be1-402b-ae32-b138e80082cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4785103-6894-4092-b983-40417df05539",
        "cursor": {
          "ref": "05bd3207-9906-4d73-bea6-8df17dbd61ac",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e7134f3b-b684-4063-a7ff-4948aa881ce3"
        },
        "item": {
          "id": "f4785103-6894-4092-b983-40417df05539",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bb602cd9-c855-45cc-95bb-b71460a724c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388ad939-c6b9-487d-9769-89897a942783",
        "cursor": {
          "ref": "962fc57f-37b6-4f7d-9853-9aefc6b12e84",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4bfab2f2-6752-4a45-ad75-258045961aee"
        },
        "item": {
          "id": "388ad939-c6b9-487d-9769-89897a942783",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0b83c13f-a269-4c61-a7f6-8af34381b7fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda387c4-cffc-4653-b46e-70ab06aa8036",
        "cursor": {
          "ref": "1850639b-b5bc-4a72-bde9-b7db0d0a6885",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "af9a6cf2-78e7-4356-bdaa-88a6d1a8abe9"
        },
        "item": {
          "id": "fda387c4-cffc-4653-b46e-70ab06aa8036",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "58308be1-f8b8-4699-9c70-c158f13b54f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ac4665-28a7-4fcc-9fc6-216e70ecba49",
        "cursor": {
          "ref": "770cab5a-f196-4bce-8fde-7a51130c07bd",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2abc05d5-0df1-4450-bbfa-2f673a109d09"
        },
        "item": {
          "id": "44ac4665-28a7-4fcc-9fc6-216e70ecba49",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dc183490-9181-41b3-9aad-4aa4878ffc0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f152379-a3d9-4009-aaf6-39832b2bf0f7",
        "cursor": {
          "ref": "a8527dfa-9a9a-43e1-9a31-30147a60227f",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "97b376be-443e-46dd-8627-f39ac6bd1231"
        },
        "item": {
          "id": "2f152379-a3d9-4009-aaf6-39832b2bf0f7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8fd34703-97d7-4ccf-bc07-9d67670f104e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71238076-14c5-4fde-a59c-ee624faf8b7c",
        "cursor": {
          "ref": "f9f5acce-9167-4eb9-9562-ff41d01c94d2",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2c821b60-866e-4b82-9484-1c4d0cdc7817"
        },
        "item": {
          "id": "71238076-14c5-4fde-a59c-ee624faf8b7c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d13c89bf-fa7a-47bd-8b7f-fd1b9f42dbdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0894ea-8fac-4eaa-bd34-e32d4135cfef",
        "cursor": {
          "ref": "b7c74f5f-8b15-4115-92ee-2a24e0e2fcfb",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "16d63fe0-5f1f-41d2-b2b8-ebf74bb4e49c"
        },
        "item": {
          "id": "1a0894ea-8fac-4eaa-bd34-e32d4135cfef",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f8902f2e-571d-477b-ac4f-8b6dfdd2b810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebd0c1d-7aee-4c84-b298-4b7bb7d79eed",
        "cursor": {
          "ref": "be209e70-cb66-49d4-8b2f-0356ac729e13",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d6b52878-94a4-4e21-8f0e-0470eecc9730"
        },
        "item": {
          "id": "1ebd0c1d-7aee-4c84-b298-4b7bb7d79eed",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9157ba52-4624-4a0b-8869-1822a987659a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518d701f-ef2c-4298-863e-67f5d6c769a2",
        "cursor": {
          "ref": "2d32e125-c106-4f0f-a396-4d6c0b872fc9",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "93e69b28-2087-4770-b6a2-8ebc0f17d364"
        },
        "item": {
          "id": "518d701f-ef2c-4298-863e-67f5d6c769a2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "97846c72-2a43-4fd0-bfda-f23268928347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b030b15-8f0b-43ba-9c3a-6efe191ade19",
        "cursor": {
          "ref": "b576e9b4-76bd-4616-9520-a453e372ff12",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "76849777-d1a1-478f-a7d4-657095ab3e98"
        },
        "item": {
          "id": "4b030b15-8f0b-43ba-9c3a-6efe191ade19",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "42a78541-42fb-4129-97d9-c7d33dc00040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b39b75d-a371-41df-8aec-7307fac197f8",
        "cursor": {
          "ref": "f39fb3f7-530c-42a9-8ab7-484b493ae2f7",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c19540c1-2b8a-468c-b0ac-6e7295da1c94"
        },
        "item": {
          "id": "5b39b75d-a371-41df-8aec-7307fac197f8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ee71f066-95f7-4f6f-8b92-a36730c9c9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2364f890-06e7-41db-856d-a93d9c687f6d",
        "cursor": {
          "ref": "382c9cfa-8cec-4edb-919d-2bcbfdc50df0",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "77c00a3d-a6bb-4f5e-b57d-a91b8334015c"
        },
        "item": {
          "id": "2364f890-06e7-41db-856d-a93d9c687f6d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7add7ec4-3b4e-46c6-a529-89d4b6493091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587c2264-26a7-475c-92e6-7950cb6e7f44",
        "cursor": {
          "ref": "084c6204-1ebc-4990-bc39-70dc09cb8c89",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3aaef350-6db3-44a6-9ae3-3b865eafc71b"
        },
        "item": {
          "id": "587c2264-26a7-475c-92e6-7950cb6e7f44",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d9b0c2bc-1552-453f-9284-848b9fcea569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1582c9c9-32d1-492c-b6cf-cdd71d00e6b0",
        "cursor": {
          "ref": "f8814742-f7c4-4a4f-8000-761055107710",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0b8a4d02-0cf7-4404-8ae5-d456135b073e"
        },
        "item": {
          "id": "1582c9c9-32d1-492c-b6cf-cdd71d00e6b0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a53c410e-7f1e-46ec-9882-d9371f1b7f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6188a21b-3327-40c3-864a-a7775827f8bf",
        "cursor": {
          "ref": "b71a00f9-c3e1-400e-991a-15f3ddc879cd",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5fd7c01a-c49a-493e-8141-b69762eeb64f"
        },
        "item": {
          "id": "6188a21b-3327-40c3-864a-a7775827f8bf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6d3be242-46be-4c5a-bb7c-0d21f4b65d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcc26cd-0632-4566-bccd-57e5ee87154a",
        "cursor": {
          "ref": "21e9aa5c-4aaf-48e2-8bf7-4e097c6afe26",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7fa99749-56d0-431d-84f7-b99bf3e811ac"
        },
        "item": {
          "id": "3bcc26cd-0632-4566-bccd-57e5ee87154a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "73c19022-f050-4c87-883d-5d2c038890b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1731c74c-fe4a-462e-9edf-5ef4da286ee2",
        "cursor": {
          "ref": "b3fb033d-179f-48f4-af61-5afce4fde2a0",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ccbb47b5-a2f3-4519-b173-fe787409b99e"
        },
        "item": {
          "id": "1731c74c-fe4a-462e-9edf-5ef4da286ee2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c6d4e228-ef35-49f7-aa0e-8c5010e7146a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337af15e-0a39-463d-8b81-71b5a00b7bb2",
        "cursor": {
          "ref": "ef0afc33-2f28-4673-b904-43407742f53e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fe5671c0-2144-48a3-b54a-74de94126ed8"
        },
        "item": {
          "id": "337af15e-0a39-463d-8b81-71b5a00b7bb2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b9a88f1f-552c-4d4c-b8fe-3e596dfd51c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d72454-4122-495a-99db-9e9eb7b42def",
        "cursor": {
          "ref": "c0f8e22c-0b34-4366-befe-c6924beb1328",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e6b4f65d-41cd-4b67-b973-a8bd4470668b"
        },
        "item": {
          "id": "e8d72454-4122-495a-99db-9e9eb7b42def",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "16f728ff-aee1-4020-8272-a44a3d55c82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47396c0b-0ffe-4495-842b-6227689efd7e",
        "cursor": {
          "ref": "4b07ddcc-19e1-4dd0-baf2-fd9b1408badb",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "340ac02b-b65b-4cd5-a0ae-85551054ceee"
        },
        "item": {
          "id": "47396c0b-0ffe-4495-842b-6227689efd7e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b6b8b9ea-ad9b-4778-9950-d9056f4c7437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed384b3-c6ec-4cd3-8a2c-fc3f93b6dee6",
        "cursor": {
          "ref": "b94a2093-1b1a-4eec-9111-f19565114ba0",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c0147910-7c79-4a1f-8ee3-dfc9d7cf7a02"
        },
        "item": {
          "id": "7ed384b3-c6ec-4cd3-8a2c-fc3f93b6dee6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "bbfa8d52-66af-44c4-85af-e1f3f7a69a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861607cb-686a-4ded-971a-51353ee18a1d",
        "cursor": {
          "ref": "91680b24-c5ef-446c-8293-3e8a294ca201",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ec14565d-6c68-4176-ad56-7e77811c5be1"
        },
        "item": {
          "id": "861607cb-686a-4ded-971a-51353ee18a1d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "30836933-7885-44b2-aa87-2efe4f30fe26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37db34a-19bb-4f8a-ab46-fcf303edda46",
        "cursor": {
          "ref": "c2689509-ce03-4054-9578-e62c99c58f74",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1d69763f-c032-47e1-acf0-fbf1bace978b"
        },
        "item": {
          "id": "f37db34a-19bb-4f8a-ab46-fcf303edda46",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c792d1b1-ecbe-4666-b4a1-1ac413bab2a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4cfbb2a-b86a-49a6-a4b3-4ffb9e6884c2",
        "cursor": {
          "ref": "7e47c275-f2bc-414a-98bb-bdb285505268",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5aa5a786-884b-47b3-86d7-0faa76197b71"
        },
        "item": {
          "id": "e4cfbb2a-b86a-49a6-a4b3-4ffb9e6884c2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c47a5c37-6f19-4e74-ad8e-b194f6eb2357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1bfaa0-d578-439d-a097-fb3e0bb5632b",
        "cursor": {
          "ref": "0a84da80-826a-41e6-ad4c-ce096ee17fe6",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3d9769aa-7166-4a20-b420-cdf80c22a52f"
        },
        "item": {
          "id": "0e1bfaa0-d578-439d-a097-fb3e0bb5632b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e5407149-3b64-4602-9a3d-b49f7a9ac246",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c3942c62-35bb-48c8-81e0-0671423b66ef",
        "cursor": {
          "ref": "c2b58c98-8cb8-4396-8c98-9908355b64cc",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5f35f3f8-2eab-48dd-8162-20425f3ca8f1"
        },
        "item": {
          "id": "c3942c62-35bb-48c8-81e0-0671423b66ef",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6c6a992f-10c7-47a8-bab3-3000be96a4f8",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "6e627220-38ec-4266-a633-fa082ca6ec87",
        "cursor": {
          "ref": "4e4c4d7d-08fd-4315-8aca-84141a587be6",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1d3e6353-239f-42d4-9673-6eecd8c7bb31"
        },
        "item": {
          "id": "6e627220-38ec-4266-a633-fa082ca6ec87",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fcb62596-0c5a-44ce-9a4f-65dde5f4d364",
          "status": "OK",
          "code": 200,
          "responseTime": 223,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8060704c-aede-47a3-8ddb-f380baff3ef2",
        "cursor": {
          "ref": "3ccce401-46ff-4a5f-bed9-c9e0c0e9c87c",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2b7fbc9d-6b2a-478f-9d13-e175956d9448"
        },
        "item": {
          "id": "8060704c-aede-47a3-8ddb-f380baff3ef2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7ff6c86f-ac01-4601-b56f-3e20717b99b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fbe0c7-988c-4c5d-b2a5-51161ddab93e",
        "cursor": {
          "ref": "4843a184-7942-4bb7-880c-4160ec218638",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ef33211b-d635-411e-99b4-02d9301b06d1"
        },
        "item": {
          "id": "d4fbe0c7-988c-4c5d-b2a5-51161ddab93e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "67c0b20a-8fd9-431b-8d3e-f78c69ed7da8",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "9ea8cb73-92f9-466b-854b-abbada0ee4dc",
        "cursor": {
          "ref": "0b0bd7bb-ff2b-46dc-92c9-c5c39ab6e932",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d26d7de2-993a-4d0a-9def-2b1a8542b44c"
        },
        "item": {
          "id": "9ea8cb73-92f9-466b-854b-abbada0ee4dc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7ff86679-c2e8-470c-aa76-54b3743c4815",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f123e9cd-631c-4ebc-8e1b-fb3e716565a3",
        "cursor": {
          "ref": "a5e6d346-9053-4310-b65e-3b82e189d678",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bb037e55-770b-4b0e-b7b3-b65d5eba8c82"
        },
        "item": {
          "id": "f123e9cd-631c-4ebc-8e1b-fb3e716565a3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "833b6f52-8355-4946-996d-2a2bc04ecb17",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1cc914ce-6f2c-4880-8c3b-0ce93ff313c8",
        "cursor": {
          "ref": "081ff51c-5df4-46b6-a347-3befd39c2569",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ad19fc89-9455-4dd6-aaf5-66728636c327"
        },
        "item": {
          "id": "1cc914ce-6f2c-4880-8c3b-0ce93ff313c8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f6e9f11f-1f49-4fb6-a12b-7fdd7ab25949",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "1ae473ff-520e-47d0-ba14-95c71eb1c0be",
        "cursor": {
          "ref": "3804fe40-ca2f-46ab-a6ea-3964ab75e7c6",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0a9c85a6-e1ad-43ca-9dbf-574f8535b46c"
        },
        "item": {
          "id": "1ae473ff-520e-47d0-ba14-95c71eb1c0be",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4fa42419-d60b-4c3e-89b1-832d19f9873c",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "cf9e5ba5-41f2-4361-9b54-702d0b89fe50",
        "cursor": {
          "ref": "33ceb558-e4c0-4e2f-ab66-66c4a68c6fef",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "09bd631d-496e-4b42-b402-b5f7a5ac2f6d"
        },
        "item": {
          "id": "cf9e5ba5-41f2-4361-9b54-702d0b89fe50",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "22030e8f-e941-4c8e-9318-59794d4ea6de",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c4d2d450-679d-4b1e-8d9b-7746adac185c",
        "cursor": {
          "ref": "40cb51cf-7cd4-49da-aa68-ee67625634d4",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0bd5a9a9-fad0-4968-8faa-94fb79bd8344"
        },
        "item": {
          "id": "c4d2d450-679d-4b1e-8d9b-7746adac185c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "723a8359-51e8-4ff5-a671-ae9b32b2c9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71e37ab-9002-424e-b461-332b8f90917b",
        "cursor": {
          "ref": "f27c4810-4000-4164-91a4-1d8a477532e7",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "68bcba1a-7e83-4ff3-a05e-5c5b3de6dfb1"
        },
        "item": {
          "id": "e71e37ab-9002-424e-b461-332b8f90917b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fef17928-58ff-43f7-8723-08cd27177bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f97287-17a4-42c2-a1de-52c0e71e7cd1",
        "cursor": {
          "ref": "008e2eb3-05aa-4f92-a277-02effca512f3",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f2114649-43a7-410e-9e62-b535e358141d"
        },
        "item": {
          "id": "21f97287-17a4-42c2-a1de-52c0e71e7cd1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b81b3936-576b-45cf-ba55-2bd4c99fa5a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33dd51d6-e197-4478-85ff-3a23e064b122",
        "cursor": {
          "ref": "146ecc44-5fe2-4207-83ef-e2ba94663f1d",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ebf69180-105a-469f-9797-0578762bc876"
        },
        "item": {
          "id": "33dd51d6-e197-4478-85ff-3a23e064b122",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "cc9fad57-96d5-4906-936a-49c166339ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff01abd-1283-4ed3-afed-4bb117683bef",
        "cursor": {
          "ref": "1049a0b8-5eb3-4f84-8014-aa56d80617b2",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e0ae2f77-d721-4c6c-9241-e0d181e4940d"
        },
        "item": {
          "id": "dff01abd-1283-4ed3-afed-4bb117683bef",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b828f409-4ae7-477a-8f6e-98ac3a1e1535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8923805-cd0d-4da4-ab1f-11c870d49ccb",
        "cursor": {
          "ref": "4c7fb827-5810-4210-9808-5ed7dc66ecd8",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c81b4628-f76b-4d9f-b206-0bc2878d36fa"
        },
        "item": {
          "id": "c8923805-cd0d-4da4-ab1f-11c870d49ccb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "752dbbcc-6c3e-4fba-954d-c8b4b17a232d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5ff9af-2661-416f-be18-251cf9ac511c",
        "cursor": {
          "ref": "01c9c890-c524-49dd-8bf8-de1074d4460f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b6ead63d-2a43-46cb-b06f-b69389f9c071"
        },
        "item": {
          "id": "8b5ff9af-2661-416f-be18-251cf9ac511c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2d1dcf9b-efba-4160-90cf-c90eb33f7eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac064ad-689e-4e0a-a098-a30b0a906e3c",
        "cursor": {
          "ref": "f405c55c-9a16-40d9-98a2-1d1bc0d3fe95",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c5d50da3-373e-4de9-a91d-6398acfebfd9"
        },
        "item": {
          "id": "2ac064ad-689e-4e0a-a098-a30b0a906e3c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ac4deeae-7e7e-46ae-9da8-ed42eda9d442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b88170-6408-47ac-b573-46206878fcb0",
        "cursor": {
          "ref": "fb3a773f-0110-4148-8940-41d7e9862bcc",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3d7dd483-6646-4410-ad11-994c6c904194"
        },
        "item": {
          "id": "b6b88170-6408-47ac-b573-46206878fcb0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0c29c72a-2891-4fd9-9d5c-df36f8c29daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eafaf58-9fd2-4e15-9b84-f7ef899e4221",
        "cursor": {
          "ref": "9e7b84e3-65da-4db8-aa01-ff3e0f48eb44",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1149e0a4-df7d-4026-ba93-a8e7c9dd476d"
        },
        "item": {
          "id": "5eafaf58-9fd2-4e15-9b84-f7ef899e4221",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8a1f8f26-287d-4c75-a17f-887a3ce0454e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e30cdf7-ebc4-4662-860e-03f707da40f4",
        "cursor": {
          "ref": "0b214c49-c5d0-42b0-b5cf-99d582d229a2",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "33606529-87ec-46b7-a52a-1e2cac27f2ad"
        },
        "item": {
          "id": "9e30cdf7-ebc4-4662-860e-03f707da40f4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "35a67d6b-12e0-4753-b36a-e7d335dde589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30f3330-b73d-42db-b993-054616a77ce2",
        "cursor": {
          "ref": "26cc3573-d2fc-4b8a-b3b6-bf9442f7fc52",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "72b6b5c6-8d0f-46ab-85ba-adc68dcb6747"
        },
        "item": {
          "id": "e30f3330-b73d-42db-b993-054616a77ce2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "fa13dfb5-22fe-4dd5-be8b-83716a5c7f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8324c9-3a25-4002-88b1-a56ec8506745",
        "cursor": {
          "ref": "3d6ed4da-2804-46d1-87dc-e40280fd1ea0",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "07331386-968e-4206-8c7b-6054eb5a812c"
        },
        "item": {
          "id": "1c8324c9-3a25-4002-88b1-a56ec8506745",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "797d8668-deb4-4e8a-9570-8f214e000ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e645e3-00f3-4bea-a4fe-f9b1893ff46c",
        "cursor": {
          "ref": "7a39b3ad-99a0-4ee9-bc75-8cd6d73744f3",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "28e17ff5-5bed-4576-a0c0-e415b5c3eaac"
        },
        "item": {
          "id": "83e645e3-00f3-4bea-a4fe-f9b1893ff46c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "dda52401-ea08-40d5-93a8-40de81472e37",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "4b3efa1b-df12-471b-b9e6-728b19ccb214",
        "cursor": {
          "ref": "7dedaeb4-ff2c-4c9c-99cd-470ad743f0c4",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "dd3a121a-d510-4635-868a-fdbd96cd0d0b"
        },
        "item": {
          "id": "4b3efa1b-df12-471b-b9e6-728b19ccb214",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "660084e9-7c91-45f2-b7b7-a19ae3d1a11d",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c2b47008-2fbf-4182-a6c1-ef6cf6622c2b",
        "cursor": {
          "ref": "db5cf5fa-ca47-4140-98ac-eb6c15a41c82",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b518ff73-bf65-4cef-bc59-c912fded4c35"
        },
        "item": {
          "id": "c2b47008-2fbf-4182-a6c1-ef6cf6622c2b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "06c17d79-d4e5-427b-9ab9-2a213b6cedda",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "691c1899-1e18-4e38-8e71-bc626f005480",
        "cursor": {
          "ref": "b95d505f-2a9a-4789-a67f-097458aa9969",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "eae4c921-7cac-4ca2-aee8-35d487408215"
        },
        "item": {
          "id": "691c1899-1e18-4e38-8e71-bc626f005480",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "199c4bcc-bbd1-40a2-8cb9-3cbb28db2c49",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a3a78211-ea3f-4926-a066-97fccbb5431e",
        "cursor": {
          "ref": "caef9988-4405-401d-abda-331512efd104",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "bcda14c7-0394-4451-8882-985dcdc01280"
        },
        "item": {
          "id": "a3a78211-ea3f-4926-a066-97fccbb5431e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b4792747-c159-4bec-bcfc-f830fda1dc5b",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "57b18bf7-d02f-491d-9c4f-e9b382432bee",
        "cursor": {
          "ref": "3fafe865-36cc-427f-8406-8b66c76173b3",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "20a1be72-3907-41ed-8236-47600f0441ab"
        },
        "item": {
          "id": "57b18bf7-d02f-491d-9c4f-e9b382432bee",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "86c7c861-e445-4e2e-bc95-34fc86d8268f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5933b096-a39f-4a88-bcec-ab6b421fdfc5",
        "cursor": {
          "ref": "c0104893-0548-4cd4-8e48-0aea4da6c665",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7ff883ff-e51e-4c61-9850-6637aac55d0d"
        },
        "item": {
          "id": "5933b096-a39f-4a88-bcec-ab6b421fdfc5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "02b7929d-b617-423d-afdd-8c76babcc667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47a7c82-7113-4591-80e4-08420314034b",
        "cursor": {
          "ref": "895703b9-62de-4008-9fc7-c6c6f86df7ef",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d6d1d9c0-9119-466b-8823-1715ae25aefa"
        },
        "item": {
          "id": "b47a7c82-7113-4591-80e4-08420314034b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7a9430d3-3e93-46c5-99de-b5318e75c92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ecd1943-811e-4677-ae04-03b82a8161c1",
        "cursor": {
          "ref": "0248fffe-44aa-434b-9450-afc9055f78e7",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "79b1b971-bd9d-4b6d-9695-6d61248cf52a"
        },
        "item": {
          "id": "4ecd1943-811e-4677-ae04-03b82a8161c1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "73cd3d79-6e9c-47ac-9f56-7884a4a7ea78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0fb2238-1df6-47fd-a0e1-91c40ad31948",
        "cursor": {
          "ref": "79af4b8c-3ddc-4f1c-b781-6d6d0859d150",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2b52fd01-bf03-470a-bc6f-263db040750e"
        },
        "item": {
          "id": "c0fb2238-1df6-47fd-a0e1-91c40ad31948",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "48c37a72-6b74-499e-8249-0ae7daa4416a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7244cc41-dd99-416e-9df6-c7485cdc25e9",
        "cursor": {
          "ref": "a452a4f3-55a0-4d43-af49-ae43c92236ac",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "037fbea9-1119-43b9-8831-b0df7f94b77d"
        },
        "item": {
          "id": "7244cc41-dd99-416e-9df6-c7485cdc25e9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "86f105b3-e8c5-4675-bc47-06e017eaa4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fbd07dd-8d5d-4023-b665-9e896545430d",
        "cursor": {
          "ref": "db7b5374-47b2-4bbe-84e9-45bf642c1652",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "eea1c995-4483-44f4-8b20-f4f42e0c1829"
        },
        "item": {
          "id": "2fbd07dd-8d5d-4023-b665-9e896545430d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e1a9f45c-6b3a-4e92-85fe-f2f01d63321b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407999b8-2afa-4bb0-bd4e-f66e508e3a21",
        "cursor": {
          "ref": "567ab32d-d7ae-448b-b6a5-c5549a06c377",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8ae95f62-313c-47f4-9430-a5a9b5a35e53"
        },
        "item": {
          "id": "407999b8-2afa-4bb0-bd4e-f66e508e3a21",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c468899b-8c0d-4a6e-b753-70e40e28dbc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c46e1163-b7ed-4f11-bc82-d16bc6bff02a",
        "cursor": {
          "ref": "a15e04c1-4513-45ce-a31b-729b649e9f57",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "7e9c8924-e904-4afb-bd48-1d76a5c99bdc"
        },
        "item": {
          "id": "c46e1163-b7ed-4f11-bc82-d16bc6bff02a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "dfef3057-f1fd-4198-97bb-b1d13a1064d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b27c156-79f3-4087-95c5-95f2d6612a6b",
        "cursor": {
          "ref": "f7330984-7564-45f1-89db-d1dff3d53225",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "56e56369-a55c-4f8e-98f5-337787a23011"
        },
        "item": {
          "id": "4b27c156-79f3-4087-95c5-95f2d6612a6b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b3678d19-d107-42f7-9a92-7ba615174ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a4432e-e21d-42ec-b945-47ea4866d0f1",
        "cursor": {
          "ref": "eed893ed-c2c1-4f4a-bc3e-105dbf3148b1",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6306b372-feeb-42ef-bdd3-169acc706b81"
        },
        "item": {
          "id": "91a4432e-e21d-42ec-b945-47ea4866d0f1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6f23d037-2b1e-46c8-8dee-aa1f5fce8959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250a1cef-3e73-4b8d-aa2c-1ec12d887395",
        "cursor": {
          "ref": "0f9fb089-70cb-4a7c-b8ca-c2c9ad98e722",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "302b75b7-a29b-47ce-9d32-029195db11a3"
        },
        "item": {
          "id": "250a1cef-3e73-4b8d-aa2c-1ec12d887395",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c5b928c9-b03d-482d-9636-5fb7f8dfee67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3718d23-e0f5-4d8c-bede-9e99b84c332e",
        "cursor": {
          "ref": "a0bd5e1d-a64b-4b66-a74f-e4d15e4fa172",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8f6da753-b31b-4e7e-a18c-183d33cddd62"
        },
        "item": {
          "id": "a3718d23-e0f5-4d8c-bede-9e99b84c332e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7e7eeb1b-a5fb-4749-8bb8-ce1c48b4f4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae26069f-621e-47f2-a72f-3952f60008c8",
        "cursor": {
          "ref": "27042db3-93bc-4e6a-805e-2e94b08cf74a",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "32bf7874-faa1-4cbe-802b-0b70a9bb08e7"
        },
        "item": {
          "id": "ae26069f-621e-47f2-a72f-3952f60008c8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bf472e06-4e23-45d0-8e6c-ff7a476a62bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981095ca-eb2b-41e5-bee6-3025d8a30da6",
        "cursor": {
          "ref": "c62cd8c5-3aa9-4367-a946-045d3b2706ab",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "f2339a64-b5a9-4ae0-ab1a-f12f07855d1b"
        },
        "item": {
          "id": "981095ca-eb2b-41e5-bee6-3025d8a30da6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "538d714c-865f-4a78-9de3-38d64bce22bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "633c30e5-9cf7-4edd-8bfb-76d700db0070",
        "cursor": {
          "ref": "939be087-43ff-4b09-843e-1122b3808c73",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "80baad65-44a8-4ae5-bfdd-1a534943862f"
        },
        "item": {
          "id": "633c30e5-9cf7-4edd-8bfb-76d700db0070",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "827528e9-ec5a-46e7-a333-b3c2f137ed24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eba4fee-38c4-490e-b1c5-57915b4ed869",
        "cursor": {
          "ref": "1293e28c-8209-481e-80cb-1e956b3f11eb",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "1f5df838-be9d-4713-8d6f-91e904aeef16"
        },
        "item": {
          "id": "3eba4fee-38c4-490e-b1c5-57915b4ed869",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ef2c5112-bb47-413f-ada8-07772ac8a79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927cabc2-3721-4eca-8bca-65b6044e51fe",
        "cursor": {
          "ref": "f5696945-d551-4f41-9313-2a63dfada22f",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "527fe035-5769-4b04-a347-344968680cce"
        },
        "item": {
          "id": "927cabc2-3721-4eca-8bca-65b6044e51fe",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d1594b24-3f79-41ab-be12-768405e02d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef206032-febe-4fea-be6e-43ffb68815ed",
        "cursor": {
          "ref": "bb05ff3c-a5ed-46dd-9913-77c4d6afdad8",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "89604756-9f64-41f7-90a7-5e580d67aa46"
        },
        "item": {
          "id": "ef206032-febe-4fea-be6e-43ffb68815ed",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b1de3463-52a4-4110-801b-4377862c44f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c909a3a-573b-4c80-acd6-bf8e09e6d661",
        "cursor": {
          "ref": "747d9359-65db-4b68-bfee-43f40a1c96eb",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "1e08f53d-0b4c-42cc-a7a6-89302f2618a8"
        },
        "item": {
          "id": "0c909a3a-573b-4c80-acd6-bf8e09e6d661",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cfe1f177-76fc-4c1d-9feb-3d1b31136a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7981bcb-e437-4f9f-ac49-03721961636d",
        "cursor": {
          "ref": "57d26dc3-101c-41b5-9453-d47c6eb7848d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "863d5496-b800-4a6c-9bb1-9336d8d1e882"
        },
        "item": {
          "id": "d7981bcb-e437-4f9f-ac49-03721961636d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "371876f9-22df-4b0f-933c-9fe05612e7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b398a35e-c0a6-4b94-b9d7-e41a763160ae",
        "cursor": {
          "ref": "1c2cfd7e-cf81-4291-8b5e-19e1569f36a9",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "f97790e5-87c1-4ed9-b19c-f39e44cd900d"
        },
        "item": {
          "id": "b398a35e-c0a6-4b94-b9d7-e41a763160ae",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "199f93cb-abd7-4e91-a1f8-0d7d20192bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf135169-7b45-4572-8ec0-6c0c6338ef1e",
        "cursor": {
          "ref": "4e559037-dfd4-44cc-9fa8-9b06e830b9b2",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0f08afee-6416-46e4-b309-4bdb28009328"
        },
        "item": {
          "id": "bf135169-7b45-4572-8ec0-6c0c6338ef1e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ebfd8d75-806a-4cac-9b77-ccae2409f9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3bc255-9b51-45c2-8ca6-d23af34de9d6",
        "cursor": {
          "ref": "562a4c4e-b0b2-4f58-9de1-bc00156f7ff9",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "fb1401fb-0741-4a4d-8ab0-efe181e1bded"
        },
        "item": {
          "id": "1d3bc255-9b51-45c2-8ca6-d23af34de9d6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f0fd86b6-ad97-4d78-b6f9-43fb73501f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df148b1c-1b3b-444e-9d0f-f354024f526b",
        "cursor": {
          "ref": "d8582e87-f188-4ef9-ada3-2fba08f70969",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a67765c8-481b-4f57-8a7e-ef0ce6609ba3"
        },
        "item": {
          "id": "df148b1c-1b3b-444e-9d0f-f354024f526b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "bf658f99-f206-41ae-aaf4-495659ab8690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6af3a3-3c9b-45f0-8e8a-40ac422e1096",
        "cursor": {
          "ref": "ac4c1284-8714-40de-ad4f-fafd24adcd65",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "986d20ad-7a54-4025-874a-1ae11c19cb5d"
        },
        "item": {
          "id": "6d6af3a3-3c9b-45f0-8e8a-40ac422e1096",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "653f7c35-cefb-4d55-89bb-fd83f963ccde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302da484-0a38-47cb-8485-ff9992dd0811",
        "cursor": {
          "ref": "d6a471e1-8683-4ee5-874c-56b17bbbe3a7",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "b806ed18-c034-4846-a184-74985b3bfb8a"
        },
        "item": {
          "id": "302da484-0a38-47cb-8485-ff9992dd0811",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d958984f-fc93-4b59-8b2c-9834a7c7b8ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbfc27c-313d-4521-b920-0005cfae595f",
        "cursor": {
          "ref": "c736d8ec-2440-42b4-b94d-3ce04c29f504",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6277a41c-4336-4e9c-ac93-a8d57629e22b"
        },
        "item": {
          "id": "1bbfc27c-313d-4521-b920-0005cfae595f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b16a9891-1ad6-440d-a3e8-5b00349915a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b4c46d-6820-4587-b1e9-37468ea425ee",
        "cursor": {
          "ref": "fa7db02a-634f-4c0a-a84d-77f2d6f779f3",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "f9455ad3-3436-4ed1-8854-5448a2dbcf9e"
        },
        "item": {
          "id": "d1b4c46d-6820-4587-b1e9-37468ea425ee",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "21a77e67-92f2-42fe-a59a-793f98132347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de9cbf7-23fb-4dcd-bfb1-2db7147b8dc5",
        "cursor": {
          "ref": "1bc00d1f-6bab-4cb5-b814-462ef5369f36",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e3fd8f97-07fd-4998-ad3e-0fc69c97967d"
        },
        "item": {
          "id": "0de9cbf7-23fb-4dcd-bfb1-2db7147b8dc5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "70a0a19e-04bf-4542-9daf-1772560594e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b03272-a591-4de5-8781-96009b9d55f2",
        "cursor": {
          "ref": "3d3a32bc-ab72-44b4-8b23-e9dd2c678473",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "0c961c02-044b-49ad-bb25-77e35805ffb8"
        },
        "item": {
          "id": "36b03272-a591-4de5-8781-96009b9d55f2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a0155317-2fe6-4d34-9449-46e5d07a1c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a98a422-42dd-4e3c-a714-ebb48996bd96",
        "cursor": {
          "ref": "8a679c63-7003-476b-a944-c7e51ccb567e",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1734d086-b844-46e4-a3f2-604b6fb88c90"
        },
        "item": {
          "id": "8a98a422-42dd-4e3c-a714-ebb48996bd96",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3dde443d-a4db-4b98-a285-d81f6cac7203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d808cb72-a6bb-4048-8de1-7916b49d175f",
        "cursor": {
          "ref": "926b1123-d148-4092-9eed-23a58d0fe834",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ebea086b-bc77-480e-9eec-e468b9ea71e3"
        },
        "item": {
          "id": "d808cb72-a6bb-4048-8de1-7916b49d175f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "116ade52-eac7-4388-9bad-dff15876e256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70458545-c4d0-4e90-9177-4be471b46e8b",
        "cursor": {
          "ref": "55c31ada-1127-46e1-a9bc-7cf5184ceda4",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e50381a8-7a01-47bc-a8a1-e8f9303df1e3"
        },
        "item": {
          "id": "70458545-c4d0-4e90-9177-4be471b46e8b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "50f1c690-2eff-45b7-a060-fe4b639bdc2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6148ebd5-37aa-4734-a21c-3dfaaa628fb1",
        "cursor": {
          "ref": "ae1c6f30-14d4-4517-9391-6e27859a585e",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "0e41edaa-20f5-4121-80f1-91868b69d161"
        },
        "item": {
          "id": "6148ebd5-37aa-4734-a21c-3dfaaa628fb1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "71bed171-9119-4a17-99c7-93b6bcfb1750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1126e8a-e447-478e-8e09-396f46148fbf",
        "cursor": {
          "ref": "64a93182-9104-4b2a-bc85-1962f72a6614",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c33a78dd-aa61-4922-a6c2-b50f97093452"
        },
        "item": {
          "id": "c1126e8a-e447-478e-8e09-396f46148fbf",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b17df0f9-8dd9-4ac2-aaa8-a438223a8f3c",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "50fd5e92-f37d-40f3-837b-62fa3417064e",
        "cursor": {
          "ref": "28277f6f-8296-4714-be51-bda5c6c7ed1d",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0277ca84-2fd4-43ac-b881-86eadb74513e"
        },
        "item": {
          "id": "50fd5e92-f37d-40f3-837b-62fa3417064e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d093fbfb-cf4f-461f-81df-7f6194aa56d1",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6b8e0c-bc4c-4853-96c6-3c80a91c8d0d",
        "cursor": {
          "ref": "076373bd-02f0-414f-9e24-1bcbec2871ee",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b71a5ce6-407c-4db6-86d1-d131952d9deb"
        },
        "item": {
          "id": "3c6b8e0c-bc4c-4853-96c6-3c80a91c8d0d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c2ff828f-3c0f-49c8-ae69-74646d542bf1",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c85f61-32cf-4827-9401-e51a34fe7ff7",
        "cursor": {
          "ref": "3a380c25-c99a-466a-9daf-71c32f0dc2dc",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "08fc43be-24a7-431e-ae8f-54897798f866"
        },
        "item": {
          "id": "f6c85f61-32cf-4827-9401-e51a34fe7ff7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "00025d51-59de-4368-86b5-e0598b51573e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c85f61-32cf-4827-9401-e51a34fe7ff7",
        "cursor": {
          "ref": "3a380c25-c99a-466a-9daf-71c32f0dc2dc",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "08fc43be-24a7-431e-ae8f-54897798f866"
        },
        "item": {
          "id": "f6c85f61-32cf-4827-9401-e51a34fe7ff7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "00025d51-59de-4368-86b5-e0598b51573e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fd2cf8-09cf-46b6-b6a3-e7faa15ae998",
        "cursor": {
          "ref": "32b64af0-d3bd-4a06-bec7-d4b87be81cad",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ab629fd0-7417-4da5-a763-203d5f8f66bf"
        },
        "item": {
          "id": "d3fd2cf8-09cf-46b6-b6a3-e7faa15ae998",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "81e989bf-0ec8-4bc2-a861-50f6ef76b529",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cc5c2c-6d08-4355-853b-ee3e504c3d0a",
        "cursor": {
          "ref": "30263485-c27e-4eb0-b68b-984050d84f5a",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "dad439d1-24e3-478c-85bd-33ec6ee168d2"
        },
        "item": {
          "id": "66cc5c2c-6d08-4355-853b-ee3e504c3d0a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b6ab1100-308f-4898-ab55-98599b7c4e24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}