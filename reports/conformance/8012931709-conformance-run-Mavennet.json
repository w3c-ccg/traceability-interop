{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ba2ea936-390c-4795-aa7e-0067173c721c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7dbf6635-48ce-444c-a4cd-e5630e91b2a5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dce7bffe-1113-4b5a-a391-5a16b46e67a8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f5450a1f-bce8-40bd-a792-2e6723576cf6"
                }
              }
            ]
          },
          {
            "id": "39d70b93-ceeb-49b5-a983-ed67ff0c04f7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "26e1d021-5b87-40d1-a29b-97b8c49bfb86",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e7f8c08d-a855-413f-a569-33670e642999"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2b203c40-8fed-4df1-a35b-2903d4007ed8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "00a9fefe-cda5-4c5b-9c67-b661f49da9c9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "25e8bcb6-e335-4493-abd5-9884ee4b9b71",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b826fd7-27be-41ce-ad22-cf4953de8e9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac65b767-e9be-4586-82b5-15a1e337ccaf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "36268236-5f75-4887-8d0b-ca05c366f931",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "afde1103-6053-4f5a-acb2-7b54232967d7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c4af93dc-3325-4938-9572-7bce0be9cdb0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1cc32c71-8c1c-4083-bd8d-b5b29490ad5f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50cd6b04-d661-4f5f-a0f9-f979d76b0974",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "58948777-efdc-4ab7-92cc-836a44942ed2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73365c2e-ac18-45bc-ab23-c4a6afdf4f28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44144279-1e8c-4589-9bc3-23e2d0c508dd"
            }
          }
        ]
      },
      {
        "id": "d1c785cc-8d5b-4371-9471-cc17a465ec69",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e01e96b0-72c1-449b-98f7-acb00000dce9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fc32e3a1-bf67-404f-94e8-dcb46324a5df",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e95ba11e-f884-4e04-baa4-e6fcef4e3369",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8994f995-0206-453c-b91c-4d1f45ebf930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b45a79e8-c5c6-43d8-8a1b-669d29640cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43c5184-1599-4957-8c04-f61249a611c5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a0ab4a-c45d-4f76-8700-0a4fb2d81004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a0e4d26-7d87-45a8-9c4c-e5ae72e7e597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57210780-2b00-4bbf-8ab2-19ebffb8a253",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627f9903-5901-4ae1-ad90-59b7cb819fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab790500-d5c3-4be7-858c-abc3131de39c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0924ddd-39b1-4845-bd77-b2c8b774662b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04321b40-50e8-4b92-b3b3-f91b885a927a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08159fa9-74ad-4bad-8db6-99ad1b4681e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95f1505d-bcd8-43f2-b9d0-9858defef82b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67764329-e19e-4a16-b69d-ae6c5b88a932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c947de-1fc7-4ad4-a764-54267a8a415d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6c1150fb-dc98-4059-a544-8cf5747bc9d0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "69b2a396-377f-48ed-8d50-c84bd07e0bca",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6da1453-0f69-4c4e-891e-2e23ca71be3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "76477acd-7fad-4092-a60e-fc25ca1af25c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae12ebc4-2126-47e2-b59a-74c9ddf285bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c5db50dd-e7e7-4ffa-849a-e121a65acbd2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8f59b76-188a-4ad9-8c46-29a93bdeeff8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "569187b7-580c-414c-8dd0-46cc6de454da"
            }
          }
        ]
      },
      {
        "id": "84f1afe6-376e-434e-bbfc-4b4b2dc3bc2a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b880ce0a-c0c9-4202-b0eb-c7531a6635da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2afc57cc-5a96-4244-8c2a-e3e673f2d7bb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2aee63d4-36fb-4c40-b688-c3c26b434818",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57868018-6699-4f74-8f19-1052d8a13bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2c72be-f398-4cb9-803b-9d67d1401792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbbc95f-c13d-49c5-b89d-cbef1187faa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c76cb62-62e0-466e-a723-3a484b9ffade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccea434-e967-4222-a10c-7a300241b42c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fbc0fe-953a-4f07-b1c6-de221da9d5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a58ce4-2b1c-43a6-87ac-4c854670c184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1f7f07-cbbd-429d-9c85-6ecf7d204f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c346dc2-442b-468b-ab9b-17763a4557b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4cbbe5-7ca2-4e31-903c-0b4d93f3d789",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "125dd2d3-6b3b-4e12-86d9-641da9d0437e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a06d91e2-046e-4853-8212-281d7c6ef8e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b4ea68-3f22-4807-942b-c2ad81742497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa16e61e-d2fa-484c-a242-80b2259720d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406934b6-3006-4c67-b728-ed5d3056cdc3",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5472f151-cdbe-4626-8d1d-8a02f758011f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ad0464-daa8-4f30-a0ae-5c042f9bf8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed84a0c-9eba-4f92-9bd3-fcbe21b73052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74cb18ff-aa71-42c8-8b1c-e8b35d008e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa4cf94-cb4f-4793-8a5b-746868c3eb5b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34da8c47-289f-42dc-806d-58c0c780a1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3646bfdb-27a5-4fc5-a8e0-3720824d428a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89ba6f1-bfae-4ea3-94c9-b36c1f4952b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10fd13af-69c5-4060-88e6-f41454de928a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfe71a6-df5e-4ddc-998b-648848774f0d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "546f53cb-9bc7-4411-bc10-2da9cdc4e251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee80e1b2-00c0-4af3-bb02-3f9ac64979db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6596399-1ffa-4783-8110-c42a50098fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e8e4a4a-9b62-4798-b123-f4a7e111fc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a2d32e-95c1-41c2-b0c3-3f9e91cf07b4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15968c4-5ebd-4889-9571-498bf9096b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d854489-51ac-42c8-a15d-eb7a73f8cc9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4758e9e-1f1f-4d80-a223-44090ebf6d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cd4e185-47db-4f7a-ae95-5e35339ca7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73724d7-3f97-4a05-8f2f-2d5f37f13e5d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39f7299-5a1e-44b4-9aa9-4a0809c68d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36961cdb-b885-4e9c-ab7c-ac01540c2b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af53449-1a6b-489c-86af-30bc3c933bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4f92dd4-7fdd-4952-bb6a-bba54d3f9dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0caee6a9-29ce-4ed2-910c-3e1ecf3c0590",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a547ff1-32d7-4239-aad0-0f72a8e45f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd69fe9b-ed5a-41ef-8173-d3637901805a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6398c9b1-cb1f-4cd4-8243-492b387f80ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c4a6144-0d5b-40c7-85fe-8b2895163ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2da7719-2144-44ab-afdc-0bbacb6bf691",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c368e5e-6232-4bcb-a8ea-724f5ae935df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762fae4a-fe6e-4441-a847-d64691bd286d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041f8498-7f9d-43a1-bef2-c4eccfaa7bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b93020c4-c90d-4f50-a20d-e8bee0fde103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b047fb6a-1059-4ff0-b65b-d4b858805045",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5715863-cc2d-49eb-a6e9-f8041cc5072f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fcf4d3d-7489-4bbf-b0d5-e8949e06486f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6111bd0-9745-41d3-900e-992914355ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cb55947-bd18-4c6e-9960-6be0f3bf1db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25524a9e-c842-4590-a390-c48f1b77fdda",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6421fa-0ee2-4c10-a589-1fa9914e1df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2e2d512-d905-4d7d-b2a0-5ddb11a6ce23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a32b2f-6ec5-45b0-9f89-f71c240ebf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41572bb0-c247-4ed4-b183-d3016f01df29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3348cdaf-c493-4c51-9858-0149b6eec389",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b040e3bd-e531-4afe-8338-dee7d592eee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e33949-c8c9-41de-863a-20341ee047c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d85282-4792-476d-8ba1-db6c9cb32d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d8f87e4-a9b6-4965-b7b2-d4e23a87c2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad1d345-6e27-4f8e-80e1-15adcfe8b7c8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbf83d3-e58b-41c2-a312-9dcf4fb9c403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d19ba3-fd16-43c5-913a-e58dcf3b5396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9363b990-ffaf-48b7-ab71-d8d1e7c27bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cbbf674-5c1f-43b2-a53a-e22c1a09b476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5391d24-a268-44c1-b5fc-f98c983df053",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5b48fd-1e42-4cef-b2d8-138fe8c431dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c7a209-7210-4dbc-9aeb-091600c4aa18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cc4b0f-6d51-4658-b976-6c26735622ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfd6e60c-36fe-48f6-b884-34cbb05c56f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d060a2-8445-4ad0-a276-849bf9567d3e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7162f9b9-a775-4380-9341-9f1bc945b671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4abe1f0-24c8-4ca4-8e2d-940a74c52f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c062ca-752a-4769-bbef-a39966ded921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8835180c-ed7d-42be-8f07-f7e344acd340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa15270-072e-4d21-844d-411a51eba443",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef57010e-a7ec-42ff-9dfc-6eac87fe329e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c08f5a45-ba24-4417-adfe-720cf29fe433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e6cb29-da53-4062-b556-1f8b01855398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00936f65-8490-4cb9-a60b-49c21332574b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26da9311-0efe-4b01-bfda-782bc3526926",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236c22c9-e158-432d-9fe4-8c12939a93f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0855014-fe8e-499d-b780-2b8bd85bbeb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31134a4-2ca1-48e1-93d4-2e87030642a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "693d96c3-999b-4b67-b6fb-ec5ec5731772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c38ed1-cf61-4f9e-8b71-2832566c0279",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ff2fcb-55b0-41d6-8578-a841c76d7c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4ce7df-817f-47ae-bcb7-30dd42ca05c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6f3397-b253-4a9b-930a-328db5610869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3cfe442-b514-45ed-8568-3739faaf4714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4529eed-8d4e-486e-b7c0-b12348ba0067",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2481c4eb-f015-49ba-9f23-be85e8272d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102e28e7-878b-41f5-ae33-d08a3504f07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db4fe60-7d1c-4428-b41b-133f1bd07b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4487ea0-ccc7-4328-ad7d-bffae5020c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8741cca-7f1e-4b38-b674-d3ef373668c1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192da6ae-3278-4a8a-8281-e2e8301cef10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a1d0f0-130f-454a-af2a-408821e6faef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd7545e-5cc4-4423-a6c2-0f80b0120f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2647eaa0-2b59-4fac-a57c-c2e9372b85eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd2d1eb-0c0a-47a4-a593-8bfd6077d2ea",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1dffe3-89f9-4bd2-8f9c-1e1d844ad089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a99f50-c2e7-4419-856f-23aad7be6db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab4a64e-5d3c-40b9-a339-9ae296a74c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8dacc8b0-d9b0-42f3-8e86-a0412c128e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010b23e0-90d7-4718-b6e3-470a2577c9c5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3642792c-0790-4b9b-ba06-adf02a9c21fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b294bfb-036c-4425-9f15-5d3c7cba3476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b76bd9-9710-4db1-a6ed-0fdaa8bdba3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1803148e-1948-43d5-b09d-4667c4718412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1c2e2d-6b37-4f27-9ead-31ddf48b42db",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4cdcd0-3dad-48d0-afd2-448d85f5f1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7669617f-0e86-45c5-8d09-b4642718756e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfef030-0f6d-46cb-9a14-98467158ec61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "52f04885-fa24-4b16-8fa9-de86f82cfc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b162780-0e11-4fbe-bdd1-57dff3c8fad8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd92643-9581-4f0e-a17c-961f69fcef9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a5d6aa-5a7c-4f74-85f7-2408f934ca9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fad6048-1d8b-47d2-bdfc-51e8ccb0c727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c23ac3d-af4d-4049-84f7-c8e6e3251f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90a0450-6207-4e22-83c6-ce406ced931f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d364319-1fef-4dc2-83a2-da8fd74c9d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4491f8c-e440-4e96-81c1-820803f8e7fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f86218-40cf-4e5a-9aea-1039fd355048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "33fede7b-4233-46e0-8c73-9d7567377384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd888e42-cfbb-4285-8f5d-bc62c35d4777",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "732496d8-a82d-4d10-aa96-53375d78871e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c2ccc8-144e-4402-9386-fa304003b661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa438cfc-ad1e-47bf-ae42-8df1de296816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8051e469-8fc3-4172-907d-b2c334ae31bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64aa746-57de-4440-ab00-822d3d383d99",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5a7fde-a24a-4c75-9588-524d2974abb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff9a002-9561-4ed6-a4c5-67b7f01366ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1dc90b5-ad28-466e-a8c3-e1e04918774a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c22e46-19b7-41d8-991b-bb3adaf1f0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc806b3-04da-4f60-83cb-45e073ad3b88",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68f5690-72fa-4ac1-9039-61d1c196a15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af6b36c-c012-4d79-893c-d398489ba45b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0987c4-2ff7-46cf-8ada-a58072a18789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30084582-89c0-4b9c-b4f0-065c128842b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c0ccce-d4b5-4045-b8bb-8a276ac81df1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "190e4dd7-dd33-4ddb-b447-46fd00a2677a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45bf692c-a6ac-4130-a4b9-064d62bdad20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a0ebcd-b8c1-433f-8ca7-02720fb770d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2757572-e14b-48db-a0d3-3d95be8df9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24da3a63-b71e-4340-8065-b6fb3e846780",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66bde28-9a10-4134-9ca2-009f858236c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e841ab1a-6808-46d3-82d5-c3cd548e28e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76edb94-bf10-4ad9-a7be-972fb5f542c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13fdebe8-19e7-47f9-9df7-af4834e4b418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968e7bc5-96ee-4ff2-b8e1-432d4378f8c2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe52252-baec-4205-9939-46525c503c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34f8ed7-35bf-4188-9ce1-8322f7bd7947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda84836-fd40-4683-a56b-97730575bca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1362dba5-5432-4b77-a5c3-f3dffe1146c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96684729-4894-43ff-bb8f-c1f562dc63d3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5a090e-7198-4848-bccf-8777a6f49d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af730eaa-59d9-46ee-9ee3-09b4929ab5c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12414b1-515b-4897-b154-a5a99ad5c10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "468621c2-043d-432f-b96f-fd96d12e7c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48806bea-a1e1-4037-a599-8f426ada3f44",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d39621-591b-4d66-ab0c-364ba76fe3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d5aabc-0c77-445f-b91c-def2ded3c8d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533c5db1-7324-4933-b653-65ea9734f366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9146c142-7d67-4aff-93a2-aac7515200c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85dcad0f-dbe0-475d-a67e-01b915fdb6e3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c6d9ed-8fe7-4ae5-ab7c-075a5eb6fc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981df129-6a40-4af6-b5e2-50d634e0c5b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4606ba76-8ff6-4d66-b845-a6fe05fb6d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c3085097-1b7f-4285-987f-56c3bdd6ee49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267cf1eb-04c9-44fe-b229-f86381828401",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dc3fd7-0d13-4d89-bae1-f8a2c8b6c1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "912c165b-fa5b-498f-9e34-19fdebd19ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f61217-c5e9-4749-b696-e14090141a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a224dfe-1709-46f7-ac44-8ce63384e7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d99637-020e-4e76-b983-3658f401338f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6d00fd-57d9-4626-874b-b5d7a29e271b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a628fa57-7ff3-4335-bd81-9e3886501d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09c2329-bdaa-4da0-be18-e6f736d5b242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9692c591-84c9-4ea4-93a8-bcd03ecdcd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d054b4-388b-4bfe-9adc-43a083e0882e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5310f455-d506-404e-ac81-66d1baef30a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21816650-0fc8-41c2-8a8f-e075defaab7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414e3cdc-f7bd-474b-8506-29fffb9aecd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b64a5d6-0065-4cfa-ac9c-9b5974e3503d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affa6114-3e0f-4c11-9723-0f2bcd630167",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "632676e4-b915-43c9-b885-273a6883e0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe3ea6a-f743-423f-8bb4-13b8191fbfe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01518fbe-b542-4088-a340-dce53bd0f36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "39a2bdf2-9c33-4ebc-8927-046fd2fb68a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5acdf30-29aa-430b-bba2-31223928ee9b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f49e63-6c2a-45a8-9760-4b1d41193bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a9e560-3ad5-4c3c-99a7-bda1b1b18aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53a29c7-95ce-4272-a2e3-30c30f7ed30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f671ca5c-4761-4305-b431-531463c1833d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4088d8e8-0e0d-4afa-ac39-5be186caf5d7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc0fae2-22d2-4c8c-abf1-59364bdbf0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb886b0-5bc9-4cc4-9b0f-51c50e37177b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39334677-67b1-47e8-b946-2e2d3d3192de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fdfae07-48cf-410a-81d7-c85c3f9085ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1fb6ffe-8f90-43c6-9cb0-e90b9c3ceed0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ef0cd2-8d4c-4cf4-8dae-9e61306a3678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17defef9-4b46-49e2-bb97-ef0e151c703a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334b649d-54dd-4501-9b9c-f34264854cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "89ed741c-a8dc-4268-91f2-e6bf72dedda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ea0ad7-92c0-4427-b12b-c9940d766152",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61c4beb-7810-4bb1-a2ca-5d1d20269811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bbfac2c-1720-483f-a643-631e2a742ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ae5cfc-461d-4560-b627-189d9549f453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5be8520c-b0e8-4013-9e78-dba9500cd103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ecdfc1-0aeb-400b-994c-f5f2108bf668",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578e13d9-f451-40f2-87fd-21b6f806e8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a712b29-4f35-4adc-bd74-e7eba89ee3b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae3c196-489e-42ab-b860-aae0aec5deee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "82eac239-df57-4823-b9f8-32cff74806c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c499a3-a4e2-411a-818e-19bd85640a51",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d951ef0b-8470-4af6-b877-f9a67f0038ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e889d1-c945-48a1-b6d8-a17db7d33021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11366a95-579f-452d-a5be-34b98b1ccd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cd82c08-0087-46ec-9063-0b6a10c43f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968e9108-c945-4c17-a6ec-bcebb14da679",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f26890a-8e02-4317-9180-447a4818d4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad57563-c45c-4b0b-ad95-ca79fe71ad0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888a75a5-73da-4010-a6b8-beefe8e22d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c82c13c-32d0-4fce-8ce9-11ca04b2f60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556bed1f-4c63-4621-8674-eb063a0de330",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac751df-28ef-4ea8-9b83-fea1cb0eb535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a7caa0-7c67-4b6d-a6c7-c93532d5d44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a8adf9-1c43-4b78-8a1d-206f07aa15cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89eaaf95-67c4-4a33-8502-804171803c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005876c3-97c9-486b-9e84-53eb595573a2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5a4116-4ed0-48ef-bef6-845ed20e7868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ec2b95d-4558-4745-896d-09dd7de5da77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e31bc3f-9978-4ab0-84ae-48d7ee9a7fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47b8e415-cc29-4699-acbc-957589177922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815d3cb7-370e-48e7-99b8-07d0cb77dce8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7ce760-11d1-40a2-a297-a901e6a1b75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178b9a82-5889-4828-b80f-1e2f5e340a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e6575d-906f-47c0-8d4f-c978a29a2013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cab97309-82c0-4b1a-aad1-fb9432757326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e39b27d-f14d-4bbb-8321-ffabbc75c0e9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77711f7c-e9f8-459f-a6cd-1aea490ba095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfae418a-6ee5-44ca-9dbf-1bf20780e9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a40935-ea8c-49c9-895a-fa2c95c31310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "355bb6e0-38ef-42ff-99ea-e055ef6f8a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cf1702c-2031-4fe6-bdd8-6b847f4b3a30",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507070e0-0c30-4c4f-8667-3fdb1a123717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18fd7ad6-8066-4c7d-b458-130aa699a07a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748fb8f3-3a68-4ed6-8fac-47df28311e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "24f0418d-5b2e-416c-99bd-13b124e0f873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8695d446-d9f8-470b-a4bb-712be1d7d8ad",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a66ef7f-9ad1-4c90-a36e-978e2c558b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8234ad5a-9994-48a8-b8f7-049eabb9d8c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b513aab-ed41-4e69-8981-4a0ae6f469fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "33a891e9-28fd-4d89-b977-242d637452be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c37bfd5-b241-4df5-a558-ba8067fbf364",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd1be90-0408-425e-b130-7d824ab73e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "312df071-2e4a-4822-8ac5-26855cda09ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ff66bf-3c75-4e3e-ad44-7cb61d77a9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c83b4a-8903-4833-a3b6-39700899ad4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce933c2b-8742-4077-9282-a155d8775e5d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2312f749-bf88-4a03-855e-e2931adc3fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be1a9fef-f4c3-442e-acff-c46803d966b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13645b82-3694-457c-a605-e2f83b85cd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "885d4f8d-c229-49a4-93c8-808357cddca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ae3cbd-3294-4e80-9f1d-f0573c7181e6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195ae032-fab2-4a7f-85eb-5580e7893b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72af5c52-0da1-4dcc-9532-f3d22ea95306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb81b1e3-35ba-4fa8-a01b-6037f722bc48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc9845e1-47a7-4563-9b17-c2d4550d7073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa74c3cd-9a12-4af2-96a3-c11a809ea36f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a17ab1-fe32-49cd-aa15-50f5b529e09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c01bf16-8c96-4db9-9baf-7e79ad7219ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65481dc-c380-467e-8f1b-cb0bcf7d8d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd957b4-40ff-4385-82c5-41e939611449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90beb29f-9b5f-450a-887a-b45eca82ffa5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d577b6-3e13-4528-bbc1-7cefa5150871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14fcc41d-6bf9-4b34-a2d5-05ca86182775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96da389f-820d-4ecf-972a-34a291fd731e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ddfef8-93cb-4d1a-b2ea-bf7a5250a752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e20182a-23c7-42fc-b7f7-7f922a0299fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1f2978-2c5a-48cd-8aba-35a44801a189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe34bed-ebbf-4fef-a701-a588340b8571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92ff6b3-c533-4e19-aa33-3ae1eee0eff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e502007-98d6-432f-b5b1-f0168375c348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9b6ff5-f4d8-41b7-a718-a3823de6d5b5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae3949a-1098-40b7-858f-354206c9093a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433c9939-cd15-4d65-8b5f-6258b0c13a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a1c8b7-713b-4cbb-aa78-916aa9059667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "59531648-e87e-4169-9123-57709d79f58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcb525f-f71a-4fc7-bffa-d1dbba6c946a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49e159d-3b53-497b-8a64-db969ff26c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35dcaf80-430a-4bbd-bcde-e2fdf24b4901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b71a6f1-b4cb-44fd-8c93-1ca2a68c4371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e8e0518-7585-4ec4-a49b-e3015530b718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d777c4e-dabd-4d48-bbf0-aa86c64332cd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe505bb-4b79-4eb8-9339-4d1480d72065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc96ca7-4960-4afc-bc2f-48f117fda03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b87f49b-e07f-498a-b753-26f90c20be85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aba7f5a1-0751-42e4-ab7d-a5e0741f5803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80acc67d-d711-4d48-9a0e-c599d5aa2843",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f8881e-dca9-4817-a0dc-5be3dbf9a5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdff9396-4832-4437-a931-a4b4e922d3f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f58f08e-bc62-43bb-b30b-e7fbc4fe07a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d29f71-e4dc-429f-8f70-9d1004ccaaef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1116239a-eb0f-48c3-8fac-9430ee310659",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d930b875-8c57-483b-9ca7-bda9f2b396be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c7880ad-a074-4568-be00-8caa847dfbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1442c2-79af-44ca-b741-c2f20a5c2646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "088cc112-3370-4bc1-adb2-e2cd31d8b8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23cb98e1-48fd-409e-96ad-f22b4971b7d0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9a447f-1b35-4353-b114-ba3ab7c15d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e3eede-edcc-41cc-be38-6815595eab33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3197f7-eafb-4353-9aef-82cf87d63829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "687c159a-2c59-419e-be74-b371e3568802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcdd218-d79b-44a6-b2f0-fc6d80241c0d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c78d9a2-68ea-4392-805d-e0d5991c05ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e45691e-2c55-4bc5-b859-5f98e896e86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c367dc-8371-4276-8aca-049d037edce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cbb580e-f5bf-455e-96cb-a31fe9c2c67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b057063-1496-425b-a88e-c4196c669e80",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45191047-9e64-4d79-a861-5f3c7b821cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211beb96-b117-48f8-bd6b-32da3845161c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc826eeb-80e0-42c1-937b-753d3a468106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5939e81e-ec0b-4ce2-af31-c70bcaf9f874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc45c243-8caa-431e-b82c-a0e4008f39f5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "268bcde3-f3bb-4eae-92f7-24cf3bf17555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2809a58-df89-41fc-ae4a-658d71146130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ec20da-336a-40ae-9607-b2eeb00d66b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "969a4481-3071-4883-93dd-08f3bf9dd0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c8baf0-d8f6-4aa3-9766-6dcdc85642b0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ef0817-b562-4ae6-82c1-77c7c2d34ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c53417d-b5c0-4050-a1ea-0dbe1a26cb9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2656686f-9e01-4a38-8ad9-854b5a260788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "adabfce4-d89a-4b8a-85f8-cd1a2cb9f1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8e85ac-4271-4f44-8bf7-976333ecd76b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42af8a2-e35a-4901-b9bc-805d3a49181a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbdafae5-411e-4ab7-a13b-7cd80033c95d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c804712c-83c7-48f6-b70c-79d2bb0fb93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f1cb9aa-2beb-4afc-ae73-bc2d6413ab65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d716ea7-c901-450c-bef0-5c04d75d9edb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69813de9-a757-4f3a-8531-09e97659169e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa4f3dde-3f0f-4671-a58a-43c2ae25a1e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0ad77d-efbf-4eda-971c-64b2673757f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77ff5c65-94b5-406b-9a97-bb23761027a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3abe4b-7a0b-403e-84e8-17926b4aaa21",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8592885a-de76-41f9-9963-6f9b44000d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18dc037e-e217-482f-9e3b-3c756fcca9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd00f2b5-209e-4479-bbe2-0db96e50ca05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09cfcf79-7673-4ad3-a497-405146fa7056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c230646-6f70-44d6-91cb-8589d99e9227",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3dd319-7765-4e88-b4e3-86c06c42579c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ced76b-61a7-4f8c-97f6-cb9e803d5931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd69c5b1-5e1b-408a-ae1f-15dfe34e3f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26d8029c-6ee2-4527-9557-60797c8b54dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4449370-315c-4243-9334-2a035e8af233",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a4873e-8415-4376-bba3-aba4b8c172ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879c1744-450b-4e64-9e62-ea2196ef4af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f01da1-d0ee-4968-8e33-8a26ef80ca8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d8db720-ec9a-4017-a81a-3686084496f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa664bc-cf58-43d7-a75e-9ee186fbf631",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d94fed-9164-4aae-86fb-3c1e893d06bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a51050-23a5-4d6e-8030-bbc3a874983f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058e52ea-9a47-4cc3-bef6-f0a3c42b196b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "560775ab-7304-4e92-a9f1-7b950523d9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0faab7e-575e-4699-b537-011c424e6a22",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d2096d-84f1-4c3b-8dc6-4db9b5bf654b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54b410a-a477-482c-a8f6-962bb73a034e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3349e845-bdd8-4b9a-9f9f-23c4377330b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d03e7d77-16b3-4841-adc2-4b338b64eca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e1f312-452f-4fca-af28-a8ee171d818b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749b9d67-78f7-4d81-8096-33f4e9a848b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9485f107-b924-4b41-948d-727734df1d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eced6fd2-26af-40ed-8909-6b98107150db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "275c079f-c247-47f7-adc0-367e0efd4144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9b3c74-e660-4d4f-9c98-7e903eb7c114",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecb22146-4d25-4467-a265-fc8f0fd5f6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4062d709-a323-4b72-9d47-10b821334913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fa4cf6-8d64-454d-a4a9-161590821098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "842a0aa5-581b-4888-ada6-10fbeea2a6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f3e85c-e3c4-42c1-9dda-0efc5b037688",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506b501e-e46f-421a-83e4-26be9c02adf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "479777ee-7e97-414d-a256-1b6511d8e08d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17827e6-52af-4956-a7cd-8222b22a85f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98ee0bb8-3b27-4242-8cbb-c7dd91c573f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfabe433-e987-41ab-b34f-a7833f87498b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4821fc1a-778d-4856-b113-97979c1ad658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5521839c-c7b0-442f-a8fa-c605059c8248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db48f34b-65c6-4fd7-bbc1-854ee0e04908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bbcf046-b6e6-4a92-a413-cd6194e6aae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f7169b-1d83-46e0-a8ae-a506c9365815",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689dac58-8f5c-4d2c-9d78-4a5be68bab57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f486ac03-db7c-4802-9271-5f84a433df72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd179ce9-c9c9-414a-a9c2-31ea2ca9eb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0609273-e784-4db6-9a4a-4e201b99a4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab6e9d4-86cb-481a-9910-d357f8cb489e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900235ea-0ee4-46fc-9b02-f200389af0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d93240da-9a90-4901-a897-323b6bc9593c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92228e64-2b73-4434-a6e7-f34a585fc538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b54eabb4-89f6-46b5-baf9-d1fe4652a1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf01b70-9ea9-4d7c-bca2-076c84a0e16c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a0cb65-46ab-4b8c-ae59-0805dd9bbffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "776927e8-ec69-465c-aa62-df9e8e9dc588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1421ea-6114-4b45-8078-8785788ad1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73945432-6488-45e2-915f-ecdb9e9509de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacdcea8-7b22-46c2-bcd1-7890d5395da4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4a3cc5-5a88-4b7d-b639-f85bc916a670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb19d12-5198-4c69-896d-1b028ad28b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a0d4cd-c35e-4e25-b269-10ae1d0fced0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87eb876c-dec4-43c7-85df-96ec64e129bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87409228-b5d8-4f3d-8044-ccedb8ee77aa",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8547ae12-6bea-4754-b03f-5891c45b96e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "602f1282-a845-4784-90bd-0e07a35ebdc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fca7594-d1c2-43e8-bb99-bf6ae4e30572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4eb3984-fd4a-4807-897e-5a8033a077e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36987b6f-832b-443f-92d4-f1305861c5cf",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac3e41d-590e-4e29-85aa-49c7d20e71b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0216e8-5759-4eef-a29f-c267922ee985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f82042-ff32-4e94-a4fd-7ab9c8bef586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4047a705-2b04-4ca1-b2ed-78835c5d2ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4714125e-6f4d-4e78-b096-dc5caf373079",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c348368-c03a-4c72-9b42-a2dd7c400cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b829067b-1cb6-4330-8823-b6a61db9c985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcdec42-7a73-4623-9cbb-065e1b1af390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dae6fa1-9860-47d2-9563-50a5c91e84d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a16340-5fdf-4d8b-9042-8e63bbd51dc3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff0623d-1749-4407-bdc9-02a13eba0593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ba9d05-8ced-4521-b3a9-d3562f2e77b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6c207d-8805-4737-8456-8d023fb7e51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2095429e-5f42-43e9-a2a2-e133a1901960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909a4a96-8417-4104-8214-97bb50566bd5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f33aeba-c810-4363-b83a-1776c87d4c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9877024-ca69-468c-844f-bab7eb17ac33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e56df4b-a9b2-4999-b045-55803ea1e7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "60aed263-c171-4230-975e-b299ef4128e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e15b03-3ca6-430a-b02a-3a49581b044c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f49cb14-da9b-4e68-ae85-368f359ea291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d1096d8-b8dc-44b6-80b6-0f90d04a0723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604e9270-6c12-43e7-8c6c-2a0472933e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "313c4659-7a4d-4a38-a7c2-f3d29a10213e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff01a9fa-69e1-4daa-81d1-875d68af42de",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e043a1c5-dbd2-4c89-996c-56f39086bd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cddd1972-6f22-4160-ac5d-ed926b8d1f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6535a014-cc59-47e3-a3ec-f19abb0bccfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "104991d4-8794-43b9-a709-5be26219fffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3ce948-d4e8-4634-a5f5-3a7e81e76d76",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14b5d4f-7c69-4739-905e-1add240b0833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe86d0d-8fd4-4a3d-96a6-09705a87a9b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494538a1-a951-47d5-84dd-36c13200800f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e4a0e6-8b87-4dfd-a118-2cfebe801c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7596295-1a31-40c1-b334-6d118b76c62a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab0a8fa-64ee-4d71-b687-95a5647342b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f8333bf0-e7db-4aa8-9a8b-23696cc24728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e27f24-9bf9-4021-b9ff-2e6be298849d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1ded3a-58de-48ec-8556-3ef80b6499b4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f2dd5475-8462-494d-b2f7-23268b88c7f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d410b3f-52f9-4dfb-82b1-7ea33422d4a5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146c13f9-e27f-4296-b8c1-9f706e697bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "235cbc07-3335-4d3b-b82a-b11a9d26c002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700e9822-767c-4712-b599-b3a53538fcb1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e37155fb-828f-4e9f-99d4-6d3066388b3b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1579b6d7-9aab-4fc1-91bb-fc6f98ab89a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79a3d085-1441-43fe-99fd-c5d548ccf332"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b07655b3-ae69-4ee2-944b-06eb93992127",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b52fded6-d8fa-4a62-bf3f-d82f78a6092c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "855489f7-b632-4b1a-9243-f2768963e5df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "678aaf9a-2e2b-489e-98ae-d7441b2f2720"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "08c2a6bb-e7a2-4d99-99fc-e11039f5f769",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a37c7f11-cbf8-4f3a-8444-a96ba21395fd"
                }
              }
            ]
          },
          {
            "id": "8237a1d4-0214-4dec-8e61-229562a64e25",
            "name": "Positive Testing",
            "item": [
              {
                "id": "199e14d9-f8cd-473b-b340-960f12a638bc",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "3b181a96-4c4a-44a8-9d05-4f06e127df42",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64410fc5-7c0a-458d-8928-04e3cfc38f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "15d476de-3260-4895-b5c4-ab041a7754ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ebd37f-fefb-49c0-9869-1798842e1e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aba7c1c-4840-4a17-b769-c4cc5b9a42a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3aa04998-d1ea-42f1-a4a6-3041bc048887",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32d56e55-b3da-4134-878b-c3cd8155d169",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2d88f90-0090-4ebe-ad52-8291f82d3b6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29ad719e-0e1d-42a5-aa62-b8d807adfeb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29bc03cd-ddae-478b-9e86-b850bcfa219b"
                    }
                  }
                ]
              },
              {
                "id": "f3326549-e8ca-4713-8b73-87e3a9b2a738",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd6e1a9a-9879-4aee-a7ff-d4e5d675f06c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "225ab78f-7c68-429c-99ca-b29819762e3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ef07881-3d15-477b-b4f0-0f9e9950af96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "37b4bdd4-d31e-4e32-a1ef-2fc3a7defa53"
                    }
                  }
                ]
              },
              {
                "id": "02b2ff67-84e2-4f93-84ac-a33bf1dbcc10",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6bf4ab0-d15e-4901-bca0-fe3a0ae4f98b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d9898e1-25d0-4da9-8d8d-c4a7bfce3eb5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65d6888d-cc6e-4330-8ae5-c419f6d52cf7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "568a9a9a-c33b-4400-94c4-2ff3e06da589"
                    }
                  }
                ]
              },
              {
                "id": "a65fe720-0f71-478d-afc8-3f1fc4c23615",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79f55735-47a6-454d-b8c9-ee74a8f62596",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f3fb795-5b35-4184-9014-3627f77b6d8e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44640675-07d7-4de2-8b34-89d479086a8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "79dc5cf9-b8f5-45c1-bef3-cf9ff4bba12d"
                    }
                  }
                ]
              },
              {
                "id": "5a60a7d8-0ca0-4700-8a63-678848c8e52e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ecd6d24-ca2f-48b7-9e5e-ee06d494a9e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f478f53-ef1f-41d1-a4db-08e04cb4e22e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42c210a1-ab88-43a1-8b08-b2ae76110bfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "da4e051f-9c94-4e70-ba61-b2a590ac4411"
                    }
                  }
                ]
              },
              {
                "id": "cd46e814-f742-4918-b70c-73760d3d5d36",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61e5a7a6-7653-4008-b5de-6a8f1a07d901",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "950d12bd-899c-4157-a81f-314817573fab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "475367c8-9a70-4cef-8f9f-c4555589dd17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fca865e4-d233-4bde-95fe-1bc01bea9799"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "03a4aa75-6845-4d93-8a93-e705f184deb9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee93efa1-8acf-4bec-98a5-24c0785cd543"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "89813612-3c2b-4649-b658-feac8505eb56",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4ba82ae-2188-40bd-8024-49ce31da5641"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5c59e1d-5e3d-414e-a8a1-5c43e3cf228c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5002290d-c381-41cd-ad29-5125a0019aa2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "85439c5e-1158-4078-9588-ada87270dc72",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a77c951-dad5-42cb-973b-34103dbb7f1f"
            }
          }
        ]
      },
      {
        "id": "5008866b-ced9-411e-87ff-6c3564e40747",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "13228500-6a37-428a-9b4b-2eef9df9591a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "430c46af-e8c6-4564-abea-c045c90c8b7e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "942b2115-443d-402a-84ac-99ac8be83a00",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09c5154-640c-481e-a610-c32ff4f5c8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2150a77b-b8f4-4cb9-b260-dde29f0187f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b12ad8-4be4-4755-8206-56d023f1229b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4095ed4f-fcb3-4c33-ae12-6f87fc5b3b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4615be-3740-41fa-ba3a-198a9bbb924f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bef8ad2-1681-41a4-b807-13b9607f286c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c555fd-9a3e-4883-95a5-4d0175568cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832589f4-ea4e-47f0-9281-ad58626969c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1fbdee-1856-4efb-9a81-938980f79d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f55f9c1-cad0-489b-8b1f-8b4ea9b324ba",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0a1153-d938-4427-8008-68a8ba7a4209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edc5bec-700f-46b2-b831-cd4fab85735c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f780a49-01b1-4abc-b426-4ac1d5d58ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "944f6623-d9d5-4c70-a0a1-eff67f1326ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5c7fc6-18c7-490b-a802-75129a9e2dac",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d92bd48-c568-4ac5-8b2c-af4f5ea2e27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f1a6b91-8da8-423a-b778-cc9d9d6d68f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aef552-1f3c-42f1-917c-88066c1a51da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edd618b7-0736-4c96-969c-39c5806ebf41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f497e30-a35d-41ed-becb-8140d7571767",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e062bbcb-77b3-4f81-8090-b7890733d341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8221ea-c3d4-4fde-a475-c39457a08891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cf249a-e1ba-4259-9db3-6b0a364e9f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06047b86-73b9-4fd8-88f6-3ba2e97b9810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19ac91c-2917-4035-9253-5f8c83d2f288",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b4e13f-6170-4af6-9d74-5dba0fea006a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57fd7003-2417-48c7-b9a5-267a6a32b41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0d1276-d02c-48be-9953-da0fb9cd9cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fabe4d0-860f-41a9-8aec-2beff8df95c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb625b98-b6d9-469c-9467-9a5215c41494",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32d2d02-9871-437a-b142-772b5dcc636f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59fceaaf-b7a5-46dd-814f-ba67c72c15ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacfec08-ea44-4080-b597-d50d44fa889b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "13af7431-2c7d-43f5-8d96-2aacb1b3f35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55c6457-4ff9-43e8-9065-e0a707cc3767",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413c60ea-a778-405f-afd7-6961c79c65eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c350e2e-8db8-4f31-9bf9-4bbbd8fbd6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69cef8f2-93b5-4ec0-b494-aba74ed8717c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c16635-1812-4e51-9b1d-aad8e5efb860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df70e588-2335-439a-8865-09b1b604ed05",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c74628e-27cb-4bb9-bae5-516c4ce59379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed25a45b-4ecc-49db-921b-622fd225e3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c8d884-fd2d-4779-b2f9-1cfce72b701a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2edecd1-da05-4556-804f-00f42941385e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776d229a-c4b4-45a6-8641-afb7cd625d0d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52de6bfc-c4f9-44e8-ab13-5d1f0efaab31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "609cda81-e8c8-431b-bee5-69ee91098983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7f2e64-324b-46ab-8832-c015317df753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9715c55-8997-45bc-a902-42dc33058e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4dccad7-a51d-407f-bbbb-0d93b90441e0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506c89d9-ebdf-4dc3-9ad8-1b3bf71b2f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35bf2cf0-5ee3-4925-9709-a68653d7c123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcac05b-11c6-4854-bc86-16f164ab2061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fff56b2a-d346-4c19-8c71-b9068a436357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6fa6092-849b-466e-bb61-2741612f8281",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d33cef5-81a3-4549-bdde-d8430eba89c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df2af5ff-cfbc-4127-b617-b654632e6ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb0be23-8ed8-46ba-9acc-8572486f43c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0bcb7515-2435-465c-bf9f-ebc30a9766be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92901dfe-c929-4257-9b0b-d445c24e2db2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c73167-cd6a-4d04-926f-00efefb7241d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34102ef7-5b4d-4ceb-8ed4-6a2739f617d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a20104-2170-4989-9cac-e8af769cdbf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b043947c-2fd8-409d-9f81-4728d3cf4907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b80a7e-e54a-4cbc-80eb-750e4356ccb7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2605b4-4b4b-4fa8-9133-a95ce5fa8b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f90c13-7b0e-4ea3-a76b-5d9c32ae83a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fdc9639-5e37-4c0b-a104-33d9dd124a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc61fdff-4505-4c74-b6de-08fb965d732e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9faded-ea64-473a-b057-02d285fe456e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7ba001-d995-491a-b6cc-fe315f4b5242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2b9245-e639-4955-9e38-189fa447d9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc41923-5481-47e4-b4c9-df485ab301ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7ef0af-e346-4e0c-8712-f6b515a16807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6aeb41-6c92-4666-a78a-cb6da54d0f1f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1067d8-6a4a-4cec-9113-2fd3d4fff270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1edf08c4-8a96-4c72-afcb-bded1eda4be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51435ed9-0dd6-4f31-8471-982cbc3e0b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b312bd6b-c2ae-442a-86e3-d9b969524ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1bf50f-e224-473c-ac86-4f0e864105fb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f7f289-e71c-4a11-91ca-945041cc3e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f8ca2f-f143-46c0-8ec3-68913abe86a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc062d5-e1e6-45f6-9f22-15052d6cd29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "66a15a70-93e8-4d57-b08d-e459a35832e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a107a8-e0c6-4fb3-87a7-554b0a48fa69",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a00906-9aa1-44f7-a916-0fd9445b6b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d148f4d-08c6-483e-9af3-b88059238cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b428e4c-c9f6-46cc-a2fe-a4645b9b4ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c138624d-b006-429c-baa7-02538cd20cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d600c8-803b-42b0-8e01-1f94b10f9261",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c50a03d-d9b6-432a-9da0-a3740e39fce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ebab73-a742-4cb0-8b3c-96d6e421f323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a596213-3c22-43f3-8efc-9cd7aa79aa3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "353687d1-2f09-47cc-b93e-87511dad5568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb676a1b-5deb-45cb-bf45-1904b20011a7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa81153-04c8-4dc8-8ff0-38986137b6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096650ee-ec16-422b-9155-16f689430bc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c51e14-cc8e-4ffe-9a17-f2f00f0ae58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe0fb55-9bfa-4176-89ad-77bef9c2c590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784ea340-9312-4fe0-b650-2bf4480f85b7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23cfb2c3-37e0-4eb8-b244-1abed720eef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879baee4-186c-4ae1-b126-dbae8a7e3436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b505374-499c-44c4-a3f5-4ec01408a640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "270efb6d-ba68-4946-a9b5-d99377655d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdd70b9-7c21-4255-82ed-80224d1b84ac",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44091ed-7498-4644-a20e-a6ebb65d2737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f29fc56-132b-4235-9fd3-8731d75cb901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f637a1-b2a7-427b-aa05-e44ce8e60d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "988c2a2e-9548-43f5-92e2-ea9be5032df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1120262a-31ef-40d1-8a0d-162be28b4062",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818e5409-c5b5-4350-9dda-09cd3bd5c9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b201400a-142e-40af-a282-73e96401b79f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ceded82-a182-44b7-b70d-ed5e7dbd025c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6db650f-2908-4f6e-beaf-f6d11398e7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcdd4ab-a51a-4114-9227-c75395a57b4e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0d2e4a-7a1c-49ae-a286-77a344b3e5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333c5f01-173f-4bde-ae42-869da0d16489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38979a15-10e9-4683-8391-b5db71f998d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be64cab1-88fe-4f53-9dce-521fd0f35e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b426728-690d-47d1-be15-e95faed08336",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e966b1f-c185-4560-abff-8c17cdc60720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3166351d-7079-4158-9348-f34924bd4e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a9f7e1-d57a-4481-8448-e949d6125c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9408e8eb-7799-46fe-991d-24e168d73edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de68863-7726-4741-afa8-7c2cd0e1e141",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10403d1d-8bf5-4818-8326-8586553adbc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472a1b1a-005e-42fc-bbc8-6d46e0b5cea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484e6c2b-2dad-4f31-9ea5-9d13d2dde6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54053924-b693-4d21-a1c3-d72918395e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7a7494-6878-474a-a43d-931b0b752fe0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12db6daa-bd2f-4ffb-95d6-81798ed1cc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45595b4-c182-456d-a843-02fa1207b57d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c0f0a1-7df0-4e6c-bab5-4c918068ee79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba093163-963b-4fe1-a307-4c8ba9e27657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b0ad80-d082-43d8-a797-f71c06049efa",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeeccf60-b834-4d53-9101-3e7939a9d779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570c294d-e216-4d72-bacb-573900e3ac90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f926de0-8503-446d-bbcf-1d10c460a20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "545fe5a9-1112-4423-ad7f-8771ae28257a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0a2ba6-6722-46d3-9ea4-846443407d3f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe07b53c-95f8-4440-9402-5597f34bc58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edff78e9-8f60-456c-af2a-bf4552f3a3ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7dd033-2691-4c3f-8fe9-c47ab882e152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4cd174b-ca56-402a-aa1f-5e8f80635eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de6af1a-0fa6-453e-b940-5af1341fdd4a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083c917b-5f39-4a27-b1e0-a9855b08b4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7778ed-1bcf-43b9-8ac8-046d071b3900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a0bfc7-4800-41c7-a609-73c0f1ad09ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9207cbe-ff42-4b3d-8c20-f0c9f2d9ee29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3c86c0-51c5-469f-b55b-b662ae1688e5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4659f127-f020-4a10-965b-02d6ce24ba64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4f083f-eb53-4434-98ce-4083f1feafc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5c6b5c-0429-4793-a8ce-b3e92fa4b84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5583057f-6bf6-4d20-aec5-203b469b025c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b00cb91-39b4-4680-803f-c7201d67e6d0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4268d7-20eb-4252-9f86-79dabb7d096a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e3cc476-5281-4f5f-b927-a84538a93569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc44ec3e-2341-4d87-bf0f-0779bccd1897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38037510-18b6-43f8-928d-2a65eec92025"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56b3710e-247b-4b48-a3ac-87b77828ab4d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44fcd790-80b3-4f96-b0a9-94bde959d4a6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f379e56e-4fad-44b9-bdc3-4941b6663336",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "81bea6bb-5e5c-4118-8326-4684ad6871c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df98e09-77f2-42d3-8454-1213173e8f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c4af156-d8b7-4938-b341-87e970c41a30"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce404420-a65c-400e-a5ac-ade50ab06cd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6d78228-5e39-4e4b-8801-402ace02cb1a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec89d684-ba4c-4c98-bdf2-66d7dad98e76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95e2ded8-4af4-484f-b985-a69b17b947d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a466673a-e7f6-4a9f-bf6f-4ceca3744c8a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "74d025c6-207d-455a-a917-8b050dd512f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "060af0dc-9d2e-4522-93bb-3dde24c4667b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d3366e58-e402-4598-b1bd-85eb67717b68"
            }
          }
        ]
      },
      {
        "id": "4939810d-5954-470a-9603-be7db810dbf7",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1d10642a-942b-457b-af61-8d013355ed2f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47ff77bc-6efa-4624-a7f1-8f7596d54a96",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e9780ead-3004-49fa-adfe-4595d7dc0713",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08d82b2-89df-4c2d-829c-3bbc08fad331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e896a16-3dba-4ee5-b23d-83bef5ad8bf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551b505c-87db-4dc2-abbd-793659d840a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5779a98-434b-4b6d-93cb-75686f79d14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5b933e-d1b5-4881-a2c7-61777c15fed7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b53fc2-5ed7-454f-988f-623dc029eb1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9059a58-ba8c-412d-888e-c777f0207f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1afa8a8-f3df-4866-9bf9-c4d174a34c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "77bf3345-d1ca-4783-b994-2e3a32e1287a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446f5a02-b91f-4130-9b42-d14c415b7260",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c743383c-fb06-4db5-820d-eb79416c24da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bdec93c-16f5-47a5-8e3b-2f52385f9c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfd110f-c3ac-48a2-95f1-6b4f72314a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "740eb52e-3283-4a6c-b3f6-f015721fd0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308cea42-bb88-4b90-a3aa-69ae882fcf14",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f4e7a5-0f53-48f8-a785-590c1b778bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2999dcb2-901e-48a3-975b-209c521ee5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9f9860-9192-4bea-82ac-fcc3af83ed31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce203d9-394f-4b26-9bb5-ce4332d6b360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6805c906-1023-4a7d-af81-3447d1ce30bb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3caf6931-73d9-4e5c-8298-405a426eb4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0cf9b26-49ce-4d3a-abb1-7a70d966da32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f07cc5-9c8a-4a4f-826c-e732a564e1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7edb2652-decd-45c2-89c6-e6b822297643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f3c3f1-adf6-4bff-b311-65f75f05d461",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "740d7f2f-2a0a-4f7e-aac3-cd771013e7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5702082b-31f7-4742-a8af-40bb6bb1ad2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0179fc8c-6cb9-460b-af0d-a9686a393b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1d175d0-91a5-404c-838a-df27bb6d7a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d30447-49a0-47cd-bd99-a90a8f531f1b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96dbb00d-33ff-4765-999f-75b0f700f0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c39db8-b46b-4a62-ba8d-916ad0eaffc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a437fd-6f85-47fb-b055-9f6ea4e69b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a65e8a56-e911-4455-afda-10ce756f190c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce58499b-e8fa-476c-9075-87b5b9d88264",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc15d235-1ae6-4b18-94dd-83552207d24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24144958-52fe-4959-a1ed-24bb971835a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409792d6-7d60-40c4-92e4-971267d125dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d6b227d-1ce3-43de-a88d-b880dc2a22ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e24ab6-1e95-4a1b-9060-a6f71fe73266",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d62e6a7-915c-4fe7-96b5-0c84d5fb64f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7f2a5c-7781-44d2-90b6-55eccfc03e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd78500-57ff-43d0-8dea-829f00ed6029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea37363-6ce1-434f-8b76-6c7f0cf1724b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51a951f-64e4-4ef7-a25e-948c94f35b69",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89df6953-ca92-485a-93a6-286b9ce1a5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0213953a-5a20-4a83-9387-f0d519786504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f197c0-cd94-4110-9406-6f8e904720a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78d09a0b-9b2c-4ad7-9b06-48b3a6728b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee26bc2-7a10-40b6-b707-6480375d54f6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2b1724-b2bb-4a0b-be6e-dd9be7d1f15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4224eb4-c180-4b87-b362-5417a7697926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05838a30-9ee4-44de-80fa-92181fe79062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b2249a87-3b62-418e-857f-804d5c8455ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41d5f36-c7ba-43e1-a703-6a2638543d8b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c20a646-0a7d-4684-8d24-51d9eefcfbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a952c9f-c17e-4e51-b6cc-ecf094199236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f3a2dd-6285-456f-8e79-543934e21000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98c2659d-94e4-45f3-b3a6-b77e58120606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd470f8-29f5-4858-9d2a-66c79324e927",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2c714e-74df-4302-ba72-53665dcff502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd82342d-d5a2-427a-be7b-15a3de3389a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3e494a-bc91-417b-86b3-ea06dddf328d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "62606621-8dbb-4545-a5d5-ad91ab9b8141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132417d5-5576-4a76-bdb0-147bee26e152",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b28bc4-e925-4862-a787-67508c89b2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a25c66-b2be-4f44-985b-d6e3ee1349ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdf1fa6-7181-4338-8a27-719cfd745100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "308471dc-63d6-459a-a4ef-9009845eee2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2acfd3-9da4-4494-9ad5-ec4c28895af5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c1e06c-6545-444b-8de2-0d8e29e4a0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa574a4-0b02-454d-b7db-1191c33b48f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bf630d-fb4e-4a4f-a950-945a79676acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "253f1ff7-a639-4964-99db-2111107dae48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac607f3-8b58-44bd-abcd-bfb865eab057",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e11d527-6c9a-4e4b-b5ea-246c8ad1bb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b845f741-76e0-4d4f-aea1-a59b7dee3954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83841aa7-8037-49ff-baab-b478df886990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bbe6cd0-a7d4-463d-87b3-f98b1fc59464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539d8991-1842-43b5-8fa6-9322e9ec0598",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a80ac1-ac87-4bd3-b6b1-5aff01085ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed40d01-7d80-4b5d-85fc-3f8d6ca927bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d637ac-308a-42e6-b7a4-c05929aa19af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6468fd89-a0a7-4573-8438-f7d29e91f8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81814dc7-6b46-4160-acbe-7db006a777e4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41452e9d-80c6-4d01-9fe4-79e1a8aa9a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ae9146-e66b-443c-8888-a012ff735995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43596984-fc2e-4548-8421-0603260cc02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9265ce22-2602-40b8-88bb-c983be5f1970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6606cb92-27a1-42ad-8852-658df8c03f6f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a77230e-29e7-4ba1-92e5-b737d31b7695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0706a43a-e8e3-4ea4-8e16-2da085de3fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8d6c7d-5d70-4b89-b08a-9e3bc5d73a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fec60dc8-c577-4dca-a54d-4639acbb344f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2486de96-988d-48e5-8356-e359a151aec9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5430e6-1738-4f1f-8af5-78b4e9fa7153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2739508c-40c6-41be-be79-0fc580d69613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a73482-af19-43b0-b876-e941f41c0256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95fafa26-0c70-4df2-b4fe-79cc4f2851d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c110599c-be86-4b58-9ef3-8c3b72d63b62",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ea40ce-4aa9-4313-b191-ab2576bfde20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39499b64-282b-435e-9007-d287d86f5327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594103c6-7698-4866-b3ef-947c2460e42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24284856-9fbc-4fea-ae28-dea97aff7b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcede4e8-fda8-4d1a-9719-f2f2a665366e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da81a6cf-0e7c-44ef-8057-2883c31fadcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5979258-f991-488c-b701-d9c1f0caf263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7394c47-48ff-4109-a637-496b1e65dfcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df59d1a7-8ac4-430d-b347-b1eefb227366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f667777-2695-4bc2-b550-97448af1cebd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5b57d0-6751-40ef-a78f-09358a984079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d690440d-59a8-44e5-8d58-474e1b1c0eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cce278-bedf-4513-8383-0a33ab95d868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e716df04-9b62-4ce9-bb73-7b762a390975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecf946c-2406-409b-af95-e15bfc08eac1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d7bf9e-4158-4310-995c-314b61d2a693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241dfb7b-b13d-46be-af84-e9ebb914f8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72694eb7-2dd7-4180-87a9-f1fe1576b08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fde1eb1f-564f-48a2-a7c9-4ad8bdeb30c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f690f7d-1539-4c79-853e-d3b81f4d17a1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f90ecb-241c-4db4-a024-1ea299d91681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c96e97-eb49-44ea-9eb3-470e635b7d41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcfaf83-3051-45bc-8faa-8c26c03e3bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20e5238b-81e5-4d24-ac16-4d69123a3d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cce7b1d-77eb-40c1-b440-82da62d1b07a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444d30e9-44fe-401c-9db6-ea3bb3c06624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e11e64f-b3f5-4d6a-9590-56b81e664f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e3e6bb-63c3-4b1a-b0a4-76294df22162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c13ffa5-0a2d-4f5f-a654-d2885d6c618d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d765f4-3711-4daf-ba58-236d25fc2ed6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc456cc-7e29-4ce3-861b-d9c15fa65dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c256e9bf-3a54-40db-8a7d-0e1930dcfdcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bff15e-179a-4f55-a31e-5c53a134e22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "649dcc18-e534-4bde-86ed-644243e738a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34415f1-aa76-458e-9100-9769df36bb5d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d5a614-903b-4a31-8ced-8fd972d655e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b89bb14-4508-4c23-8773-e7551d9dd921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad3d73c-f648-4218-91ba-6db11065796f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fed555aa-b3a6-4886-b408-4ef6fa5cf55f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd1ac2d-658d-4011-9a32-76f266f721c7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc0fab7-026a-4e0b-98b2-04f94c77b5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "717f9828-4e7d-4bee-8b47-c9c2a090104d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071e95ae-1681-46a2-83b8-5524257c2cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6de6b07-cac5-4351-98c6-7ead2636055b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22d16f7-7fe1-45e9-9ea8-97d34f7f8cb3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac850e8-b19b-4c81-9c38-1453b6546d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c62526-8b92-472a-9825-07b482f583d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cd9847-7779-44ea-9255-b90d77173a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "142e822a-adea-4390-a7b1-fb1a3da4a2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f3b4ac-8f58-4f1f-8299-115d8967c40b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10238aed-d2cd-4851-8209-f5e216e8c58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f050c5-6293-4869-b0a3-9445fa3468c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b1adb2-5e3f-4fd1-a78d-6882282ca3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff1c47e7-ebc4-4ffd-81ae-f8ecf6e5cd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a1cde9-bb5c-41f6-863d-b636d1c8a389",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d444b74d-359c-4e4b-aba2-3d1d1559b5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3fa2a6-e9e0-4a3e-bc21-065b1454a4bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77871260-163d-4818-8e1d-163de67cb6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "baf2c57e-07f4-4aa1-ad0a-7d783b4a7011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704e43c9-93a9-423f-83b0-c85c60a32f26",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fda725d-aaa8-4b3e-a056-70b94c923e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264c6687-c169-4816-b22b-072b438b94ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b14bdce-e904-4cd9-993b-3741fe14a0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7cba21-4b1f-43cf-9654-b4e2f2029a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a56d96-4154-4a97-a775-e185422a9589",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd54f356-3754-4297-8408-3e1337f54494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5423a3-3799-403f-80bb-ce0dbeb97ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b04aae-0748-41de-ab6d-08f84dc00574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21a5eeed-45c6-4410-8f21-4077144fe819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be63947-2154-471a-b356-db5c283fbbcb",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b57e93-37aa-45c2-94a6-0f948a1a9ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad364670-a873-4bb4-bbdc-8148335b6be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6ddc65-5d1e-4301-a6bc-4799efa6cb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79e10c22-d0f8-4f7e-8577-46f218da2444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a37acac-73ce-473f-bd16-609624d01823",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a92b3c2-1826-4e8c-8e98-f224e13a3ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d91d95-e795-4253-8754-a08dd92410bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6c09f3-1d6c-447d-b2fd-cbc5841197da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcc40a74-5129-4b33-acae-1cbe4837537c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a10916d4-60cb-484a-af38-ca1801bb7140",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ee7362-9b76-4c94-9561-01e2072761ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ceb4e7-4fde-4c83-9ec0-0e8ae23905df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbf10d9-f1b9-420b-85c1-7c8d1e828e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6337bde9-f4db-484b-b7a1-ab6fc164cfd2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af407b39-dde9-4847-9e0a-496da3d2f9e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b199359f-41dc-4855-97c9-2579ffeec9e0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c03257-798b-4601-ad5f-5ea41648a4ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "00436c96-7db2-4225-bfbd-f361d32f4ffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73ea981-1921-42f8-8e65-41ff21b6eafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba106e26-dd1c-428f-94f9-12e0b329b7b3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83b9e32f-5c69-4b59-8af9-bc8b1438de9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1a73e4f-7a02-4acf-aec6-a55155b5d496"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "018d6cec-51a9-4a60-baa2-99983f43fbde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7aafea4a-5285-4bc8-b4d0-3695d53eef3f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61901ec2-2965-451d-8bfb-371c48b332b9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c8ee53f6-3d35-42dd-b4d1-efa20bf2094e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb46ba10-4473-4091-bd88-66247dac865b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b63e6525-f25d-4e9e-ad33-bec7a6b29b59"
            }
          }
        ]
      },
      {
        "id": "76c666bb-e159-4aa8-ac04-e61cb5173f49",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "33c4e074-567e-4a74-81de-24e9b0080491",
            "name": "Negative Testing",
            "item": [
              {
                "id": "342dd5f4-483c-4d3e-890b-f27f896bdb41",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c34cc6a5-f684-41d3-ad86-82b0785fa092",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eaa0a42-b48d-40e2-b138-ebf659140857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d51e5f3d-91fb-4e54-80fb-6337969f14ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce453243-3f24-46e2-8edf-2bd14e20a7c5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a438adf-f43f-4c8b-9a6e-79c5b05dfbfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23d9c5a-f67a-4d08-b580-f232fee47416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe2c1f0-d625-4e5e-866d-4dc5db4abc61",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018f107c-1838-4f26-986c-dc1cc47d2235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71fddb08-c868-43f6-9097-e10a3300fd51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a40cef-8447-4cf2-94d6-4faaa0d1e79e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f500270-01b1-4c62-98e6-b8f2efb28117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a6d337d-62d1-49ec-906b-9b04464eadcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fde998a-5c6f-4f0a-9262-6527bb7978bc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c6484a-04ca-413b-90ec-3d8c2811699e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee7a0ae-9276-4db9-adcf-2359327edb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f3f4c3-9cb2-4f09-b937-9188d0bc53b4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662fa700-a65a-43e9-b19f-c22fede6278d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abed7213-7e36-4901-8ec5-49f1832b065a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e690864-6ced-41be-a46a-ef2af7a17a2b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fab3017-79cf-4079-91c9-8c89a809f9d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fd50172-ab7e-43c1-93a1-1c1e00f1e548"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca9e714-48d4-441a-9ada-ac5f4d9e4b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04d9d026-5d2c-4fb9-97ed-94dbacd45f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a52d29-f2c9-43a7-a062-43c0ef140b49",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ae15ef-692e-4071-b1d7-4b738cb6fd64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0fea61b-8d5b-4b02-a26e-b6bbb5eb7273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c9b5d3-0bf4-47e7-adb6-3288bbd420fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd405337-db8b-4c4b-8ede-e406e0eb26e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd15449-d083-4375-a6c6-9e7f3ede675a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6aee96f-7dc9-411c-a792-8081082d2d11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e2513d1-660d-46a7-a1cf-64bfd29c3871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28e575e-4986-4501-8f83-32aee9163de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48841ede-28db-4121-80d1-5df57227c62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d430b040-42d3-4c7e-82c8-ca2d64c544fb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5eab7a-87d2-4694-af77-7b761deb0466",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cad288a-40c1-4cee-b8b6-76eda07a25cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d1513a-43c8-40f9-81c2-58aa287a43c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727d1b68-69c0-47d9-be8e-9904e276e318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6eeccb0-682c-4f8f-9d79-c2b5a683f3c1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a78616-dff2-4e85-9d1c-0118a09a3677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da91b761-5404-46bf-b7f5-1ced7c521f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9600e34-f59d-4cc5-a66e-559e23463c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b03a4ef-10e7-436a-8f01-28cd8f1329cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61bf6792-7cbc-4593-802b-44e2c8a03cf8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a31736-9931-42a6-8f8c-c9e99e6b2b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7a4526-8b14-4a2d-9a86-1052ab589475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d688014-8ed7-4709-9bc3-67174873d1a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58cce66-6b71-4133-a02d-0b9dba770c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22781e8-6ea8-48ed-8aee-f496b414b562",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6568c0-2ef4-4b26-a305-bb7206c557cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51c43f51-d353-4b34-ae79-2e2978803520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053d8c7e-428e-4a99-97fe-2e88f86b0624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f677d593-0716-4d61-98b5-446a71d97890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6e832b-a543-408b-9e8b-1a0e04adb0e0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1740750-34d4-4728-9d51-6bd07b744135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f2b25ee-9f5b-4d2f-a8b0-ebacf010a94f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e63b8d-aca3-44f2-8ab6-1eeff5a64101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad8bc49-3056-4184-be6b-1ca59504d8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70214442-cdcf-4375-a75f-da098efad44a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca46066f-3789-4b6a-b3a0-1d7e8e5fb212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf367a31-f909-4b3e-a7cf-9aa9e4a73688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74592d8-9138-4af8-b297-b1c6ab34c583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63f6994-f4fe-4374-912e-9a734918720b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d136ac4-57a0-43ae-bfa4-382c22a44a3e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e72c59-346b-43ca-90f4-0960cb2eda26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4fd1834-fdd2-4ace-b83b-fca561cb25ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0b2834-b077-4bd4-9224-321e1d030f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac7f9dd-9157-4193-ad9a-9a0e2a72e85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1e38eb-7263-4351-a0bd-fc927f54b6e8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69da63a0-04f3-4dbc-b4b5-062c590e96ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e604ac-430f-478f-8dd1-eb3dfd97922c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee3b2d9-9385-4982-b169-c2d3f46ef8dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc0fdc43-bfdf-4eb6-8bb4-888e215f8fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d1ef38-6347-4630-9d2e-581834bb39db",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34c7eb4-d06c-4119-b432-d1f2a3f09f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c72575-004a-4bab-b24f-f08822510314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75eef50f-3829-4f2b-865c-1946ba345808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e441c67a-7495-4ffc-8afc-5fbdc712b4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12657fed-10d7-4c82-b4ca-57b01910f708",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b909e8b-e078-4f16-8cbe-4e389653b107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96317541-c4cd-4acf-8906-5eb35e92bfbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852e4ad5-055f-4038-8fd9-1f7285ae4ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cc401be-8098-40d0-a730-fac9706da53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c289322-b9a8-4bef-aafc-9178f980589d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a4934a-2895-4527-ac43-f959c762e905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35e2477-efcd-459b-8ec1-53f9106b8f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c10d7a0-86bd-4ed8-9101-8df76999d1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a5a669-1d9d-4687-9672-afb4024acf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b67e09-570c-427c-84a7-22adcd26a9b1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00da019-84e0-4628-814b-62bc5cc8f594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d72ad4-ccb7-4cde-a68a-7e88a0a76c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d70e69-be98-443f-a2f1-756c70173e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53cee0d9-dc49-4b41-9b4d-22ac7e4a5e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02950377-d87e-4a9d-b746-4467ee74b7eb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e404e4df-c78f-480d-b944-8df67bc774b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a428aec8-79cf-4968-b88c-ef5dbeffe85c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ec47a2-c58a-4a42-9d7c-ac90acd38ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1e0a34-a33d-4dfc-8583-125010a0ee50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba8ecf7-d074-4797-9a48-16f98c706eb8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18919dee-82ca-4507-90ba-41e4e76bfe40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b1df6e-34e4-4521-944c-cadee5ad7d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e1bbb1-6d1e-453d-94cc-f3d12c761103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab0f86e0-2ab4-4007-9d24-cc5d0e5ed139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a8aaf5-fbe6-40b9-9293-13c42f5afc50",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309bd25e-6477-4d1f-bbf4-1d48c8dd8226",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a6a955d-91f3-429e-b690-58bce66e9392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6e341d-e254-4fd5-82da-97e45c94e317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98040538-2ba3-4be8-9648-cea088648ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c3cf40-d7e6-402a-92cf-5d49b96740a1",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8331b88-6fcd-4c48-b350-1b32fa15fadb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0160f196-813a-4a17-adef-e1400b9f7c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168e272b-81b2-4a0c-aac9-254f9e7d2c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7291e2-a0a1-4ce6-bb49-085fb482b68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84250357-8d98-42ba-99a0-06a6aeae5eba",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8a842d-b22a-4e21-8ed1-9c4e3d77644a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbd6365e-8a23-4844-a6c6-cbd81246f502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5a35b2-ba56-4b18-a5f4-3b1c958ffbe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308fc539-5d7c-44df-99cc-58a434a03962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c7c39e-e8ca-47be-bac4-41be3d6bbd5d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40531110-0b0f-4851-898d-939bc4532199",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ff830e0-9e92-46bd-90b0-27dbf77eaa14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63fba2a-32b5-4fff-9f6a-cf3472ea68bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72fcfe59-6f65-4101-96ba-744dffd1d203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2ef3d2-9a17-41b6-a472-19758cba32e4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db32a0a8-48a7-4bdc-a972-33c8927a3e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f10525-1f1f-411c-a0db-e49252df5668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1188b291-4ddc-4e34-8cc0-263f7e15ccc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4392e42f-3e64-4876-a1b9-5e7640a6a1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af161a79-7d86-4e87-a2aa-87071ec306c6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c384154-831e-4470-b26c-617e00c31269",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90525467-4f0b-43b7-b15b-aa5e27fc5b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c4e8d8-e116-48ff-a865-90d306cfcd8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "317420d6-44a4-43e3-a938-e1bb735d73ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17521202-da18-4c48-adf4-6465aac017f1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ca3faf-6b00-41dc-a300-c2f2f551ab71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6171391-a473-4a87-b211-faf6c6f9d721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6724534-9fe3-48eb-baf7-ce3fd58f5362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a117e9-7c0e-4dad-ab9f-297a6bb97a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d9177d-e268-4719-9b84-f3f24f0f9e25",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcdf07f-3e99-47ad-bb26-4f69ac49a80c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edaa6a7d-ae64-4a48-bde8-630a15c4ab35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef17632-b154-463c-8028-9d3560c5500b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c596b1-fec5-4072-a965-a046a6bf7018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83577ff-18d8-47d9-9084-4678862f78f8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55689506-44ac-4c8b-b049-660f84fc147a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f816bb41-cf2a-4989-8d6f-76bb874e143b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c481232-2324-4a9a-b255-ddcc45147033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13de2f60-cb9f-4128-a3df-0f3b79cd6bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b98172-7c09-4163-8378-891b0c1f92ec",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c248cb-a6a4-403b-8083-c30be0be9ccf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c00987e2-9bb1-44d6-a44a-2a2a0c74513d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e21411e-1a7a-4e97-a703-6789c0af1efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23db345a-e7dc-4c80-8032-0743715a1b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c066047e-7794-43be-937a-151b8f855fee",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f5fcca-283f-4801-8a5f-94182aa6d8f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a1321c1-b874-443b-bed7-fd776ff4778d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4dd4fd-7add-44d5-bd88-ac208bbe01c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf2b701-b238-4cbb-a700-ce4114a77e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca4ab9a-aeaf-4635-ba04-5482e48e6bb6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794e8845-3e3d-47e0-8b11-d73f97ff3331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "007ab3f7-b559-4a80-977d-68ed8f7449a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3194c2e-89f2-4401-b285-3f96487e61c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0fb46bc-a122-415c-b4bc-4c6eee3abc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8405a2e5-02a4-497f-91ec-fda9b97eda7c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e67ad8a-dd19-484f-90b1-20dbed73dba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250f515c-0ae7-4ca2-9b12-b37f7c75309c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9aa5cac-a000-4fc7-93a0-4c5be044e7d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3452f59-0bbc-4fca-935b-0e3f753b0711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e22b03-df38-443d-8661-07cfba9bc5a0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc13ed6-16de-482f-9e31-fac66990c382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af784b45-d1be-4754-b8f4-c994079bfa1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e405ed-f117-40ae-946a-b8f2c0f01d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c50e9eeb-d4f1-461a-98b4-0623e03145bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295d1dbc-9063-4d9e-a5fc-a3124339c346",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b9bb1a-3a81-460d-87c0-0ae54c4137ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d8a98c-215c-4777-a30d-71130490e8ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4598d307-00b7-41db-9284-bb522ebf70e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58d5ca60-7080-47d2-a055-88297f41a826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332fc62d-b260-44d9-93ae-5af06253c6e9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab56c70d-daae-42eb-a741-25e704cb5ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3938b5a-2390-4ff4-aa65-db95d3912de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7025ffeb-1ccf-4839-be91-9f83c49cf06a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "669fad14-3376-4ae0-bce2-d36b4420ac02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4816ca58-1ff7-4da7-b0ee-25c75c6f8b4c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd7c474-9b06-469f-bc0d-6708452623c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "051059dd-fafd-4ee4-a523-0ad1f89da45e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a44271-e27d-4885-b17c-822b0b31e388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42af406f-486c-4bab-b4ed-9cbf0f331298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d17d40b-3c3f-4ea2-8e2d-10673c3728ff",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0577ed56-1d6a-454b-8deb-07257da49e25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66e88bac-2293-4783-a3c5-8c1a75a755b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5eae142-f5ef-485f-a03d-a2bce3d8fa08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a1b069-d17b-44ff-86d9-3d617550391a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4d69df-5bc4-42a6-a5ad-64ce93aaeae1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10ceddd-d415-4bd2-86b9-fb319124f419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70a8b8b-0762-4dce-b154-ff31b0d8345d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bb06ce-bbb9-4d6e-8911-347dc1db0097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f83d996-0350-4135-b8e5-d5a9bad42501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f7054c-4e0d-4abb-9883-a34204c947ca",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4910a29-8421-4c08-9d60-9f84cdcdeb38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9f676c-100c-4208-a2f9-cafb59393b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6517d22e-1351-42c7-b218-876223409145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db870293-7ad3-43c9-904d-96bf1402171c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666b23b4-50f4-4f54-b0b3-b665690a65eb",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7f3a94-3931-400a-9787-b47f5815a319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63fd4f2f-651e-4b0c-af87-5376002421ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea194f05-a2bf-4cb6-aba7-dc456c91e76c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88b76b7-76ca-41ea-88a3-1080bad12085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cad709b-d736-4879-8b77-71b7b38c5d3b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33834330-7c08-4fd5-b779-532a2ab85efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394021a1-29ac-4e18-a2dd-6f78bfa52634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6616bb9-3008-4a47-9ce6-64da8aea9d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6b1c4f-008d-476a-b882-4c983905ddc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3ebd55-c2ea-4eaa-a698-215fc6affe5e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872abbe9-99c9-42ed-9e6e-fdb91135079d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96645d9d-49ee-4421-a977-04c1394bbbdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "588a2e74-6a9a-4fda-aecd-a09210407c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359ef31e-74c9-4c64-b968-6e44a98b6c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31279927-9aa3-4c98-b766-2f16a760ff95",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5384baf7-e857-41fc-9cba-6e6242d6b747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266ae21f-2160-4c80-80fe-c94190a33ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b00203-7e9c-45f1-b406-efedfd1357d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c5cb90-b088-4ec7-92dc-06e47df82fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae53921-c6db-4ca2-909d-96679e6732e4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886d4a19-5b4f-44df-866d-13bd03f7e261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5603a066-5808-4e01-8b2b-0c9faa3d8fa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42c49af-8596-4998-bbc9-6c1ae31dd3ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee863527-d432-4469-bc05-efe728a8a01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1962ad-8d70-40aa-bd32-f488d3c75b45",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5d1717-7231-463b-88cd-25f2debdc5e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3992b585-b66e-42c7-884d-948bfc6e0bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03cf129-5341-4b57-81ec-27660bba3376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da28f66-e09a-4f5a-91c3-46f7811e5d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20732d9-1f34-456d-8475-eee2e70eb983",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700a10b0-7b33-423c-9364-0f1e68556c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb3012c-6afd-4001-898f-82327696bb0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e1f803-832c-4305-98cc-6cfca13b586e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4d4be2-90f3-4820-a486-2b7d340c6f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385e9d74-14ab-4d7a-b0cf-618afcd13892",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1458643-2ff7-459a-a7b3-30b542dfdb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1f004b-0801-4c8a-8b72-167fe83524c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2b12fa-45dc-469c-a071-0eba2a4b4765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e4aab6-302c-4134-8d0e-30f8d6684c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62928de1-2b20-4017-923f-aeecd92ac3b5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0fa0463-11d2-4ab3-8b91-d4fbe81b99c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa45716c-a3d5-470e-a076-f1241744ef38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd113530-b406-4345-bf81-21bcb3fe321e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa57e19-9675-4987-869e-868e48ec316b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdad631a-a2c9-4a0e-b43d-7b6e1945567c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd914e24-b048-4500-8bfc-e7b53d04135a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b5e5fe-a6ac-4e7f-a907-8b579ff9d7a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fdb9fd7-a6c8-4cf2-868e-d7572e8fe1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221a6f53-b1c8-4632-88fd-ae0018b6f0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193795b7-3499-4c1e-bde6-5fb66032e9b4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e28285-2231-4113-b7ca-41f9b10c867b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4981ec3-fb5a-4028-a4ec-42bb9dea9391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "489b1799-917c-4343-8ed2-23f44457fb2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c73f4f94-ee35-496c-a595-15fc3a7449bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1199bc8b-8fc4-46b3-addd-4916cc76f578",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b1e408-ee73-4891-a09f-7868cf2ac5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55a196ad-11d8-4b44-8d54-f14cc79e8e45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e7c0f7-aa0f-4e23-aa0b-4bffffe08b96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770dbdbd-7e14-47ba-90f1-1256fefcfbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5367d6-31a2-4650-813e-287ac2026d69",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69880a78-4bce-4734-bc04-c0612b79a5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a81b2b-57dc-4493-b4cf-748dd4a73052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afe1232-58c4-44bc-9d21-3c6336e1d6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779f36b3-3008-4427-85d3-e5fcfee5fb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e7c2c3-611a-4dd6-b64a-f4ae78a91f2e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5803b420-78a4-4774-af70-476c91679040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c27a56-370e-42a6-949f-09145469f3d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df436e98-292d-4c07-906d-87be6e952e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec29985b-f0a4-4458-b012-6c20ce897019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab47854-5a2d-45fa-bfcb-d9581ab3bba5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1350a6c5-59fa-404e-acd5-1aac1de58612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88361538-bedd-4ab1-88c1-89cffd9de89e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "496c7ac5-9986-46b1-80f6-89ff24bf0e73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b5fa9e-6962-479b-94c3-ea1302646f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0adf28-1d80-47d4-bc75-e48d738f0ecb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2438c917-4aca-45b6-b4ff-0c64109cb5b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756e1c70-9a8b-4df0-b60e-897a0e09d893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc8190a-8c56-4c92-a9e7-7c5f4496d5a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb31c646-67be-46b4-9993-f710ed0d901e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69002d88-eb86-46ba-9917-357f2f5e2305",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4231cc5-db45-40af-87ca-be6353b4d1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e1fc6c3-618d-4c8d-a7e8-5b011fb42bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70003cf6-0392-431f-a83b-5bc9e40631f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0b54b3-3a76-46d3-b63e-e41c025c600d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8caf5c7e-fb5a-4994-90b0-69dfae8b1484",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8c950d-f671-4686-b79d-412a513d2966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da68515-4fd5-4432-9735-2c1eb1dc3165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b721f3-9315-4cf4-bec6-ab74e2093a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be19da3-771f-4159-a0f3-98b8e4ff6e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1096ae-f152-4ae4-a507-4330ef727fc1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db144cd-9999-4cf2-8bf4-8cb7bf06aa2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5db949-a131-483d-a713-176d5399b355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "752a2ff6-0eed-4265-a773-6e70943af124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cb6cbd-cc0a-4624-9707-a1d6c5a8e1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91286399-782a-4da1-b1fd-2708994ba1e5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb04a5b-f855-4207-82ae-0d03cf9c8df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1610b1-c8a1-43ca-83bf-931c7bbf012c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9e6538-07bf-4ecb-ae73-5e46b9d52543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d35d48-cc44-41f2-9866-d8a1e34e8099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1338d4-318b-4285-9186-f18a8006cc2b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030a381d-acae-4afb-bd4c-5cfdf96f7fac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13f7950a-a97d-4438-805e-35ab81501bcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d4e146-a308-4782-bf1b-483841ecd065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205d9884-7dfd-40b2-9017-7555b349dc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec3d049-b03e-4b7e-9cd7-886b9e8e5e0a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1fb2d76-42e2-41c3-babf-843eaec01784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b710f1d1-4c1b-4645-b70f-c0ce93449752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fc25b9-afa1-44bd-8646-3b2d0e45ee72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a842af-8225-4394-8159-e21e2f790fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a32ae0-7513-4847-b865-16f3b560d8f5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab2bab6-e6af-474c-80a3-1acf73fcc720",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58f8c0ae-b37c-4829-8818-f6b3aa0f2ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c9385b-c42c-4a08-a520-4a55e53c15e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be9b28f-a8f0-4a65-b818-c2a5ea03008a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f66cb17-7f0c-4fb7-98b6-1e0d294663fe",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2233392f-395e-44f6-8481-4655014f3f67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbcd034e-815f-4a97-9715-52ba2834dff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f832b81-8389-47b4-8a77-515fb353d86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3ce771-d486-49da-920a-98491318a7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71f2173-29f9-4a79-98d0-65652852fe08",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c250a202-ccbe-48f6-9604-da2713c60f80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4e124b1-debd-46ae-a271-f7ae9a398acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "317ac109-3fa8-4d96-bcaa-0ac4f70d3915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c6e668-36ae-4886-8432-744163b31f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66dbc25b-eb95-4d3b-9396-177e3faaa582",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d76a10-9f53-44b2-ab80-7f84dccabd52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c32b6f5b-9382-45ba-bee3-e9dac791f8f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c8baab-d0ed-4585-997d-dd7708ab96f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "839d7686-14d5-44a6-b746-daa189dae74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3917c893-a1d6-46b7-93e3-58acccbfb149",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433aabe6-ad86-4e23-b6b8-9731c47de6f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9065dfcf-33fc-411e-a357-db21353dbfd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ba5a50-f5a8-452e-a4d1-43b734f781d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9b43d4-afc3-422a-a200-7c89d2507e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2d1f75-841c-47e1-97d3-b77fe3f02153",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a15617-0228-481b-a557-42a29716ce3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46f8326c-8eb6-4928-8fe6-90df3af79825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88016901-447e-4086-800a-d2f34cefa831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef0429c-6af5-4719-b243-70530f335197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16670d6-5d67-4fe3-8ebd-474d0950bc84",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f5b350-0652-4809-97b6-cc494f378760",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1f74de6-00b9-40df-8f3f-207e1eeedd67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c123f7a5-c938-435e-9c3b-34084b68628e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc883f2-13af-41e7-9838-e3ac720ddcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce1da89-151d-45d6-8304-9b3aa1724da3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45efd94f-c5f2-4ee6-bf6f-84116fa6e84d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1b347ab-2558-4d1f-92df-f88d71ae8934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07d14dd-b472-4fdb-8774-e092f4e607b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32464e8a-72ff-4368-9cce-c7d8ca9d743c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2e25d7-f8b9-4ebd-a01a-6669c5bd2beb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46659cd8-6942-4ce7-9a66-bdaa8b6297c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdf18b0b-0780-4d20-a778-44af31c1c084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06a46f4-72d3-4730-a99b-f8b589491cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd3c226-3300-45c5-9cd8-c030eb79b299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9355fa6-2783-4c7e-a45c-9bbf73b70bf4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb4afb9-846a-47f8-a754-873c97ea98dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe3c5846-4ee9-4380-9c95-b599b2c6aee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de61cc93-3d55-43b0-9b80-c15e092d00a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d040cb95-d4bc-4a73-b69b-6d11bfbd3f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84025dff-1540-4b53-8702-7fde70700878",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a941242-14aa-4799-8bbe-d61d538568a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2731c603-f10d-4a54-98c0-273f07f5a36c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "359c4421-77fd-46b5-90fc-637e7eb12671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54209f9c-5094-40a6-a93a-877d5816af48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138f38d6-de38-4293-8372-a5ef0eaf4b2d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a002c94d-93bd-4f6f-8651-9de8e52f91ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc201eef-9b3f-47b3-b76a-0f0e22171457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27426802-ddf7-4029-8ff1-71dd0d675800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e599f43c-cbc6-47ab-94a3-cce4acd8fd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d53e9d-011c-4936-92f5-a54c7bb01e11",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311d3b4e-af46-41c2-993f-5d691a763b0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33f2ec66-6355-48f2-8fcc-5ed14c150d8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f29e1d-9ea1-4d8e-a8c4-92fcd0002c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "841c8b0c-756d-472c-adce-1adb99bcd7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96abd64e-642a-43a4-93e4-c804faf4bfd2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1156bbcc-d7e3-46b9-b8f8-a0d53dbf8922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4933b55e-c5a5-416c-abcd-9631a7a90356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2493862-2170-4042-8d65-ff47230a931f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcdf6b6-49fd-47c3-a369-8c9a83381aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed72fbf-c8aa-4311-adc8-0132595bfee0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18387f4d-e013-4acc-8735-30618775bd21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6192de1-0390-4401-a62c-f24de0676ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58718d38-0ae5-4d57-86be-3549a0d6ad1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316c9e63-d290-4f3b-b2c1-3efd61bc4939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936da141-83ca-4bb2-9cdd-19ea8df2c63d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120db124-ade7-4592-8ef0-daf841beabd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34dd13da-2d1e-43ee-b546-638f5883e6cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c752d89-6f3b-44e4-911c-3a6e54494907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f3dc2b-843a-456c-b786-3e474a9b86bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d6369e-cefa-4549-9f75-82607117dfe9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87c2eda-f997-433f-96f8-c8092209b39c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fc644e4-ee6b-403f-a766-5f5881f2a13a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7151663-d7b8-46d2-8682-431620064383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea22e415-5c93-4491-8f47-afdc492c16ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09421f55-26f9-4573-b295-a593b9d8b24d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44468bfd-9ba4-4b7e-9fc6-07ac1187c7db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8bf2ab1-50aa-4c24-9bd8-d49b37271e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "291d54a9-880f-46c9-abc5-59b418c6d2e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d5ea86-ea39-444a-9cb5-f01300dcbc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d859c21c-9efc-4942-a099-dbd00febe274",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be2f7e49-146d-41b7-a5b7-6db8315bebeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81adbabd-2f32-4900-8921-d9d0debdc153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca8a82f-e182-4759-ad64-0b3006fdf5ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0c9237-5129-4d66-97d3-8a4422948c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6108ea-ef93-45ff-a2a8-09a0f424569e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460d4ca1-d6af-4211-ad14-a031dfc22718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17a18587-0823-49e8-bde8-b27550986ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a27b05-98ae-4570-9230-11f938410edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbdde7e-a19c-4d83-b258-f4ce4a29bde5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31840771-24fa-446e-bad0-bbe719aca6e0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622af768-55dd-4253-bad6-78d4df8d3571",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e0c3c6b-81b0-434a-ba6c-267ae4beff0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "359fad6b-d11e-4d8a-b294-961f892afcf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8918954-add2-4f9d-a46a-f319fb7f5db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfff6d65-9fda-462f-af55-67bd72d6dcdd",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad8a875-71d8-4f82-a221-324f7066f3f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c5e35bb-00f9-4b08-b654-ec10c41ab084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "305920fb-b3be-4bfa-ab95-9a14ccb85c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b45055-c73a-4883-8df6-bd21de97b7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7788e60-3945-4213-8c44-04db6b08e7cc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b494abf-c8d9-4ef9-ac4e-3097d880cc37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27c0f362-bf70-468c-8ce6-640b8c08080f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef17bcca-7604-4c3a-8c1c-d921cdc859ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a2ce5c-5cfc-4f8f-9b16-ade4c6cda2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab49add4-df96-43c0-9db7-6abea997c5ad",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d33142-2833-498e-8d04-3583bb0cb013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf315658-3e5a-465a-b2df-724720f86d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "405fb864-608c-4f4d-9ed5-0e147fe5dad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "382a4d22-bc7a-4f02-95ae-cba82a7fd8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11a394e-3b75-4fb6-8d9c-1c91904c9da1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8039aa-77e5-4f6c-a977-be22cef57416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d59a456e-c9b3-481b-aaee-d8c2c7768ca8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c585d3-e795-464e-8211-71e76943f1e4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8fd6f26-cc93-47cd-a4a0-c7caf523d1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b470656-eb7e-4c33-b6c7-0a2269b029ba",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecb47e0-85e8-4dd6-8f5a-6d96ba1bd688",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8825ad57-445c-4426-91c7-8293af6690cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf96380-b2d2-4ee0-b3f3-5ec249d6fc1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe175f4-02ad-4e51-baa9-530c90c2b59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29eac61a-10d1-482e-8ee2-27c2bddf3869",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7df08fb-051b-47ec-a1ab-b9b04566edd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da4c3a61-f755-42d7-99b9-8e791582378d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180c77c8-184f-42e8-b2b1-f63b29d20ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b34b4d6-66b0-477c-bda3-3fee8d065f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9962ba0e-bb02-4f49-8af7-33b1f58dddda",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2a6a86-61c2-42c3-b617-4a14d7853a3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50948bb1-e84e-4df3-b166-2e999e4e12a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c539379-d52b-4c4b-a957-0b52cc6ea1eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1d2d33-9fa2-4fbe-8f60-43822bc14794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1ec29c-60e4-40c3-bde5-cf383819f4ce",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aeed2d0-f1e6-492d-8492-fabd16cc7a93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0da05d5d-3f03-4193-a9dc-f62c731d1b92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3699067a-06a7-4a1f-b1e2-da1a9e6c1f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31713e00-3d48-467b-976a-2a11e1063011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5233fb46-d15d-4404-9888-9d59595efa62",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd47f5b8-0325-4c42-a0c9-35d620e4d74e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c10f33f-c724-4f4f-9417-a02c8f21a3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f1f1d3-f1f8-411b-9ddf-d851c85ec58b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e59eafd-831d-4a46-bf96-57dd76158c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6038a34-080a-4c60-aa59-ac9523796ed5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1659963-b242-4d78-851f-e4f6514a61f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a23e9701-abb6-444c-8c91-7bb272ccdf3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba31675-7c2d-48c4-a629-1bc50371cedd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f871a4-43ba-43c0-b43d-7f5f1e81648a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed51acd-6f79-408d-8e79-b2a22d7e7159",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a1823a-1c47-42e1-9ce0-0cfb7cebfa4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "653e8537-05ae-4983-be30-36dc4f70aa28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd85a9b-c8f0-4355-870f-4bcf9b59c7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4095eb40-1ff7-4c90-9103-e2591799124b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30be091d-48c1-48ad-bcf9-4c41e802dd96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8f018c0-fbbc-4f8b-8cec-48ada817e1fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a160786f-6c05-4962-9cd2-baf4a48dedba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "676bf73e-96a2-48f9-a367-e00feef5e9f8"
                    }
                  }
                ]
              },
              {
                "id": "d1846adb-c024-4221-9cd8-fef4e36e55be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62c1e0d6-3247-4562-8638-cbfb520f787a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7aacc57-c522-477c-8bd4-d95f880fcb15",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7038a851-27e6-42e8-ba1b-6720ac101be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "375eb90e-9b9c-4e02-9a08-5faf8e51c15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea6effff-fc27-4904-86e7-ddbfe65c1fbc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20a42b1b-013a-4e55-bc1f-1bef8d24a384",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d66d8f86-b92c-4797-a835-e4dc9e8a0376"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34acb581-a023-4dcd-acc5-8d42f5b93528",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d52a24dc-6a7f-4654-aa02-0450ed8e8a8a"
                    }
                  }
                ]
              },
              {
                "id": "053c51e0-a2dc-4554-99d7-1608b6f0f6a1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "dba1b01a-edff-4ded-ac48-ab1456ced1d4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4f582d-d780-4216-a415-3f62c5bf6c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ba470df4-73f1-4108-917e-48ec0e2bf90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd27d416-6527-4825-8731-e03324a2cef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89fe31f3-9d43-4d25-8ce2-ae151d8a8296"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a030eb74-463a-49bd-abd9-05f8d7b8dda2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2eca2b42-1da7-48f4-b2d3-d7d253aacc41",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a9e2118-5f0b-4f54-812f-1ece7ac64c81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d6e5435c-671d-454c-be96-a7d1b10248b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34fa00e6-10cd-49ef-b558-b133c55c6d8d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39a1babf-c673-48f3-af25-d1544b088df5"
                    }
                  }
                ]
              },
              {
                "id": "1403c09f-960a-4881-b79c-a63ff9f1a7de",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e678a17-53bb-4133-819e-bdd962d5cb54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d6cd7407-a07d-4c01-a344-4cd73d3c7a39"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60a508e3-4a2b-421d-a178-f9650cdeb195",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1d7504c-b8f7-4c4d-9b65-2c43dcb22be6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5c04f67-b408-4cde-a4af-219092f46de3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "61b5167b-e8a5-4c39-bb41-7d705b9e9d42"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21fb5c63-bd6f-41f6-8c1f-0d2518f37ebb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ca4473b-d794-474b-bf4a-435bbd2f44bf"
            }
          }
        ]
      },
      {
        "id": "239c82ca-0366-4fc3-a6da-796d19f5f19b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bf47c572-8e9f-47f4-b7d8-5b28d1b0917e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60bc306e-e49c-42e5-aae0-fe1ca45dc12e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a05a27b5-373c-4da0-95d2-9e61d4fdc111",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c543e74f-3701-469a-8c7c-bbe412269d5f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d59bd2f1-ce21-4283-b213-aa6a0be2bc06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0dfca1-c02d-44df-9e92-643c97bb135c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "086c2890-6bed-47cd-a71c-be7bf96ad8d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adfffda8-a811-4f63-ac27-2a8fe28fcf9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "261516c4-cfcb-4f51-b2c6-080948b44103"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0b2ff64-2336-460b-ae50-1acf7bc7f315",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "931a4fb8-f06f-4ec6-8f03-a27fdf4d9499"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b86b4047-3831-4fb0-ab27-b40c0b6d88ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "68e9c012-1cc0-4f57-92e6-9231a2567159"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "efc6c9d3-5111-4b52-a4c7-bd165755ec80",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8c1ce6c-988e-468b-bd99-1b6c758684a2"
            }
          }
        ]
      },
      {
        "id": "e000edce-084e-43e8-9ea4-7c26d5d5a807",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f12bc44b-6a55-4334-9869-fd047570615f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b675d0f5-f383-4a4c-8db5-f18d6ceb1581",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf874444-5744-4514-a3e3-e8d81a1dacc9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a26fd6-40b4-4798-a350-6d144570e116",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f172986-a300-42f8-ba11-b1d633a59832"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add38856-6990-4e57-b06a-588a7d60d0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f225ced-dcbc-4ffe-bd6e-935a246a067a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4921e64-1567-4e0c-9911-df65020971a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2799a96e-b394-4ade-a143-e3c5ecf087fc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cdde9bd-fcee-4012-96a1-dc8e20e697d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b45fad3-e70b-4d76-abd8-c3824826613a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec312cf5-f90a-4cd6-950d-120ef2fe1d82",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6ab4d7ed-2d8d-452b-b517-5ba39c94f92d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7cdd70b5-d8bc-4223-9555-645d497b6c1a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a617c8ce-5cb9-4e86-ab28-9f82f0948812"
            }
          }
        ]
      },
      {
        "id": "433a4713-bf89-46a7-931c-8be31590a99b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "01268fbd-4921-4226-a6cb-3de10dbac0fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "716b642b-7aed-4a00-8947-6955a0aeaa4b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d367cfc5-5c06-4b59-a68d-3964c91954dc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4283bcfc-2efc-4a08-91cb-4f2d0d643f95",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2691203f-2290-4bd6-a9ab-e8e05a7914c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c517c1-4567-4fbc-88f0-19fb361a0ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ee1c83a-60bd-43d5-b5aa-3f1b021417bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "940b0563-34d1-4054-9eb6-cc7e7f8edbd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "982ae158-463b-4b87-b2e7-81bc12255fcd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fd49bef-5393-4e5c-9603-651cbbc807ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a26f54b-3f95-42de-a41c-ccc1a3d87b61"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9788ef5c-5f8a-4deb-9a2a-4a0003ff6439",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "259453bd-7a62-487b-9782-ced6ef870001"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60ab4eb7-5ee0-4ad8-9841-162fa2c6fb6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26aa2ddc-e116-42f1-978f-f7a77b6a7b86"
            }
          }
        ]
      },
      {
        "id": "f222aa75-8b38-46c8-a266-28cedfa3153c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5344aa11-b6fe-40bf-87b6-b7623f9c0384",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "783491cc-67ee-4a52-a937-ac7d17fcd36c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6f5f81d3-434e-4569-aeae-837d731764b1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b79f114c-16c3-4966-82f8-39e527351609",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "331680c0-68b8-4cee-81f8-580d3776aa9a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 85.2035087719298,
      "responseMin": 6,
      "responseMax": 830,
      "responseSd": 91.71168010886225,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708648423928,
      "completed": 1708648457672
    },
    "executions": [
      {
        "id": "7dbf6635-48ce-444c-a4cd-e5630e91b2a5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "86103306-f20a-4155-b698-bb42e3044359",
          "httpRequestId": "5096a49b-486f-480e-8b01-a028a7dc6529"
        },
        "item": {
          "id": "7dbf6635-48ce-444c-a4cd-e5630e91b2a5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ab71b6eb-c1f6-48cd-9dd5-0730bf66764f",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "39d70b93-ceeb-49b5-a983-ed67ff0c04f7",
        "cursor": {
          "ref": "b3f70cec-f59b-416c-8726-2a6ff472501f",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "dd13c848-0991-441f-b8ed-be032f787ae2"
        },
        "item": {
          "id": "39d70b93-ceeb-49b5-a983-ed67ff0c04f7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "64af6d0e-f896-4c0c-9afb-f06f1c15c64b",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "25e8bcb6-e335-4493-abd5-9884ee4b9b71",
        "cursor": {
          "ref": "789432d0-4941-435d-a381-05c39c61a66d",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6d6cca5f-5ea7-4b26-a41f-4f359cd2d33e"
        },
        "item": {
          "id": "25e8bcb6-e335-4493-abd5-9884ee4b9b71",
          "name": "did_json"
        },
        "response": {
          "id": "3645c8b0-fa39-4c63-9f2d-2571bdb0f422",
          "status": "OK",
          "code": 200,
          "responseTime": 626,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95ba11e-f884-4e04-baa4-e6fcef4e3369",
        "cursor": {
          "ref": "7505a62e-d5a7-4e02-8561-3d15f95aabda",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4d4434ec-117c-4800-b0bc-e809a7647f8b"
        },
        "item": {
          "id": "e95ba11e-f884-4e04-baa4-e6fcef4e3369",
          "name": "did:invalid"
        },
        "response": {
          "id": "6c655211-a9d9-4942-9f63-4b7c80b0ab52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95ba11e-f884-4e04-baa4-e6fcef4e3369",
        "cursor": {
          "ref": "7505a62e-d5a7-4e02-8561-3d15f95aabda",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4d4434ec-117c-4800-b0bc-e809a7647f8b"
        },
        "item": {
          "id": "e95ba11e-f884-4e04-baa4-e6fcef4e3369",
          "name": "did:invalid"
        },
        "response": {
          "id": "6c655211-a9d9-4942-9f63-4b7c80b0ab52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43c5184-1599-4957-8c04-f61249a611c5",
        "cursor": {
          "ref": "b298d5ab-6fcd-4f07-8603-3f9749e1cee2",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2b485a50-df77-4ad0-9304-35cd647f2c55"
        },
        "item": {
          "id": "f43c5184-1599-4957-8c04-f61249a611c5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a876beb0-593e-4685-ab10-f24601e21f43",
          "status": "Not Found",
          "code": 404,
          "responseTime": 109,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57210780-2b00-4bbf-8ab2-19ebffb8a253",
        "cursor": {
          "ref": "d21d5dbb-3313-4064-bbdd-a026c21b3b73",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2421149f-35bb-4afd-b0e2-615925682e63"
        },
        "item": {
          "id": "57210780-2b00-4bbf-8ab2-19ebffb8a253",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e09845f5-c59c-4b5a-b254-b346488d5a53",
          "status": "Not Found",
          "code": 404,
          "responseTime": 57,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04321b40-50e8-4b92-b3b3-f91b885a927a",
        "cursor": {
          "ref": "e8438bb5-28ae-4fe9-9f0d-750aba17b968",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "37fd0a23-5d57-48f6-929d-67f05361aa99"
        },
        "item": {
          "id": "04321b40-50e8-4b92-b3b3-f91b885a927a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c4b52d1d-e50f-49a2-81b5-4ae565bdf4b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b2a396-377f-48ed-8d50-c84bd07e0bca",
        "cursor": {
          "ref": "54b39552-07cb-443d-8ff7-69f6144aa095",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8368bb28-0153-40e0-948c-fe4d0471fc11"
        },
        "item": {
          "id": "69b2a396-377f-48ed-8d50-c84bd07e0bca",
          "name": "identifiers"
        },
        "response": {
          "id": "5babcd53-82ae-4cd9-8d33-28ff1a39a177",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aee63d4-36fb-4c40-b688-c3c26b434818",
        "cursor": {
          "ref": "85b7c797-133d-45c9-82ea-28bee99a4870",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ff507232-0f43-419e-8b62-1faf3ff8ca84"
        },
        "item": {
          "id": "2aee63d4-36fb-4c40-b688-c3c26b434818",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dd6bc6ed-1526-493d-ab4d-8ae78b8f41b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccea434-e967-4222-a10c-7a300241b42c",
        "cursor": {
          "ref": "4c275151-9d2c-493b-87ac-91694b162ba4",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7ca95593-9267-49e3-8322-2a8276118461"
        },
        "item": {
          "id": "cccea434-e967-4222-a10c-7a300241b42c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "66731d6e-24d2-4212-970e-cfbfccd7ae7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4cbbe5-7ca2-4e31-903c-0b4d93f3d789",
        "cursor": {
          "ref": "495ab922-f630-4be3-98bb-6c29afd93e6e",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bb4fe7a4-727d-4831-a277-f94ad4c5d567"
        },
        "item": {
          "id": "9e4cbbe5-7ca2-4e31-903c-0b4d93f3d789",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "18b72043-dd13-40b5-8ce9-2525016c9cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406934b6-3006-4c67-b728-ed5d3056cdc3",
        "cursor": {
          "ref": "85041424-213c-4d01-b85f-6141759f98a9",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f91e1310-6b1a-4e6f-9532-cd08975c2a10"
        },
        "item": {
          "id": "406934b6-3006-4c67-b728-ed5d3056cdc3",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0347a0d0-a3e0-4581-b566-a1ae309b5773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa4cf94-cb4f-4793-8a5b-746868c3eb5b",
        "cursor": {
          "ref": "b326b563-7956-41b1-8525-0f4deed341ee",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7535d67c-d195-4118-9be4-1ef1979a4bba"
        },
        "item": {
          "id": "3aa4cf94-cb4f-4793-8a5b-746868c3eb5b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "950b0dc4-f2e9-4aa0-a14b-959da32b48ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfe71a6-df5e-4ddc-998b-648848774f0d",
        "cursor": {
          "ref": "388f9389-2844-48ba-8abb-1c1beb19ad28",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "13acbd8b-f8b7-4594-afc3-87704e9a6860"
        },
        "item": {
          "id": "bbfe71a6-df5e-4ddc-998b-648848774f0d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4f5386ab-0f05-4ad2-96bf-d2502f494475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a2d32e-95c1-41c2-b0c3-3f9e91cf07b4",
        "cursor": {
          "ref": "55986355-b523-4802-a402-8fb7e088f15d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9948e353-533c-49ec-97f0-abb9817587ad"
        },
        "item": {
          "id": "b3a2d32e-95c1-41c2-b0c3-3f9e91cf07b4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7b5acc24-ae5c-4666-9fb2-7da2de103619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73724d7-3f97-4a05-8f2f-2d5f37f13e5d",
        "cursor": {
          "ref": "23953f3b-5969-4c26-a983-ff18e4559fb0",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "4f211440-dd22-4aea-91b2-3a9f818cb674"
        },
        "item": {
          "id": "c73724d7-3f97-4a05-8f2f-2d5f37f13e5d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9ab7996f-179d-42d7-a6b4-2bbbd5a17682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0caee6a9-29ce-4ed2-910c-3e1ecf3c0590",
        "cursor": {
          "ref": "88c5a40f-b5be-4973-97b1-9cc484342016",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ecac2404-21d7-4e40-abae-3ea65db0fc21"
        },
        "item": {
          "id": "0caee6a9-29ce-4ed2-910c-3e1ecf3c0590",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2058d54d-aeb8-4f1b-8594-ced51bd6b4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2da7719-2144-44ab-afdc-0bbacb6bf691",
        "cursor": {
          "ref": "316f9df2-c419-4cc9-9793-a8c7e66fe457",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ceb46d4f-3790-4baf-ba35-bc6f3b3afa98"
        },
        "item": {
          "id": "a2da7719-2144-44ab-afdc-0bbacb6bf691",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6a5b63fa-dfbc-4c03-bfef-3c00c36b5beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b047fb6a-1059-4ff0-b65b-d4b858805045",
        "cursor": {
          "ref": "dc282634-4fc1-4cb7-86f6-f8ea783ca40b",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a1cb3752-7762-465a-8f5d-c756ff7e11c1"
        },
        "item": {
          "id": "b047fb6a-1059-4ff0-b65b-d4b858805045",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ff430aaa-b882-47dd-a28d-e17aedf739a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25524a9e-c842-4590-a390-c48f1b77fdda",
        "cursor": {
          "ref": "390f246b-80a7-4340-a85b-3350ff3ef756",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "50f216fc-fddb-4ec5-8af4-30eeaeb80f37"
        },
        "item": {
          "id": "25524a9e-c842-4590-a390-c48f1b77fdda",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ede1b978-6f3f-4d59-a67a-ea2d166320a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3348cdaf-c493-4c51-9858-0149b6eec389",
        "cursor": {
          "ref": "8054ca09-cffc-4c66-be0d-fe168ddf3516",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d1a7325c-2b57-4712-948a-cc026e93a4a3"
        },
        "item": {
          "id": "3348cdaf-c493-4c51-9858-0149b6eec389",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "329a4ebe-63b9-4f34-af87-8707e1d09bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad1d345-6e27-4f8e-80e1-15adcfe8b7c8",
        "cursor": {
          "ref": "2c7a9950-b39e-42b8-9a89-8cb146d56222",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "628bbaad-abf0-4bc2-857f-1653f7c77590"
        },
        "item": {
          "id": "8ad1d345-6e27-4f8e-80e1-15adcfe8b7c8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "55695a19-91a7-486f-88f1-f144709ebe87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5391d24-a268-44c1-b5fc-f98c983df053",
        "cursor": {
          "ref": "a4143616-1044-40b2-a4c7-2e11a27fa825",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3dddd7c3-617e-4a53-a6f5-786272455075"
        },
        "item": {
          "id": "d5391d24-a268-44c1-b5fc-f98c983df053",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "dd5e8aa5-09ba-4512-904a-e2a1c762a37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d060a2-8445-4ad0-a276-849bf9567d3e",
        "cursor": {
          "ref": "4fd4b7b3-7586-4867-9be3-a530a639206e",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ded6d0f4-1dfb-4b56-8ccd-5995ffcfa01b"
        },
        "item": {
          "id": "c5d060a2-8445-4ad0-a276-849bf9567d3e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "af2936a9-1fda-4000-9c57-404a18fc82a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa15270-072e-4d21-844d-411a51eba443",
        "cursor": {
          "ref": "638f99c1-2ef7-4bb7-8b6e-9d4263440088",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b8a4bf85-2bee-4ceb-9c38-a05db00a35d0"
        },
        "item": {
          "id": "6aa15270-072e-4d21-844d-411a51eba443",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3072da7c-c227-4e8d-b105-cd9148682d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26da9311-0efe-4b01-bfda-782bc3526926",
        "cursor": {
          "ref": "9f9f6f9b-3301-4125-90d1-fdd1e479f868",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3a709298-9532-4a11-a174-47e4a708d5b6"
        },
        "item": {
          "id": "26da9311-0efe-4b01-bfda-782bc3526926",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b0a135c8-9e17-43b5-891e-e8a21c0892b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c38ed1-cf61-4f9e-8b71-2832566c0279",
        "cursor": {
          "ref": "14464bda-696e-47dd-9f99-fe742718b0ee",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b6018bdb-4a16-48e2-8829-9050e47b61d4"
        },
        "item": {
          "id": "30c38ed1-cf61-4f9e-8b71-2832566c0279",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ff28a748-1fd8-4f96-813c-a8f2342cfcaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4529eed-8d4e-486e-b7c0-b12348ba0067",
        "cursor": {
          "ref": "a574f0eb-4658-49cb-a2c0-33764942ae1c",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "af3ef3b9-26f6-48fc-a97f-dc1ebfc76b3c"
        },
        "item": {
          "id": "b4529eed-8d4e-486e-b7c0-b12348ba0067",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d0218730-0d47-4da4-a28a-a19d157b766a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8741cca-7f1e-4b38-b674-d3ef373668c1",
        "cursor": {
          "ref": "0e9e11c4-baa8-4985-b7c6-07591c74c2c5",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1f8d5e29-9b26-4ce9-9d09-1586763aeec6"
        },
        "item": {
          "id": "f8741cca-7f1e-4b38-b674-d3ef373668c1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "81e989bc-58ae-44af-819a-19fb55396783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd2d1eb-0c0a-47a4-a593-8bfd6077d2ea",
        "cursor": {
          "ref": "138f25da-9281-4c4c-9126-2a8b2ced2fb6",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b8f4cfcc-9357-4829-a466-9d2186c6e5bd"
        },
        "item": {
          "id": "abd2d1eb-0c0a-47a4-a593-8bfd6077d2ea",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d6b8aeda-b2aa-4f7d-bfbc-ee14270fc62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010b23e0-90d7-4718-b6e3-470a2577c9c5",
        "cursor": {
          "ref": "4d87eab4-ee54-44ff-95fd-16a96ce4e4b8",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "506870de-17d9-4692-bb42-a32c2cf3f039"
        },
        "item": {
          "id": "010b23e0-90d7-4718-b6e3-470a2577c9c5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ea55d1bd-c819-49c9-825c-bf7885b16d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1c2e2d-6b37-4f27-9ead-31ddf48b42db",
        "cursor": {
          "ref": "13039c66-7084-4a0d-b001-f5b9c4fbf13e",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1e227720-1805-43a9-ae7f-7d470f7dcd47"
        },
        "item": {
          "id": "9c1c2e2d-6b37-4f27-9ead-31ddf48b42db",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c894c669-9da2-4169-9a15-2b706fdadb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b162780-0e11-4fbe-bdd1-57dff3c8fad8",
        "cursor": {
          "ref": "bf66b318-0755-491f-b1a4-5fa76db8d1b2",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "076d02a4-7ec5-456f-b3cc-f4c89f5afbe7"
        },
        "item": {
          "id": "5b162780-0e11-4fbe-bdd1-57dff3c8fad8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "cdeb5c05-10a2-437c-8fba-88bea252d99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90a0450-6207-4e22-83c6-ce406ced931f",
        "cursor": {
          "ref": "0451533e-ff7c-4155-a0c9-b9240ec10148",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c08fb549-baa9-4725-b0e0-0881390ee99d"
        },
        "item": {
          "id": "d90a0450-6207-4e22-83c6-ce406ced931f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5c433ecb-6231-46c2-aec7-bb45330f6d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd888e42-cfbb-4285-8f5d-bc62c35d4777",
        "cursor": {
          "ref": "3f4250f5-8aaf-4ec4-82dc-e789d0feb467",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8fbfa6b9-f5f7-4134-b920-4b8e3dd2ae90"
        },
        "item": {
          "id": "dd888e42-cfbb-4285-8f5d-bc62c35d4777",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "447f2d76-63ec-40c0-b783-457c49c3f7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64aa746-57de-4440-ab00-822d3d383d99",
        "cursor": {
          "ref": "7508621b-3ad8-4ee9-a7ae-8975cb65e94e",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "12bb86d7-2faf-4003-93e2-9780348461a8"
        },
        "item": {
          "id": "d64aa746-57de-4440-ab00-822d3d383d99",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2114da36-b8e9-4abf-97a2-2f34ba17a872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc806b3-04da-4f60-83cb-45e073ad3b88",
        "cursor": {
          "ref": "5c1ae59e-589a-4fc0-9cac-daedecc5ad69",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "565503f6-6c70-45bf-84ba-e0d451f75b0c"
        },
        "item": {
          "id": "cdc806b3-04da-4f60-83cb-45e073ad3b88",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1aa38807-4e99-4d78-883c-d16ef89484ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c0ccce-d4b5-4045-b8bb-8a276ac81df1",
        "cursor": {
          "ref": "03682f85-e6dc-44be-a5ed-13f26ffdaff9",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e3090877-bb19-411f-9e57-ac3029c7d0bc"
        },
        "item": {
          "id": "55c0ccce-d4b5-4045-b8bb-8a276ac81df1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b885f0e8-e70f-4343-a5ce-f16c4932c365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24da3a63-b71e-4340-8065-b6fb3e846780",
        "cursor": {
          "ref": "7b35e303-8abd-4c44-8ea6-61af2969500b",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4fc1944c-553e-468d-9543-04c733cbd954"
        },
        "item": {
          "id": "24da3a63-b71e-4340-8065-b6fb3e846780",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1dcb7907-f193-4bb0-8db5-4e883b20aa0e",
          "status": "Created",
          "code": 201,
          "responseTime": 830,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "968e7bc5-96ee-4ff2-b8e1-432d4378f8c2",
        "cursor": {
          "ref": "d498e7f9-3b1d-4a3c-9062-d3565ca3f0b2",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "52129f87-7649-47d9-be19-d583e2413a1e"
        },
        "item": {
          "id": "968e7bc5-96ee-4ff2-b8e1-432d4378f8c2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e3f6ff16-0553-4f75-a43a-df2e078f6a00",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "96684729-4894-43ff-bb8f-c1f562dc63d3",
        "cursor": {
          "ref": "c2627a48-0cbe-4b18-afad-046d9afc7f96",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d45b6c6e-01d2-486e-9ae7-0b50c632955f"
        },
        "item": {
          "id": "96684729-4894-43ff-bb8f-c1f562dc63d3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3a82108f-61bd-4f83-9d76-051b1f4121cc",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "48806bea-a1e1-4037-a599-8f426ada3f44",
        "cursor": {
          "ref": "c1ba124b-a1b0-4337-a348-5463b9c4308c",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4118aa9a-4b6b-4777-ac08-4266c42c1878"
        },
        "item": {
          "id": "48806bea-a1e1-4037-a599-8f426ada3f44",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "85d2b551-d47f-491f-b60d-e0079f9b53b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85dcad0f-dbe0-475d-a67e-01b915fdb6e3",
        "cursor": {
          "ref": "a6960947-cb8a-430c-867f-73efad6dcf1d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0042e2d0-650f-4221-9bb0-aa0674979272"
        },
        "item": {
          "id": "85dcad0f-dbe0-475d-a67e-01b915fdb6e3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "59775b28-b526-4693-8410-edbc0aab772e",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "267cf1eb-04c9-44fe-b229-f86381828401",
        "cursor": {
          "ref": "00c48da4-0ddb-44f9-bed3-b89fc77be9bd",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9cca6398-fd06-47d2-9bb5-aeec8288705a"
        },
        "item": {
          "id": "267cf1eb-04c9-44fe-b229-f86381828401",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4997cbda-6903-4469-b3d4-37e4bccea6f7",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "37d99637-020e-4e76-b983-3658f401338f",
        "cursor": {
          "ref": "da86817e-04ec-42a6-a7f9-3f895cf84067",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c35060f6-fed5-476a-a527-0c241e0bcaea"
        },
        "item": {
          "id": "37d99637-020e-4e76-b983-3658f401338f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a5c1689e-3750-4faa-b07c-e4582445487f",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "76d054b4-388b-4bfe-9adc-43a083e0882e",
        "cursor": {
          "ref": "399b6080-8092-4f1f-9367-6ce53e7435c3",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d7b43820-a213-4dbd-bb66-594571220f88"
        },
        "item": {
          "id": "76d054b4-388b-4bfe-9adc-43a083e0882e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "def6f9c3-f4ed-440b-a95a-481f118ceaa5",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "affa6114-3e0f-4c11-9723-0f2bcd630167",
        "cursor": {
          "ref": "345220af-32b0-4d7a-af77-88c3de94acbf",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "185bee7b-3901-491b-ad50-f32596e788a2"
        },
        "item": {
          "id": "affa6114-3e0f-4c11-9723-0f2bcd630167",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f6dabed0-6966-4372-9357-cda3006ecd47",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e5acdf30-29aa-430b-bba2-31223928ee9b",
        "cursor": {
          "ref": "0c36c718-0c13-401c-b761-7826c1911ae1",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "dd076790-97ea-4685-99d8-2a561e15e938"
        },
        "item": {
          "id": "e5acdf30-29aa-430b-bba2-31223928ee9b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1d9dd59e-8a67-4997-9251-a9be5d7c726f",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4088d8e8-0e0d-4afa-ac39-5be186caf5d7",
        "cursor": {
          "ref": "b78f4497-c49f-458d-bee3-3f98cfc85029",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "10464c04-4e2b-4cf7-9b1e-4557fbcf07b2"
        },
        "item": {
          "id": "4088d8e8-0e0d-4afa-ac39-5be186caf5d7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1e40e5e6-ac8e-4860-917c-6699cc508d48",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c1fb6ffe-8f90-43c6-9cb0-e90b9c3ceed0",
        "cursor": {
          "ref": "9806794d-cb64-465e-958e-00bcd068aedc",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2c2faade-4c3a-403e-be31-ef24e18a1c35"
        },
        "item": {
          "id": "c1fb6ffe-8f90-43c6-9cb0-e90b9c3ceed0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7a1cc6f2-e1db-4dde-bd01-ef4fade9c157",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e8ea0ad7-92c0-4427-b12b-c9940d766152",
        "cursor": {
          "ref": "47069e0c-c382-4bde-97f7-b859ecea3e17",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f57e2fef-1327-440e-a42a-f46bfcc78c9d"
        },
        "item": {
          "id": "e8ea0ad7-92c0-4427-b12b-c9940d766152",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7efddc93-926c-4226-866c-9ce69d16290c",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "22ecdfc1-0aeb-400b-994c-f5f2108bf668",
        "cursor": {
          "ref": "0b0b136b-db90-4812-a297-0b2e3419e6f4",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a463132f-54b9-4ece-8c1d-038651cc0ff1"
        },
        "item": {
          "id": "22ecdfc1-0aeb-400b-994c-f5f2108bf668",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "eb588b1d-fd80-454d-9b5c-570aabf1d7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c499a3-a4e2-411a-818e-19bd85640a51",
        "cursor": {
          "ref": "77912e55-d260-4ba6-8253-c6f7e66df4a2",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d50d31a8-0721-46b9-8a45-870348f924af"
        },
        "item": {
          "id": "45c499a3-a4e2-411a-818e-19bd85640a51",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5f660c11-5775-4a2e-8a61-cf83edf98879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968e9108-c945-4c17-a6ec-bcebb14da679",
        "cursor": {
          "ref": "34da9318-852e-4961-9aea-aebddf1f84a3",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a2cab889-72b5-4d61-ba24-0a23b4453176"
        },
        "item": {
          "id": "968e9108-c945-4c17-a6ec-bcebb14da679",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0e4f97a9-c43c-4118-9807-32126406f959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556bed1f-4c63-4621-8674-eb063a0de330",
        "cursor": {
          "ref": "d54b040f-6b6c-4dc2-9935-fc57f780e5a6",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "94685e08-cd53-4091-8958-eceaed6501c4"
        },
        "item": {
          "id": "556bed1f-4c63-4621-8674-eb063a0de330",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c0e98e01-8308-4f62-bd6b-527ada4add84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005876c3-97c9-486b-9e84-53eb595573a2",
        "cursor": {
          "ref": "e18be200-4523-416f-957d-b07c75f7316c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f7305ee7-29e2-44ed-ab0e-106436504ce0"
        },
        "item": {
          "id": "005876c3-97c9-486b-9e84-53eb595573a2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1de761ab-9c97-4d92-88f6-cf90572dc240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815d3cb7-370e-48e7-99b8-07d0cb77dce8",
        "cursor": {
          "ref": "006107fc-bfe6-4aaa-a6bf-042790f8c205",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "34ddc2b4-ab9f-4ad3-9e94-07f8f5fee47e"
        },
        "item": {
          "id": "815d3cb7-370e-48e7-99b8-07d0cb77dce8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "10e0a632-ee18-477c-9290-52ce82ca3b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e39b27d-f14d-4bbb-8321-ffabbc75c0e9",
        "cursor": {
          "ref": "d9dc7281-b0f3-4f67-ac76-f0362c59468d",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b8641525-af88-40fa-85d4-e664a0df7fc5"
        },
        "item": {
          "id": "3e39b27d-f14d-4bbb-8321-ffabbc75c0e9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4305ed9c-fe2f-4b25-8392-758441c6c2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cf1702c-2031-4fe6-bdd8-6b847f4b3a30",
        "cursor": {
          "ref": "a2701e92-7371-4664-adac-44ff6f2c9b66",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "325adf0b-8570-4c70-a0d5-caf98ed4c9da"
        },
        "item": {
          "id": "1cf1702c-2031-4fe6-bdd8-6b847f4b3a30",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8420331d-6fd4-478d-93d8-57f3fa6504aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8695d446-d9f8-470b-a4bb-712be1d7d8ad",
        "cursor": {
          "ref": "de71996c-08ff-498e-a961-da85d145d054",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "72e2f5cf-cf40-4623-9957-0a388d441d6f"
        },
        "item": {
          "id": "8695d446-d9f8-470b-a4bb-712be1d7d8ad",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "32286d87-4ed1-41f0-8bf7-96140f3ae0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c37bfd5-b241-4df5-a558-ba8067fbf364",
        "cursor": {
          "ref": "0938462f-f28c-426b-adef-a66790b2ac58",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "565fa7cf-84e1-4f17-b8af-4c5d439b5791"
        },
        "item": {
          "id": "7c37bfd5-b241-4df5-a558-ba8067fbf364",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f4921e09-0b35-4a45-9adb-a74df060fbc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce933c2b-8742-4077-9282-a155d8775e5d",
        "cursor": {
          "ref": "e168208a-7211-414c-9797-b3d96cfc77be",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d29c2599-21a0-4d5e-855b-43a889d8ec31"
        },
        "item": {
          "id": "ce933c2b-8742-4077-9282-a155d8775e5d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "818cf2d1-f5e8-4a75-807a-c910a4b0cd7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ae3cbd-3294-4e80-9f1d-f0573c7181e6",
        "cursor": {
          "ref": "e2a4a5f3-a55c-477d-9f99-c2308632acc5",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "60eb3cbc-65cd-4228-b802-ed779e79a508"
        },
        "item": {
          "id": "73ae3cbd-3294-4e80-9f1d-f0573c7181e6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0db879ce-8f71-4ce0-bbd1-286ffb316be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa74c3cd-9a12-4af2-96a3-c11a809ea36f",
        "cursor": {
          "ref": "885f08c2-2a28-4a25-b4c2-9bd50da90add",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "461aa949-d850-4398-af65-997b01370a67"
        },
        "item": {
          "id": "aa74c3cd-9a12-4af2-96a3-c11a809ea36f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "459d1332-0d62-4ff7-8e5d-ccdccec434ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90beb29f-9b5f-450a-887a-b45eca82ffa5",
        "cursor": {
          "ref": "905e8fb5-f737-45e0-8567-15f6d816c556",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2ab2d1f5-7fd3-415d-af52-b1c0a313dfbf"
        },
        "item": {
          "id": "90beb29f-9b5f-450a-887a-b45eca82ffa5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4048d447-1e41-4f99-8a18-3b8304384607",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7e20182a-23c7-42fc-b7f7-7f922a0299fc",
        "cursor": {
          "ref": "aa535751-dac5-4d97-ac72-ea097d7b96fa",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d62d7a1c-147d-421e-8cff-c8bde143a8ee"
        },
        "item": {
          "id": "7e20182a-23c7-42fc-b7f7-7f922a0299fc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "588c50e8-48f3-47f6-aa1a-02c84ea8e87c",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8f9b6ff5-f4d8-41b7-a718-a3823de6d5b5",
        "cursor": {
          "ref": "dce15b51-4624-4e54-ac0c-fa5638b7dd6c",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c3151c49-f4f7-453e-88c4-c98ecb36348c"
        },
        "item": {
          "id": "8f9b6ff5-f4d8-41b7-a718-a3823de6d5b5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "642e2ed8-153e-4851-9044-5e16a1b5c600",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0dcb525f-f71a-4fc7-bffa-d1dbba6c946a",
        "cursor": {
          "ref": "6d35bc03-0044-4b98-be1b-083a75fb4ef3",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3a8a3b25-fbcd-42a7-8801-2bd112f3929b"
        },
        "item": {
          "id": "0dcb525f-f71a-4fc7-bffa-d1dbba6c946a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b392e861-6a46-4c1e-8377-651b0075d728",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8d777c4e-dabd-4d48-bbf0-aa86c64332cd",
        "cursor": {
          "ref": "2ae16771-e083-4384-a47e-fcff4cc260a3",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "de6cb68a-665d-4c06-bf07-614233e67dfc"
        },
        "item": {
          "id": "8d777c4e-dabd-4d48-bbf0-aa86c64332cd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "60361664-7a77-49f6-9314-ea88ee661eca",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "80acc67d-d711-4d48-9a0e-c599d5aa2843",
        "cursor": {
          "ref": "a9e2d566-592f-4531-99ce-3c79e56f6c17",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "02ea2334-2404-465e-8e92-19ed7155a734"
        },
        "item": {
          "id": "80acc67d-d711-4d48-9a0e-c599d5aa2843",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e4a561d4-ce09-46f0-b51d-3dea496e36f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1116239a-eb0f-48c3-8fac-9430ee310659",
        "cursor": {
          "ref": "4c0081a8-e6e1-4d23-b196-5298fe3eadc7",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3e9e68e2-6b1c-45d9-a71e-61b0aadb0545"
        },
        "item": {
          "id": "1116239a-eb0f-48c3-8fac-9430ee310659",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d5784524-92e1-4669-aaf2-f3213afa5fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23cb98e1-48fd-409e-96ad-f22b4971b7d0",
        "cursor": {
          "ref": "14b75606-59c2-457a-a4e6-506f6c0646ac",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4e4d1727-0ef2-4faf-9417-a2288cf47e85"
        },
        "item": {
          "id": "23cb98e1-48fd-409e-96ad-f22b4971b7d0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "46e9b981-42b0-4505-ae06-c34e9a8b0419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbcdd218-d79b-44a6-b2f0-fc6d80241c0d",
        "cursor": {
          "ref": "c1aa63fc-7f3c-4901-b2f9-d031c40b63c4",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c5840412-ff31-43d6-a600-1ee393fb901f"
        },
        "item": {
          "id": "cbcdd218-d79b-44a6-b2f0-fc6d80241c0d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ff54afd6-d05d-4c4f-b008-534e8240edd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b057063-1496-425b-a88e-c4196c669e80",
        "cursor": {
          "ref": "43fbbef9-325c-4fb3-9643-f22f005f3b98",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b1ee281d-9179-496d-bfcc-10400b3b18af"
        },
        "item": {
          "id": "4b057063-1496-425b-a88e-c4196c669e80",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f353740f-e7eb-4460-ac06-07449e8fabf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc45c243-8caa-431e-b82c-a0e4008f39f5",
        "cursor": {
          "ref": "3593496d-0d14-4d87-8bc5-199cf9727b78",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "467eba9a-7fe6-46a6-866e-57d41b55b859"
        },
        "item": {
          "id": "bc45c243-8caa-431e-b82c-a0e4008f39f5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "68e170e2-9b76-4ef9-85da-b84e1b44e669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c8baf0-d8f6-4aa3-9766-6dcdc85642b0",
        "cursor": {
          "ref": "51bd82bc-572d-430d-a2b9-b8bc5faa144f",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c6b4c8c9-5033-4f9d-8065-c816aae57db7"
        },
        "item": {
          "id": "e8c8baf0-d8f6-4aa3-9766-6dcdc85642b0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2b36568b-0392-40db-b406-a6faa3f9bb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8e85ac-4271-4f44-8bf7-976333ecd76b",
        "cursor": {
          "ref": "8288bb40-7e15-4445-8ed2-c3469e5967b0",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ac58972c-191a-494f-a870-27fe99619f7f"
        },
        "item": {
          "id": "1c8e85ac-4271-4f44-8bf7-976333ecd76b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e6cf34ea-2da9-4ed1-873a-cc6b92d18f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d716ea7-c901-450c-bef0-5c04d75d9edb",
        "cursor": {
          "ref": "c05fab3a-0126-480a-90c1-59e2aad4f9c3",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ac2d999d-eecf-4f07-850f-7178c05f97d0"
        },
        "item": {
          "id": "3d716ea7-c901-450c-bef0-5c04d75d9edb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2d670e98-bf6a-4282-9477-45a6376046bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3abe4b-7a0b-403e-84e8-17926b4aaa21",
        "cursor": {
          "ref": "d3925287-4c16-490e-8389-80f8eafc627c",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fa79a242-0553-4a46-ae74-4e8737e806d7"
        },
        "item": {
          "id": "4c3abe4b-7a0b-403e-84e8-17926b4aaa21",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3664f67a-7a56-4516-98fe-ae25c9be7949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c230646-6f70-44d6-91cb-8589d99e9227",
        "cursor": {
          "ref": "af7717a3-0635-4883-8b57-bb9af4ce5b93",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e3982796-ca71-47ef-951b-c4f6bf7cd300"
        },
        "item": {
          "id": "5c230646-6f70-44d6-91cb-8589d99e9227",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "88777e4c-1446-40ed-a546-bc4aa1761e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4449370-315c-4243-9334-2a035e8af233",
        "cursor": {
          "ref": "d5e7c47d-3465-4c05-bd99-d48c11e28a2f",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7110366e-134f-496f-b65f-b98655403b32"
        },
        "item": {
          "id": "e4449370-315c-4243-9334-2a035e8af233",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0b568d6b-be9d-4448-aa91-77730761fa2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa664bc-cf58-43d7-a75e-9ee186fbf631",
        "cursor": {
          "ref": "00332ffa-1ebc-4863-b825-9acdd7f3ffd5",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "499a32ff-9b8a-4fd6-b10b-7d8af6e48979"
        },
        "item": {
          "id": "0fa664bc-cf58-43d7-a75e-9ee186fbf631",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "527f95c5-eb65-4674-b91a-b722208e6b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0faab7e-575e-4699-b537-011c424e6a22",
        "cursor": {
          "ref": "938e3a52-9e15-4f28-bb9b-54c46cdf4dc8",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "40918fe7-ee7c-4a69-91df-f2656fcadf4a"
        },
        "item": {
          "id": "f0faab7e-575e-4699-b537-011c424e6a22",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6fc4d8b7-4fbd-4bb4-93b2-7b38b51a6274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e1f312-452f-4fca-af28-a8ee171d818b",
        "cursor": {
          "ref": "2d48a1b0-651b-498f-a668-2afe698d77c8",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "76d2bcd0-0a47-4cbc-9ca9-b0ae514b187e"
        },
        "item": {
          "id": "72e1f312-452f-4fca-af28-a8ee171d818b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ec15a15f-1382-49a2-aaed-8c238d99dc64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9b3c74-e660-4d4f-9c98-7e903eb7c114",
        "cursor": {
          "ref": "26746e92-444a-4fcd-b89e-dcdf7cb15c6d",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bcef49ee-1905-443f-96a3-0b92e2d78a40"
        },
        "item": {
          "id": "1e9b3c74-e660-4d4f-9c98-7e903eb7c114",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "73357292-6d5d-4c43-af2f-d87e9891274f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f3e85c-e3c4-42c1-9dda-0efc5b037688",
        "cursor": {
          "ref": "d6d81127-ee71-43d7-8176-6c8f621f5fec",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7f2d1bb6-c163-4727-b8c5-2bca85781a4b"
        },
        "item": {
          "id": "45f3e85c-e3c4-42c1-9dda-0efc5b037688",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "13c840f2-e403-48e1-894f-d6afe7b2147e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfabe433-e987-41ab-b34f-a7833f87498b",
        "cursor": {
          "ref": "21d1942c-831b-4ae2-873f-7a2a7b5dbeb5",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "83f582f3-d84b-4151-bf8e-b8884a1dda27"
        },
        "item": {
          "id": "bfabe433-e987-41ab-b34f-a7833f87498b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fe1fdba6-76b0-4f10-a57f-41fdbd44ea80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f7169b-1d83-46e0-a8ae-a506c9365815",
        "cursor": {
          "ref": "10e93073-3dd8-4627-9624-afdd80946baa",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6edc67f1-8d78-472c-9430-adf1fec5bb65"
        },
        "item": {
          "id": "59f7169b-1d83-46e0-a8ae-a506c9365815",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "cfff1938-74fa-42c7-98c6-6a07928b3ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab6e9d4-86cb-481a-9910-d357f8cb489e",
        "cursor": {
          "ref": "3e4e1930-063a-4cf7-bc07-5ae035113b0a",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "660db834-3918-4f0a-b434-a8733477beac"
        },
        "item": {
          "id": "9ab6e9d4-86cb-481a-9910-d357f8cb489e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f94fc884-2276-441d-98c5-24b6b287b3ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf01b70-9ea9-4d7c-bca2-076c84a0e16c",
        "cursor": {
          "ref": "e38d3c88-d8a2-42f7-993a-5e25c5014187",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "62516724-e949-4d5a-9829-dbf0c6e1ecde"
        },
        "item": {
          "id": "cdf01b70-9ea9-4d7c-bca2-076c84a0e16c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5ebf7b1e-190e-4cf8-9ee9-e787dd6e41c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bacdcea8-7b22-46c2-bcd1-7890d5395da4",
        "cursor": {
          "ref": "40f25520-2cf3-42d6-bf9f-7f511471203d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "534f48ff-863c-4a0a-bc61-eb41d0a2f536"
        },
        "item": {
          "id": "bacdcea8-7b22-46c2-bcd1-7890d5395da4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6895776f-b037-40a0-acf8-9abf3573ce5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87409228-b5d8-4f3d-8044-ccedb8ee77aa",
        "cursor": {
          "ref": "994b8eef-e584-4d4f-b400-c7ca1ba85ae9",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "238e4530-a4a2-4dbb-8abc-69140212d6ce"
        },
        "item": {
          "id": "87409228-b5d8-4f3d-8044-ccedb8ee77aa",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a368c1c2-8e6c-43ef-9dc2-e17ee473b8ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36987b6f-832b-443f-92d4-f1305861c5cf",
        "cursor": {
          "ref": "c00c39db-4278-4f89-9050-a050e2c2b23d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "743c5079-c293-4f84-a2fd-99e9e0a4ef98"
        },
        "item": {
          "id": "36987b6f-832b-443f-92d4-f1305861c5cf",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c1518d92-826b-44bd-8a18-492fe098c4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4714125e-6f4d-4e78-b096-dc5caf373079",
        "cursor": {
          "ref": "46faaa78-d548-4c53-9baa-ca9fe86c6e2c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "42c47789-8e02-47e3-9710-e6f9d43a0f2f"
        },
        "item": {
          "id": "4714125e-6f4d-4e78-b096-dc5caf373079",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c782d0e2-4335-47a2-865b-923d9ecdf83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a16340-5fdf-4d8b-9042-8e63bbd51dc3",
        "cursor": {
          "ref": "c071b9a8-b6af-4c7a-a0ae-aedaf3df32ba",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "15578a53-b2d1-460c-902f-41c955f88e4a"
        },
        "item": {
          "id": "33a16340-5fdf-4d8b-9042-8e63bbd51dc3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "01110af7-4e6d-4fd5-821b-dd0e305aa275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909a4a96-8417-4104-8214-97bb50566bd5",
        "cursor": {
          "ref": "8fa93348-0eb4-4490-810a-ea87d29bd7a8",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fe5afd46-14c5-4c63-95a3-f17344f6836a"
        },
        "item": {
          "id": "909a4a96-8417-4104-8214-97bb50566bd5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a90ef2bb-bd2f-450c-9942-e4f49088598f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e15b03-3ca6-430a-b02a-3a49581b044c",
        "cursor": {
          "ref": "d0eaa928-b6ed-4f68-bd8d-0ff2e0a62eb6",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e705ead8-de07-4143-ac96-d68f60fe37bd"
        },
        "item": {
          "id": "e9e15b03-3ca6-430a-b02a-3a49581b044c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "286b99e8-099c-4bfb-801e-17827e145e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff01a9fa-69e1-4daa-81d1-875d68af42de",
        "cursor": {
          "ref": "7032f63f-438b-45b6-853e-8ef6ef56b22f",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "65397c7e-3065-43ea-bf19-254becd4f47f"
        },
        "item": {
          "id": "ff01a9fa-69e1-4daa-81d1-875d68af42de",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "987e995a-ea09-4631-b109-954373bc3966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3ce948-d4e8-4634-a5f5-3a7e81e76d76",
        "cursor": {
          "ref": "6e24afa7-cdfb-4d88-882c-12ab195712ab",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "89eeb7ce-577d-4eeb-b162-bb9f40d32860"
        },
        "item": {
          "id": "2d3ce948-d4e8-4634-a5f5-3a7e81e76d76",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3c12a333-1cc1-4217-91ad-cfb962f7d0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7596295-1a31-40c1-b334-6d118b76c62a",
        "cursor": {
          "ref": "ea875789-e1a7-4181-90ed-6924b8d9b31b",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9d452f4b-eb24-44b6-951a-056273b1c264"
        },
        "item": {
          "id": "e7596295-1a31-40c1-b334-6d118b76c62a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d24e09c2-6f48-4736-8923-9cab03b5aea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d410b3f-52f9-4dfb-82b1-7ea33422d4a5",
        "cursor": {
          "ref": "bf47137d-339f-4964-aa6f-8973f2bcf169",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a1862453-6049-4d5f-938e-af23d09b36e9"
        },
        "item": {
          "id": "6d410b3f-52f9-4dfb-82b1-7ea33422d4a5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bf1e8dc0-e44f-4c16-90a7-6a19c99141e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b181a96-4c4a-44a8-9d05-4f06e127df42",
        "cursor": {
          "ref": "048fdff6-6517-44c9-8b8f-76ae6b68a692",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "07640ec2-4b4a-446e-8e9b-525b5d135a25"
        },
        "item": {
          "id": "3b181a96-4c4a-44a8-9d05-4f06e127df42",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5b92df59-8b82-4980-abc6-fe5eed9d2c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "3aa04998-d1ea-42f1-a4a6-3041bc048887",
        "cursor": {
          "ref": "c50c95a9-882e-4153-8b86-536e9624cc25",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f30bc4ad-6dfa-4208-b080-73383a407585"
        },
        "item": {
          "id": "3aa04998-d1ea-42f1-a4a6-3041bc048887",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a439cb55-c538-4050-8aa5-ed5b20c20a36",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3326549-e8ca-4713-8b73-87e3a9b2a738",
        "cursor": {
          "ref": "08960ade-6208-418e-8504-cee84a5d0e44",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a4dbaf35-5eba-4066-a68b-afc5cf3f3506"
        },
        "item": {
          "id": "f3326549-e8ca-4713-8b73-87e3a9b2a738",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a78393f1-528f-4e38-a6d5-d1ca2e9c67d9",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b2ff67-84e2-4f93-84ac-a33bf1dbcc10",
        "cursor": {
          "ref": "18690aad-297d-41b9-b169-b6bad2dd23ae",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "064bc0a0-7678-4858-bde3-4b4dbd273f00"
        },
        "item": {
          "id": "02b2ff67-84e2-4f93-84ac-a33bf1dbcc10",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b4b1e9ec-675b-4644-9ac0-1a049143b1e6",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65fe720-0f71-478d-afc8-3f1fc4c23615",
        "cursor": {
          "ref": "fbb6455d-63f4-46f9-a8b2-afae6d309e95",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3fbf8e8e-07a4-43b2-9a38-bd3665c3d383"
        },
        "item": {
          "id": "a65fe720-0f71-478d-afc8-3f1fc4c23615",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "042db3a6-0a33-4082-ba33-4f991099e29e",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a60a7d8-0ca0-4700-8a63-678848c8e52e",
        "cursor": {
          "ref": "22ab6d43-7c78-4361-88a2-952051249736",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "76284c1d-2442-4c19-914b-fc0ff05520b6"
        },
        "item": {
          "id": "5a60a7d8-0ca0-4700-8a63-678848c8e52e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e657ca74-bada-4c84-a938-fc64a400ed5a",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-23T00:34:00.472Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-23T00:34:00.472Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "cd46e814-f742-4918-b70c-73760d3d5d36",
        "cursor": {
          "ref": "0324c486-128e-4a5c-a2a5-bb6a314315cc",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1277c59b-129f-4a55-8247-3e99f44b5fcf"
        },
        "item": {
          "id": "cd46e814-f742-4918-b70c-73760d3d5d36",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bdd4c87e-c03a-4f3f-bee2-2e1de51362b3",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942b2115-443d-402a-84ac-99ac8be83a00",
        "cursor": {
          "ref": "8898d98f-c389-4087-9197-0d858a3fdb93",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9a916198-e242-4bd8-a8fb-3924ac673740"
        },
        "item": {
          "id": "942b2115-443d-402a-84ac-99ac8be83a00",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "521a6711-cf0f-4024-82e5-a3c81d177e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4615be-3740-41fa-ba3a-198a9bbb924f",
        "cursor": {
          "ref": "85817860-568b-42fb-a79c-27b4e319d124",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c5b970bd-f976-4f9b-b397-826941c0d688"
        },
        "item": {
          "id": "0c4615be-3740-41fa-ba3a-198a9bbb924f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9d911cf1-2a18-498d-b631-cce657467683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f55f9c1-cad0-489b-8b1f-8b4ea9b324ba",
        "cursor": {
          "ref": "42bf5392-63d9-4ba9-96ff-4902d8333c63",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e9f4cf92-9d2d-4fd5-9d51-05d0d6d97bad"
        },
        "item": {
          "id": "9f55f9c1-cad0-489b-8b1f-8b4ea9b324ba",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1ef63be6-536f-4f38-96ef-755590e23245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5c7fc6-18c7-490b-a802-75129a9e2dac",
        "cursor": {
          "ref": "3615bf17-ab92-41e6-89d0-9332b57f0cd1",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "204b63cb-7fed-45e5-81cf-92804d2c4772"
        },
        "item": {
          "id": "dc5c7fc6-18c7-490b-a802-75129a9e2dac",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b6686df6-9af7-40f4-acff-4bb36d878842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f497e30-a35d-41ed-becb-8140d7571767",
        "cursor": {
          "ref": "0b227815-cfb5-4a31-9d82-9bbf42c92e5a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "04c54111-9d03-4e6a-9fd0-7f37852030d9"
        },
        "item": {
          "id": "9f497e30-a35d-41ed-becb-8140d7571767",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5ad4c510-8266-4750-ab30-f23028e62196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19ac91c-2917-4035-9253-5f8c83d2f288",
        "cursor": {
          "ref": "2403ed8c-728f-400a-a7f3-b073e2b11391",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "035abf2c-f873-4902-93d2-47686cf05185"
        },
        "item": {
          "id": "b19ac91c-2917-4035-9253-5f8c83d2f288",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bea18727-1564-4f98-947d-bf48a15fba10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb625b98-b6d9-469c-9467-9a5215c41494",
        "cursor": {
          "ref": "0a9baaf1-c3b7-47ac-9e50-5a07c7e898d7",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0a9ce25f-f0e3-43ec-be77-1886f051b2d6"
        },
        "item": {
          "id": "bb625b98-b6d9-469c-9467-9a5215c41494",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ef2e061c-4cf4-4b7f-bc23-0c24fbd8bb04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55c6457-4ff9-43e8-9065-e0a707cc3767",
        "cursor": {
          "ref": "a9423ad9-567d-420e-920d-b2e6265c57ed",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2a10f115-b6ab-46e3-9b0b-d38dc08aecd9"
        },
        "item": {
          "id": "c55c6457-4ff9-43e8-9065-e0a707cc3767",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "00e79966-ed54-416f-a4a4-f74e6f33f837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df70e588-2335-439a-8865-09b1b604ed05",
        "cursor": {
          "ref": "ce4b350f-c372-4309-ada2-be8ef047e574",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8beabde6-ff9c-40f2-987b-fe52f3ab54dd"
        },
        "item": {
          "id": "df70e588-2335-439a-8865-09b1b604ed05",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5a50f96a-1c42-4c57-a419-dd38ab2c449c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776d229a-c4b4-45a6-8641-afb7cd625d0d",
        "cursor": {
          "ref": "fa5c4da8-48d4-46a9-a2ce-08ddc064652e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6b0c3750-9a9e-4596-ab00-9aef8de37f47"
        },
        "item": {
          "id": "776d229a-c4b4-45a6-8641-afb7cd625d0d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f39b2389-0379-4f76-bdd0-0d3bbb1ba8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4dccad7-a51d-407f-bbbb-0d93b90441e0",
        "cursor": {
          "ref": "6ca0fb0f-816f-4d3a-804d-f94ef9cc86e6",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a388ae06-28f4-453d-9ae2-c18f0223cc75"
        },
        "item": {
          "id": "d4dccad7-a51d-407f-bbbb-0d93b90441e0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f9d7fa7e-f587-4f5a-8093-81483f409c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6fa6092-849b-466e-bb61-2741612f8281",
        "cursor": {
          "ref": "96c7c444-d813-462d-9def-192092b1375f",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f0419e9c-3ef9-426a-8b12-b483bb1db0e9"
        },
        "item": {
          "id": "f6fa6092-849b-466e-bb61-2741612f8281",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7f296330-7845-4537-ae61-20b85f234944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92901dfe-c929-4257-9b0b-d445c24e2db2",
        "cursor": {
          "ref": "ac203e4b-2a96-4fef-b2e7-99b5442e7d45",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "376f67e7-6ddd-4229-8d7c-7bcce1ef6243"
        },
        "item": {
          "id": "92901dfe-c929-4257-9b0b-d445c24e2db2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ef6a2084-ef5c-4d63-ad8e-01b759c5eb47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "02b80a7e-e54a-4cbc-80eb-750e4356ccb7",
        "cursor": {
          "ref": "13068be2-3811-422e-a6ce-d58bf190c418",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a99d34d1-f203-4451-a898-f78abc08dafd"
        },
        "item": {
          "id": "02b80a7e-e54a-4cbc-80eb-750e4356ccb7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9a5336a7-d9cc-4f1c-8554-566bf8754bf1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6f9faded-ea64-473a-b057-02d285fe456e",
        "cursor": {
          "ref": "15b2f6f1-d7d3-45fb-aa6c-18e51a384fe1",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a96a123a-6176-4904-ac56-5be350f4c78e"
        },
        "item": {
          "id": "6f9faded-ea64-473a-b057-02d285fe456e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d55bd264-cb77-4677-90d8-d70210c66533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6aeb41-6c92-4666-a78a-cb6da54d0f1f",
        "cursor": {
          "ref": "8b9a578d-0661-48f5-b323-717e7d9448ff",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "40439061-a36e-4fb8-a051-01f75dc74a8a"
        },
        "item": {
          "id": "3b6aeb41-6c92-4666-a78a-cb6da54d0f1f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3bbcdd69-5f1f-441e-beee-694e8c44f665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1bf50f-e224-473c-ac86-4f0e864105fb",
        "cursor": {
          "ref": "608717d7-e951-41de-8b84-fcefa9e6a08c",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "38cc5894-a19d-4597-9542-1ed1e644d95a"
        },
        "item": {
          "id": "9f1bf50f-e224-473c-ac86-4f0e864105fb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "838db22e-63b3-4e28-a6e7-ff7003f1b2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a107a8-e0c6-4fb3-87a7-554b0a48fa69",
        "cursor": {
          "ref": "ad403a63-8b45-4728-aac1-3c332981bda5",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8fc53ad4-fe86-43a5-a7bd-cc4092884fc8"
        },
        "item": {
          "id": "54a107a8-e0c6-4fb3-87a7-554b0a48fa69",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c9afcf13-c82a-4f2f-bb2c-4803c8f59f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d600c8-803b-42b0-8e01-1f94b10f9261",
        "cursor": {
          "ref": "106f1964-e086-4298-856f-6c743caf7648",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bfe8ac31-b43e-4c8c-b59a-cec031724f26"
        },
        "item": {
          "id": "37d600c8-803b-42b0-8e01-1f94b10f9261",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "832a3693-2c68-4c42-8517-4b982f3a1b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb676a1b-5deb-45cb-bf45-1904b20011a7",
        "cursor": {
          "ref": "ba68f160-6376-4264-ada5-425264483bdd",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "29fc20fa-396e-4c17-a4eb-75949fce4bc8"
        },
        "item": {
          "id": "fb676a1b-5deb-45cb-bf45-1904b20011a7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f285b3f7-e2d4-4807-93cc-07e69df21f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784ea340-9312-4fe0-b650-2bf4480f85b7",
        "cursor": {
          "ref": "dce2b013-8a93-4283-b7b2-2a05bfd92bca",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "33b33cff-fab9-40cf-a7eb-e0f2f1d98799"
        },
        "item": {
          "id": "784ea340-9312-4fe0-b650-2bf4480f85b7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "584cc750-d9e2-4fec-aa9c-459486f41402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdd70b9-7c21-4255-82ed-80224d1b84ac",
        "cursor": {
          "ref": "c699fa1b-b2b0-47d9-bd0a-c5d58028f005",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1ef6eb33-1440-4c2e-8d4d-52e3b7947094"
        },
        "item": {
          "id": "3bdd70b9-7c21-4255-82ed-80224d1b84ac",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7b88fc8b-43be-4dae-8145-b193f7c5e80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1120262a-31ef-40d1-8a0d-162be28b4062",
        "cursor": {
          "ref": "5874d0a1-d9a0-401e-95fc-8fbff4981411",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c869d0cb-b1a9-4e1a-8cf5-ed17d0d57ae1"
        },
        "item": {
          "id": "1120262a-31ef-40d1-8a0d-162be28b4062",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "21fd049e-44a2-4070-ad02-89cc858a73ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcdd4ab-a51a-4114-9227-c75395a57b4e",
        "cursor": {
          "ref": "b868005c-2775-452d-961a-cc8389bedca3",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "295fc014-773b-4703-88f4-66cf670196d7"
        },
        "item": {
          "id": "dbcdd4ab-a51a-4114-9227-c75395a57b4e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fa13e665-74a1-4761-9ac7-589b04f85340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b426728-690d-47d1-be15-e95faed08336",
        "cursor": {
          "ref": "ee4948cb-4d07-45cb-ab70-0119ccf5ee82",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "13205d3d-412b-4077-a112-01ff75f3a025"
        },
        "item": {
          "id": "9b426728-690d-47d1-be15-e95faed08336",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c43496ca-34cd-463a-867c-f0d78936a9c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de68863-7726-4741-afa8-7c2cd0e1e141",
        "cursor": {
          "ref": "8c270562-f613-4dd4-b452-38f57e55553a",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "dbe30e6f-888a-4f41-b645-63ff5596637c"
        },
        "item": {
          "id": "3de68863-7726-4741-afa8-7c2cd0e1e141",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0ac67896-5fb3-44bd-bdf7-50426e2f01c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7a7494-6878-474a-a43d-931b0b752fe0",
        "cursor": {
          "ref": "cacea22b-7310-4442-a580-c1f06b8819b6",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "09329863-3383-4e1d-822a-2c59a9c96b9e"
        },
        "item": {
          "id": "8c7a7494-6878-474a-a43d-931b0b752fe0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6b29f57f-e617-440c-946f-ba517caf8dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b0ad80-d082-43d8-a797-f71c06049efa",
        "cursor": {
          "ref": "d8a15055-9499-4e17-ad30-d1ae243eaec1",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1bfca678-1489-4221-82f0-e8d66f12734b"
        },
        "item": {
          "id": "71b0ad80-d082-43d8-a797-f71c06049efa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "54539b3e-de43-4d54-b96f-859312568bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0a2ba6-6722-46d3-9ea4-846443407d3f",
        "cursor": {
          "ref": "895f7fb9-7de9-4662-a9b7-af9a1aa98592",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "142737fc-4d7d-4c26-8ff0-0cc19eb2158f"
        },
        "item": {
          "id": "8a0a2ba6-6722-46d3-9ea4-846443407d3f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a2033545-33aa-4600-b356-72fd5274f41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de6af1a-0fa6-453e-b940-5af1341fdd4a",
        "cursor": {
          "ref": "1b594793-61c8-451b-bcda-30c4092ee352",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2be69e57-d25a-45c9-b49e-86ad0f935f86"
        },
        "item": {
          "id": "5de6af1a-0fa6-453e-b940-5af1341fdd4a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3fa7a347-ae70-49b8-a771-ebd3b37a2218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3c86c0-51c5-469f-b55b-b662ae1688e5",
        "cursor": {
          "ref": "ff95e466-dae5-43a4-8957-128255af31fc",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "afc58d5f-4f1b-4e1f-8e9c-ec7b8dac365f"
        },
        "item": {
          "id": "ba3c86c0-51c5-469f-b55b-b662ae1688e5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0bde02fd-1b6e-4986-91ad-c6fe1dfe518c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b00cb91-39b4-4680-803f-c7201d67e6d0",
        "cursor": {
          "ref": "0c205bd1-8890-4568-abfc-df79189937cf",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "879581de-2c42-4b7d-999d-f3719297c978"
        },
        "item": {
          "id": "9b00cb91-39b4-4680-803f-c7201d67e6d0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "465462e4-c6b8-41a7-9bda-6b6d4cb08ca5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "44fcd790-80b3-4f96-b0a9-94bde959d4a6",
        "cursor": {
          "ref": "3fe50861-0cde-46f0-90b2-9070cc2a4ca2",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b39b6e7f-8ce7-4e1e-b891-1a87004d0466"
        },
        "item": {
          "id": "44fcd790-80b3-4f96-b0a9-94bde959d4a6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "08f279ba-3ea2-4e6b-9f0b-cc07b506497c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9780ead-3004-49fa-adfe-4595d7dc0713",
        "cursor": {
          "ref": "d8a00199-9435-43ab-a1d0-5a2bb541c111",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "18423b15-9d79-43d0-aa31-7b368f8fcf5a"
        },
        "item": {
          "id": "e9780ead-3004-49fa-adfe-4595d7dc0713",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e8bd6182-3806-4257-9cab-4d56b419630d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5b933e-d1b5-4881-a2c7-61777c15fed7",
        "cursor": {
          "ref": "e9634203-fec7-4346-925a-3eed6d373ab8",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ccf2c7f1-8efe-4654-8602-7a538b3f3eeb"
        },
        "item": {
          "id": "fc5b933e-d1b5-4881-a2c7-61777c15fed7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0de4c06b-55a7-446b-8f6f-d79b39c3e063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446f5a02-b91f-4130-9b42-d14c415b7260",
        "cursor": {
          "ref": "5d8eecfb-a5e7-40f3-88db-4988f0212920",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "aa972498-8d24-4421-98f3-98a3e264dbb5"
        },
        "item": {
          "id": "446f5a02-b91f-4130-9b42-d14c415b7260",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ad1f1ecd-7482-4978-893d-a9140c28a421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308cea42-bb88-4b90-a3aa-69ae882fcf14",
        "cursor": {
          "ref": "07397724-252e-4e65-9a21-78cf721f99f8",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "57076c57-3948-4c83-8e18-77053f6a6e05"
        },
        "item": {
          "id": "308cea42-bb88-4b90-a3aa-69ae882fcf14",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fe9fca06-e601-4e71-be33-92a590012b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6805c906-1023-4a7d-af81-3447d1ce30bb",
        "cursor": {
          "ref": "510b814a-2084-49a4-90c8-46982daef06b",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "57feb94f-caf2-43e4-8b89-3f8ecbe91516"
        },
        "item": {
          "id": "6805c906-1023-4a7d-af81-3447d1ce30bb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4fdc0848-82d6-4699-8b37-0620865b92c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f3c3f1-adf6-4bff-b311-65f75f05d461",
        "cursor": {
          "ref": "9b491fc7-24c8-4e5e-9d4d-4e92fd92699c",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b09aa5f9-41eb-4ae6-a2a2-8b7eac18acf5"
        },
        "item": {
          "id": "86f3c3f1-adf6-4bff-b311-65f75f05d461",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1ae1d24e-2372-48b7-9b99-2f33806d4865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d30447-49a0-47cd-bd99-a90a8f531f1b",
        "cursor": {
          "ref": "49c6e8de-2ff8-4a55-b10d-1c034a543632",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a257c3de-aa28-42fb-b09a-d9dc79c60872"
        },
        "item": {
          "id": "b1d30447-49a0-47cd-bd99-a90a8f531f1b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "75bac1a5-05c7-41d4-bb70-6e536bb0fbc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce58499b-e8fa-476c-9075-87b5b9d88264",
        "cursor": {
          "ref": "722929e2-c7ef-46fd-9ddb-ba1d3fa26f94",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6cbb0932-8153-4ca9-8bd3-46b22fa09a2e"
        },
        "item": {
          "id": "ce58499b-e8fa-476c-9075-87b5b9d88264",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1534f26e-d223-417b-89f3-bf1cc8724f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e24ab6-1e95-4a1b-9060-a6f71fe73266",
        "cursor": {
          "ref": "12c22087-3697-4eed-b855-29e0b3352a6c",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "db7e240f-ce14-42c9-aea1-bbbbff0de53c"
        },
        "item": {
          "id": "38e24ab6-1e95-4a1b-9060-a6f71fe73266",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "44280386-f0a7-4af4-b8e9-af10cefc4a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51a951f-64e4-4ef7-a25e-948c94f35b69",
        "cursor": {
          "ref": "bce5dc5c-7ecc-49e1-9fd7-bd5d45defdf6",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b73f9934-8696-492a-811c-95065936bd99"
        },
        "item": {
          "id": "e51a951f-64e4-4ef7-a25e-948c94f35b69",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2b04893c-4052-4ccc-b93a-911ee6ee8771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee26bc2-7a10-40b6-b707-6480375d54f6",
        "cursor": {
          "ref": "9af4d234-5009-49a1-b64f-240433b2d190",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "04ed8559-f634-4de5-896b-9e02d9ea0381"
        },
        "item": {
          "id": "aee26bc2-7a10-40b6-b707-6480375d54f6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "90112bfe-ed53-4c26-8bee-9a541e8ff881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41d5f36-c7ba-43e1-a703-6a2638543d8b",
        "cursor": {
          "ref": "8aaaa433-4c9d-4dc9-a744-8d7bad3f7914",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "13bcf279-b938-4d1e-9db4-44068fa7b239"
        },
        "item": {
          "id": "a41d5f36-c7ba-43e1-a703-6a2638543d8b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7372347b-a329-4806-8fab-2164f1eb0128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd470f8-29f5-4858-9d2a-66c79324e927",
        "cursor": {
          "ref": "2a35faac-f9da-4298-b355-9d0d4fa38233",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "186dd018-34f1-40fd-894f-78ef78bb40d9"
        },
        "item": {
          "id": "bdd470f8-29f5-4858-9d2a-66c79324e927",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5b67758a-82ea-409f-acc7-7fec3ce4dedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132417d5-5576-4a76-bdb0-147bee26e152",
        "cursor": {
          "ref": "b5708b66-1934-4565-9290-bd7e20a102c9",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "31eb4152-202e-40f9-b688-90d8fab17004"
        },
        "item": {
          "id": "132417d5-5576-4a76-bdb0-147bee26e152",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6b98725c-0b95-4c12-8ddc-4026d714297c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 101,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "fa2acfd3-9da4-4494-9ad5-ec4c28895af5",
        "cursor": {
          "ref": "204bfdf3-cdf4-41a3-8cc1-943a5eb0168a",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9d9564cc-bd00-4a43-a40b-30dee387a08d"
        },
        "item": {
          "id": "fa2acfd3-9da4-4494-9ad5-ec4c28895af5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1823bb16-37e6-43fb-9e4e-af993544b19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac607f3-8b58-44bd-abcd-bfb865eab057",
        "cursor": {
          "ref": "1ed20d04-42ec-4be0-9e27-04762df578d5",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "20701757-023c-45e5-b60d-dabe4f23ef77"
        },
        "item": {
          "id": "9ac607f3-8b58-44bd-abcd-bfb865eab057",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d8901dff-ec6e-45d9-8107-e54dfaed4ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539d8991-1842-43b5-8fa6-9322e9ec0598",
        "cursor": {
          "ref": "db1a5c0b-bb4b-4d17-93a7-79cbcc31549a",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ba8944c0-f81f-4ae3-977f-69143fd3ce5d"
        },
        "item": {
          "id": "539d8991-1842-43b5-8fa6-9322e9ec0598",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "52190374-0e4a-4e23-a305-4424b19e04cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81814dc7-6b46-4160-acbe-7db006a777e4",
        "cursor": {
          "ref": "b8eea79a-df42-4def-9762-257c27b1e7e1",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "34b93790-363a-41a9-8213-1bdcb15937cb"
        },
        "item": {
          "id": "81814dc7-6b46-4160-acbe-7db006a777e4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f2df9fe9-2def-43d6-ba11-14d2d3879dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6606cb92-27a1-42ad-8852-658df8c03f6f",
        "cursor": {
          "ref": "5527f3be-5719-4451-9b57-727e9213fb38",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b805c1d0-7467-4c7d-b127-1f2333394c04"
        },
        "item": {
          "id": "6606cb92-27a1-42ad-8852-658df8c03f6f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "83d99fe9-6d2a-4e56-ac4e-1e6b626174dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2486de96-988d-48e5-8356-e359a151aec9",
        "cursor": {
          "ref": "10238c4d-134c-49e9-8484-43d60fe6d0fd",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c48abd22-34b6-4081-8229-c352e7248508"
        },
        "item": {
          "id": "2486de96-988d-48e5-8356-e359a151aec9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a664a776-2298-4ad4-8a49-ca5270a34945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c110599c-be86-4b58-9ef3-8c3b72d63b62",
        "cursor": {
          "ref": "5428fc52-62a2-4eb5-a896-d4d93ebd4d19",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "65bcd8ff-3175-4d92-afe7-3a4dfb9a057f"
        },
        "item": {
          "id": "c110599c-be86-4b58-9ef3-8c3b72d63b62",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "219581ac-4a7d-4dbe-a647-07bd04250990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcede4e8-fda8-4d1a-9719-f2f2a665366e",
        "cursor": {
          "ref": "6a1fe0a8-8a05-426a-96ba-c014d941e1b0",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f299c960-a5e6-426a-9917-ab0849c4eac0"
        },
        "item": {
          "id": "bcede4e8-fda8-4d1a-9719-f2f2a665366e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9bfd1b58-2b7e-4ba3-9c7c-fc71d1448dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f667777-2695-4bc2-b550-97448af1cebd",
        "cursor": {
          "ref": "6d40ec6d-9deb-495e-91fc-aa0a59fc74a5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5c6729f0-b6e0-4d1f-8a0a-6b57bfe8ce08"
        },
        "item": {
          "id": "5f667777-2695-4bc2-b550-97448af1cebd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6f433177-8378-488e-a8c1-3ca9915bc3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecf946c-2406-409b-af95-e15bfc08eac1",
        "cursor": {
          "ref": "88602dcd-88db-47bc-950f-921dd8b230c0",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b3e562da-d94f-495b-af7e-0ad0787bf1a9"
        },
        "item": {
          "id": "6ecf946c-2406-409b-af95-e15bfc08eac1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e077aa1d-02e5-4a00-afc2-7cab3b0d1aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f690f7d-1539-4c79-853e-d3b81f4d17a1",
        "cursor": {
          "ref": "33feae31-1c36-4474-951c-836714144f0c",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f3a87c7b-31cb-4ba3-8ff0-398c90da64cf"
        },
        "item": {
          "id": "3f690f7d-1539-4c79-853e-d3b81f4d17a1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "de2668c5-6db3-4b44-8b9d-fe6a7d2ed148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cce7b1d-77eb-40c1-b440-82da62d1b07a",
        "cursor": {
          "ref": "fdefca8c-d23b-4074-b221-d7f8c67a77e9",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a2b022c2-5359-4924-9f3a-7200faad7e26"
        },
        "item": {
          "id": "9cce7b1d-77eb-40c1-b440-82da62d1b07a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e9b3d38c-3c67-42f1-b5e0-123d433f873d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d765f4-3711-4daf-ba58-236d25fc2ed6",
        "cursor": {
          "ref": "c496cd46-8a2e-4b2f-8340-b4d81d18aa0c",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d01f5381-a36e-4569-84f8-8d52c7510d7f"
        },
        "item": {
          "id": "23d765f4-3711-4daf-ba58-236d25fc2ed6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b375fddc-9a76-4439-a839-92ba8eef6681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34415f1-aa76-458e-9100-9769df36bb5d",
        "cursor": {
          "ref": "c10f1bb8-bd5f-4114-81ce-46efee9a6355",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3b252b21-2875-4e1b-9752-9baf8f5d9af5"
        },
        "item": {
          "id": "f34415f1-aa76-458e-9100-9769df36bb5d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ca083582-21c6-422c-929e-5c2dcba2c7bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd1ac2d-658d-4011-9a32-76f266f721c7",
        "cursor": {
          "ref": "381af914-d557-4975-b10b-3d03f668b1c4",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "81e7ec65-5b2e-42d9-8107-84a9eb931413"
        },
        "item": {
          "id": "ccd1ac2d-658d-4011-9a32-76f266f721c7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b534e446-9e12-486a-a3cd-46d46dcc1a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22d16f7-7fe1-45e9-9ea8-97d34f7f8cb3",
        "cursor": {
          "ref": "25340a02-355f-470a-9f69-c970a7d9dfbc",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9f3b1595-b2c6-4c1c-a298-0161a010b628"
        },
        "item": {
          "id": "c22d16f7-7fe1-45e9-9ea8-97d34f7f8cb3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0588e23f-ea95-4f6b-83aa-6804298ede02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f3b4ac-8f58-4f1f-8299-115d8967c40b",
        "cursor": {
          "ref": "7c56cacc-c7d7-4e8c-a618-c438de64bb24",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f04bf67a-b960-4af6-8574-939988b9dd97"
        },
        "item": {
          "id": "a0f3b4ac-8f58-4f1f-8299-115d8967c40b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "623984a2-fdf0-43ab-a03d-bff136b183df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a1cde9-bb5c-41f6-863d-b636d1c8a389",
        "cursor": {
          "ref": "42b7b36a-7a01-4e20-bb0f-5e262bd82456",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "220b4023-368b-404c-80e4-cf19fe138b90"
        },
        "item": {
          "id": "80a1cde9-bb5c-41f6-863d-b636d1c8a389",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c96dec62-3911-42cf-8a67-a329dece3f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704e43c9-93a9-423f-83b0-c85c60a32f26",
        "cursor": {
          "ref": "a4ee9f39-2bae-4359-8b18-66096af0ec63",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b637d5d7-2f0c-47a6-9538-1e286b722b00"
        },
        "item": {
          "id": "704e43c9-93a9-423f-83b0-c85c60a32f26",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "6bff17e2-47f3-4f9e-9567-3a3a856d28d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a56d96-4154-4a97-a775-e185422a9589",
        "cursor": {
          "ref": "e4f7eabf-8319-4ae5-a493-0eeb4f6b4923",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "18eb4c87-1536-4118-b7bd-06cf38834d75"
        },
        "item": {
          "id": "58a56d96-4154-4a97-a775-e185422a9589",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c67d75f2-f75c-4acc-8cfb-9350f8a31757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be63947-2154-471a-b356-db5c283fbbcb",
        "cursor": {
          "ref": "b5f1a098-5073-412f-984e-6cfaeb840783",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "14f6efc8-c1fe-458e-ae78-6f1f9be8d373"
        },
        "item": {
          "id": "5be63947-2154-471a-b356-db5c283fbbcb",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9871f6f3-dc5b-45dd-a4f7-ea23047592bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a37acac-73ce-473f-bd16-609624d01823",
        "cursor": {
          "ref": "73011501-2e5c-49cc-b492-3b794d7ddacf",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "dffcbb32-7633-4180-983d-576b14afbf93"
        },
        "item": {
          "id": "2a37acac-73ce-473f-bd16-609624d01823",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "cf09961d-2c20-4857-92ed-b7444d064889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10916d4-60cb-484a-af38-ca1801bb7140",
        "cursor": {
          "ref": "0d682f85-a78c-4ddf-9e91-805037e92b71",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e28a738e-ef0a-40dc-aaec-17d6412d017a"
        },
        "item": {
          "id": "a10916d4-60cb-484a-af38-ca1801bb7140",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7eb8ff78-dfa2-4902-aa1d-057482d8e4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b199359f-41dc-4855-97c9-2579ffeec9e0",
        "cursor": {
          "ref": "f2ef3368-480a-4050-9511-60cb5341ea97",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "90572f51-6c28-4d97-8d0f-09fbde41991b"
        },
        "item": {
          "id": "b199359f-41dc-4855-97c9-2579ffeec9e0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "861cb18b-be5b-4466-aff4-9613a3d3fe9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34cc6a5-f684-41d3-ad86-82b0785fa092",
        "cursor": {
          "ref": "72558e70-1904-46db-b2c4-5f742f3969f1",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "edbe55e4-5fb9-4025-a4b4-9141db2cb813"
        },
        "item": {
          "id": "c34cc6a5-f684-41d3-ad86-82b0785fa092",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "68e6aedb-3d97-4c99-b36c-4bb54b8edc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce453243-3f24-46e2-8edf-2bd14e20a7c5",
        "cursor": {
          "ref": "53ec4a93-1bbc-4a07-83aa-dd2637e0c203",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3df9d6b0-64fe-4cf0-a478-3a70727f7aad"
        },
        "item": {
          "id": "ce453243-3f24-46e2-8edf-2bd14e20a7c5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "df8dd53e-b62c-421b-baaf-8f30ca638787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe2c1f0-d625-4e5e-866d-4dc5db4abc61",
        "cursor": {
          "ref": "f09535d3-1ff8-4063-b328-9980d3898882",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "18c687c7-a4a6-4446-bf51-2d06cdbde6ad"
        },
        "item": {
          "id": "dfe2c1f0-d625-4e5e-866d-4dc5db4abc61",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3c10ddc1-b85b-4e25-bd05-2cc25b958a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a40cef-8447-4cf2-94d6-4faaa0d1e79e",
        "cursor": {
          "ref": "68dffc55-6536-4441-a48e-0034af6d158f",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ab0a0e68-ffb4-4c6f-8dba-b184b275de17"
        },
        "item": {
          "id": "81a40cef-8447-4cf2-94d6-4faaa0d1e79e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c3e7d0de-93e9-4261-bd3c-51c47568c527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fde998a-5c6f-4f0a-9262-6527bb7978bc",
        "cursor": {
          "ref": "40363e07-890d-4f46-b05d-5c4a43ef66ed",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "03acb19a-2a6b-4b23-93ca-b047da1938eb"
        },
        "item": {
          "id": "4fde998a-5c6f-4f0a-9262-6527bb7978bc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8b35aabc-a830-408d-ba90-d9a05d175901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f3f4c3-9cb2-4f09-b937-9188d0bc53b4",
        "cursor": {
          "ref": "9c5db9a0-7b3e-4c72-968a-6ebd3cc56a96",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4e07e37f-7d9d-4f9f-b753-2399eacf39ea"
        },
        "item": {
          "id": "81f3f4c3-9cb2-4f09-b937-9188d0bc53b4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ab75e597-6f9d-45f1-a74e-96cae7079084",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "1e690864-6ced-41be-a46a-ef2af7a17a2b",
        "cursor": {
          "ref": "77632187-a798-4594-b04e-7d261a37e4d3",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c9ef16dd-c495-4770-b990-2b555ac9c304"
        },
        "item": {
          "id": "1e690864-6ced-41be-a46a-ef2af7a17a2b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ef48569d-53dd-48be-9f8b-b40352a8966e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a52d29-f2c9-43a7-a062-43c0ef140b49",
        "cursor": {
          "ref": "24719ae8-a7e8-402b-92d3-683462cfe284",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a3772e39-e694-404b-85a1-ca9d97929f85"
        },
        "item": {
          "id": "d9a52d29-f2c9-43a7-a062-43c0ef140b49",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a1190c63-f71a-452a-98be-c71ce87239c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd15449-d083-4375-a6c6-9e7f3ede675a",
        "cursor": {
          "ref": "4c8fbb8e-daf8-4122-b073-ab47650d6377",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8c40a845-10bc-4163-9531-651fad3a2a04"
        },
        "item": {
          "id": "9fd15449-d083-4375-a6c6-9e7f3ede675a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "296ea70b-106f-455b-9125-bf539f84db4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d430b040-42d3-4c7e-82c8-ca2d64c544fb",
        "cursor": {
          "ref": "5e153860-41aa-43bc-a2da-1843cab2c68d",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f55dbe95-9c1a-4200-9777-18b7d031fa0f"
        },
        "item": {
          "id": "d430b040-42d3-4c7e-82c8-ca2d64c544fb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1398f4ce-23b4-433a-84fd-29e60129a6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6eeccb0-682c-4f8f-9d79-c2b5a683f3c1",
        "cursor": {
          "ref": "9830dbee-a1dc-456a-a3f1-aa644c3eb500",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "193d3670-dca8-4c68-a094-8ca9f3abf9d2"
        },
        "item": {
          "id": "a6eeccb0-682c-4f8f-9d79-c2b5a683f3c1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e03dab76-101c-471d-9032-c3225d2d4255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61bf6792-7cbc-4593-802b-44e2c8a03cf8",
        "cursor": {
          "ref": "fef2b3e1-d34a-4c1c-b207-8e788e5280c3",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1ff7f93f-f03b-4047-a1de-2d4f8129f638"
        },
        "item": {
          "id": "61bf6792-7cbc-4593-802b-44e2c8a03cf8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b98651da-4832-4168-a84e-f05a98c32215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22781e8-6ea8-48ed-8aee-f496b414b562",
        "cursor": {
          "ref": "7aa29388-97ac-4d98-97c7-2129d521c82d",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c5232af4-5fac-4bcd-bc8b-cbde3d3feb4e"
        },
        "item": {
          "id": "a22781e8-6ea8-48ed-8aee-f496b414b562",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f78ff14e-8374-465b-8c01-12f69ec0f573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6e832b-a543-408b-9e8b-1a0e04adb0e0",
        "cursor": {
          "ref": "581bbf49-2960-4d0e-a6cc-16d422f58cf4",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8be869d6-44d2-4896-988e-8799d7a2f789"
        },
        "item": {
          "id": "0f6e832b-a543-408b-9e8b-1a0e04adb0e0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7fab768e-601a-42e9-b9ff-83147b17159b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70214442-cdcf-4375-a75f-da098efad44a",
        "cursor": {
          "ref": "b0cc4ff7-36e7-4337-9512-22906606d6b0",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "53cf3324-e4c3-40d9-9c14-7fc0570a411c"
        },
        "item": {
          "id": "70214442-cdcf-4375-a75f-da098efad44a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "78be312b-3f1f-422b-96f6-4b7a2360eb6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d136ac4-57a0-43ae-bfa4-382c22a44a3e",
        "cursor": {
          "ref": "0e782414-286d-4947-9b15-5215236ede2c",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f57b6d03-ab36-43e4-a611-e9031c54de65"
        },
        "item": {
          "id": "5d136ac4-57a0-43ae-bfa4-382c22a44a3e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b6b8b17e-9d0e-40d9-8c39-4258bcf978b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1e38eb-7263-4351-a0bd-fc927f54b6e8",
        "cursor": {
          "ref": "465d8ed8-ece8-43c9-bac2-a9867331aa84",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d3151f90-1ebb-41a3-9416-b3eef927d1c1"
        },
        "item": {
          "id": "9c1e38eb-7263-4351-a0bd-fc927f54b6e8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9cdd2a4b-41b3-4554-81f2-0d1e3ca2250f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d1ef38-6347-4630-9d2e-581834bb39db",
        "cursor": {
          "ref": "87b2622c-bcbf-4c8f-96b5-3816693b9e50",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b9eb1275-38d6-4840-b0b4-7d14861af064"
        },
        "item": {
          "id": "69d1ef38-6347-4630-9d2e-581834bb39db",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cbfaa3b1-7a5c-45cd-9717-10c91494e20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12657fed-10d7-4c82-b4ca-57b01910f708",
        "cursor": {
          "ref": "7b04583b-d61e-4882-826f-c467d04e60e5",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "92d80d09-9f9b-4c61-b4d6-ab601c52b038"
        },
        "item": {
          "id": "12657fed-10d7-4c82-b4ca-57b01910f708",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e01ba3a8-4dfa-48df-87fd-4a4b0338719f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c289322-b9a8-4bef-aafc-9178f980589d",
        "cursor": {
          "ref": "44dcbff2-fbbb-4b86-8b10-33006cd8bea5",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "45821148-2257-474d-aac2-ab96d075cbc9"
        },
        "item": {
          "id": "0c289322-b9a8-4bef-aafc-9178f980589d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1995fde6-16e9-4ebe-a12e-7478f8f2725c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b67e09-570c-427c-84a7-22adcd26a9b1",
        "cursor": {
          "ref": "af8f5a3c-675a-4599-90a9-b5f54521596f",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f30e3f97-11f8-436e-80b1-8b01ab8201c2"
        },
        "item": {
          "id": "86b67e09-570c-427c-84a7-22adcd26a9b1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8399c146-067f-432b-a492-6164f454e750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02950377-d87e-4a9d-b746-4467ee74b7eb",
        "cursor": {
          "ref": "04222d4c-1d5c-456e-98e4-20b9d4433ff4",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d3f616f5-7c6c-4475-acba-ce933d593266"
        },
        "item": {
          "id": "02950377-d87e-4a9d-b746-4467ee74b7eb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9c61d654-dc42-4f87-aba4-12bbc5483202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba8ecf7-d074-4797-9a48-16f98c706eb8",
        "cursor": {
          "ref": "ef3b5ba1-f0c9-4c1a-9ab2-b689de78baad",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ac5d281e-71fd-4751-87e4-329ea161d8c8"
        },
        "item": {
          "id": "7ba8ecf7-d074-4797-9a48-16f98c706eb8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "54fc1f1a-c124-4a94-b27c-fb127d951d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a8aaf5-fbe6-40b9-9293-13c42f5afc50",
        "cursor": {
          "ref": "5633d3ee-1c28-4653-ba39-63163f91d22a",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "508a7caa-2638-4e5e-99d6-f0f49d5ee840"
        },
        "item": {
          "id": "75a8aaf5-fbe6-40b9-9293-13c42f5afc50",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "04ecbc87-9b76-4f70-87f8-4182c47d273c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c3cf40-d7e6-402a-92cf-5d49b96740a1",
        "cursor": {
          "ref": "35914f6f-f5a1-4687-95a6-6cd1fdc3f4bb",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "198791ba-fe9f-4062-9b15-e4b42c123546"
        },
        "item": {
          "id": "89c3cf40-d7e6-402a-92cf-5d49b96740a1",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "de818136-6579-480c-9535-2d5a82a742d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84250357-8d98-42ba-99a0-06a6aeae5eba",
        "cursor": {
          "ref": "fe47c385-fc40-4a66-9773-8f08148df94b",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "591f5c86-b04e-4074-98c1-23067607e4e3"
        },
        "item": {
          "id": "84250357-8d98-42ba-99a0-06a6aeae5eba",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a7776858-0d93-488f-b7cd-880af1ef8b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c7c39e-e8ca-47be-bac4-41be3d6bbd5d",
        "cursor": {
          "ref": "8fffbdbe-dfde-40fc-b8e6-2264962f6389",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "df6f448c-d786-4af3-92f8-63b3a7fbc8e0"
        },
        "item": {
          "id": "60c7c39e-e8ca-47be-bac4-41be3d6bbd5d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e89c912e-5a47-4520-ada7-a0eb10533ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2ef3d2-9a17-41b6-a472-19758cba32e4",
        "cursor": {
          "ref": "13e174b0-cfe2-4f30-9cfa-7a82b14f1682",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "740fdf49-fa74-4a0a-89e0-633425bbea97"
        },
        "item": {
          "id": "bb2ef3d2-9a17-41b6-a472-19758cba32e4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d53fb0d8-a7ae-4477-b4e1-e4883e165446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af161a79-7d86-4e87-a2aa-87071ec306c6",
        "cursor": {
          "ref": "af75fd12-e6b7-45cb-b6da-0b795c368769",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "37cb08f6-23f3-4ddb-9da9-a2efc3cfc60b"
        },
        "item": {
          "id": "af161a79-7d86-4e87-a2aa-87071ec306c6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "be15a9e0-ab5a-45a6-a850-aa6e04272b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17521202-da18-4c48-adf4-6465aac017f1",
        "cursor": {
          "ref": "a8679715-12ec-4fc3-8b4e-7ba39f15b0e1",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a61bcec3-29a3-4489-bd01-29f97355d3a4"
        },
        "item": {
          "id": "17521202-da18-4c48-adf4-6465aac017f1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d99e8957-6a92-4703-a060-2940740b36df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d9177d-e268-4719-9b84-f3f24f0f9e25",
        "cursor": {
          "ref": "551f2724-92cf-4a0e-bb4e-9770a98bbbfc",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a6210d1a-140f-462a-92d8-c596ecf5a79d"
        },
        "item": {
          "id": "77d9177d-e268-4719-9b84-f3f24f0f9e25",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cf72542b-9414-454c-94f4-3cfcaf8bfa3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83577ff-18d8-47d9-9084-4678862f78f8",
        "cursor": {
          "ref": "41bbe609-63a1-477d-8bf6-8dd09eac7cda",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e8c6e264-a31e-4241-9b4f-927d49aceb12"
        },
        "item": {
          "id": "d83577ff-18d8-47d9-9084-4678862f78f8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b2f7c65c-7257-4c90-a2d9-44d55fa89ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b98172-7c09-4163-8378-891b0c1f92ec",
        "cursor": {
          "ref": "88be5bab-a9c5-44aa-9a5a-9145c5c8b040",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "94e97758-d991-43ea-9e75-b5ca4b773038"
        },
        "item": {
          "id": "47b98172-7c09-4163-8378-891b0c1f92ec",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "907b7ff3-f198-4752-b0e9-ee69a1f5a974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c066047e-7794-43be-937a-151b8f855fee",
        "cursor": {
          "ref": "d17b14fd-c824-492b-8888-83e43cc2a01b",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "25fe2815-cf9b-4531-bbe5-c53d8ac4d1f3"
        },
        "item": {
          "id": "c066047e-7794-43be-937a-151b8f855fee",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8a995599-3d53-4fe3-ab23-964561a037b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca4ab9a-aeaf-4635-ba04-5482e48e6bb6",
        "cursor": {
          "ref": "473a12d9-e9b2-4e14-813b-da08b9c0a17d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bb142ff3-dd77-4f42-b9d0-ac2b0d495ce2"
        },
        "item": {
          "id": "dca4ab9a-aeaf-4635-ba04-5482e48e6bb6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "05454a7c-3d3b-4d3e-80c6-f69a27098fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8405a2e5-02a4-497f-91ec-fda9b97eda7c",
        "cursor": {
          "ref": "f9c3c6b1-b356-4e16-815c-00475a923190",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5e511458-b0af-4f2e-9a72-32c317fe5e5f"
        },
        "item": {
          "id": "8405a2e5-02a4-497f-91ec-fda9b97eda7c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "49d10626-69c3-4fd6-9477-005167d99253",
          "status": "OK",
          "code": 200,
          "responseTime": 170,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "79e22b03-df38-443d-8661-07cfba9bc5a0",
        "cursor": {
          "ref": "93202736-cb8f-4a88-8482-09bc8beb4dbb",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bd646d84-71ef-4fd3-8759-46889a00d60b"
        },
        "item": {
          "id": "79e22b03-df38-443d-8661-07cfba9bc5a0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "af926643-5fb2-49ce-a970-fde9fb062f19",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "295d1dbc-9063-4d9e-a5fc-a3124339c346",
        "cursor": {
          "ref": "426ca254-bf26-42dc-8831-4156b4e8cf9e",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c37de303-c214-4785-be56-1da6b6cdb82c"
        },
        "item": {
          "id": "295d1dbc-9063-4d9e-a5fc-a3124339c346",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c6943636-3877-4118-b297-e03c08254656",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "332fc62d-b260-44d9-93ae-5af06253c6e9",
        "cursor": {
          "ref": "0f872088-06a6-4cbb-bf9c-cc663d895309",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "48c7266c-4b7f-4cbc-8758-1131a448bb6d"
        },
        "item": {
          "id": "332fc62d-b260-44d9-93ae-5af06253c6e9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a4553884-d102-4f7d-a6db-d63039234383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4816ca58-1ff7-4da7-b0ee-25c75c6f8b4c",
        "cursor": {
          "ref": "d8d496d6-7ce1-4107-91b0-60206b870f36",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0d534b8c-6e0e-4ff0-9075-3e21a35458de"
        },
        "item": {
          "id": "4816ca58-1ff7-4da7-b0ee-25c75c6f8b4c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "508530b6-ba5b-4179-a28d-5ab5e54371c0",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4d17d40b-3c3f-4ea2-8e2d-10673c3728ff",
        "cursor": {
          "ref": "b9a8eb00-3a47-4b30-a96f-609e6c7f8e5f",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "476c0a74-9418-4bd1-9eb3-514e39f8224c"
        },
        "item": {
          "id": "4d17d40b-3c3f-4ea2-8e2d-10673c3728ff",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "56ebebc6-4563-44fa-8d43-04c9ccc53741",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8b4d69df-5bc4-42a6-a5ad-64ce93aaeae1",
        "cursor": {
          "ref": "a16b850f-8a01-4fa2-8f99-464dd864e774",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7373448d-5342-4072-bc0b-5534f4cde854"
        },
        "item": {
          "id": "8b4d69df-5bc4-42a6-a5ad-64ce93aaeae1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ba66f736-53f5-4050-9fcf-c41b0044800e",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "18f7054c-4e0d-4abb-9883-a34204c947ca",
        "cursor": {
          "ref": "efdc7d6b-fa36-46cf-80a2-dd7aa0d63571",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "295ec6e2-af36-4b4b-8933-1e97c7052819"
        },
        "item": {
          "id": "18f7054c-4e0d-4abb-9883-a34204c947ca",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c11eecdf-f166-482d-b252-f9af4a0366d4",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "666b23b4-50f4-4f54-b0b3-b665690a65eb",
        "cursor": {
          "ref": "6631803e-f148-4aff-87be-cd63a2fd1557",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1b8906cd-6157-459d-854f-88395b7baa85"
        },
        "item": {
          "id": "666b23b4-50f4-4f54-b0b3-b665690a65eb",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9b1545cf-d06e-4cec-ad23-0a4a4c775ec2",
          "status": "OK",
          "code": 200,
          "responseTime": 168,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "7cad709b-d736-4879-8b77-71b7b38c5d3b",
        "cursor": {
          "ref": "ff9ccab0-b50c-4dec-aa51-8cdc8e89192d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e617f2ce-88a4-4d07-80e7-41ffafee434e"
        },
        "item": {
          "id": "7cad709b-d736-4879-8b77-71b7b38c5d3b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "39c77106-df11-4575-88aa-b69fe0bc1ad2",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "3a3ebd55-c2ea-4eaa-a698-215fc6affe5e",
        "cursor": {
          "ref": "d54eef17-c819-461c-9fb9-b41c538c7cf1",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "443c12fd-444d-4bcd-8be1-292533377418"
        },
        "item": {
          "id": "3a3ebd55-c2ea-4eaa-a698-215fc6affe5e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b3fdffee-194c-457a-a413-19a3090922de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31279927-9aa3-4c98-b766-2f16a760ff95",
        "cursor": {
          "ref": "3fb70470-efaa-4f6a-910d-5697cece31cb",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d2b07960-08e7-4e64-8fc7-453250694639"
        },
        "item": {
          "id": "31279927-9aa3-4c98-b766-2f16a760ff95",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "07be5359-f310-4023-b9fa-1cb3615d8363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae53921-c6db-4ca2-909d-96679e6732e4",
        "cursor": {
          "ref": "5a947105-4566-42b7-b2eb-d97fc7f93da4",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3bffa7e9-2c41-420b-b0f9-24d649cff70a"
        },
        "item": {
          "id": "7ae53921-c6db-4ca2-909d-96679e6732e4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4b91d59e-0dfa-4d6b-aeac-19ac14f2e4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1962ad-8d70-40aa-bd32-f488d3c75b45",
        "cursor": {
          "ref": "f675b419-cea2-41b0-b93f-7b45a4484363",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e1b8de7c-4cd5-41d9-a645-2f412b6da45d"
        },
        "item": {
          "id": "ff1962ad-8d70-40aa-bd32-f488d3c75b45",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "66aa595e-8842-431e-b3aa-171b313343f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20732d9-1f34-456d-8475-eee2e70eb983",
        "cursor": {
          "ref": "0f56a2bd-448c-481b-8843-f410063650a5",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ea922980-eacd-4edc-88c6-c4bf2558462a"
        },
        "item": {
          "id": "a20732d9-1f34-456d-8475-eee2e70eb983",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "67db1369-df3e-41a7-83d8-1104859494a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385e9d74-14ab-4d7a-b0cf-618afcd13892",
        "cursor": {
          "ref": "1c9e4923-ca80-4be9-9e28-bd57eada98d5",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bd461c69-2592-4aac-99d1-c07db4ea8edc"
        },
        "item": {
          "id": "385e9d74-14ab-4d7a-b0cf-618afcd13892",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fc2c0bd0-4519-4bb7-aaca-2971bf993265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62928de1-2b20-4017-923f-aeecd92ac3b5",
        "cursor": {
          "ref": "d4d92741-82a9-4ec8-878f-23818bcd38b6",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3196d005-dd50-4dc8-a6ea-f8982c36d8ee"
        },
        "item": {
          "id": "62928de1-2b20-4017-923f-aeecd92ac3b5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "281b1a78-6558-4dee-8d3d-409ebef02b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdad631a-a2c9-4a0e-b43d-7b6e1945567c",
        "cursor": {
          "ref": "9f8279d6-1e19-457c-81e4-b78aa692144c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "97047a5f-1f9d-46c9-a4e4-d5cfc4393246"
        },
        "item": {
          "id": "cdad631a-a2c9-4a0e-b43d-7b6e1945567c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fbd747b3-db58-469e-9032-442652285d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "193795b7-3499-4c1e-bde6-5fb66032e9b4",
        "cursor": {
          "ref": "1487dc93-19bc-4ab1-ab25-c97fb4ecaaa2",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8cb3a484-7c4f-45a7-82ec-a8d12b794132"
        },
        "item": {
          "id": "193795b7-3499-4c1e-bde6-5fb66032e9b4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "26218068-3dcc-400b-9537-571b3d26ead6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1199bc8b-8fc4-46b3-addd-4916cc76f578",
        "cursor": {
          "ref": "c563d1c9-36b4-4297-b0bc-cb44012da95e",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "06f6d819-f39d-4e02-9b4b-89afbc63c580"
        },
        "item": {
          "id": "1199bc8b-8fc4-46b3-addd-4916cc76f578",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7c6ffdf3-f10e-4055-83d4-32407389b103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5367d6-31a2-4650-813e-287ac2026d69",
        "cursor": {
          "ref": "e1f99dfd-2c11-47a5-ac3e-84c92baf7441",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "018e4192-b2d9-4d69-937e-3710bc01544c"
        },
        "item": {
          "id": "4f5367d6-31a2-4650-813e-287ac2026d69",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f4950236-2c6f-4229-b136-f2c885a2b35c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e7c2c3-611a-4dd6-b64a-f4ae78a91f2e",
        "cursor": {
          "ref": "45891612-b09a-4215-9fab-745653368ae4",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cfb6f02c-ff4c-4676-9c0f-2ea78c3a16cb"
        },
        "item": {
          "id": "c8e7c2c3-611a-4dd6-b64a-f4ae78a91f2e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1d5db1f0-8805-4dd8-85e9-13a034eed451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab47854-5a2d-45fa-bfcb-d9581ab3bba5",
        "cursor": {
          "ref": "eb42cd98-2c95-40df-9af3-7c3a32e6d4a9",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1b299af2-bb35-4787-8dd5-4a0e9795c4a2"
        },
        "item": {
          "id": "dab47854-5a2d-45fa-bfcb-d9581ab3bba5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "63e3d396-afd1-427d-b1a6-5b7cada4dc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0adf28-1d80-47d4-bc75-e48d738f0ecb",
        "cursor": {
          "ref": "5f8f381a-d4f4-4d12-b327-b2d10768bccc",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9e341a6d-ace2-4ee7-af45-19bed9df6421"
        },
        "item": {
          "id": "df0adf28-1d80-47d4-bc75-e48d738f0ecb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "23e68a3f-5a13-414a-9479-e8f067d3c48c",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "69002d88-eb86-46ba-9917-357f2f5e2305",
        "cursor": {
          "ref": "f0bd2dd1-4441-4385-91ff-a0490176639d",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "60e62161-5f8d-477f-b9c4-35d0fd1f9876"
        },
        "item": {
          "id": "69002d88-eb86-46ba-9917-357f2f5e2305",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2ea0556b-d8bd-4d93-abc8-6973a47c660a",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8caf5c7e-fb5a-4994-90b0-69dfae8b1484",
        "cursor": {
          "ref": "20f1f37a-1abd-479b-8b7e-30f762431889",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3b902748-3f34-4894-896b-956cfd9a6fe1"
        },
        "item": {
          "id": "8caf5c7e-fb5a-4994-90b0-69dfae8b1484",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7a9a404a-3f0a-4b2a-8631-966f4668478b",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4f1096ae-f152-4ae4-a507-4330ef727fc1",
        "cursor": {
          "ref": "d47a75e4-95c7-4218-bbd5-d1ffa40701f6",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "91df9a6a-7ff6-4d41-bfa0-6effaba33c7c"
        },
        "item": {
          "id": "4f1096ae-f152-4ae4-a507-4330ef727fc1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bec2f84e-1fdb-4610-868d-0423e112fb5f",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "91286399-782a-4da1-b1fd-2708994ba1e5",
        "cursor": {
          "ref": "ca94b006-71a7-4de4-a728-a5b9c6c59d09",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "495ee5f3-8026-4542-88d9-e4fa75590584"
        },
        "item": {
          "id": "91286399-782a-4da1-b1fd-2708994ba1e5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "62c63ff9-6a7e-4ad7-8486-e7b59058660c",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8d1338d4-318b-4285-9186-f18a8006cc2b",
        "cursor": {
          "ref": "99aee92e-3f32-4b09-a5bb-1aeebc7bc1b2",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c3ea4b05-133a-4562-9884-f4f06defdd0c"
        },
        "item": {
          "id": "8d1338d4-318b-4285-9186-f18a8006cc2b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ea272d1d-984a-4ce2-ba1f-4496bc8b4f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec3d049-b03e-4b7e-9cd7-886b9e8e5e0a",
        "cursor": {
          "ref": "67c99b94-698a-47ba-8735-5e2f1a3ac807",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "30bb3062-2d39-4a48-9658-268c2e48c214"
        },
        "item": {
          "id": "7ec3d049-b03e-4b7e-9cd7-886b9e8e5e0a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a9c2c777-ee02-4afa-a71f-f8f389dce309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a32ae0-7513-4847-b865-16f3b560d8f5",
        "cursor": {
          "ref": "996736ae-f19d-4636-a46b-339c4fcdd28b",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b17608c5-47d7-4618-8c78-ca5568ea188e"
        },
        "item": {
          "id": "80a32ae0-7513-4847-b865-16f3b560d8f5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "dc10c8d5-87ae-4166-81b4-848c3e438390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f66cb17-7f0c-4fb7-98b6-1e0d294663fe",
        "cursor": {
          "ref": "661dd163-f6a4-4999-8b5e-dd84431141d2",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2441c428-d72c-4224-b737-a3fa7b0f42c7"
        },
        "item": {
          "id": "2f66cb17-7f0c-4fb7-98b6-1e0d294663fe",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "40926735-2635-4aed-8449-1b624415bf26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71f2173-29f9-4a79-98d0-65652852fe08",
        "cursor": {
          "ref": "3f97e826-aeba-4393-88f2-deb025258f3c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e5df373a-fe61-4c8a-ae56-0b4f614391c7"
        },
        "item": {
          "id": "e71f2173-29f9-4a79-98d0-65652852fe08",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "dd014a69-e9d5-4d05-83ed-dfb847dee278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66dbc25b-eb95-4d3b-9396-177e3faaa582",
        "cursor": {
          "ref": "c811c2cc-db7e-4d31-a3da-be91b8959f3d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6e3ce1d9-d836-4f88-9814-36b1bf27ec3b"
        },
        "item": {
          "id": "66dbc25b-eb95-4d3b-9396-177e3faaa582",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3609be1e-2207-4207-a5f1-aedb1ba3d814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3917c893-a1d6-46b7-93e3-58acccbfb149",
        "cursor": {
          "ref": "7c990af3-541d-459a-bbd8-53dbd1c0c683",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "56730355-6b9b-40fd-9a7c-c67866c3820e"
        },
        "item": {
          "id": "3917c893-a1d6-46b7-93e3-58acccbfb149",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "fea11f74-1c8a-402d-b18a-9d0736ede896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2d1f75-841c-47e1-97d3-b77fe3f02153",
        "cursor": {
          "ref": "30939267-7868-4191-b742-651244cd91cc",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "532149f0-4da0-44fb-a476-42f39938adf4"
        },
        "item": {
          "id": "dc2d1f75-841c-47e1-97d3-b77fe3f02153",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bb342ac8-2718-4c3d-b0ac-ef77bbfb9843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16670d6-5d67-4fe3-8ebd-474d0950bc84",
        "cursor": {
          "ref": "d1b37a85-73cb-4c14-8571-d1f47018bacc",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5a80bb04-8f34-4e36-b908-3cce250703bb"
        },
        "item": {
          "id": "c16670d6-5d67-4fe3-8ebd-474d0950bc84",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c0287e23-e035-40b9-9e89-e2e95998264f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce1da89-151d-45d6-8304-9b3aa1724da3",
        "cursor": {
          "ref": "fd9d70af-6984-40a0-87bd-5792920a095b",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "af6158fb-eebd-4fc9-b3e1-805471eb229b"
        },
        "item": {
          "id": "8ce1da89-151d-45d6-8304-9b3aa1724da3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "561a5368-b503-4c73-93ad-9dcb935a270b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2e25d7-f8b9-4ebd-a01a-6669c5bd2beb",
        "cursor": {
          "ref": "e601fd04-b0bd-462d-99ba-874b34ccc46b",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "71a5ba65-9d19-4714-9480-42a68b6dc26d"
        },
        "item": {
          "id": "5f2e25d7-f8b9-4ebd-a01a-6669c5bd2beb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4bcbdfda-94ad-4a64-836c-e19291d8e502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9355fa6-2783-4c7e-a45c-9bbf73b70bf4",
        "cursor": {
          "ref": "c8aaaf98-584a-4e8d-9336-7f79227c60f5",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "213e69ab-b20d-4c14-881e-030feff128de"
        },
        "item": {
          "id": "b9355fa6-2783-4c7e-a45c-9bbf73b70bf4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "64e2d878-dba5-45f2-9018-8ec514286ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84025dff-1540-4b53-8702-7fde70700878",
        "cursor": {
          "ref": "a68eed18-e8f6-4b4e-974a-9c7c48f7f226",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "81ca21fb-c55f-45e2-8165-675d1bc94a4f"
        },
        "item": {
          "id": "84025dff-1540-4b53-8702-7fde70700878",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "46c6d5ef-5ea6-4ee9-87b2-31c58ad4fdc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138f38d6-de38-4293-8372-a5ef0eaf4b2d",
        "cursor": {
          "ref": "664fd705-f56a-46cd-9831-57177c05ad43",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "cb59833b-9ca6-4a0d-a584-6adc397df939"
        },
        "item": {
          "id": "138f38d6-de38-4293-8372-a5ef0eaf4b2d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "568aeb22-c135-44ec-b4c7-bbaa87c209aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d53e9d-011c-4936-92f5-a54c7bb01e11",
        "cursor": {
          "ref": "5c96297d-bbeb-4095-8003-b3f877dffb77",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c71c573b-7d79-4b88-b0be-4d713d31f2f2"
        },
        "item": {
          "id": "74d53e9d-011c-4936-92f5-a54c7bb01e11",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2a495c20-1ad4-4ded-9c9d-9dff91f83cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96abd64e-642a-43a4-93e4-c804faf4bfd2",
        "cursor": {
          "ref": "904ad37c-08d8-4814-b1f4-a553949df6a7",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e7c22b10-e41d-4306-9143-fb62281e8e2b"
        },
        "item": {
          "id": "96abd64e-642a-43a4-93e4-c804faf4bfd2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "eda21291-7f69-4f89-9877-ca44b8a78545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed72fbf-c8aa-4311-adc8-0132595bfee0",
        "cursor": {
          "ref": "ccf9afec-5709-4577-903f-4584921268b3",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "0e36eb6e-f022-4041-a364-65d7f9c79933"
        },
        "item": {
          "id": "eed72fbf-c8aa-4311-adc8-0132595bfee0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5baa700d-443b-426b-a6d8-81fd0fdb2cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936da141-83ca-4bb2-9cdd-19ea8df2c63d",
        "cursor": {
          "ref": "07223c4b-1bdc-4a28-a4d5-d51f4c6ebc2d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "dbc5226f-c726-4891-a9f1-16c32b443fe5"
        },
        "item": {
          "id": "936da141-83ca-4bb2-9cdd-19ea8df2c63d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9afd35ec-068f-4996-8ae0-dc4644a03d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d6369e-cefa-4549-9f75-82607117dfe9",
        "cursor": {
          "ref": "d7a1d549-6f92-4ca8-b4bc-b99e8462280d",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ae39fd9c-211a-4b7e-acb9-2e88f2787936"
        },
        "item": {
          "id": "38d6369e-cefa-4549-9f75-82607117dfe9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c0b367ef-54b8-4c1d-9915-4aefde07a0a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09421f55-26f9-4573-b295-a593b9d8b24d",
        "cursor": {
          "ref": "57cc1a70-adb8-44fa-a4f0-597b6ce09a78",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0c5110d3-a29f-4767-86f2-d547e9053049"
        },
        "item": {
          "id": "09421f55-26f9-4573-b295-a593b9d8b24d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d60ddc50-69ac-4322-8980-746d0fda6651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d859c21c-9efc-4942-a099-dbd00febe274",
        "cursor": {
          "ref": "ec1b1e69-aed2-4411-a5cc-f7dbb065bc12",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c933994a-d331-45d6-ae08-5243d8ce7aac"
        },
        "item": {
          "id": "d859c21c-9efc-4942-a099-dbd00febe274",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f2857afb-782b-4de0-a97e-1ebbe664e489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6108ea-ef93-45ff-a2a8-09a0f424569e",
        "cursor": {
          "ref": "b11ddc91-7f29-4e21-aeae-47832b9f1910",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a3c32c93-8b3d-43a6-8442-63da54c1466d"
        },
        "item": {
          "id": "9d6108ea-ef93-45ff-a2a8-09a0f424569e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "10680e6a-ef1a-4346-bba4-d223ce8ab80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31840771-24fa-446e-bad0-bbe719aca6e0",
        "cursor": {
          "ref": "e9486a90-f608-481e-b8f9-2dd6fd6c960b",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "d87a73d5-b7df-4c6c-b1f0-ff710ec7ce21"
        },
        "item": {
          "id": "31840771-24fa-446e-bad0-bbe719aca6e0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5f83541d-4b8b-42ce-8658-d20b4bf1e7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfff6d65-9fda-462f-af55-67bd72d6dcdd",
        "cursor": {
          "ref": "3186ea2d-9693-4f02-8c7d-4435b67220d6",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a27bfa4d-53ee-48a2-8ccd-a18b967d60bb"
        },
        "item": {
          "id": "bfff6d65-9fda-462f-af55-67bd72d6dcdd",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "614d434c-96a6-42f9-a32d-574237ae93c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7788e60-3945-4213-8c44-04db6b08e7cc",
        "cursor": {
          "ref": "2233d547-ed3b-43ce-8d7b-be794bde5b27",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "af27d3ea-d1a9-44b0-8966-31836d019d25"
        },
        "item": {
          "id": "a7788e60-3945-4213-8c44-04db6b08e7cc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1ce7679d-f36b-40cc-93a5-c40827d5c9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab49add4-df96-43c0-9db7-6abea997c5ad",
        "cursor": {
          "ref": "6239e5d2-9270-4758-948c-76ef2123d5e8",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c86e5512-46de-4f4f-9470-57a40b4e587a"
        },
        "item": {
          "id": "ab49add4-df96-43c0-9db7-6abea997c5ad",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "991bf5a1-cfa8-4649-8348-d5a9e01b62fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11a394e-3b75-4fb6-8d9c-1c91904c9da1",
        "cursor": {
          "ref": "c8c83461-be22-4eab-baee-131bd00c9f14",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "8723c549-57be-4016-b7a4-b8281b01f013"
        },
        "item": {
          "id": "b11a394e-3b75-4fb6-8d9c-1c91904c9da1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a3bb3d8d-793e-4df8-b25a-5ccec514dff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b470656-eb7e-4c33-b6c7-0a2269b029ba",
        "cursor": {
          "ref": "8cddf941-3e11-4d6c-81af-c26b9f48b3f1",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "4379dac9-d8b2-4aa9-8284-1d195fda76b5"
        },
        "item": {
          "id": "5b470656-eb7e-4c33-b6c7-0a2269b029ba",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "df61c742-d175-4cd4-aa07-1393627f04a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29eac61a-10d1-482e-8ee2-27c2bddf3869",
        "cursor": {
          "ref": "6971d1c5-e5f0-46a8-b149-4cfc2f5f4f39",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "35ea15fd-d423-4b83-acb3-84c8923ac5a4"
        },
        "item": {
          "id": "29eac61a-10d1-482e-8ee2-27c2bddf3869",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cf4dd16f-0e69-474e-91a3-58c9dc7c9bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9962ba0e-bb02-4f49-8af7-33b1f58dddda",
        "cursor": {
          "ref": "58247664-d303-41b2-9c8e-56ff48a7e9c3",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "c3aa1b19-c60c-462a-9a96-4f2dfe76324e"
        },
        "item": {
          "id": "9962ba0e-bb02-4f49-8af7-33b1f58dddda",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "18301f16-0d6b-4ada-828c-c4538f5a0e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1ec29c-60e4-40c3-bde5-cf383819f4ce",
        "cursor": {
          "ref": "8cc6db59-4401-4c04-a6b5-5ae7037fb8ef",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "0b1f0f7f-6e5a-4b3d-9c72-d157cc461ef2"
        },
        "item": {
          "id": "0c1ec29c-60e4-40c3-bde5-cf383819f4ce",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b3e2e260-946e-4e74-a563-9b63955a45f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5233fb46-d15d-4404-9888-9d59595efa62",
        "cursor": {
          "ref": "3ca88e54-d73d-4932-aa9e-2e247c727436",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "0aefde72-95f3-4039-95e9-f561bb416d06"
        },
        "item": {
          "id": "5233fb46-d15d-4404-9888-9d59595efa62",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a42d2d82-4e6f-4376-9b51-17fdcc945004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6038a34-080a-4c60-aa59-ac9523796ed5",
        "cursor": {
          "ref": "700cd340-0730-46b6-a0a7-93b30203cdb6",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "4cb70c30-cbe9-495b-8ea1-4edf0136cfa8"
        },
        "item": {
          "id": "c6038a34-080a-4c60-aa59-ac9523796ed5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ae45f165-1f02-4170-b38a-5fcb9be999d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed51acd-6f79-408d-8e79-b2a22d7e7159",
        "cursor": {
          "ref": "8aa4c163-872e-4aac-845d-5c1aa611ded6",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "311f8aab-73c4-494d-8c92-3611b79c8d38"
        },
        "item": {
          "id": "5ed51acd-6f79-408d-8e79-b2a22d7e7159",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1375f3a3-3c09-4b9e-9adb-8604151f5047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c1e0d6-3247-4562-8638-cbfb520f787a",
        "cursor": {
          "ref": "d72b09a2-d398-4634-b58d-0377bf3835c7",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "1a0b111c-1da1-4a6b-92a5-d4254dbe7dcf"
        },
        "item": {
          "id": "62c1e0d6-3247-4562-8638-cbfb520f787a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "78de8394-f8bb-4026-a0be-a184da3cb994",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba1b01a-edff-4ded-ac48-ab1456ced1d4",
        "cursor": {
          "ref": "8c69f30e-53e1-460c-bb03-d7f9976abf54",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "9aa73992-75be-41fe-b5d0-7d250a39d31e"
        },
        "item": {
          "id": "dba1b01a-edff-4ded-ac48-ab1456ced1d4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "195ae533-924b-45fc-b754-70a8c7eb06ff",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2eca2b42-1da7-48f4-b2d3-d7d253aacc41",
        "cursor": {
          "ref": "1797e51e-b6e3-496e-aad6-74533c04f4a1",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "1c59600c-4952-4c55-82f0-3098eb047496"
        },
        "item": {
          "id": "2eca2b42-1da7-48f4-b2d3-d7d253aacc41",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e769afc4-2a06-48ef-bf9e-3f68dd4f05d5",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1403c09f-960a-4881-b79c-a63ff9f1a7de",
        "cursor": {
          "ref": "2e05aca4-9e81-4fea-8fcd-efb634a7544a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "93600813-ce0d-47ab-ae4c-738cd42cf490"
        },
        "item": {
          "id": "1403c09f-960a-4881-b79c-a63ff9f1a7de",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "47b28d1a-cd42-487f-a735-7b754bbce5b1",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05a27b5-373c-4da0-95d2-9e61d4fdc111",
        "cursor": {
          "ref": "deb70e95-6f00-4b8f-a050-19b1378efb18",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "986c0615-2bd0-49da-bc8a-0b14aa6f3442"
        },
        "item": {
          "id": "a05a27b5-373c-4da0-95d2-9e61d4fdc111",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b3dff81f-43a7-49bf-bb37-00055c6e5aa5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05a27b5-373c-4da0-95d2-9e61d4fdc111",
        "cursor": {
          "ref": "deb70e95-6f00-4b8f-a050-19b1378efb18",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "986c0615-2bd0-49da-bc8a-0b14aa6f3442"
        },
        "item": {
          "id": "a05a27b5-373c-4da0-95d2-9e61d4fdc111",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b3dff81f-43a7-49bf-bb37-00055c6e5aa5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf874444-5744-4514-a3e3-e8d81a1dacc9",
        "cursor": {
          "ref": "4fab8ebe-e91c-4564-bbfc-b21e8277a402",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ef80ed1a-dc61-45e3-b52f-45b6e9a4ac96"
        },
        "item": {
          "id": "bf874444-5744-4514-a3e3-e8d81a1dacc9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d39e96d1-e6d6-4b48-98f7-f42509fd0e7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d367cfc5-5c06-4b59-a68d-3964c91954dc",
        "cursor": {
          "ref": "a17f089c-5239-4dbb-8ea0-665cdb76ac59",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "3cebb735-5c98-481e-b2a4-c5c5657d1f34"
        },
        "item": {
          "id": "d367cfc5-5c06-4b59-a68d-3964c91954dc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8c83a8d4-4be5-4884-ba1f-a6b0e29b497a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}