{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c29d9bca-7694-4e83-935e-6fcedf550bbb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "91a4de21-e570-420a-839c-19cf114d66bd",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fe581c82-16b4-44e3-badf-368ac8fb0419",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "86286d48-5a8b-4265-a666-62a5b40f8092"
                }
              }
            ]
          },
          {
            "id": "2406d7cd-9719-4734-ab10-7bce6030c7bc",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "65082b3a-2266-4fe7-8cbf-466a04254f19",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9d973a95-134c-4fe2-86dd-f063c7467cce"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e134a519-0d1d-45ab-aa64-b6af4f21b5ba",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f33c6e5a-0f1e-4162-a0de-bde120bbfc14",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6db82d8f-b6cf-4938-96d9-012e684f41df",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "79d17b9b-7a00-4aa2-9135-22572c89e147",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "57ff5e0d-5d92-46af-8fa5-272c0efad010"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "841f6feb-e333-4744-a9d0-dfc2285bacbc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4398f85-d6ae-4d70-9e28-654495791217"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4b0b6900-ce00-4f73-866c-c2bca3cc7c19",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3d0a907-437b-46b3-8fd8-ffb9f5c0e8e6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d29838e3-7128-4bc7-b919-7d3ff7c96bd8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "51979738-4da3-4c25-88a5-eda5195a2b02"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "548df509-5240-4edb-8630-3d680ba6500d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "366c7716-d481-4969-b00e-0fae837e742e"
            }
          }
        ]
      },
      {
        "id": "deb759c6-53b5-4570-8c33-bc104ea0e9e8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "aad98157-f1f4-4b8e-a3f6-1f383e467fcb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "44435577-c8c0-4955-8417-063eb2d6b81e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "df808656-3105-4e00-b87b-7d9c71152985",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccbfbaa-040d-41fe-89df-138c6b8f1f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8016fe7e-1885-42ef-b44c-f38d78e99c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae63eb4-97ea-4fe0-ad85-cc273c1d9344",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3690be2-b4a5-401a-b9ec-5f24835b7872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c37f572f-deca-4308-b7e8-95ad059987b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6dbd72-86de-4bc9-a949-ecdd2500ad90",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6b64de-d028-401c-910d-047d5c8b9de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcc4caf7-5044-4ed1-b00e-3bf8c8f7b895"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1ea1d2f7-97a0-4437-a3a6-d17046cf23df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52be2205-d89b-4b07-86f5-72f4584bdb56",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7884a8e0-b80a-48a2-9c04-6b1c0438cbbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c7f5c95-0d0e-4869-9e2f-e793012af334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0a4a0e-caee-4fac-8da1-b72bcab35bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3faac944-19fe-4a20-9c94-b6836f1dbcae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6873d7-1095-4c97-90a4-68cc58fa2dd8",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efdcb86-14c0-4715-b3d3-f2a99c28406a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a12becf6-e51b-49ed-a106-6ad17a52aba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c483f7f3-9836-41c8-86f1-9a5c52802584",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "502e4352-1143-4da2-ae56-fb2bfcb20d1c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b3721c0d-f070-4497-91d6-19078973a171",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fe43296d-36eb-4077-825e-9e1694cd018f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "521adbee-8bcd-4753-b51f-52f80677c151",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b16fa7cb-4e28-4be2-8ad1-328f7ca95010"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d73cf87d-5611-42e5-b502-704ff8c6016c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "fab4c32a-a693-4073-a739-a75d7dfb5819"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9aac60f-50c3-4dcf-8b0b-89bb02782904",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "36fb1854-6dbc-41f7-b67f-122106677470"
            }
          }
        ]
      },
      {
        "id": "188c8a0a-388c-4f27-afda-a5d26a4d34f6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "13540787-743b-4e71-b99e-62336dc28250",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37dac36e-08c0-429a-934a-df96cd78c855",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c5403a03-b1b9-4826-80ff-6d0653f56d9c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5026bf1-dc16-46cd-acf7-b7ad95ee31e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba655373-d379-45fd-8d8f-3e706dc87aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ac92d4-8d95-460b-87fa-2db61b429329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "983da6f6-2512-42b3-a364-9354660daf33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c3b6571-4f32-4193-90ae-d0f05c3920b8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7deab3f2-e538-45c7-a3ee-167d304952b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4b99b4-9585-4f2f-a9a8-2dcc935d3b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b93e1a-fe08-4cbf-ad1f-4c103bc6079e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd93819d-0603-45ae-bbaa-dc63836af82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf7cfff-0da4-4adc-a2fe-a6f3352268ac",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06cc636-7958-4bec-ab44-6defa0aeb5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70af2ccb-dd1d-428f-a433-adf6805f629a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568df585-dce9-4d4d-9964-3f284ceb7f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a9b8a72-ceee-4916-b0ac-f9651a50224c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae178336-a3a2-4bed-b5b7-0079eb8a8245",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3353dd8-c912-473e-b2d5-2ba1c845b51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eced4572-fe91-48b7-a4a5-317ae47f6b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2089bc4f-a41b-4a5f-ad5c-d4380f0b506a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e96c0ec-ebcb-48f8-8983-35cfbfba447e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06ebc2f-63a2-4705-ab7a-bd6f5a7c1ed3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b18333-60a1-4bd2-929a-cedaff6b1b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a42e213-0a73-436c-88f4-7f0e2bbf27c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac105d9e-1dfe-4443-a2ab-96110cefb169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62776614-5f40-4f70-8f17-6660fa73dd53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7258b4f6-4525-4189-9c82-c55039817e41",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de79055-139c-4dec-a821-ce2415bc2a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1787cb3-1629-434e-9705-47f63ae52824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff55798f-99d2-412a-8044-c0e578e1f4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd1acf20-dd2a-4b37-b94f-4abd44c8abd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e8537b-4f66-4138-bb73-0783f49966ba",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ee8f41-5025-4863-82f8-68b652449018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8149f1cd-0ef6-4a2e-b2aa-858dc19561dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbd3f78-ad1c-4ab4-b2ad-6c32dc6b73fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce676b23-2ab7-4b42-924c-22904e3fe7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9feb3723-8702-4271-8e1f-2eee1308f11d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b5e816-7628-4a34-ade2-536290b0f670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c471c8-1c1b-4520-807c-c1e098a46131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebc1f62-d656-4c6b-8b5d-4a0ff8bbb8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "049ece65-0407-4053-8751-75ccbcdd0c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf0b62c-61e8-48fd-9fb8-1031112b5a74",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fcfd44-8118-4f11-8711-37f5f0b08b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a9bcd8-663c-4b25-9fc3-b0bda4f79606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c370b534-4a19-4878-bd61-c22c58eb83c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36b2fc92-7387-40c0-b332-fd0f059d23ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fde7b14-5dfc-4e19-9a00-0623b88eeda6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fbb9d5-c2c2-4e08-a863-ada4acbf98ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da9e7a8-2e3f-43f7-bf51-30602a4a04a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0096ea4e-7d85-4b0a-93b6-0c39717bc074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df888188-2053-45ba-9b9c-ac0b4330f295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e2cd1a-fcf4-4d06-adf5-8b405bf91e38",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322b88e1-e97a-4c82-a005-5463b4d580ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b98114f-6864-4ecf-b6de-644851355387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99b94f8-592c-4288-a349-609939d1571a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a948771f-f5fd-4a69-9852-dfdca1789ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b643efa-a847-4b10-9e17-cc9f37474bb7",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603dee01-9c9e-44dd-8546-107d974a11e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedf5689-1ebc-42e8-b91c-55e4cd304733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6157c736-b8ed-49f9-b030-c3b6d57a5f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0902c90c-66d8-4d6a-93d0-e5713208864a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10689d4-5cc0-40af-9b8b-a37047e9b80b",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49445b48-ed95-425e-a005-bab745d01a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770e57e0-1c11-44d2-aa7e-d1657a9bc8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c19d467-c8aa-4b47-820d-d955002a1c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "27ed7645-6929-46a1-a511-34260f6d009b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31da7489-ffa3-4d18-95e1-8ab9510fbebb",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9d2388-03f9-441c-b5e7-a4cac04f4717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3e0849-2b32-4ed9-9c86-e9087ee83805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec195d9-4423-4b33-8e87-a8c605295d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1984038f-b915-4df6-985f-835b25689998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1666dc8-2016-4e8e-8cbb-9869b38ffde1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6d17e5-83cd-4e5c-a7b5-cb1456581852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2eb28e2-3e36-450e-8e4e-e23633577558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e67bf54-303e-4c2a-bbd4-fadf0a995bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "faeec9e1-b084-4fbb-9265-96b295514767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78382470-9a35-4b1a-b995-d374520b7e68",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f586698a-dca0-4af8-a681-59c36b0b4908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe1d39d-d850-464a-a5c1-d8efa89eeefa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4daced84-fbb3-454c-8358-a34590ba57ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c2b0007-75ab-43ff-abca-f87756b81535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad6b50f-83bc-4448-9761-fcef4219590b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23b1329-8626-4fa0-9b62-bbbc4c7ac71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b717aa-bddc-42e8-b4a8-0724f7e1ab27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc2974a-9451-4b1e-b772-52c523dc8c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f64feea-2c01-4707-951b-1fb698c45d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fc5ab1-d658-4ee3-91d9-13df150ac2b8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff9040f-7619-4c79-978c-e6dfc687f9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0c0431-f511-4019-b7ca-1d62fb193d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec8f468-cc79-4c72-90df-1e82e3012e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81238031-264d-4037-ad0d-858aa01a91f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee25f075-017d-490d-a044-1930be1d1c73",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83e2cf1-8f37-4a77-a40e-3f2c4c8fbeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa39fc75-e638-4e14-97cd-20f141d83411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16e76f5-eacd-4ddb-bfd7-fda653292608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0afee18-0e46-4c7e-bb55-950d3b64cbcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f8639c-3520-4391-a46e-6186ce73f33f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef04651-c0fc-4e02-9a46-4e66d9a92876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4c9a16-e480-4669-83a0-cfc26365d8d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8493f6f8-442a-4942-8063-6708ee424753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26b1cc05-0d0e-4573-81b7-a4874360abd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d0fd9a-1def-41ae-9cce-c076188b8e62",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac900ce3-89ba-40da-9158-333c5ef7fcb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3274a3d-c95b-4507-98da-4a419ec63d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada957f9-3233-4d5c-b602-f68d451ca27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68b3ab1f-9884-4535-9605-6de395969bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb25503c-cff8-4456-83ad-2676a708ac19",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9e8866-28f7-4ae5-90cf-b70e69790118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b31b74ff-ed5c-419d-9b61-f0a647c27fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f7b453-71b6-4f39-a92b-cc6b273b3163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31a9a925-5a20-4117-aa21-953a4046eeea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad07e4a1-c829-4dbf-9b89-6bf63cf39c7e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d51c338-4d4b-42d7-9805-38f180f1736e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed9db2e8-986d-4fe3-9a78-632200f65b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b391fa8-c30c-4164-a98b-562c69c4b382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb765fb-9a73-41c7-84d5-637c5e15090f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d4de2e-f168-403e-84e4-eaf51d4a2c97",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1541c1-c205-45ea-a7d5-e814eaf2a3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6706f719-6ab2-4e00-95c7-7b1c5ff7bf8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd1715b-8fce-4b9c-b7ae-9732ab371207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "39896159-6696-4074-9153-8bfde5e7195a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00544654-a49e-4da3-99b4-9c1fec04f1e9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24c146f-bea6-4713-9675-31dae7a8ff4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70e54a64-afaf-4838-ba89-f62cb504eea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382ac674-3eb6-4a24-8a93-5490457b0333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2694d857-736f-4801-9098-af9b78f7cc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6215287b-06e7-4b6b-9fa6-cd4daff1f341",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9f940c-6cff-45d4-a568-b578cc79aba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29062998-eaaa-4cfa-8a28-a851ca084e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6792caae-17f7-4a15-8168-e59ae90d1e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "435cd357-cb22-46a1-80e6-b58ca6c7a329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8baace4-35ce-4bd4-8d99-e7e72dbec7e6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbac7e4-2171-46f4-8f37-9a7c0e32f360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec55327-1ca1-48e3-9741-5fd0edf1cb28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f3c135-d1e5-4abe-a203-4cd11f0bbe1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed628e1f-b5fc-4a04-b0ee-2696ba747649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148c3ae1-494e-4873-9bd7-adf2f608fb36",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9a0830-0a97-49c4-99ff-3cffb60d5d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e7bb20-7934-4338-995c-c9659defb747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d85f79-dc37-47b2-8797-551979013995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5323352c-de4c-45f2-bfe0-48446cbc5e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2cf618-0f87-45cd-9fa1-0ad88b5f3ffe",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5456900b-f3d7-438f-b3cc-32ee2bc8f1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c6badd-928a-41b7-b200-7d69041b072e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e558c463-91b1-479b-8f93-770f99abe53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3636ac60-6295-4afc-a638-5e4027bf9ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e2ffba-01c0-40b6-9d48-cd62a4e1af22",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533d3734-db69-4ea8-95e6-54db737a7e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df012486-4de6-4398-a6cf-fecb5c309031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a22da75-9941-4c9d-8088-039c1f95a8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "78d957c9-4f62-4217-b473-bcff6155d3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a2ec89-3024-4f04-a3a6-4bbcedd7a789",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9caf10-fadf-4bc0-bb6d-30c1afe75ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b07336-0bc3-4f5a-9f31-b4ca47fefc64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89fb521-807d-469c-b171-4916ff3c4dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1d068f-47f7-4c09-a221-7a35cf24eccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119cd2fa-a5a5-4041-9b1d-62156d32347a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e15904-a858-481d-b832-30fb234ad049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72fd5d8d-557d-4155-95ef-4507e5b2f940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967c85df-5b2b-40a0-84d5-a7e272c90700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e320925-4426-47a2-a527-d886beed7bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb4b84c-179b-4f67-a0d0-af353ed3fe45",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a883bf-2419-4008-8d92-78bb82cbfd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826c4dc5-8d35-4aca-9617-3630f1929b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd76543-a0ce-4683-a89b-26209d4880ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8140f22a-a2e8-425d-b99a-d11df82fd3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a40e4a-c154-42f1-9828-6b0b28fc99ce",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2a5aaf-a3ff-4a5f-ba09-3e8549420e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c92ba98-f6af-4dfe-b85b-2117068ec094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02135196-f9ff-4607-b87a-02656cea9777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ce71b6-9816-42de-9da9-ca35314abff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c964431-f869-4bd7-a1bc-eaec7f76cba2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd1aadb-782e-40cd-b9df-c682fe6e7dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a96b2a-09ae-48d1-80ce-2329fdd5531e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7111591-ead0-4e85-a874-9d899d830cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8a824b-91e5-47db-80f0-3c0d490869d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba17a38-bb46-4e3e-928d-60402e41e698",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c474e7-80a2-4e8f-9476-16cc459ddd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75fb4149-06a4-4942-8842-61aab306aa78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1a450f-4d5e-433d-b056-c552494a1952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9e8596-a8a3-4a01-8df4-3a532e710eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15881f5-7e1e-45ac-8aa6-daac0646e21e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ead7a5-79b0-4890-82c3-f23049a4edf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8bb713f4-8a85-4cee-9c07-d0a33443d90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6255af59-d95a-41de-889b-fc26380d957e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9ff754-45d7-450d-8290-c42eee991d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c1d7ba-e17f-4ced-9890-681f791d637a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4461e8b-c8a8-41c5-b211-f4adc14a3dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68fa943e-cddc-4fb0-a096-7bd9961455ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4550d4-551b-411e-9797-af5389d6fa00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c84d3ba-0b00-4de8-92b9-ed565aec9c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f062ca1c-675d-4197-86d2-2b24777fcac3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2984586-2c02-4743-87d5-6b88fbc15e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54156127-a724-4d4d-855e-5f458a79fedf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91fdfafe-0151-4c24-8bc5-58f4450cd07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf5099d2-365c-4673-9e40-30357ffa4ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0582ee7-c449-4610-82d1-190d7a01029a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2e2e04-4072-41f0-8d20-0cb2b5c16f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8acca4b-9abc-44ec-8447-ce1cd784bd6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05219123-c9ba-426d-ae7a-69f0694e986e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d60eab9b-90db-4d34-832f-93782532bffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51d4129-3485-496c-b8d4-ffecf8756c44",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb813e94-5e34-4f65-be25-bb38c6a8ac4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87144348-3b2b-4e0f-bab9-ca0741da8b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa116ef-1dcb-43f7-811d-5d604c6f1240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a121c447-6e7e-49f9-80f7-8916b59997de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11df13c3-2de9-48a8-9b30-744873609178",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4867c8e4-0f3c-4cbc-a915-68d189637590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8181cc66-86e3-43b7-a0b9-07590fd7dc57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef96d51c-756b-4cb5-a331-2a00bace309f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "314fd19a-be16-4697-843f-1c635731257f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a4705d-3255-48a6-9066-07abc3ff13ed",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e72cb7a-5410-4712-84bb-8cbd02ff3ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641887a9-8549-4f59-9088-9a2536c976ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bf1b01-854e-4b7b-86d9-790d8528c9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4c16fdd6-b4cb-44fd-bf02-fde8a08ee10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012cd226-eff1-4096-937e-85deea616819",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6e61f9-6da6-4d9c-ae65-a3a34f0576e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "899505b9-e1df-4016-aef1-ae29c2f91f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61106bf-2025-45c8-b0b5-c008352fb73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "75d2f6e9-6216-480d-9f5b-e73870bac67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb9d224-4564-4c93-8525-6f99cc70f8af",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3700b16f-e522-4e43-a535-3b9094201751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a5eee2-8a37-4d3f-91d6-8f3db43983a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51a33dd-7028-4611-83d3-738c4efb33ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecd48493-0ee1-413f-a5f9-7e3cef30df30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10872bc-ea3d-410a-aba9-7e50969c3667",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00890d12-033c-42c2-8882-0cde633feb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ee00f0-1c0c-4c88-b01c-79b5b6228e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2844230-410c-42cf-9c80-451e3eeb7a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4c512f9-f20a-49b2-91ce-21e1e58df05a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bde9c1-4f05-410a-a754-ed0bea1a9009",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd56e282-a9b0-4ecf-8d3c-90864bc0d60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ee37bcb-5cf5-4445-a7fc-ab68a8dfe6e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c1ec01-6ba6-4ad1-9d3f-113a3f298257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f58b9e40-b880-421f-ba26-c20cfccf2a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb3bbe1-bdea-48f8-aa8e-c87079d7d030",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e80c84-4f18-44e2-b0fd-c82d62c4bcb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f33d20f3-ee1e-48f5-9421-a177b82eea02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f64a800-54f2-4097-846a-404b6f4fed86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f921b9e3-cd50-4bb4-8c65-d0b4915df65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3531a246-211a-402d-aa55-9509d9a5036f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "774db4d2-4448-4a13-b9af-ef127e96318e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253f3796-eb92-450f-8d9b-abb8a825af63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6fdc31-1f73-4b63-8412-f55bdda1d1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38ca3337-b87a-4e1f-8b0d-1c85fd8695d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aff0840-303c-4228-90cd-3f5f1f2e3094",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5a90da-cf74-4a18-a632-64c409a239f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eaaef76-4df8-47dc-a87d-f9b2c2d0089c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b99bb05-d613-4304-9580-1371ded4ea30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d524ad-ba83-4063-ae03-458ba6ee90f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe6cc67-d486-4ada-915a-ee0eaf60fcb9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5987e76-adf5-410c-87bc-f08e4391a477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc42aa1f-20b5-444e-b21a-228b99f6c9bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ad1a6d-f511-4576-887b-a53f2fd0f45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "922dcec2-1044-4508-bf24-e97555d0f2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5eb4315-d029-4c6f-856e-58c037bdf71e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbb755c-7596-44be-b7ae-a2f15613795b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626796d5-a263-427e-875e-452e81d44891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91405f38-d3d7-4e83-8520-51a84d86e744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bbb6399-ec7a-4487-91b0-a8b03e09fb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4223c07-4d68-484e-aa16-4be5fbd5a797",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6855d766-01df-4861-9af3-4b1bc492416d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ef0b82-2b37-4a33-87bc-f22140ca8f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2418a3-a4cd-4689-be9a-3aa80cacabd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f602049-2ef5-43e4-a590-41f676abe4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5751ef23-25cb-4de2-8d7e-052b75309740",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d2d047-5f53-4329-b2e6-eabff6f64f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0621597-9004-46ed-835e-90aeed2beaa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d63245-4337-4424-80ca-e3cc65a03c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "943cf81d-8e4e-4d04-a360-0dc7e2ca781c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a8963c-d677-4b12-bd31-ea6142c0ec8d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57635d53-71ae-4aaa-8b58-b96628234bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90772d8-2b84-446d-9db8-01bd249ff6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41bd237c-24b9-48b2-8590-2c0f956272f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b5081a-3e90-4efb-add0-368a2e468c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63be6106-9b66-4906-8b26-839b627b8e06",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4989ce24-f27d-432d-971f-7fb8d98cbc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c910008-d884-4cc9-b98c-6327da7e4d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf353dd8-ff20-4e06-8419-645414ccf5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce599b69-9d07-4249-b523-79455fbc253d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8176473f-daa0-4d68-98a8-2dc406db6182",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdc6662-7366-490e-a8d6-81cffdd71fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30993aff-c678-438f-bbe1-ba0be50a4b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41164143-5d27-4e4e-b182-4178d31591af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "38d922aa-1ba7-4083-b665-44d99e611234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e356fc8a-e8bb-442c-ad3e-97545385d434",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84067280-27fc-4856-a91e-99d8b3ff62de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d0eced7-219a-46e3-b3bf-b46b23bf50dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f32af8-ff45-460c-a60d-0664429a8fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd438b36-79e7-47b1-9426-f7c6ae906e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19270491-bb06-4043-b7db-c1e79b8f1126",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "803cb26e-402d-4bd5-aae0-2608459828d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38dc47e5-a468-4fb1-9691-13c212a38a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca7e206-d530-4ad5-9fd2-a6ead827390c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b23d29e2-065e-47eb-b21f-e5346539b5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc208afb-c7c5-4aef-8e6d-bb579e53b6f4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b45ccf-d150-4f56-9a6d-89a67f866bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5abe1cc-3411-4783-bf4c-e32c4b9a9604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a19fba5-e952-403f-b0fe-d44effc8e9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "365e1bc9-8a4c-4fd7-a363-585656dbf919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647f96e9-d91b-4266-93c0-05980fa608d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e12b04-9419-4a8e-bdc5-fcdb4f443d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d31751-a4bc-46e6-a1f1-adb70590c290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5529bdc1-9d94-4289-9328-cf55e8718eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c938bdce-1b2f-49af-b68b-2286c9671316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437141df-bf4a-4c65-b757-5de4880adb7d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1284c273-21bb-47a8-9734-33f26b495fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbf89a6-1342-4ce3-b9da-90db7411277f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd137cf3-3586-4374-b818-feef44c6987f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "95d0442d-cc66-4711-9896-8adc9c13e6e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c54b56a-4c1d-4c31-a6ad-8488e274af30",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25e0768-d986-4f85-8a6f-b2e3deb81645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae408e9-5e82-4bfc-a417-613248a7c325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87e71ff3-ae82-4452-bcfa-87b07a08d284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e81fa52-965a-46f5-baa6-fc1a9cc5bfba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec0ec2f-6af4-45ee-b8da-3983580ec5ca",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb76984a-8720-4246-8207-ea8d17895b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17cfc4dc-516c-40d1-b17c-283d81d0a28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134b9d57-b300-4833-8c92-ae0912abf7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b07da8b-1d9b-4138-9c27-c6e4a082c220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887b111c-df76-4c53-84cf-8ad64fafc0f0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e05f51c-0014-4dfc-b03c-57a4203c15b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27851bcf-be93-44b1-82b7-74f1a923cffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efab8612-495f-4897-aff8-cfdac5b5c1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8790953-3b7c-4816-86de-2b6232f40148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1cdb20-6924-47f2-a90e-f0bbe4df1738",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304dcc64-bc13-4890-a12b-03fafb26cb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b69c40-a0d7-477a-bca9-d963de1c39ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92a68e8-a685-45d3-a2bc-8b022239c7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d175640c-42d0-45c0-83c1-8670729277e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df94a372-3ba2-44f1-baae-47a7edc016b8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63c223e-0a09-4478-8514-1751b3dbe131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d6cc4f-99b2-41df-9868-7584b2bb03b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a0e3c3-e569-4f02-8ce7-03bd58e86280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1382f2c2-630d-4087-b938-f73a3ebbfd0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8552e4d5-2ee9-41a9-8b9c-de59c83f75b1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb63f690-bbfa-47cf-9d75-fc9ccb443463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c10622-4247-4f5c-ac3c-a4ec37822246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258cea1b-415b-408e-8b6b-39543bb79485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "956ad8b6-c957-416a-997f-56eb3fdc8d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb555e7-f0c6-4eeb-9833-5f2154e0d1d3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4e973a-e256-44a7-9cee-39fcfe32ed1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cda5646-a1fa-478b-a7aa-4f126f25f8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176abb7d-bd6a-4577-8604-a860b19c4a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "021629ac-1469-490f-8513-d8f12839cfba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca657c26-91ea-49c2-9e24-17d16f2cbbee",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b772b9e-ddf8-4f50-8523-6cb17cb5b9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d95719-b533-4c1f-b9e7-a9c207ec2607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0cb8e4-a2c3-446c-ab10-3cc31cdeb14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "194ff83a-da8d-4faf-9dcb-355709f7ee75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d3a582-745d-4f59-8b23-d10ae2f92ed6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf545327-479d-453b-89ad-ca4675477501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e7d10bb-3301-4ed4-8521-5e57328e0d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938595d1-b390-4243-bd20-0419d158f141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81baf8d5-05e8-4912-953b-2616b71d7759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640e3587-728c-4b53-ae49-4c8cbc11b70f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e656f487-55f7-4cd2-8b21-c45d14168f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc0446d-eac2-46b9-8f28-ce615e8ef8d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef92416e-ae6d-4efe-ac55-ea2f22299dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf7e19a-edd9-4630-90fb-125578b7aa51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86a08a2-08b1-4e45-9982-82df28959f92",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b1848d-1737-4f8c-9064-cdbce926efed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e17f457-bf40-4836-8251-735953fcd8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ac92a7-3ee6-412a-bff0-4b9754bd8031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd0956a-e0fd-4484-89a4-23cb0858806f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60747a1a-e78c-45d4-968c-0f22c1a4e152",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635693af-c652-4531-bdf0-21e5b76c4d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2b4d11-4809-4ce0-91f2-00aa411fe034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed222f62-d212-4586-a9e2-b38528961be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6718dd-f95c-439a-b605-d957e04c7e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6510f87a-46fb-49c5-8d7b-293319790c88",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29808f98-bcab-4ce1-92a7-cf00425509cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14079fb-691d-43d3-940f-f82d30ed27b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6699941f-bcf1-437e-8321-d877f944aed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "774cb7c9-e4ef-4d1a-b43d-8d936e035a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26e45c3-4a36-4904-b5d9-cb175cdccdae",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7657496b-e402-46aa-b152-c44207ff5dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "108e675b-21c8-4461-9e1c-5134104e828b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3961836b-e8b6-4230-849c-d0b1aabb5c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b22d06cf-3c78-40b9-a8a5-f86da0d107e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bac1f27-c808-4d8d-9e51-7202b29ca942",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01eedea7-53d7-4eb7-825f-bb61875190f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b7081e8-cd19-4678-ae87-b127609cf920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210b1f2c-652f-40e8-884c-3f205d470443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0566af0-b57a-4b17-9fd0-b85596e16fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3472fb42-4dc1-4a2c-9bde-80a54f25e218",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a201002-a1d1-4d85-b636-78dc7f4ab65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ddd6bf5-94fe-4aba-a508-229139a9c81e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401c8cbe-484b-4491-a7cb-e61d24de67d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "286325d1-e89d-4d0a-8af7-66c158a01496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8da425e-ff3a-4257-bb3b-cad4b141ff97",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70418d5-7e91-43e7-99e3-b75c065b11c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730f5817-b33f-4892-af45-9dc0e41269e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc9411ea-b827-4292-a733-d7ff7dd2c278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea23237-2681-48df-b3b3-42ff5590bd7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9be4d25-46a2-40c8-956b-940bf2ab16dd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b3bce5-267b-4de0-a7e7-c1d0af879e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c300312-8147-43ec-91bc-5f0c42db28ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a8c71e-e27e-4ad1-be48-971009dcc45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8673544d-4be5-409f-a46f-b36c3783d293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fadff1b-0c84-4e55-a991-43f760375096",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9bec3b-8b04-4940-9641-3f0cfe651625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2649143-deea-4c69-a46b-e6ecadefc401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ea2393-e7b5-4b32-8d08-789cae5b63d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c12bdba0-2e14-4330-b5e7-6593ee8c8734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dab0200-10b1-4e5d-bbcb-e16a2d98843d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1ed677-8596-4f55-9cd4-3ad330ca992d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0685a284-2497-4723-b0b0-30af9b51c253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6924d8-12c5-479b-8a15-b57762bea40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "83f9fab6-02c7-4110-91b6-e5bc484ba82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baff5f1c-e891-45e4-8c22-060212cba69a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a174316-ed5a-450b-a1a7-e991445b0704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35cb3b87-862a-4be8-bd23-95f22dbd82cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67886ce9-0cd9-469c-9523-26feca49b90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7575219-107b-4715-945e-21f209aa50dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d351d0b-6da3-41df-8b88-0f9e12f40cd0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccf4212-d85f-4b34-a18f-ee53d97049c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3922e3d-2e04-4c05-92d3-53df9fd15c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4ff19c-28a0-457c-bbb9-71b1628d54ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccff1486-1ea4-4b51-a400-dd0e3027d8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c25e68-d159-424c-bb85-c3744924e574",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ccc4ef-0085-44e4-8e77-bd13a512333c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7309c2c0-9085-433d-8cde-00ff48c0f9fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01279b4b-f48c-4939-bdfb-42999357c108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8cbcbc5-69c9-4ff4-8130-b8624fbde703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd347cd-5b99-4062-a3ce-ce3dd84614d2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac170bae-23db-431e-ad86-ce5081d013d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c76016-4c56-43f9-a8d2-a66bf54aa84f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac13afd-2bc7-4bee-9dc9-7f1acf7d35eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77657f3d-c3fd-4497-b17d-ae3335db20f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547d5c12-2bf4-44c1-bf98-689f00abc55d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75790a1d-1536-468f-a673-ecc74c1fb87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b753028d-189c-4fb2-928a-d8474a060509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee7491e-c8e9-454f-973e-bacc23c7bf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2447e38c-a013-4544-b324-69f6adcbad09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb8358f-5121-4c00-a199-75ad2d10cc5e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aca1364-0b77-47a6-9fe2-d76edb39bfd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49639227-fed7-4ad1-9234-ff96fda74f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364e7271-3887-4025-a78f-7d5eacbc9eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "869c096e-9933-4f7b-89e2-5dc7525070d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee40bad8-b62a-4ded-a84e-da2bce2205f3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "902d72cb-e600-438a-b185-70d5a78826fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c865d7c2-fd85-4e22-9ce2-eb31173de737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386f68a4-3746-4ce4-abf3-74e75480d6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6ca20d-3781-4a37-ae83-20431b2051d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b53670-60ec-4668-a7dc-2655bb45bef6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c16632c-cd48-40e2-bf62-8ac2a89a163a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6580a92-b8da-4577-a3c7-019fe593d426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3be9fe-254c-43f9-b8b5-bcf4f89cbe88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4babacd-fd13-42a9-a800-894db2f51745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756ae43d-7886-48f2-ab3c-1326c0f2086d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884bca4e-13a7-4af4-9494-ca0f56706290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215a5d81-4c4c-4240-b605-687b04c4a032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaef7a2-036a-4c99-bfef-a4469f7a53ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "efb78e65-3a5d-4550-b3f9-e73a3f55a88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45b0f6b-6511-41e1-bb12-3aaa7d511d0b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb851e4-b2cd-4382-823b-a84293e3d689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36fccf8-e384-493f-b555-14a8cce08989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce2ffa1-77d4-439b-8916-cebd7067cabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb096e74-80c3-48c9-93e5-3ac1f1375674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f06a7db-68f4-4863-8dd5-583f3e6e9a1f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bc4f72-66e2-4b70-b914-058ddce95646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7a7bad33-f747-4f99-bd34-9c6f123bc68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d896e6-0a96-4d54-9ccd-f34e65b53ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "59320506-fe32-4f9f-b367-fbaa424fc6a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b196d245-5196-4780-9e1c-c80e4d20ebb0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b9d5c83-bb7a-4aa7-b6ec-f8df03e13d14",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21ee1f0-30a6-4afb-a29f-fb2c03811ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "132bd0b9-4549-4c21-92c4-b5ccf7735da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e981d457-f385-4192-a449-85555da2bbe4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "24150017-9e17-418f-b7d2-a94190e8c72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296ae3cb-12bf-499e-ade1-d04e92cf9978",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf8bb35-3c28-43c0-9b3b-59aa84f2cbdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f32024a-c133-4a29-959e-c29994fceade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6b978d-3d9c-4ddb-8167-263abcb61234",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3bfa2312-bcdb-4513-bb32-d716cc9774a5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c625d798-8e6e-43bf-a3fe-690f00f5eaf3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f313bb53-739b-41ac-9ca0-cd08644d720f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "889bbeea-b1fd-44d2-af98-e2945be2a799",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9110a0f-1e76-4ae6-94fa-78e1321507ee"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b58ae0a9-58bf-41b4-9b29-f74bd4b15870",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ec23164-8d23-4f94-b207-1e3d2d325dd3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "68361568-50c8-4491-aec2-00bf542329c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3eb076cf-c6cd-493a-9d11-e107127276ea"
                }
              }
            ]
          },
          {
            "id": "5325a741-9dbf-4027-9d85-3561cd0b6a69",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9453417a-2603-4c88-8084-c0a9e3a90c9a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a0856a9-044d-4ff6-8dff-89a5c0e43cec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bafb30c2-f953-413d-a7ba-fb986acafb5f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b404ee65-3b53-4052-ab69-2d31e3f28b43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dbaac78f-310b-47f9-aaed-a06bea2720af"
                    }
                  }
                ]
              },
              {
                "id": "c3547719-2edb-4d4c-8fd5-3d7d2d242814",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca83aa30-2bfd-439a-8be0-921cecc2b8ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc6da82e-b5a0-4871-8eb7-57a95825334a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4a03d38-15eb-434d-bc6e-f1bb3b0626af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1c5705e9-b2ba-4817-978c-c19c225928ba"
                    }
                  }
                ]
              },
              {
                "id": "d65bbb3f-2ede-420e-bcb8-38ca6520a12e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "221a71f8-bf57-4cd3-979f-2acafa904983",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff095b73-2bbe-4505-bea8-73f022a987ad"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd04ad21-cd75-401b-8071-aa7985fecb0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5bfa450c-635c-4b5c-8395-19383a902981"
                    }
                  }
                ]
              },
              {
                "id": "9f5c08d9-0ab9-4956-a191-e64d36cc1f4f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdbfaa53-088d-4cc5-99a9-f384d5ee6ff5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3d6291bd-bbc1-4b82-9b8f-451eaecbe70d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab766698-1b16-4933-928d-61fceba791ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "cba3df23-30fa-470c-87b7-267f85fa5d4f"
                    }
                  }
                ]
              },
              {
                "id": "f4196221-d7e2-4461-96ad-ca18ff5a2524",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dedad71-6923-40f9-9e54-65db00e846ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "737449c3-dbaa-4b29-b716-47cdc67ecae9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "608b6589-6b4f-46bd-8498-d7cc30f5ba34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1491c75c-dbfc-43ed-a5b2-8ec68c7fbda8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c96fd398-458b-414a-b7fe-460a7a701db2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e3fa01b-d178-4081-9ecf-050d1ba02cd2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bd01b7a7-8fce-4213-8f76-91c1ee74dc86",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ce5a7afa-603e-413f-9ccc-a8f54e1a1470"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ff9f9c6-aaf1-41f7-aba6-856a1a254236",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "bb2b3800-7b1f-4ffc-aa5b-1e9bd356805d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c90b656-20d2-4694-aad1-64aeb848e129",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71544154-6bcc-4d91-a43c-4c887ac41f00"
            }
          }
        ]
      },
      {
        "id": "b5738a78-7e37-4745-8fd9-0fd7f18d478d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3bff0397-9f03-45c2-877d-38b8d79ac546",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6df11875-8ff9-4276-8eb7-b9ad23b33b76",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bed9339a-7936-4623-88b3-f09693b2bf8a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d642ad40-81cc-4a1c-92f9-7b5a02495b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72b2ec93-28c3-4a2f-b42b-8b4308f48e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67476b6-75dc-4fac-a988-d572cf845cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b642740-8f41-4803-b4e5-9c12621229ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d3ab9d-176d-49b8-af19-1b7c874b1bd5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86782be6-4981-4cac-b637-f0138c173954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ed30d9-e3d6-485b-9a05-ca11bdcbcca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b771883-a522-4514-9322-c88b551a30b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5199e8a4-cc85-4451-b32a-51ddf179f261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb8cc29-0e2f-454d-a187-e1a6ed428a45",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6449a5-aa29-47ff-8663-a0a33cc692fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7becea4c-8aa4-47a6-b78b-0e0b48288a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42558f55-c186-40cb-aa0b-0b446ec0af7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1cb068c-a0ab-421f-b0ed-6293cdffae7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c97bfc2-f722-4c42-a39e-e3656ced6f65",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a55f47-9141-41b9-8618-32886eb72a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f3aada-7c38-46b1-a919-1d8f9d8ae4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488d7f0a-094d-4465-ad15-12dc0b37b58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c63dfb72-ed26-49a9-b44e-5b20fd5ae123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052a14a6-b8b2-4cdc-af20-f8dcf5add112",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc27db2-34ad-4685-bafc-de4cb7a5b6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f65ee9ff-35e9-4d7e-afae-45227d78b446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde29196-84f3-4b3d-b4d5-38380e6c98bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b240ba37-d5e1-494b-a7d2-a905b42ece5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ce9d73-d9bd-4f35-b22a-5821219e2437",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11c84be-5fab-4a98-b798-4630a381fe56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a94c0c-2c69-4c3a-898b-fedfc90ed6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8369c14-d545-4bf0-9d8a-46321a45976c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "304861de-8daa-435b-92ca-e2d91460e864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824525e9-cfc0-49b3-9790-e02fd561b283",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9c8ed4-5064-441f-8c1e-8162f48953e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450c601d-0662-452c-892f-20389144f0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a7ef43-85fb-4b75-9c6d-72eaae989dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "029d39c8-23a2-4a45-9624-dcac6b7fee93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd1783a-8aff-4588-a932-cb65a66175d3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d189e2-d5b6-43e9-bd69-a528219e8020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7293e1ce-2a97-4b9f-bd62-080a2503dbb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3a8754-16ac-4d00-988f-0e5bd1112ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce696ff2-b58c-431b-a0ec-406a84b86dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1471bfb3-4cd0-457a-9a40-36cc621c7847",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336c6ed8-dbb1-4f38-baa2-893d81cb140d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb3dcd9-4a36-49b0-891a-ee28b50f1b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d11880d-b4df-48ed-b802-2f21095527cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d1d0042-c7f6-4461-94c4-acf36037b2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbdc438-18e4-4b86-b196-5aad6b536777",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515ef4d2-a325-4fb2-ab50-ea2c840a1082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b32c7a2-f2f3-41f5-a811-2dcf1d3e5222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ff9527-0451-49e2-b918-ff548b242abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2544c2-5d6c-43a7-b3e1-97eea82cf296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aee3624-a881-4f45-b0e7-6b881571d7d2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94efcc5d-eb93-4f46-badd-b2760a2d1a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f01a6794-ff45-40b9-8504-baf7a39174e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786d9049-857c-465a-9e98-93c9e870d780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6bec43c0-9058-4633-9f61-4114b1d52d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7cee44-f6e1-43e6-b628-ffcfb1317139",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7bfccc-af4e-4fa6-b7f1-1b9a683b7f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9859b8f8-32c5-4438-92de-7bdd88977e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c824a9-772c-45c8-b79b-f070155e4dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d10c96b1-edd8-4c01-9fef-8b507b2a4ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0b2fc5-4fb6-41c6-a181-d8db9dc8ad1d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc2a3d2-459a-44af-ac00-e77d2da85dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e0c857-6b39-4001-8799-bb01a47a4948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46767b84-e571-4013-bfd9-57338a512273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "74766aca-7485-4e01-8ab6-48629da0c126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc442d6-c38e-4e8e-9702-01e0bbf9c7a9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98cf8ffd-6ae0-44c5-9d35-72f8c896046a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a79bb2-2e0a-406e-88f1-bd18536cb84a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c66e4e-95cc-4fc7-9f23-257102233b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d90e1fff-2936-4af0-a634-a4278670cf30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a4a3ad-d965-4dc6-bd41-c1e35ac55c98",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c83835-57b0-41eb-a694-c6c310d3e489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cdf7ead-64dd-4f03-9ead-8b82f832abe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198bfdd7-d866-495a-9965-1005f664621a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1807df5-a321-495c-af7d-c70cf8d1e4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494b4d4c-8a1d-426a-9c13-528986bfd82f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0891ee1d-9fc8-414f-963f-3beb1ffa6620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f308682f-c05e-4790-b8ae-fdd51bb93503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31dfcff-3d0f-4461-9846-1d4bfc849d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0a3b22-5e69-4217-8a07-1dd51c59d1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09651d4-8472-47d6-af84-33661b4299de",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19eb727f-85d3-4336-b937-1ee45c483749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54535ddb-2796-4d3b-a526-03aa122d5f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a872e69-b904-49e3-8dca-7806d48fd241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "249c8e61-a414-40c7-bbe9-796a8a4e2445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc296e34-328b-4123-a0c0-a32d3b94a2e7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3db214-98fa-431a-ba8b-c076e0341ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e4f21f-c529-4f3e-aa49-ac3ee09b5169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1d672f-3be7-4a37-aaf2-d53c0283f394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f87f6bf8-9cac-451c-a4c1-a60dbefb4309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555930c9-7473-4feb-b565-df96ba1358ec",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54dafbb5-fdc5-4914-802b-2055b3a2b59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d015ac3-ba8e-4e1e-a76a-ebae191498a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f563b82f-78ae-4ed6-a224-2cf765c39550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a95a3d56-31bc-4ec2-b403-5b86e5ba5497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a416a8-9771-4e14-9db7-8cc7118d2de4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82af7486-431e-46a5-adbe-f3312c8597b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adbe47f6-5757-45a6-b4a0-708f17104b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab8a684-bc9e-428d-bcbd-a902f3e99f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84f59d92-dc40-4822-9757-5fea32ed03ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80a9d0c-4b14-4e7b-981c-e6518a62d30a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a302652c-e838-4b41-b185-4bdbe680c5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ce0133-cbf5-474a-8b88-2aa90cb945f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e9e609-d144-4a78-85d3-a34585acc18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "474ea1a1-8a65-4ca3-b42f-6cd168cbd67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe2a439-0def-4d35-a933-ace646e42311",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c2e0f7-16c0-4900-9e46-deca8a09ece2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1176c6bc-4a41-4ec7-b746-147d411a4381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "474528bc-edc8-43da-a1da-e82ed87316f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39cbba07-b657-4560-9597-c310d30e5f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05795901-b10c-4797-b5a2-3c4635476fa2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b23dd2-ec93-46d8-af52-0cc914f2c123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fdd7b1-132b-4ac2-a5af-1aeb95fd16db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9cb123-4882-47d5-a047-afab217a9419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b3fa84-936d-4141-9655-c47e02339e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1578a2-a994-4b79-b885-31bfa05f24ea",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ca8f7c-3fb4-4a33-8eab-0bf84b5fe09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a43efc-ef33-426c-8e18-9aa5a8e4e2af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf98954-f834-4e2e-a460-e38edd8dd47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8ab9e3-b3a3-4e09-9205-4a099464d62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdabc10f-8ea8-4b83-90f2-c4b02d883f4a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61170422-636f-4553-8c09-bf248577477f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679c4c82-0691-4631-a8e8-288b334ddcb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71a5f4a-d976-4eae-ba51-956d9b8c5e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebdde8d7-9a8e-451c-98ff-d280ad785735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8eaa79c-531f-459e-bfe4-da0fa439316a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00967843-a7ea-46cb-b101-cd3fed3d3429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348f7a6a-d682-4d2d-b43a-7c6444f33768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0889353-3f2e-48d1-b9c9-006a895ee242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "227b30dd-1584-47c5-b7f9-ddc667102e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b9f313-6438-46cd-88bc-94ff1777572c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5a9d6d-eb49-4273-91b8-6a926434f9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f86b9ca-6fc9-4e20-8d5b-c40eef3a4d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ea08b7-3438-4af6-a82b-216e4952a747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dd90ed1-1038-4e54-a33e-3a9dd619148f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec4678e-e766-4098-ba90-6d0bf5e01629",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b44c5b3-c322-4d81-a42b-521333110bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c613f1dc-d11a-42dc-a2da-26ed9f7fc50f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f889b648-dbff-4e15-9665-0b244703f520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4d76e1-b5c1-4022-9d8a-c4b6c1ec71c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5022873-3d00-42d8-830e-f6260484efa9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4451afed-6d46-4741-aeed-c3d0dde88dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f2946c-fd19-4361-9fae-03a766242c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93596d86-1169-4959-bb2a-7240a2342e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85ba34c0-bef7-4219-a1d1-881548aadcfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf79799-13e6-44c1-acd6-0f1371f0a0c1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c249b23-464c-42db-ad5d-ef9c1b2108de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492d9af9-2d01-48f9-a857-22e4c692f5a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb3f9e6-e579-49e5-8160-3aab054eece5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2399112-a411-4290-9b28-2eaf28cd8a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe66b857-d806-4f4f-ac95-6bae4996e725",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f78a602-b0ac-4867-b264-53eaf2554e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b875c3-c28f-4d7d-bd11-498f0b820063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46428f4e-748a-4e5e-95b7-2361ef579511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c8d565-84e3-41d3-ae91-046965806e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1fc2702-57fe-40ff-a8a1-fa36be149150",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ed45fa-c602-4b66-84be-9dacf89d61b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0cecd4b-f788-4a1e-845a-e7d0e0ab764e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e83af4-e409-454d-becf-bd34be379375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7586fffc-77f2-4d2e-810a-e311e71872c7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1669c28d-f3f5-433c-a34a-2958027967b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "608f5165-4110-47fa-9581-dc8f2aecaf93",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1472c1a-5ba9-4d4b-a968-f50afeed8354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c77766-0c32-4926-930f-6dfcd7707425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0cdf42-40e7-4f91-95e6-1b02f1718d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a302753-0465-43a3-a5d0-17b02d68ec4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c44264-561e-43bc-b0af-b08f8c11b238",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e23e4d-9d2f-498e-9032-2388fd6a3ce0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0ed7d64b-b38c-41da-bace-64ecb2567352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4365adc8-863d-4af8-93e9-e73de0ebd4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1d586b6-d343-4307-89fa-fe44139c6b52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28296e43-603e-45ad-8647-9396ca295234",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e1f03d2-d647-4006-8016-f165926761c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66b9615e-656f-4b57-94ea-23cd4994b89d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c2d7593-f2c5-4065-b897-130db0938654"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11ee1ae3-a645-4adb-85a1-86d2b43a15e0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c04f04d8-24b2-4526-93b5-41a4fbbc2fc9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bd2c443-fe20-411f-bd9c-d98a045bfe31",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3adc3cf-ee3f-4826-a93a-00f29b6d0ea3"
            }
          }
        ]
      },
      {
        "id": "46e1e9cd-3be7-41d7-b7e6-22c7490d1722",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bd7ea6d5-8e50-45f2-b997-782251e1ddc0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7babcc5-a076-459c-9fba-23fb20631a8b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "172500b1-2774-4454-805e-9e04d4996e85",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff184096-19fa-4abc-a157-4e45b52d1803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc6c9d3-8988-4d33-ba51-388abed610ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a19ad6-efd6-49d2-858a-8ed27bb9815e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a57604d-0dcb-4a10-bb21-c1872f9ab303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39301858-f18f-4057-a038-ad2365196b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5caa17b7-e609-4d2b-acd8-e23268e5a987",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4e0b82-d893-4fd8-9858-3d55eeecadeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006f0ea8-6274-4dcc-b6e9-abda5bb00cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c43975-ca06-4466-ac9a-8468410e22a5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "999feedf-4cee-41f1-88c1-b859de203d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120d19bc-fe16-4326-b36a-63e0d77aee33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02038d7a-6227-41aa-9d0a-0024c765c029",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5487b9-1837-4436-992a-9e7d2289b907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50cb3b3b-caae-4820-bcc7-f4cb75411e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f21c4d-9d9d-4322-b0b7-3c5aafcd076b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bf4af3-72fd-480f-879e-1b95b601993b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1874fe9e-e7cc-4a22-8bd9-7cab8c91750b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2ce003-5e90-48d2-986e-ba42cc437bc1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660d25bf-2212-40c8-99cc-dbda86e581f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ef39b0-b01e-425a-bf66-8739d4d1a6f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47bf44d6-0813-4664-9147-ea21742306d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2913d94-5c57-496a-a75d-499a3b412aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1e620b-8051-4d4e-afb6-9ce4c009def0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244e62ff-c087-49c5-93d2-6536f9b9a7f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1e19146-52a2-4ea3-a9c5-70ee24eba813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba539be6-e991-43a4-a98c-31b5fa55031c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1556e60-2ab9-4b1c-a07c-d139446ec916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0de39b5-eecb-40eb-b29a-fe332877cee8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24c6030-f7bc-42b1-8797-3d8493bfff7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "609b2b7c-2dd6-4212-919e-06c4c84ee5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1522ce64-ebda-4b46-8bc3-3e1a06d446bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70290c79-f64a-49c9-b0f5-507e797c082b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ca82ea-e2e7-484c-a58f-ca526fbff96e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14eb07b5-7aed-46d9-9942-a0a14e746957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2045ffea-66bf-42ca-a6d2-2661c64a9398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d697bab4-0253-4e1d-ba86-70ff6e327db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b96fb212-073d-4c4a-b5f2-14176af958a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ac4380-f4ec-4312-8c75-d49dd5912f21",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e64141-0b37-4ba0-a689-2722409804f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc436ee-03e0-4878-a421-d91ff3904c62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5991d282-21bc-4d67-929d-8f1f47bdc63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39e9262-f800-40e8-bd0c-cc5bb18a7f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd18522-d4ca-4442-af20-3f90eca0e465",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431e8593-a706-4985-bab4-ca0b1cfc0b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9967d1-a6ba-4f6f-bb14-4068c7e5ee59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7bcb76-1ff5-4db3-a528-7c0dac518687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c333cb-3707-40b5-9c7b-77f8ba3b7399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b67413-4e0a-446c-ae3a-3cfcc495b76f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7fe97c-f153-4628-94ad-419a45d93a5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f58f6aea-a7dd-4ae5-a839-9d7c09e476be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc25a02e-2075-4ae4-a1f3-c4fb87c3b6ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7da606-389f-4483-bc71-8196c88d46b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1575c44e-4553-4cdd-a660-2adb84ef847f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6371d07e-367c-4403-9d0b-da564d9b3352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ae33048-e1d7-4a75-a45e-a198e12875f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc954a2-cabf-4e37-a024-9df59cb12fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4251928-b8e4-47a6-8457-92572563aa49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67e6b48-b651-4c52-92ca-af5b7ace4a24",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19346964-689a-4fa3-a754-f46fb61f1873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6c0181a-3ce2-48b2-8009-ca3cd67c4647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d74b389-5447-45ce-a786-042629bb857c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614bf4a8-ee28-4472-b4d3-4529e5b2de7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef38a5c-75e9-4587-bb04-f4d7ec4286e2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2446f65f-97ba-437e-8875-8ddc1025f6e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6bd032a-4d78-4603-ab2b-8346bb365795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e15cd72-af74-4d51-bb44-61ab14b3eecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99825851-eb1a-45af-aa90-36a759960b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fce054-43b6-4e91-835c-dcc56aa0c453",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c9db84-f8fd-4d04-99ea-d5168dbb69c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "833629cd-739b-4744-bbbe-7b85e039d9b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb1d53c-5a97-4e8e-8986-2cdeaa1d2515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa41389a-d733-4202-8b0b-70f8629961a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b34a20d-4fe1-4c47-9842-ad43db648d34",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb7fb61-6b14-419d-bba4-597f094fa25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48204b3-ee95-471c-99bf-edf200279a2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb30be1-dc15-48a6-b40d-1d3069991e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "410f1022-a650-41e4-a5b9-8cc0d4f521df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791412e9-417a-496e-8650-ae8d81093989",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc2f2cc-577f-4bcf-a378-5def66876008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60777d18-f585-480d-baa9-23551808eb0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8511f2e6-bf96-4dbd-b1ef-a6b90469385e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4450e9c7-1529-4f44-ae8d-6350d21b847e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a11d37d-0057-4aa0-bd12-0bd608ef4075",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a1c7f4-26e7-40eb-a9f0-0d1fccfa9c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee447e1-7783-4ff4-b5d0-d19eb3a2c24d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f2a26d-92f1-4bc9-9afb-495952be80e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a00b692-5c54-4e91-9097-df0d1dd1c7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3a5b64-afc8-4a9e-a2db-02b307573652",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976a5e53-792a-4fe8-9218-cda7cc268c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "592b051c-386c-4814-8b47-a46b8a9a09f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c0c5da-9e7a-499d-af5d-4d6d98f52288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8312ffd-1307-453d-93f3-6be17f6a8c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c496f5f-a88b-4261-95c1-e546e0864c7d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d133a4-9cd4-4e47-87b5-9ac8372f4755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3237d7-bdce-4d61-8dd9-0dab8427de68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50b003c-56a9-41b5-8c46-c12d5aff5586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7868de2d-c19a-4f41-976a-4a487d9269ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86315ca8-8368-4be5-8d88-86a38e57ee98",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363c624f-cc35-4183-a305-6b052506d7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0243667-de4d-42f3-8947-8d1a38c71ce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f85547-c67a-4e7f-a199-7f95e4366431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a94e4004-d972-4f71-8931-81f11b302a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7ccc21-c35c-4fad-97b7-6fb888b1ae8d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b359f8-fc7b-485c-8096-a616f784a4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece0cc19-32ae-4560-9825-ae21c69cfad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025fbb2c-fb0f-448f-a98c-91d4dd131ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b44f312-1171-4aa8-acaa-012a58c3db0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13aeac0c-d110-42f1-9dda-dc7c40202b73",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c86613-44d8-419e-9b92-8c8fb6482737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3855b9d0-880b-488d-9fc7-1211a93d1877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe4c319-a8fe-40f0-ac28-71d7521262d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc58c26f-f9cc-4e8f-9fcb-ec048643a872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c10f5e-8f32-4ffa-b4ab-789cd846442c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f138be6f-5d93-4d8f-b989-2ad9dcd0f3c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db9ea022-dbcd-40ed-8435-c9e0798d7075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "984defa5-a897-4beb-94c7-d2180bd4563b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e98e3bb4-d3aa-4412-a9bd-120c6c5a0100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608f413c-f06d-4c6f-98b9-21e04d1dd90f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b53f4e5-c154-4056-b796-d8530bbf7f10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e139c8d-f6a6-4acc-87e2-26aee525c392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e14927e-f6bc-4f06-a0f6-8b3bf6058a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57145f37-7fff-43d1-8d53-58614dfa890d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0232599a-4728-404e-9999-578b92907e02",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a56b73-8688-4b6b-a85a-063db8528b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f1662f8-dc15-40d1-83b7-97bc6222c732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7683f290-30e2-4d22-ac07-2dc62ace4c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440f611e-0638-407b-9b43-44e2b2285f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4ac6e7-6abe-4409-bd6a-1e6afe887db0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa0753a-8992-460f-9131-4bfeb77f50cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08928808-be3f-4517-81cd-94ea96b177f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4314fc98-15b8-4bcc-9d3d-6111aa01e2bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee6971e-d31c-4936-94b1-ea275b97d4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4dc3b3-a369-4139-a11a-d5b35a03979a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c25a0e-d4ce-4355-ab97-8f73f6f10a6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49fb6c45-15b9-454c-afe1-c3ae6c15361a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8c5ba9-955f-45de-8cd5-ea32d261476a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dba51bf-cc75-4d4a-a256-1000b847594a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce45a837-4838-4c1d-bee4-b3d82f1acc4e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d93320-c0b5-4679-a87a-eb6cfdd13187",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "971e3f61-cc9e-43ef-a5f5-6bff57501903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56e2a6a-6824-49b3-aede-89adab69aafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440974c4-89b6-42b1-87a0-b311b9b4e967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5a07d2-bb89-4cae-b0d3-b2f39f994480",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbc0092-c05f-4624-aa3f-74fdc7c7f215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fac667a2-aee5-45e8-b641-59652bab7cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b4f4b7-5482-4754-b5e6-5009eb55b276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf50a838-7890-424a-aaf6-03b58042e9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b8751b-ce7e-4bd1-8793-47c1d9391e27",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61c5cbf-0dee-42e0-8e8c-bd107baef83d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc2daf38-877b-44c7-9b76-7bf330f6428b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ac6a5f-03a9-4c71-9754-7a42b8a5dbd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "532f9afc-d07a-44c3-b016-8573470971d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7cdc71-59af-4164-8f3e-7bcf8238f8ca",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379926c8-8bb0-4ccd-bbc4-d546d8738fa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c81bbf03-b100-4286-b76d-e5bd9bd64099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d5ef3f-3af8-4b17-8ade-19cf83a50bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c70ac520-72ee-423f-a263-27e701463f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1792b5e8-15e3-47bd-b615-e1901cc4cfe7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d94b4ab-8f8b-48c9-861f-c35fb7f0d25c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a6c85fe-30ea-47c5-99fc-0175b44cc753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b39bdce-9929-4c5f-86ff-16480df42829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7b006f-738a-40c2-84bc-d6ce21c553d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e0c72d-72fe-4cfa-9991-836114867323",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44af2d5e-319a-425c-8310-605b975e5c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67924ec4-5e00-4168-b7ec-bd39b5cc0e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e27ed02-756e-4de4-81ef-1c073c448fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb10d8c-dc5c-486e-a769-9c29d15df47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2437c223-afb5-4024-9ffe-0cd3c9b901a5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d1cb3b-901f-433b-a4da-1ba426ad551d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57cdd9d8-7731-45f1-a567-02cca1a7185c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0ce085-4fa2-4c52-834e-5dd2db4f5fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c28469d8-0958-40de-8d63-57ce2205d5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e18c12a-d05d-4e79-9298-e8ff229cb80d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4885d9-2989-47a0-ab3b-7690982be095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d8db56d-b3c4-4f7b-87b7-3c7cd8648e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff9be56-999f-4dd4-8bc4-ca152a891a9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa5cf81-da99-4c14-8409-c5131a6b7f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae33236-c92c-4fda-832c-9e4ec90e8212",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76760b69-9199-47dc-98ce-d6d17012145a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a460b39-854a-4578-9e7d-4348cb3c7ef7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4004bd0d-d15c-418f-bd1e-95b6b0d59dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ea2fd29-51c4-4c11-b100-f29ffe2075f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b66f331-1d78-4128-a8a7-b2121f433938",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079d968e-d234-40f4-abe9-b595f5009c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbde7448-ecaf-4e55-a6c3-81c3fc350161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "754150c3-7edc-441f-a093-e0fd346a8fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94817ea8-2fc1-4512-9484-179709c8f0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731214ff-9efc-47ee-9695-439c88b25e13",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e0c007-e8f0-4940-aaff-66a5e0f22fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1127ac-92a3-4d0a-9554-6c744038b5e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b381916e-bf64-4138-b992-2c44f6999a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "392a51ef-393d-4cc5-b7d8-17cb53a701ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d57e95-4cf5-4fab-be94-9f221a2bbbd8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7294a300-3934-4b87-915b-221d0fd336d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f474414-2484-48c6-83b4-56ffe78c4296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8571c3c1-0bec-4285-b1d3-c4866b15eae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8288d3-cfdc-490f-9468-342c3207dff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8d5f09-0dc3-4bdb-845e-c952d4fe6c92",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9410dba7-3db2-464c-9d56-c3b409e2f464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37e958d-bba8-4343-80f9-2c9b8f053870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a80a14-37e7-45e3-aaf1-a5227cd1e720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3c1b67-78dd-4670-994d-ae915a8a3c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d497f4-935f-42ca-90b5-e52b20648d0c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d23c017-030b-4286-8af6-d384cc00b9e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4741928-65a4-4db4-9931-41d028ff3f6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56916ccc-cacb-49da-ba8f-c08b269a2b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57bd5c0f-8865-40d2-a87a-3ccecc84859a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7058d23-eec6-46d1-a521-2508566304a0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510bbf34-91d1-484e-b7a6-656b27a0ef8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4152a297-f1a1-4057-ab92-299efe350299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe5d7dd-7e58-49b2-8997-893941445fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fd7b4e-95de-4e0d-a673-047c48eb0313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef7719a-29c9-4994-ba3b-ae7bb7fb8a63",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283f251d-41ed-4f32-804d-ced62380391f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324b0cea-2035-433a-97b1-7b5e5d7f7bb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c5fd7c-a395-4a01-a890-eff71cd1766b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590aae5a-0ed6-4f50-9e8e-4aa4f34bf7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7812fa-0c78-47d4-8b57-e758db52392d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d9aaae-94d6-449b-971f-766255c97056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc0a63b-556a-41a2-ad00-e0455594e7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26566dbf-0ff7-45c4-bc09-4b7a391846d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b43c5bd-c236-4eb9-8c3b-d43b204a328f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2686f9f-48d0-40a6-9601-7e6a3d863ecc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201b12b4-31cf-4aa3-a015-c0f69483dca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d5c6bec-3b13-4b41-8db5-96d7fafcfcbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc3a8f8-5a64-4611-b735-7be5a29b9081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3884e88-c82a-4129-9a05-1e7c5bbc1f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01dce39-0a67-4c00-822b-6e757bae0d64",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7101e63-0a77-4e93-9357-52514da7ac32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e59bcea3-f5cb-4312-93a8-05f279ca6041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0b8a23-eb2b-418d-a5a5-a805d324c044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72359858-2a05-4765-b7e7-d77d2472f93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f8fec7-ae51-482c-94e4-35fe003cfd73",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e465ed30-5bf5-4e8e-9a35-a5efb981ddf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446f6c53-565f-4018-88f6-4e31920506af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c64780-cac6-40df-b143-c69d9aa5c8ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd3761c-a256-407e-a9e7-808da4a03e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49767cb9-ae16-435c-b7c4-434724c98441",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515f8888-c929-448d-9435-37baf4c73537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb99ab1-6545-4bd5-b65f-330bb3c61f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c4318b-1b5d-4dc7-81e6-93db677fc184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1f64ec-8757-4862-82a7-71745862f56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62305bae-e5b4-4099-ad74-831e6714e3c7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f75beeb-46db-442b-8f92-6b437a68b671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "461742da-6386-4ba6-9f30-ade50c916e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc33e2f7-37cb-41e0-9591-4c2132b158d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2582c77-2351-41fd-8f71-d6fd717110ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fdd9183-8be3-48ac-b2a8-c691e8c91978",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a894fc69-331e-436e-9454-b2143b67c65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7d8c4a-ad08-405f-9664-9fd2209a37a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c410b2e-d981-4807-bf71-70d629a0f2d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de6ee69-7318-4d51-9811-6e32e3f1658d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d040c46-13db-4908-8bf6-a3c5b721dd8c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93fce4d4-eb38-4786-94bb-ec41f3aea272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf18ed3-681a-4e94-9479-1b028de5b473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8114d958-c9dc-40f5-8efe-2e844b9be140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71790056-e235-40be-a1ef-9a1294c922d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac1eba0-52d8-44e5-912d-ef00d262f677",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee25f5e-69e8-4cd5-aa29-e4683a329000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3599aa-adad-47e5-89f8-5a6da72d8be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d808ac4-1803-48b2-b045-98fea84567c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2bbc1f-ae93-4fc8-b897-204d58fbcc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1d0d3e-fc50-4068-8ba4-80e4335a7f3c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bfc300-10ba-438d-a465-b26d9d1bdb66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5065dd18-4723-4cbc-b98b-8fd5eb8dc12d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5454df-1aca-4ee6-bf72-c50a155e54d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50aebae7-f0a7-405f-92bb-e0df477a1878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544951ed-af0a-4e20-9d42-94752e5aa881",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d842ab8a-eecf-4c48-bfdf-963137133cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b186c3d7-6b88-4e68-914c-841416156a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c330d8da-3060-444f-bd64-de6a039a62d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdedb1f2-a218-4a56-82dd-4fa928205543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b38beb1-c8c6-4649-bfb8-f0cbe9970680",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace1268c-3569-4938-a68d-61c6f5fb7dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47101427-fcb3-43aa-b84b-29036f18c8e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba1305f-84cc-4154-a441-e2c81cc7301d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90db2ed3-1691-4cea-9ea4-95b70c131077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d19e25-4d93-42ec-92d4-2fc18ba92c74",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3994450-ff05-4752-b15c-c034d4d49d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0807368-702b-4311-96cf-064f22789d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e48c93a-b459-4a4f-ba3a-a7c421308ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a0dba6f-2c5a-4f34-acd5-2ecc8d5c1056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6979f86-7b10-4e4a-adb1-e0a0284eface",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87a32f6-4f15-43d3-9539-c3f999790469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7e94be7-2d6f-42e1-8fd5-6d271de53567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90ae70f-5cfb-4dea-b57d-7e531ee71978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c589920f-42cc-4ced-a782-27fa64777e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d62849-26b4-454c-9e49-9f865f76803c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625bed1a-4c1f-448d-824b-d8258c174d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb750669-8229-4965-aa8b-4ac92716f2ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73728e30-0a42-4472-9fe2-49274cd2cb04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0979c73b-1b09-4a46-956b-22491e81ee62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c002c615-6dab-4537-9f78-ddf7f864a962",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91352e49-e3ce-4870-a853-df9119959ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d962b7-727a-4f53-9535-75b92fa10bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "533bcf71-084d-420f-ad58-b53cb010ade5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a09daa-0b22-49b0-be2b-f6697f2e7854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f02b4dc-f497-4e5d-8444-663490ddec14",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff9cb48-2b84-422a-b152-1d5635c44517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1019f81-c3c5-452e-821f-c39d4c86f5f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34055766-4104-4b29-859b-2e444be5a1b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ed4d62-49dc-4d8b-b4b2-5b8f9db255da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8846df0e-f5aa-4387-94cd-e906136f6d51",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cae18e-8e29-4a2e-a953-3c6267826827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d74c6c-e0e2-4688-a2e7-3c593dd4e3a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486d0e0d-f8a0-4792-a3c7-92617dc95f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf8a742-f1b9-4199-ae44-55a8a35d8365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496d367a-6b0e-4622-b43e-c76edc9d0134",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd467ff-072c-4673-b0e1-af6011dc798a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68cecb79-03c7-407e-9ae7-dcd626fd5d43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625676d2-941e-4bde-ac23-ec7f5178d650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d766ad16-fa62-4881-b4ed-96c412b7da8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90daccfa-32ad-4b15-ae82-6e8453cc7f53",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd99a69-7e47-4bf4-aaa7-ed31ee71bea8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c803692-8aea-4242-a269-4a9e9fec8ee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e0fa62-0137-4a38-91ff-b873cedf39f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa4a060-cf53-45a6-9d29-898f1e239de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce32e86c-dacb-4d32-a7f4-a81e82f1a621",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2a8cb2-c57e-4503-a2a9-6f8e7c0a645c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6a202de-3e52-4071-ba55-894575d23356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdde6a24-409e-496e-bf5a-fde69f3f5e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc428c5-8d82-4d96-8e17-ecfa4105741e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a185ed-cfe1-401d-8313-ec2765ebd935",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8fed60-50ae-4e69-b140-3300e3339f3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "191ebcbc-aedb-4d0e-9082-9ab81c74ee7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb00d986-96b3-4fa0-9056-b45655d0f43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3c9659b-07e9-44ef-98cd-3a049f977354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e61003-5755-4b3c-aed9-bf1c703df6e3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f852019-05eb-4640-8291-a95cadeaea62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1831b040-2ac6-4a15-883a-a90864ae19b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd61936d-cb57-4a6f-b7a0-1a6624d1645e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7ff2f9-b602-491b-b6c1-f6ad41bf8c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf64f6b-b994-4997-b319-c8df3de0d086",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86968b4-4e1c-4152-9c32-bcf83a5c157d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3618f8a1-39e8-4218-80b9-b4cf7c6bde6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5765a545-9ed4-4fc2-b765-5560eedfd4cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87514983-828f-463b-aac0-ee9e0b65ad5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0b5057-e7d1-420b-9ac4-ece97327f44a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affc5e8b-af11-41c0-8b8c-b9c14283c2b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfda0497-469f-47f7-849b-248edd4ed35b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b984828d-5fd3-49e2-8aaa-55252838495f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdc6b4f-817f-488a-b195-a494ce863dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5a3ebc-8800-445c-b32f-7bbaa4aacb12",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffab81a5-a879-44b7-900f-75afd2a81989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7a92b82-26a9-4432-977a-fb46f840e943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe507606-ef32-49a2-83a6-377eb45f7ddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb193de7-dd7c-447b-b18b-bec9d67b6577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c957454c-3903-4d70-8167-e5bce1d1f55b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32a75bc-eba2-4e3e-97a7-a90b5665f893",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad8315e6-8437-4a07-a452-c8f80042043a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43630b93-ba0c-4148-9639-344806437aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c532a8-3459-46d5-a69a-ce93546f695b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b988fdbd-6a42-46de-aeac-6fccebd5c2d9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a026db2-eec3-40e0-9d19-8e493b7f2a82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91666691-ba61-4758-b5a2-f573a28d3974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfd9fcc-29b6-4bf8-a57c-db4042717cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e4fa16-aee8-4553-9631-59c319d7d5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8d4cbb-3925-4b01-88bb-47ca88ebef9e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15468c91-1216-44a2-b482-af8fda0be9df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e94902b-be00-41ab-a238-d2f27841929a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f24d5f5-0fd1-4c3c-802e-90a30ce57857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65453485-d4ed-4a30-a891-15f1f356e6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b535a56-abfa-441f-bc26-d385f7aa2270",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9146dbdb-571f-4b0e-adaf-afe9018b5a0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d81ec77-9756-4bb5-bdf7-cb0d2fda3ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e3d4e9-7569-4ce8-917c-53d420ab22bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "815f61ca-5ade-4ee9-98a3-f48d427569c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc443c2a-ca77-4e43-ab88-25f23f6bcda0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4c8208-92cf-4f34-a05e-e692d65f47ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66236fe2-8c29-4f88-95c2-313c9e2b230d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042caddf-7aa3-4639-a27b-aca017dde8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2e6f04-cc97-40f6-91d8-deb0099438d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d210ad36-6556-4115-9e5f-bf9f8cddf9b2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcb2f87-4cda-45ed-a731-bd34a49fb49a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0dca9ae-fb80-4c24-82e2-dfc651d978cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ff1ec3-908b-4623-a453-9988ad9ed645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8619a289-c473-4083-95a9-b4e55d3e6306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77455f53-587b-4026-a8b6-2b2688918793",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107f3bb8-9bbb-465a-8558-9ec95fba8007",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0aeb884-0268-4824-a8af-4af0d98b5ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e883772-4cac-459e-a314-25fbbf87eddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbac31c-7cb9-42ac-9e3d-fca7adab462e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9298fc2a-6697-4734-99db-91b460e95e47",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e32b84a-2bbb-47e0-9a1a-678c62e85003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dc54027-902d-4c38-be37-9b572eae397a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa9ef36-8788-492c-8784-74df8c42a3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d657ac6-4e96-4e83-9176-3869aaa3d4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c41aa6-b33f-45c3-aeee-77339f224d35",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17de5e58-d961-4928-954d-6e5622fb89c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f21466-e049-432d-bc7f-95ffc6d360a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db30023a-026b-4540-a54c-830c8bcc77d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25761c5-95c0-4de9-ab2a-06dd8792a4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14bcc966-6a05-426a-b570-1182ab9982ce",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5057eb-ae7e-4e41-8df5-e3a465925935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0278e1e2-76bd-43b9-97fd-d718e91155c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc967138-bced-42f0-8720-c144e82344de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbbadc09-5a28-4d3f-aeb5-49c4ac41f24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d197049-f25c-4eb1-a43f-9186d9a699c6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4757987-7098-41a3-a976-315a0bc2b90e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d604e855-9980-42ca-a0f4-3e318bf81089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ac4373-d1a8-443f-9673-c7a4ce8455a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac80752-de3d-4a5a-9ccd-bcc6371fb065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0a7d9f-d1c8-4c40-9039-292ba980eb94",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed19fda8-f7ff-4217-83d4-6fe97bf8fcab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5a8e5e1-b204-4bae-ac09-0a034422fcb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54f34c3-4209-4da7-982f-c726525d9d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c7251e-af5c-46cc-bae0-d0163526499d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083a03cb-ceec-499d-b6ff-9349cfacf380",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2f7d83-3307-43f0-bc68-fad13b1c6583",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c2c103-319d-449d-a923-eb8afc2d0bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f51f25-8164-4180-9f00-74a6e5018d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8992b71-9665-4765-96a1-574f6c4cd5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c261838-3212-4ea9-9aca-adaa3322004a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1708421a-a38b-4a2d-9398-a6d1e2f29ce9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "077088f9-2153-4ce4-b582-f0ca8a6ac65e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c94513-219a-4727-b8eb-4d3ad8584b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0911eef-55f9-41bb-9b0d-1408f94245c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5aa696-0b78-4b47-aaa5-5b7e96b9c25f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c75b24-a484-458b-bf24-c6e0fa940e5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15ca043f-7479-41de-aafb-dacef808766a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "582c1ef6-9b6d-42ad-8544-eb88198de552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7f5340-7794-4c80-a1ef-1a3c3238a5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab3d144-569c-4215-a44f-694056a3f317",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133e22d3-c33c-44bf-93b3-20e93565634e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b6f006-b0f8-4212-8160-3d740001bc5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e3874a-f828-4ce9-88fb-8633bc5f9ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b6159c-e697-4fe7-b515-dd9056171300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c59c97e-9504-4a17-898d-86b6fb9449c2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49bb1d07-8ebf-48d8-8801-edd9ffad5a02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b32b15f3-869e-49b9-8e32-e58796f561df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7ebcec-56d8-4917-bab0-c2429479820a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f690ef-5bfd-45a9-aba2-e6699b5bebda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6700b178-4de4-4e03-b758-a9c29edd694f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d045ea0b-ab18-46ec-834e-0e00af30bc37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "227d1843-c25e-4079-9758-2c7ed60a3519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071f2f4a-4807-4b2a-867a-f204ca52a9de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37cfb7e-bc28-4b22-bd9d-94fda755f56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f722520-e80e-45ce-92a0-a6a857f5bfca",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05699bff-6c7a-4632-98f5-2ce5cde79971",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85cf1372-b12d-46ad-98b6-03039a62ddad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbdb770-c170-4a17-bad3-7b99f25b2bbd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb0fa55-ab36-494f-bcb6-6e03657a3687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c410595f-6211-46f2-a410-2d666b8ffa84",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5339ca-7c7a-4e91-a346-54c7e08dc4b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36e8bdf8-6910-40cc-b0a9-86bd87b76e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c910a4-1187-46f4-9374-364e1eb1c58c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cfa4ab5-ca6a-4fbb-89eb-1efb94124737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f99efbb-c7dd-4a87-a5db-7fe102431bfa",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde7068c-559f-4172-87a7-a68c942c5a94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aed5751-ea7e-47bc-bc7a-5256dba34925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13241a7-cc27-4b08-956e-7d66c18bc303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c604223-1daf-4d65-b502-70902a99ad84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc69bc0d-347c-4ae9-b87b-1c0a6048209a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb94e98-1ab3-4c1c-b793-ab1330f20c85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "938b97f4-417d-41a6-ba52-4605fe24b517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dfaca4d-9285-4082-bdfc-313e59c286db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "105d2b5e-140d-4192-82c4-21f9bb4129da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f3f96e-0d15-4d62-b161-c41502f9da9d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b87e49-eb6f-4a08-b33e-d081354a75d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf5c5881-9355-4507-a088-0cd62b65fa2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66f0b8a-96c9-4827-86aa-88b0fc16c72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a9119a3-b24b-4ad5-b200-7388ad34e61c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e6ae45-4337-443c-89c7-85363036a773",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4109ad02-b32f-4c5a-986b-47a57c735bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0893cfc8-7d82-4bd1-ac51-2e854426b93b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de554ba5-cb7e-4583-8426-328972abc4e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3cd9c6-9a75-4b55-9e86-a64f0a3af468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa651fe2-bb19-4c6e-85ae-bccc5dd34f3d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b75aaa0-8cab-4b04-b3ab-70dfc446db62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b1cb415-98d5-4297-8467-a18f8ecc7ab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "155a2f54-c548-4dee-9ca0-41e4c2a5d9bc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1a03bc-79b5-4aeb-a079-8fb2aeba0151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da7ba82f-e1ff-469a-a6a6-6d6e1eef2954",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e23d9f0-1390-43c1-8967-25e25bfa05ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92835585-aa5b-4cf7-a18b-e233cb95aac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e93d20-e7be-4ce8-90a4-6edb2b65664c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11879711-dae2-4c24-b343-ff03a851871a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7a8dd23-211c-4b74-9aa2-844116328594",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed5b48ba-25c9-414b-a793-d3f150179654"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab4faf96-c1ed-405f-9e33-22186bc15569",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "478851cb-0f9d-4739-858d-628d5e7b40ff"
                    }
                  }
                ]
              },
              {
                "id": "a2d41df5-798f-4262-8a46-7c579010d658",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "022c34f9-c1cf-4ad6-bbf1-5d3b57ba6061",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388e03e3-d14a-4609-8bb4-0bc99b3a436b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c1fdde23-fb01-449e-a100-8afe44726c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7365a37-1551-45ac-9c30-e4657441f5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d962e356-c65f-4fdd-ae9b-1b6b0b2399d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c31153-965f-4f80-8b14-4609d53c673c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490b2a83-d8e0-42b0-9b0b-fccab548dc6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "578d410e-fc16-4e0c-a802-84785fcf9c2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bc9c46-ccb3-40c7-8c5a-9e3ccfc8f524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b05acfd-23b6-4f0d-bf52-c397c56c878c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09586b57-59d9-4c82-b6ae-718ceb21168b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce13657d-0a7d-4eff-81d8-1315042f7778"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8839110-d6fa-4ab8-bcfc-f8640b5301de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ffe02d9-1a77-4966-bd4c-a5db18babe6a"
                    }
                  }
                ]
              },
              {
                "id": "03c9ca32-2892-4fe9-9e4c-4a51caf174c6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "38eb6b47-fc3a-457e-b8e7-beed92330115",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a30231-95c3-43df-806c-86f1ee7b1989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "582d01a6-c20d-4676-9550-cad2030aa330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4eddf6c-7ecd-43bd-b20a-cd25bc95b01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2b3b13-53f6-4fe8-8816-d95a2f659ac7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "88fdeafd-3f80-4997-b071-6b4d02310558",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0003c17f-c9ce-497f-a83e-8de1e3b99a03",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d78e94c2-a5a1-4634-9248-663707975994",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9392134c-796e-4c47-b378-0e01c61ad803"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "447417fb-c52d-431a-80bd-59133eabfa77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f725731-23bc-47b9-9e9f-afaccd8d3169"
                    }
                  }
                ]
              },
              {
                "id": "71900963-39a2-4c73-917d-b699c98d0c45",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17b70cce-ba91-422a-b820-3f9215067860",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f45afb64-c764-4414-a730-4cbed2807541"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5188d407-35f1-4984-a80c-6a2dcb7a0a92",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f8b33ae-181f-4811-b48d-777a20bcb4d3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2614367-437b-4d8b-8c77-6af4414b6cc9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f6d2db19-0e17-40df-9f29-0c5c120e8227"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2cd7a3a-72d0-44a3-a426-6a22065b2be5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "535bb0fb-02a7-4007-9ff4-4e996a5f22d6"
            }
          }
        ]
      },
      {
        "id": "362eff62-ae74-4190-8be4-4c340707e2c8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0400dce7-20b5-4fbc-85d5-e3dc339f3667",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ec435f3-3ed2-4896-8dbb-dcf8be27f8cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aa54d6fb-220b-465b-be2a-7805cd655d93",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbc9a68-f2fa-45ff-ad45-102d78a3bd1c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5054f91a-c7c4-44a0-9fa1-b4c0eacc3a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31d4184-e54d-496a-8f11-2deff5245721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b89230c-b696-4155-8bf0-f6557b1631f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f1b84e-e829-4378-9a84-5dcb902b45bd",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55a7353f-a656-4339-95a4-fb8585074095",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "951e2571-fda1-4383-9d46-00ad57b7fa68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71b7acf-0c0b-419c-9751-d58be370fa04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7650374-466c-4c8c-bc13-b89b34da2578"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac46524f-c603-4a06-a247-0d3e6a49f19d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e604d965-e401-47ec-af04-0f5ab7348c0c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55cc7a99-e230-40e0-89fc-8dd02e28e3f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fc3b39d-c4b9-4bfc-a299-0713727b9082"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6940fbc1-cb67-4552-bec6-13d622d21673",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fa316b96-b15b-43d0-8ee2-227b0502b46f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3f033ba-3326-42b3-a715-9d3c08c7fd6f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72a8ccf6-1bf7-4ddf-a357-c8b95ae7c98b"
            }
          }
        ]
      },
      {
        "id": "be3f948e-48ba-487f-b6a3-51860f0e374a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4a3d8deb-81bc-4e74-b0b2-9ad27aa4802d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c4b8be52-010b-4b48-accb-9c3019ba9c9b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dcbc99bf-b693-4308-afe5-b54aee54607c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24769159-2786-4496-888f-375736f30f3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "12454b74-6f38-4bc1-a169-e6c9514ca45a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "229a748f-278a-431d-ae6f-cc399a259615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93c8a5f7-5d10-4234-b148-e411cbd0d1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fea573-ef9c-4823-b48b-19a00f62e460",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c483daf-0617-4e9e-b681-30f7816b98b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f8ffbce3-d82a-44ba-ac88-cd148827972e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7627560b-300e-4a87-9854-92e5a252f636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c732985e-da9e-4dbc-96eb-00ec18bf3407"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b9f93df-3643-4686-b53d-9c1784f8e9e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08e7b060-5ff6-4ae9-a10d-d6bf4a8d4ba3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72480a7a-5299-48f3-9359-42a975f077a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0d341d4-dbfd-40d9-ae0c-32b3f632e291"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f73e0b8d-5f58-4d01-bd7b-f7c92f71180c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0165b5f8-be82-4fa5-b0d6-885a871d40dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e7b8522-2dbd-4f7e-9b97-e57651c71764",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3aeb663e-8034-4c99-a9a4-7c5cb2463abd"
            }
          }
        ]
      },
      {
        "id": "2254724d-8699-4189-8e4a-00cf7702ec49",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "25407600-fbaf-4153-b42f-8e5eb2249000",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0b615e6-560c-4249-81e2-2a6d72a34da8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ea462f0-d273-469d-9c8a-f33c6f8f05ad",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8d2590-28ee-48f8-80e8-8f123caa7b05",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "996a07f7-406f-4932-9cea-f3bfc1efa981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e4a70f-aecc-4686-96cb-d512c7fdfe53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1fcac90-569f-4683-aee2-dfeec4197309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0cd064-dcdf-41c9-8724-edeceb9a995d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8459c4e-e6d7-44d2-837c-b87fb7659ab1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1882319-8069-4090-b586-4fbff72e3d1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7ab874-c732-4492-9bc4-398c1b55f67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "558d6d1b-1403-4d04-9962-5fe8398befc7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be2be2c0-f3df-424f-a3bc-fb7022f42569",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52395e66-80ef-4751-8ce5-6859e3171d6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "766af3f2-c84a-42f5-8911-99f68b8d4dbf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22b77346-5ed5-454a-b5d3-620a0b7d29be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "514bcb2b-193f-42fe-ab28-406043e5f90b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a921d858-41c7-4437-887d-73701c5f1686"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2985ea1b-fd6c-450a-b887-7b21753d0453",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3be3aa5-4d07-40ef-b01f-727ece241529"
            }
          }
        ]
      },
      {
        "id": "4d7168fb-087e-432c-8991-b1739e4299c7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bcec6694-7be5-4388-bd6e-8d8834d15875",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d71f619-ff4c-4191-9599-6542f0cce77f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "177c3429-3355-47c3-87d9-4c902542ebc2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eacc5e16-b7e0-4e00-8e3c-5eaf1da677c0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22a488f7-7a46-41a9-891d-1d6cd96ff9ab",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 49
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 243.74156812268225,
      "responseMin": 8,
      "responseMax": 3747,
      "responseSd": 624.8049780010246,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676508044462,
      "completed": 1676508120156
    },
    "executions": [
      {
        "id": "91a4de21-e570-420a-839c-19cf114d66bd",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "84e80c93-8ba8-4229-9397-4279172a19da",
          "httpRequestId": "d62bfa8e-ae6c-4468-92f4-ed85ae5bc02e"
        },
        "item": {
          "id": "91a4de21-e570-420a-839c-19cf114d66bd",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3325ce6f-5ab1-4c26-8ff5-c55570043679",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "2406d7cd-9719-4734-ab10-7bce6030c7bc",
        "cursor": {
          "ref": "0c6f7ef7-21b8-4cca-b184-565c3f526482",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "65db0f1f-d139-49fb-b974-5c393b660f41"
        },
        "item": {
          "id": "2406d7cd-9719-4734-ab10-7bce6030c7bc",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b60bc3a7-a98b-4d5f-955b-5863167cb53f",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "6db82d8f-b6cf-4938-96d9-012e684f41df",
        "cursor": {
          "ref": "496a29bc-94cd-4cc5-9a1a-d4e9a75553f1",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5289ee0f-e642-4e4f-af73-edc717f86e03"
        },
        "item": {
          "id": "6db82d8f-b6cf-4938-96d9-012e684f41df",
          "name": "did_json"
        },
        "response": {
          "id": "62f08bae-c355-4342-b9fd-ed1ce27f6f92",
          "status": "OK",
          "code": 200,
          "responseTime": 284,
          "responseSize": 1290
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df808656-3105-4e00-b87b-7d9c71152985",
        "cursor": {
          "ref": "9ac05166-fbbb-4287-85f3-d8c764326b5c",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1ce2bc76-9286-4639-83d4-d83e3d31c5a6"
        },
        "item": {
          "id": "df808656-3105-4e00-b87b-7d9c71152985",
          "name": "did:invalid"
        },
        "response": {
          "id": "2cd47e75-1daa-407c-becf-92a2a1b8df2c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 431,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "df808656-3105-4e00-b87b-7d9c71152985",
        "cursor": {
          "ref": "9ac05166-fbbb-4287-85f3-d8c764326b5c",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1ce2bc76-9286-4639-83d4-d83e3d31c5a6"
        },
        "item": {
          "id": "df808656-3105-4e00-b87b-7d9c71152985",
          "name": "did:invalid"
        },
        "response": {
          "id": "2cd47e75-1daa-407c-becf-92a2a1b8df2c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 431,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2ae63eb4-97ea-4fe0-ad85-cc273c1d9344",
        "cursor": {
          "ref": "ff27eff6-4e74-4607-a161-39dcd88ede26",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2113888a-eb50-4d4e-9a19-a6a836878994"
        },
        "item": {
          "id": "2ae63eb4-97ea-4fe0-ad85-cc273c1d9344",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "be31f955-77f5-4fac-afce-ee4e08a53905",
          "status": "Not Found",
          "code": 404,
          "responseTime": 84,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6dbd72-86de-4bc9-a949-ecdd2500ad90",
        "cursor": {
          "ref": "f8439c17-d86e-42d9-a40a-2f5a5b8677ff",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f21aa180-9f38-4f63-92d4-f639d4b20f1f"
        },
        "item": {
          "id": "ac6dbd72-86de-4bc9-a949-ecdd2500ad90",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9653ce50-8222-4fb3-8f80-5eaec17c2766",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52be2205-d89b-4b07-86f5-72f4584bdb56",
        "cursor": {
          "ref": "7f2acd92-15d5-47f8-b9d6-e392f1159a35",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0147c2c7-5729-426c-bdc5-ae05d649e1fb"
        },
        "item": {
          "id": "52be2205-d89b-4b07-86f5-72f4584bdb56",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ac30fac7-5218-4094-8302-2548a649dfa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ea6873d7-1095-4c97-90a4-68cc58fa2dd8",
        "cursor": {
          "ref": "fa895bd4-367a-42f9-8983-e218919d39fc",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1d968906-d52a-418f-89a2-7f2fe06f958b"
        },
        "item": {
          "id": "ea6873d7-1095-4c97-90a4-68cc58fa2dd8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2c89b6de-65c7-4799-b9d3-6394cc51b0b5",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ea6873d7-1095-4c97-90a4-68cc58fa2dd8",
        "cursor": {
          "ref": "fa895bd4-367a-42f9-8983-e218919d39fc",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1d968906-d52a-418f-89a2-7f2fe06f958b"
        },
        "item": {
          "id": "ea6873d7-1095-4c97-90a4-68cc58fa2dd8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "2c89b6de-65c7-4799-b9d3-6394cc51b0b5",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fe43296d-36eb-4077-825e-9e1694cd018f",
        "cursor": {
          "ref": "11953efc-53cb-4272-aa90-02230428abf9",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c1d59088-557b-4b8a-9303-5d6829d2ce18"
        },
        "item": {
          "id": "fe43296d-36eb-4077-825e-9e1694cd018f",
          "name": "identifiers"
        },
        "response": {
          "id": "f74d8112-33ae-45e5-80cb-97cc0a4de17a",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5403a03-b1b9-4826-80ff-6d0653f56d9c",
        "cursor": {
          "ref": "3f5a4440-f128-4a8b-bf2a-6e06f6e29d11",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "56dcafd2-1cf5-4905-a4f6-9de75afa7b9b"
        },
        "item": {
          "id": "c5403a03-b1b9-4826-80ff-6d0653f56d9c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e903b78d-b1e3-447d-80d2-fa4f4dae58d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5403a03-b1b9-4826-80ff-6d0653f56d9c",
        "cursor": {
          "ref": "3f5a4440-f128-4a8b-bf2a-6e06f6e29d11",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "56dcafd2-1cf5-4905-a4f6-9de75afa7b9b"
        },
        "item": {
          "id": "c5403a03-b1b9-4826-80ff-6d0653f56d9c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e903b78d-b1e3-447d-80d2-fa4f4dae58d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c3b6571-4f32-4193-90ae-d0f05c3920b8",
        "cursor": {
          "ref": "d7299412-56a3-41e4-92be-0afab315fdf0",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "018387de-4a10-4ae2-a81a-35a964b7c321"
        },
        "item": {
          "id": "6c3b6571-4f32-4193-90ae-d0f05c3920b8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "748bc1e3-0502-4aec-93b8-b9b408034757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf7cfff-0da4-4adc-a2fe-a6f3352268ac",
        "cursor": {
          "ref": "94ee49d7-f513-4886-b4d3-ced545bd384c",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "dc74f5f6-7c79-4a1b-926f-4a8b46e1d4ad"
        },
        "item": {
          "id": "bcf7cfff-0da4-4adc-a2fe-a6f3352268ac",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f316213a-801f-4635-8355-3c795e794704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae178336-a3a2-4bed-b5b7-0079eb8a8245",
        "cursor": {
          "ref": "9c5d5914-1c26-4ec4-aa52-a2a087f0ff3f",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "530493a1-2b30-4b52-9321-c505ad91bd95"
        },
        "item": {
          "id": "ae178336-a3a2-4bed-b5b7-0079eb8a8245",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d23798da-2362-41c5-bc9a-e257c82876e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06ebc2f-63a2-4705-ab7a-bd6f5a7c1ed3",
        "cursor": {
          "ref": "38190447-6b14-4e2c-9106-d32ff59c26b5",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "473f35aa-f679-4471-a90a-091bedf3d3f6"
        },
        "item": {
          "id": "b06ebc2f-63a2-4705-ab7a-bd6f5a7c1ed3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1b49b6c0-cc6e-49e1-b998-a802d91fd1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7258b4f6-4525-4189-9c82-c55039817e41",
        "cursor": {
          "ref": "7a59a686-c942-49a7-92c8-1a627560e461",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "55456687-8393-4656-8391-a4e71f990ed6"
        },
        "item": {
          "id": "7258b4f6-4525-4189-9c82-c55039817e41",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1a2505f3-6b29-47d9-98e1-f9f8da21f7d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e8537b-4f66-4138-bb73-0783f49966ba",
        "cursor": {
          "ref": "3f083d17-7f5b-4268-871a-e63a0b6aac43",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ab732532-7f3a-47e8-a66e-87afeb296b30"
        },
        "item": {
          "id": "52e8537b-4f66-4138-bb73-0783f49966ba",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0355382e-2bf8-4ec7-862b-59b0d759b5da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9feb3723-8702-4271-8e1f-2eee1308f11d",
        "cursor": {
          "ref": "421c3404-fc38-4c0b-91c2-436ec70856ad",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "97631a2f-2d2e-400a-ae3e-cd47805476fc"
        },
        "item": {
          "id": "9feb3723-8702-4271-8e1f-2eee1308f11d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ff7531ad-397c-4899-9bd8-4c3e7537e441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf0b62c-61e8-48fd-9fb8-1031112b5a74",
        "cursor": {
          "ref": "08c14f76-bfc6-41cc-9afe-c4a55197ce3b",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4af3b106-e4b1-4cc0-ba3f-1489482976da"
        },
        "item": {
          "id": "3bf0b62c-61e8-48fd-9fb8-1031112b5a74",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "10a6267d-f81a-4002-8b11-2988a7359b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fde7b14-5dfc-4e19-9a00-0623b88eeda6",
        "cursor": {
          "ref": "91c18a45-5fcb-4f96-afff-3a0e0d3e5676",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5a0e64df-531d-4107-a5c7-cfc42e45febb"
        },
        "item": {
          "id": "7fde7b14-5dfc-4e19-9a00-0623b88eeda6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d59aea6e-9dfa-487e-a6f3-f7c3f39b0ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e2cd1a-fcf4-4d06-adf5-8b405bf91e38",
        "cursor": {
          "ref": "95bdc275-07cd-4ff3-8d02-1b7672071347",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c982106c-f825-4233-9c8f-b8d22ae93762"
        },
        "item": {
          "id": "b1e2cd1a-fcf4-4d06-adf5-8b405bf91e38",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "58b8ce5b-4c41-4305-b97b-06f87c5e2259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b643efa-a847-4b10-9e17-cc9f37474bb7",
        "cursor": {
          "ref": "29bb3faa-cd43-4014-9a68-661d75906dae",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "01ecb9be-469f-4b1b-bbd7-f3adcf8bcd05"
        },
        "item": {
          "id": "9b643efa-a847-4b10-9e17-cc9f37474bb7",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c3ac7b8c-c1b7-480c-85de-9c46b0b4e342",
          "status": "Created",
          "code": 201,
          "responseTime": 1268,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e10689d4-5cc0-40af-9b8b-a37047e9b80b",
        "cursor": {
          "ref": "de8fb0bf-f391-4316-9d16-930950da15ea",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1bffc99c-6c0f-4243-b2fe-ac0c94290651"
        },
        "item": {
          "id": "e10689d4-5cc0-40af-9b8b-a37047e9b80b",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "d6c71902-fa8d-4187-af42-19e6143f9c6b",
          "status": "Created",
          "code": 201,
          "responseTime": 3747,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "31da7489-ffa3-4d18-95e1-8ab9510fbebb",
        "cursor": {
          "ref": "00c94fbc-637c-4a67-b1ed-402463b89b04",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6f5b2f8c-358d-42dc-8336-4eb4a8c8ce7b"
        },
        "item": {
          "id": "31da7489-ffa3-4d18-95e1-8ab9510fbebb",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0d16baab-9b6a-4db8-acbb-d38bebd9e46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1666dc8-2016-4e8e-8cbb-9869b38ffde1",
        "cursor": {
          "ref": "c73a061a-faad-4fc2-ac83-fbcad318a83e",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8fb76b13-4d14-4f31-9910-6b4ff8056a58"
        },
        "item": {
          "id": "b1666dc8-2016-4e8e-8cbb-9869b38ffde1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e7efa704-900e-4f6b-a8ab-eb71e0f24208",
          "status": "Created",
          "code": 201,
          "responseTime": 2727,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "78382470-9a35-4b1a-b995-d374520b7e68",
        "cursor": {
          "ref": "cb92fa09-98ff-4dda-a28f-9c865f2bd3ac",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d20c7fa1-ebe9-4d05-a622-8a9a97cad976"
        },
        "item": {
          "id": "78382470-9a35-4b1a-b995-d374520b7e68",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "180cf397-df1e-4c77-91f2-9f6095f42cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad6b50f-83bc-4448-9761-fcef4219590b",
        "cursor": {
          "ref": "38b82101-047c-4569-b4fe-39789fef8cc2",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9af56365-c9ab-4e62-98fb-83c8d4345943"
        },
        "item": {
          "id": "8ad6b50f-83bc-4448-9761-fcef4219590b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6a0340e6-79c7-498d-985e-2dbaabf40e69",
          "status": "Created",
          "code": 201,
          "responseTime": 2625,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "57fc5ab1-d658-4ee3-91d9-13df150ac2b8",
        "cursor": {
          "ref": "8cbcfc46-bf08-42dc-a365-d72d8286990c",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7a40b993-a349-4045-95e8-6f946e71ddd2"
        },
        "item": {
          "id": "57fc5ab1-d658-4ee3-91d9-13df150ac2b8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a3691d5f-81d2-4ce3-9535-907ba303266a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee25f075-017d-490d-a044-1930be1d1c73",
        "cursor": {
          "ref": "c7fc50a2-c44a-4efa-988e-2fe8120148d5",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d0120a93-0a8d-4b78-a282-2a0890a42a65"
        },
        "item": {
          "id": "ee25f075-017d-490d-a044-1930be1d1c73",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e3ccf562-febb-4417-b00f-ecdd4680e0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f8639c-3520-4391-a46e-6186ce73f33f",
        "cursor": {
          "ref": "b7acd140-e958-453f-abf0-cf72d0ffb318",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a5fd5db0-1c11-45ec-be68-ce4aa3bb999e"
        },
        "item": {
          "id": "e7f8639c-3520-4391-a46e-6186ce73f33f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "921034c4-a2da-4630-b28a-b6271a0810ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d0fd9a-1def-41ae-9cce-c076188b8e62",
        "cursor": {
          "ref": "a9c98c35-16f2-4146-8d07-2a7f3f8aaba2",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a4734ef9-e492-49f0-a82d-8a895972da49"
        },
        "item": {
          "id": "97d0fd9a-1def-41ae-9cce-c076188b8e62",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9ef2e568-2682-4380-82ae-dca967d091c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb25503c-cff8-4456-83ad-2676a708ac19",
        "cursor": {
          "ref": "5ea932db-60b3-4966-ba0d-6db5f5814b08",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "dbcc069f-a868-4b0a-be57-1553ee3d8285"
        },
        "item": {
          "id": "eb25503c-cff8-4456-83ad-2676a708ac19",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "08f1b4bc-09e7-4234-a2a6-5644361c042a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad07e4a1-c829-4dbf-9b89-6bf63cf39c7e",
        "cursor": {
          "ref": "6d9e7292-28a9-442f-9746-9feee3113dc2",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8673997d-7959-439a-9c8d-706ca2a325c3"
        },
        "item": {
          "id": "ad07e4a1-c829-4dbf-9b89-6bf63cf39c7e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4eab1aaa-d095-448a-9808-f41d5a3762d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d4de2e-f168-403e-84e4-eaf51d4a2c97",
        "cursor": {
          "ref": "e08bfcd1-1469-4aee-8cd2-eef85424920b",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a0ed37b3-ce71-4d8e-ba25-10eeee4da8c2"
        },
        "item": {
          "id": "16d4de2e-f168-403e-84e4-eaf51d4a2c97",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "146b549f-f10b-41b2-81a1-f70e85754cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00544654-a49e-4da3-99b4-9c1fec04f1e9",
        "cursor": {
          "ref": "9447af3c-e0e2-4088-9a03-d3fc53657137",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "321a3517-639a-48a7-8d3c-10fdbaff061d"
        },
        "item": {
          "id": "00544654-a49e-4da3-99b4-9c1fec04f1e9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d1a83dc0-c680-4dc3-a803-f09a1dcb9e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6215287b-06e7-4b6b-9fa6-cd4daff1f341",
        "cursor": {
          "ref": "c231107c-5702-4edc-bda7-a3a1ecc0b7f3",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7254ca99-9997-41d2-bbfc-5e8d5cd20040"
        },
        "item": {
          "id": "6215287b-06e7-4b6b-9fa6-cd4daff1f341",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "660a8d18-0992-46af-8c58-98d6bc6b59da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8baace4-35ce-4bd4-8d99-e7e72dbec7e6",
        "cursor": {
          "ref": "5a2c851f-524e-4273-8716-bc9eb10a2bbe",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f560b930-6508-4c4d-9a50-7bcb653a8876"
        },
        "item": {
          "id": "b8baace4-35ce-4bd4-8d99-e7e72dbec7e6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "137ed5f3-b2e9-4e62-ad45-503b5112a5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148c3ae1-494e-4873-9bd7-adf2f608fb36",
        "cursor": {
          "ref": "a84c45f6-6ca0-45f7-8a12-fa54cee3f1a2",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7073b443-695b-434a-b15a-f077387e4cd8"
        },
        "item": {
          "id": "148c3ae1-494e-4873-9bd7-adf2f608fb36",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "eccc600c-8784-4e60-8581-674f45fc175a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2cf618-0f87-45cd-9fa1-0ad88b5f3ffe",
        "cursor": {
          "ref": "aed91522-a7ed-4ee4-a955-f84a9241727d",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d3fc1616-419a-4fdc-b001-1f1ed545a040"
        },
        "item": {
          "id": "ef2cf618-0f87-45cd-9fa1-0ad88b5f3ffe",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7ccd33ae-f41f-4d36-846d-c96ee07daab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e2ffba-01c0-40b6-9d48-cd62a4e1af22",
        "cursor": {
          "ref": "c762903b-cfc3-4b5b-9bbe-bc9cbcef550e",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8bbd43c8-dd70-4d40-af53-dc58058c1139"
        },
        "item": {
          "id": "f0e2ffba-01c0-40b6-9d48-cd62a4e1af22",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "46a5fc23-70ed-4c22-bffd-accd3d833dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a2ec89-3024-4f04-a3a6-4bbcedd7a789",
        "cursor": {
          "ref": "c2d92292-2b11-4a54-904f-094dbeef443a",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "61e0aba5-e946-4e05-804f-dfe20a69637a"
        },
        "item": {
          "id": "71a2ec89-3024-4f04-a3a6-4bbcedd7a789",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9f8ce980-97b1-498c-af0e-5829f8dceeec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119cd2fa-a5a5-4041-9b1d-62156d32347a",
        "cursor": {
          "ref": "c02bd15d-a00d-457e-b433-227dc62172b0",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "02a5df6e-88f1-4734-9534-a9a052784e22"
        },
        "item": {
          "id": "119cd2fa-a5a5-4041-9b1d-62156d32347a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9d573086-d13a-4353-9def-d3795feaa686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb4b84c-179b-4f67-a0d0-af353ed3fe45",
        "cursor": {
          "ref": "0dd53e45-4e6b-4561-84cf-b1a15b58d700",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7aae9d85-7c08-4567-b2db-5869095b01d9"
        },
        "item": {
          "id": "efb4b84c-179b-4f67-a0d0-af353ed3fe45",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e293e3a9-3f63-4db1-b3c2-553f12638fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a40e4a-c154-42f1-9828-6b0b28fc99ce",
        "cursor": {
          "ref": "160394fa-1fe4-4053-bc62-5436289d04d4",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e3c01a51-670e-4127-af77-abba682087fd"
        },
        "item": {
          "id": "02a40e4a-c154-42f1-9828-6b0b28fc99ce",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "615ea1b4-46b6-4888-9e81-83665f4ba239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c964431-f869-4bd7-a1bc-eaec7f76cba2",
        "cursor": {
          "ref": "659a310e-7b66-43bc-b759-10f4f04c0841",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d056346d-7adc-45bf-a533-756e17de6309"
        },
        "item": {
          "id": "6c964431-f869-4bd7-a1bc-eaec7f76cba2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "960f0520-b425-463f-b2c1-13e489c0fb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba17a38-bb46-4e3e-928d-60402e41e698",
        "cursor": {
          "ref": "8f9931b7-798c-4d18-8bc1-d3f3fdde9514",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c0ba0eb2-0f9e-45f2-bde5-9d2973565845"
        },
        "item": {
          "id": "bba17a38-bb46-4e3e-928d-60402e41e698",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b8fd99d4-819e-4c47-afa2-d5e8a3403950",
          "status": "Created",
          "code": 201,
          "responseTime": 3516,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a15881f5-7e1e-45ac-8aa6-daac0646e21e",
        "cursor": {
          "ref": "4d6504a3-4793-4801-884f-78c3f8db90ed",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bb0f0584-f5a3-4b5d-bbb6-2c0a17abecfe"
        },
        "item": {
          "id": "a15881f5-7e1e-45ac-8aa6-daac0646e21e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e1d0e51b-09be-489f-9902-9b654c18877f",
          "status": "Created",
          "code": 201,
          "responseTime": 2683,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f6c1d7ba-e17f-4ced-9890-681f791d637a",
        "cursor": {
          "ref": "4e30cd16-41a1-4efd-bb42-5b5da1a9cb6e",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8120ddd7-c0e5-4833-8982-cd2c6e3c226b"
        },
        "item": {
          "id": "f6c1d7ba-e17f-4ced-9890-681f791d637a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e408830d-05d5-443f-9721-e3bc3f69eb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f062ca1c-675d-4197-86d2-2b24777fcac3",
        "cursor": {
          "ref": "036fdef5-5982-4025-aaee-832f76fb11b0",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "88d97139-c3be-4df1-9cdb-11ae1d8fdcf5"
        },
        "item": {
          "id": "f062ca1c-675d-4197-86d2-2b24777fcac3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1502f634-bab6-4b91-bbac-8a590eec75b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0582ee7-c449-4610-82d1-190d7a01029a",
        "cursor": {
          "ref": "bb257c9f-bd5d-49d3-8797-870adcb42695",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "99ad6d4a-5c03-43b8-93c5-61956de1e14a"
        },
        "item": {
          "id": "b0582ee7-c449-4610-82d1-190d7a01029a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "36726432-ea47-4f59-a54e-2e5574ec33f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51d4129-3485-496c-b8d4-ffecf8756c44",
        "cursor": {
          "ref": "9634d475-e4f8-4eb5-aaad-6cdb4708233d",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9208673f-f124-427f-a838-051156d37671"
        },
        "item": {
          "id": "b51d4129-3485-496c-b8d4-ffecf8756c44",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "69831413-2fb5-4c4b-b754-c8553bc24347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11df13c3-2de9-48a8-9b30-744873609178",
        "cursor": {
          "ref": "0db6e9c4-4e82-40e7-98d9-2086a0c09b54",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3d53338c-fe48-4e0f-8d29-e28679bc79d3"
        },
        "item": {
          "id": "11df13c3-2de9-48a8-9b30-744873609178",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7b675fea-50cf-436e-9c1f-93a2561a50fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a4705d-3255-48a6-9066-07abc3ff13ed",
        "cursor": {
          "ref": "4be1895a-d241-436b-8b5f-446203030e51",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e163cccb-38c9-493a-ae92-a96f78213100"
        },
        "item": {
          "id": "a5a4705d-3255-48a6-9066-07abc3ff13ed",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "efe125c1-43cf-4e04-b513-ec5e1099900c",
          "status": "Created",
          "code": 201,
          "responseTime": 2728,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "012cd226-eff1-4096-937e-85deea616819",
        "cursor": {
          "ref": "7b61438d-f4ba-4f8c-a408-c942326703a7",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d1c7d4a9-dff5-4304-a94e-b5de6a1d4c27"
        },
        "item": {
          "id": "012cd226-eff1-4096-937e-85deea616819",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5a9d14c4-5c24-4cc5-a93d-9dd5886f5979",
          "status": "Created",
          "code": 201,
          "responseTime": 2091,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "eeb9d224-4564-4c93-8525-6f99cc70f8af",
        "cursor": {
          "ref": "f5370cda-c17a-4e08-92c8-79c46b556416",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3c0b59bc-41d8-4472-b8dd-456a4adb874e"
        },
        "item": {
          "id": "eeb9d224-4564-4c93-8525-6f99cc70f8af",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9017f67f-839c-47b9-8cbc-850bda260f9e",
          "status": "Created",
          "code": 201,
          "responseTime": 2477,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "d10872bc-ea3d-410a-aba9-7e50969c3667",
        "cursor": {
          "ref": "11a5cfb6-7aaf-4884-9619-3d3b3c329c31",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7384625e-0d2d-40da-a550-641532d7919d"
        },
        "item": {
          "id": "d10872bc-ea3d-410a-aba9-7e50969c3667",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6d8ce44f-f846-4773-b3ab-5652abf6bbaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bde9c1-4f05-410a-a754-ed0bea1a9009",
        "cursor": {
          "ref": "6937e7d5-5717-40cf-8529-045be7689a19",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3d9736af-ea99-4b07-86c9-d40169eef5a4"
        },
        "item": {
          "id": "17bde9c1-4f05-410a-a754-ed0bea1a9009",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "820340e3-214b-4d21-b551-818eed9169be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb3bbe1-bdea-48f8-aa8e-c87079d7d030",
        "cursor": {
          "ref": "9b755185-4c8d-41ca-b3c6-eecde755d8ab",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8eb65053-d0f1-43a6-9416-6f7df03bd256"
        },
        "item": {
          "id": "deb3bbe1-bdea-48f8-aa8e-c87079d7d030",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f1768f4c-f1b4-45c0-86cd-2093b90db73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3531a246-211a-402d-aa55-9509d9a5036f",
        "cursor": {
          "ref": "1989b221-33bf-43f6-a332-cd32a6d0eb51",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f8042b1d-370a-479b-8767-9997b332eee9"
        },
        "item": {
          "id": "3531a246-211a-402d-aa55-9509d9a5036f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6dfad7a5-ccb4-46a0-8c98-7c1ba754043d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aff0840-303c-4228-90cd-3f5f1f2e3094",
        "cursor": {
          "ref": "a1138ee0-50bf-4ab0-880b-f0e202d7121f",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7a26b784-b3b6-4e1a-9507-5e8866532078"
        },
        "item": {
          "id": "5aff0840-303c-4228-90cd-3f5f1f2e3094",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "56070d9a-f281-478f-8d6a-e7311f9a4622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe6cc67-d486-4ada-915a-ee0eaf60fcb9",
        "cursor": {
          "ref": "ed32f096-35a1-4b5d-9923-8126e3aeda46",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "afa75292-f7a8-4e32-9902-87791dc0707d"
        },
        "item": {
          "id": "4fe6cc67-d486-4ada-915a-ee0eaf60fcb9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0f52d638-5c88-4f91-84c7-d922b7d8185c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5eb4315-d029-4c6f-856e-58c037bdf71e",
        "cursor": {
          "ref": "0942c0cb-7bed-4c76-a429-f92129f4d5ec",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5572f794-753d-44a5-93c2-075c43f77373"
        },
        "item": {
          "id": "d5eb4315-d029-4c6f-856e-58c037bdf71e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c52cdbd2-258f-4311-983f-24a1fda738a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4223c07-4d68-484e-aa16-4be5fbd5a797",
        "cursor": {
          "ref": "b80345f8-c403-4423-bf7a-9961eadf1539",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5822367b-356f-41a3-9bbe-aeb67a58c6b4"
        },
        "item": {
          "id": "b4223c07-4d68-484e-aa16-4be5fbd5a797",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7edfd768-1493-457e-92b0-0f6d9bdb7f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5751ef23-25cb-4de2-8d7e-052b75309740",
        "cursor": {
          "ref": "7f05654c-8f13-42c0-a069-7e2f9e4bed97",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "be4d6ee7-f2dd-4eb4-9fd4-4cf425f1e21f"
        },
        "item": {
          "id": "5751ef23-25cb-4de2-8d7e-052b75309740",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e269462e-2a1b-4afc-a774-d89d3dab88c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a8963c-d677-4b12-bd31-ea6142c0ec8d",
        "cursor": {
          "ref": "8fcd7bc4-ed94-4bfc-8a47-096e18f7b1e2",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f4f4d1f7-f4dd-47dd-a459-cbf500f1f05e"
        },
        "item": {
          "id": "89a8963c-d677-4b12-bd31-ea6142c0ec8d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "265421ca-ea26-44ae-b6ad-7e24fe994e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63be6106-9b66-4906-8b26-839b627b8e06",
        "cursor": {
          "ref": "ae2d08d3-e975-4ab4-9e14-3f86d665aaab",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "662c0b4d-42f5-4434-921c-40d455cbcfc8"
        },
        "item": {
          "id": "63be6106-9b66-4906-8b26-839b627b8e06",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4eba0515-57f1-4fd6-8a9e-32f2da144b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8176473f-daa0-4d68-98a8-2dc406db6182",
        "cursor": {
          "ref": "c69621f5-523a-4961-b190-b36d89d4bf6b",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "07e56d86-72cb-415e-a742-3d70c483ecfc"
        },
        "item": {
          "id": "8176473f-daa0-4d68-98a8-2dc406db6182",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "540b33b1-2ae8-41dd-a130-1989eccc7702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e356fc8a-e8bb-442c-ad3e-97545385d434",
        "cursor": {
          "ref": "b649f72d-73ee-4e67-b5aa-4100f9dd8be3",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3451df4c-e915-4cee-8fd0-dbeab57ae4d0"
        },
        "item": {
          "id": "e356fc8a-e8bb-442c-ad3e-97545385d434",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4d6717fc-565c-4f50-83f5-50741f0ed78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19270491-bb06-4043-b7db-c1e79b8f1126",
        "cursor": {
          "ref": "d3231730-73f8-4202-a04f-228ea218d00a",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "53fa0686-0359-4352-8d6b-631006ed5882"
        },
        "item": {
          "id": "19270491-bb06-4043-b7db-c1e79b8f1126",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "747b9520-7040-4bf7-970e-734f63a4b72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc208afb-c7c5-4aef-8e6d-bb579e53b6f4",
        "cursor": {
          "ref": "d922779f-73c7-4e61-971d-4dabfeafaa06",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "dbf73fd2-0872-4e95-b70d-22e829639d03"
        },
        "item": {
          "id": "bc208afb-c7c5-4aef-8e6d-bb579e53b6f4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "32d314a9-d00a-4c79-983f-27b234e593e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647f96e9-d91b-4266-93c0-05980fa608d2",
        "cursor": {
          "ref": "42f29ffc-f0d5-4852-a8d8-4a58d416dca2",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "292f22ca-e25e-4722-b096-93d74685d005"
        },
        "item": {
          "id": "647f96e9-d91b-4266-93c0-05980fa608d2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0a6eb44b-592b-4c42-83ff-fe706aaf0637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437141df-bf4a-4c65-b757-5de4880adb7d",
        "cursor": {
          "ref": "bc6626cb-3a93-4ac3-a00d-776ddc5ebb29",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "256c3134-bc11-48a6-94cd-4e91b3963a49"
        },
        "item": {
          "id": "437141df-bf4a-4c65-b757-5de4880adb7d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e7adc9e7-aeb9-4113-8060-eabc81ce574d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c54b56a-4c1d-4c31-a6ad-8488e274af30",
        "cursor": {
          "ref": "7f736d99-d83b-4d4b-96fc-f8f4f18d6ceb",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e1ec89a9-4afc-467f-bdae-a54e40a0afb8"
        },
        "item": {
          "id": "6c54b56a-4c1d-4c31-a6ad-8488e274af30",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ad93cc82-b5fe-4eea-ad21-b1e0a70ff199",
          "status": "Created",
          "code": 201,
          "responseTime": 2075,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "7ec0ec2f-6af4-45ee-b8da-3983580ec5ca",
        "cursor": {
          "ref": "04124a89-08d3-4a4a-8ac7-f23526297a43",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "45923617-c5ca-424c-8d39-91e309761193"
        },
        "item": {
          "id": "7ec0ec2f-6af4-45ee-b8da-3983580ec5ca",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5224b2ef-969c-4e6b-aa5e-0a0ee748fe62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887b111c-df76-4c53-84cf-8ad64fafc0f0",
        "cursor": {
          "ref": "207c5f6b-d052-4b6a-8d32-a4fa5c6a749b",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "45c96951-7feb-4682-b65b-f2bc72bea230"
        },
        "item": {
          "id": "887b111c-df76-4c53-84cf-8ad64fafc0f0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ddf0fd88-e93d-41e7-b62b-38bcc66df902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1cdb20-6924-47f2-a90e-f0bbe4df1738",
        "cursor": {
          "ref": "1f82ab2a-d081-4364-af77-d6614380f035",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "85560ba4-5add-4bf3-a660-5da22c788a82"
        },
        "item": {
          "id": "3d1cdb20-6924-47f2-a90e-f0bbe4df1738",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0fa6791c-a635-4dfd-a949-d92c930d314d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df94a372-3ba2-44f1-baae-47a7edc016b8",
        "cursor": {
          "ref": "db643bba-f56e-4caa-87d7-3d8ce8ffc186",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "799c3f8c-3f42-446c-8215-b5bb34998117"
        },
        "item": {
          "id": "df94a372-3ba2-44f1-baae-47a7edc016b8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0b256a47-a843-488f-b5f4-c170c30ab964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8552e4d5-2ee9-41a9-8b9c-de59c83f75b1",
        "cursor": {
          "ref": "822366a5-5e2d-4eb4-8f2e-c9c4616bd52a",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "65e47f28-f6ad-4488-81c3-fd5dbbc4c916"
        },
        "item": {
          "id": "8552e4d5-2ee9-41a9-8b9c-de59c83f75b1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2ae4d34a-49d2-4b5f-b756-6c4df3a8c3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb555e7-f0c6-4eeb-9833-5f2154e0d1d3",
        "cursor": {
          "ref": "c8b7d326-d1b4-46e7-933b-5225f6795200",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cf57d2b4-5230-4e55-9564-b8162f77ce7b"
        },
        "item": {
          "id": "feb555e7-f0c6-4eeb-9833-5f2154e0d1d3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b024f869-6d12-4bdf-9c36-32b6166bb40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca657c26-91ea-49c2-9e24-17d16f2cbbee",
        "cursor": {
          "ref": "253c1ea2-343c-402b-b337-f8e3fce790c3",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e253686d-5057-4ade-aca9-efe2c2c512a5"
        },
        "item": {
          "id": "ca657c26-91ea-49c2-9e24-17d16f2cbbee",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "4003e6b2-a070-4e1c-84b5-141b1219b372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d3a582-745d-4f59-8b23-d10ae2f92ed6",
        "cursor": {
          "ref": "c8a700c6-d4d0-4e56-aa6d-157cabc01339",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9756f947-d7fe-4ada-95b9-2095bfe9bc4b"
        },
        "item": {
          "id": "b6d3a582-745d-4f59-8b23-d10ae2f92ed6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5320bb75-3d13-46f8-9784-eadfd04b61e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640e3587-728c-4b53-ae49-4c8cbc11b70f",
        "cursor": {
          "ref": "7759450b-5be8-4ac5-b34f-72face8542ad",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8e852c45-392e-40dd-8e02-5c14ed6a6ee8"
        },
        "item": {
          "id": "640e3587-728c-4b53-ae49-4c8cbc11b70f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3f20d5ef-9369-4ad5-abfd-b562bf54d6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86a08a2-08b1-4e45-9982-82df28959f92",
        "cursor": {
          "ref": "dc376e1a-f18f-42eb-9986-c24452e04b14",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "778b2065-5b68-49dd-b71b-52db8c736124"
        },
        "item": {
          "id": "a86a08a2-08b1-4e45-9982-82df28959f92",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "97d0951b-cf4b-4b81-8209-1b40ea72605d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60747a1a-e78c-45d4-968c-0f22c1a4e152",
        "cursor": {
          "ref": "aed4b936-d4e4-4c16-80a0-2a3dd6b0e234",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1e4dd084-e1f3-4ff6-b771-3c0a4d30b732"
        },
        "item": {
          "id": "60747a1a-e78c-45d4-968c-0f22c1a4e152",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c0da50b0-44b1-41b0-a4f1-5f4ca1cf7e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6510f87a-46fb-49c5-8d7b-293319790c88",
        "cursor": {
          "ref": "f1e88c28-f003-447b-b6fb-dde60af15547",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "eb2f24ec-32df-4166-984c-a34b0df054be"
        },
        "item": {
          "id": "6510f87a-46fb-49c5-8d7b-293319790c88",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f04c913e-a49d-414c-9f52-55b159200913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26e45c3-4a36-4904-b5d9-cb175cdccdae",
        "cursor": {
          "ref": "c6951609-d590-4aca-8d17-fd71d18c20a7",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "927aa88f-fba4-4f3d-83ca-d9d117ff8cf9"
        },
        "item": {
          "id": "b26e45c3-4a36-4904-b5d9-cb175cdccdae",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d3049b0b-1a8a-469c-835b-18a936b84bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bac1f27-c808-4d8d-9e51-7202b29ca942",
        "cursor": {
          "ref": "0ca8e795-07f7-43bf-ba5b-d19a1bf8cfa1",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1a4806e5-27fd-46d5-b2ef-da1ecb794e23"
        },
        "item": {
          "id": "4bac1f27-c808-4d8d-9e51-7202b29ca942",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "134c6fdf-919d-41ba-85b5-6aa7fc81e567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3472fb42-4dc1-4a2c-9bde-80a54f25e218",
        "cursor": {
          "ref": "3862ec37-c444-4097-aa60-c6af71c57706",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "85532c2d-4b85-437c-8b1b-246d4e44e82b"
        },
        "item": {
          "id": "3472fb42-4dc1-4a2c-9bde-80a54f25e218",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "578ef498-fdf3-42c2-b68b-39361acabb2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8da425e-ff3a-4257-bb3b-cad4b141ff97",
        "cursor": {
          "ref": "b656ae24-94c5-4848-96dc-849a49c67922",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "356bac99-66fc-4021-af09-e3c37cd92087"
        },
        "item": {
          "id": "b8da425e-ff3a-4257-bb3b-cad4b141ff97",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3f900417-9057-4132-a288-56876273adda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9be4d25-46a2-40c8-956b-940bf2ab16dd",
        "cursor": {
          "ref": "1400cf6e-b204-4b0e-bdc9-f6fb3f4ad7f5",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8aa6affc-94a0-418c-acb2-fd13a6e9b225"
        },
        "item": {
          "id": "e9be4d25-46a2-40c8-956b-940bf2ab16dd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6eef3ffe-df4d-43d3-aa1e-873b0d039b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fadff1b-0c84-4e55-a991-43f760375096",
        "cursor": {
          "ref": "5cb3094c-9c8f-4791-a076-483114125edf",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1c243cf1-685f-4ece-a97e-1e2168469550"
        },
        "item": {
          "id": "8fadff1b-0c84-4e55-a991-43f760375096",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0ae10ef2-7dd2-4b1e-8c13-e4e1e084b41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dab0200-10b1-4e5d-bbcb-e16a2d98843d",
        "cursor": {
          "ref": "0bce22bf-41d7-408b-9a77-d85dbca86428",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "81e1453e-1e1c-41f5-bcd5-75d419cb811a"
        },
        "item": {
          "id": "5dab0200-10b1-4e5d-bbcb-e16a2d98843d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "77fcd1bd-d5d5-44e0-b35a-534a784c6ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baff5f1c-e891-45e4-8c22-060212cba69a",
        "cursor": {
          "ref": "bd379d8f-0b77-4945-bd58-0f3a98539227",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f87b0fdb-e45c-4e0d-a2b8-e36f91bc8e59"
        },
        "item": {
          "id": "baff5f1c-e891-45e4-8c22-060212cba69a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fef8b4b7-fc48-45ed-b496-2a25b6e1f13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d351d0b-6da3-41df-8b88-0f9e12f40cd0",
        "cursor": {
          "ref": "37210ad6-5e94-4678-ba3b-c24e74bf1288",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "740f9ebc-2470-4279-ad8d-384ffd9efb50"
        },
        "item": {
          "id": "2d351d0b-6da3-41df-8b88-0f9e12f40cd0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "18819520-3e6e-4115-96a5-ec5a473e77e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c25e68-d159-424c-bb85-c3744924e574",
        "cursor": {
          "ref": "6c29adff-a6de-4681-b481-f7b9452f0cbd",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "14f30b1f-33b4-498d-b7aa-ec2a3513c69a"
        },
        "item": {
          "id": "e6c25e68-d159-424c-bb85-c3744924e574",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d670beb0-0042-434b-a2c6-db40e5d9b7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd347cd-5b99-4062-a3ce-ce3dd84614d2",
        "cursor": {
          "ref": "530afdb2-2fd2-4f1a-b7f8-edfc66a47af1",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7d0f58b4-0f7c-4926-9d2a-cf2e3b7893d1"
        },
        "item": {
          "id": "4dd347cd-5b99-4062-a3ce-ce3dd84614d2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f4641732-87cb-4ac3-8eee-3efb675e91ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547d5c12-2bf4-44c1-bf98-689f00abc55d",
        "cursor": {
          "ref": "f6380693-a4ca-4a31-a7f2-424042d8b7b9",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "17812b69-e0f3-4085-b7e4-84077efcd0c4"
        },
        "item": {
          "id": "547d5c12-2bf4-44c1-bf98-689f00abc55d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "634707a8-f7e6-47c9-a40f-63a872c58457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb8358f-5121-4c00-a199-75ad2d10cc5e",
        "cursor": {
          "ref": "1dd6d32b-24a6-4f60-9096-60bb979b284b",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "11ec315e-fab3-46ad-83d4-6bd406887485"
        },
        "item": {
          "id": "acb8358f-5121-4c00-a199-75ad2d10cc5e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d7ab7c4d-d51f-43a6-b2da-e176e1473626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee40bad8-b62a-4ded-a84e-da2bce2205f3",
        "cursor": {
          "ref": "6452a5f7-f0ec-47a4-82c9-25badd283890",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "66d3c2c3-db92-45e3-aa6a-24e209231c5d"
        },
        "item": {
          "id": "ee40bad8-b62a-4ded-a84e-da2bce2205f3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d3c543c4-4ee4-4394-abf1-59199668f36a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b53670-60ec-4668-a7dc-2655bb45bef6",
        "cursor": {
          "ref": "98889e7e-f01f-4f40-b1cc-8b4333acc49e",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a9ef56e7-48aa-4ce5-aedc-2d10f37b7ce9"
        },
        "item": {
          "id": "76b53670-60ec-4668-a7dc-2655bb45bef6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "84719a49-6c3d-44a6-a3bf-9f87ae8f1a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756ae43d-7886-48f2-ab3c-1326c0f2086d",
        "cursor": {
          "ref": "d62d004b-23a5-4fa9-9bef-9018c91074ea",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1ba7b883-e1c4-4eed-8092-03bfa64a5a86"
        },
        "item": {
          "id": "756ae43d-7886-48f2-ab3c-1326c0f2086d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "715b97eb-8b75-4f6e-b593-9eb859bcb837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45b0f6b-6511-41e1-bb12-3aaa7d511d0b",
        "cursor": {
          "ref": "d68a1d3a-a664-40b9-bf3b-24a08b7ccdfa",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "aab9abc5-631a-4b8b-8f40-b306d5b0931f"
        },
        "item": {
          "id": "e45b0f6b-6511-41e1-bb12-3aaa7d511d0b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "46a31957-1613-464d-967c-685fff09afbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f06a7db-68f4-4863-8dd5-583f3e6e9a1f",
        "cursor": {
          "ref": "4dc73545-dda2-420a-8daa-1657255c1f2b",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0bae4c2e-d1f2-4c57-b916-30c312ed80f0"
        },
        "item": {
          "id": "3f06a7db-68f4-4863-8dd5-583f3e6e9a1f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "dfac0bdc-a25d-490d-a68c-4ff19b9df629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9d5c83-bb7a-4aa7-b6ec-f8df03e13d14",
        "cursor": {
          "ref": "a580704e-3eec-4b4c-a1fc-e18cbf53c212",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6825622d-32a8-4b11-bb7e-0c9da734d5aa"
        },
        "item": {
          "id": "0b9d5c83-bb7a-4aa7-b6ec-f8df03e13d14",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "adad6bdf-88f0-40f0-b8f4-454422b6b076",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "296ae3cb-12bf-499e-ade1-d04e92cf9978",
        "cursor": {
          "ref": "6d34e38a-310a-431f-9973-49cef5de1871",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2ffa0ced-f366-46b6-9104-ae311286114a"
        },
        "item": {
          "id": "296ae3cb-12bf-499e-ade1-d04e92cf9978",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "09e16b1b-4069-4f0d-8001-af6d9c0954c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "9453417a-2603-4c88-8084-c0a9e3a90c9a",
        "cursor": {
          "ref": "bf3777fc-ee4c-4198-a2e9-c1951dfb6cde",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "67de8ad2-2425-4a97-9533-d1fff0ad30b8"
        },
        "item": {
          "id": "9453417a-2603-4c88-8084-c0a9e3a90c9a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6edcadaf-73e9-42ce-bc1e-140252f30cee",
          "status": "Created",
          "code": 201,
          "responseTime": 1929,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3547719-2edb-4d4c-8fd5-3d7d2d242814",
        "cursor": {
          "ref": "f758f8b5-401c-4c49-9a60-1c69aa386b46",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a864ce3e-bfd3-40d5-982c-15b349283a2e"
        },
        "item": {
          "id": "c3547719-2edb-4d4c-8fd5-3d7d2d242814",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "da820661-07f8-4a5b-b50b-4f9f0b4b3e33",
          "status": "Created",
          "code": 201,
          "responseTime": 2397,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65bbb3f-2ede-420e-bcb8-38ca6520a12e",
        "cursor": {
          "ref": "ca2cd088-247c-439e-af24-2cbd272be269",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "25d81f5b-d2e9-451e-86e7-54fb258acde3"
        },
        "item": {
          "id": "d65bbb3f-2ede-420e-bcb8-38ca6520a12e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "158cbb03-958f-4ec9-8270-a5fc685d1272",
          "status": "Created",
          "code": 201,
          "responseTime": 2204,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f5c08d9-0ab9-4956-a191-e64d36cc1f4f",
        "cursor": {
          "ref": "be9c49b5-23c9-4b65-8a42-65d1d65e8741",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "822759a2-917b-4681-ba69-dfbbfa4821a4"
        },
        "item": {
          "id": "9f5c08d9-0ab9-4956-a191-e64d36cc1f4f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4339af4f-6b53-4b37-bdd7-4704757d148b",
          "status": "Created",
          "code": 201,
          "responseTime": 2300,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-16T00:41:32Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-16T00:41:32Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "f4196221-d7e2-4461-96ad-ca18ff5a2524",
        "cursor": {
          "ref": "fb749a00-5c98-497f-a51f-f22b65848dc2",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0a2dc774-651f-4788-bdea-8d3104b0950f"
        },
        "item": {
          "id": "f4196221-d7e2-4461-96ad-ca18ff5a2524",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1e3b722d-cb25-4169-b34c-7ec6c2c9509f",
          "status": "Created",
          "code": 201,
          "responseTime": 2704,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed9339a-7936-4623-88b3-f09693b2bf8a",
        "cursor": {
          "ref": "2cf4073c-b1c5-4d36-be6b-0c2ebae8988e",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e49ee5f6-ad58-41ab-8aa5-bd6b21d63f7e"
        },
        "item": {
          "id": "bed9339a-7936-4623-88b3-f09693b2bf8a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "689a6c1f-4544-4df9-a01b-c0d5fd75e464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed9339a-7936-4623-88b3-f09693b2bf8a",
        "cursor": {
          "ref": "2cf4073c-b1c5-4d36-be6b-0c2ebae8988e",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e49ee5f6-ad58-41ab-8aa5-bd6b21d63f7e"
        },
        "item": {
          "id": "bed9339a-7936-4623-88b3-f09693b2bf8a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "689a6c1f-4544-4df9-a01b-c0d5fd75e464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d3ab9d-176d-49b8-af19-1b7c874b1bd5",
        "cursor": {
          "ref": "f662fae1-cff4-4361-99bd-3182988b991b",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6b6850e5-9437-48d3-811e-347f5a7377a7"
        },
        "item": {
          "id": "e3d3ab9d-176d-49b8-af19-1b7c874b1bd5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "93afdcec-9f74-49e4-bd3f-47c88e378e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb8cc29-0e2f-454d-a187-e1a6ed428a45",
        "cursor": {
          "ref": "3f26076e-e243-4ff6-89bf-7fa7a1afb2f2",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "17af7e16-bffb-4a96-b939-ab12cfdacfcd"
        },
        "item": {
          "id": "8fb8cc29-0e2f-454d-a187-e1a6ed428a45",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "48bf60de-3dd8-48c1-b7ba-5b563e50134f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c97bfc2-f722-4c42-a39e-e3656ced6f65",
        "cursor": {
          "ref": "db3d1eb3-4bef-4316-96ce-256912f5c8dc",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "fda3685b-73eb-4dfd-9b54-f3e7101fb73a"
        },
        "item": {
          "id": "9c97bfc2-f722-4c42-a39e-e3656ced6f65",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5adf08d2-1b4b-4175-bf7f-9b83a0722c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052a14a6-b8b2-4cdc-af20-f8dcf5add112",
        "cursor": {
          "ref": "50489337-8b5b-4dd5-a837-f2bed74828e0",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "904bdb36-b7ff-45b6-927d-b52bcf2c8ad3"
        },
        "item": {
          "id": "052a14a6-b8b2-4cdc-af20-f8dcf5add112",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6fcf9043-2074-4305-928c-1e8c0bc29859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ce9d73-d9bd-4f35-b22a-5821219e2437",
        "cursor": {
          "ref": "acc26ef6-d79c-401d-8b1e-11108b8118f2",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5ed8f480-6eb8-43da-8e88-58710bbddfac"
        },
        "item": {
          "id": "d6ce9d73-d9bd-4f35-b22a-5821219e2437",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "076e5979-1c30-4b26-8e0a-bc4a6d633aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824525e9-cfc0-49b3-9790-e02fd561b283",
        "cursor": {
          "ref": "e6408088-d6a6-4685-b668-4c774add12d6",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c8778a74-95fa-402e-a2cd-bfe596f519e3"
        },
        "item": {
          "id": "824525e9-cfc0-49b3-9790-e02fd561b283",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f6f1631f-01a7-476f-b774-682c0291fa7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd1783a-8aff-4588-a932-cb65a66175d3",
        "cursor": {
          "ref": "f682f54e-f70b-4bde-8afe-d58d8bbb2332",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e3eafe0f-49d2-49a6-be0b-9a290969ad2c"
        },
        "item": {
          "id": "dcd1783a-8aff-4588-a932-cb65a66175d3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "619a1c53-acd1-4e55-9fa6-8e3324cbebac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1471bfb3-4cd0-457a-9a40-36cc621c7847",
        "cursor": {
          "ref": "1ba698e5-e541-409f-b2a9-4cba64ec56e6",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8c0b5837-2114-480d-9b16-89951c772925"
        },
        "item": {
          "id": "1471bfb3-4cd0-457a-9a40-36cc621c7847",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a092d8bf-f07f-4640-98ce-02b1d409733a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbdc438-18e4-4b86-b196-5aad6b536777",
        "cursor": {
          "ref": "5103d4ea-594c-4ca7-a137-1230c09f9992",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f5e4bfd8-b4da-491f-ae52-5f749c443d8b"
        },
        "item": {
          "id": "bbbdc438-18e4-4b86-b196-5aad6b536777",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3a8ed15f-4520-4aae-a709-7e10f0a1bbcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aee3624-a881-4f45-b0e7-6b881571d7d2",
        "cursor": {
          "ref": "10fd3e0f-b5d6-4193-8a1b-de215ad6c133",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e50fcf51-23c8-496a-9d3c-24588185a80f"
        },
        "item": {
          "id": "5aee3624-a881-4f45-b0e7-6b881571d7d2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1850de5a-e668-4dd9-9e14-7fec5ba5b833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7cee44-f6e1-43e6-b628-ffcfb1317139",
        "cursor": {
          "ref": "d3f4c7c7-aea5-47ff-b2e3-207d95e147d5",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9488aeb5-0b02-4d14-b181-de693555f7f4"
        },
        "item": {
          "id": "7e7cee44-f6e1-43e6-b628-ffcfb1317139",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2e26f78d-4809-40b1-9f89-52f06f153d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0b2fc5-4fb6-41c6-a181-d8db9dc8ad1d",
        "cursor": {
          "ref": "2b4cc0b9-8cb6-4cdc-a6b7-8ff5dd848b6c",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1c4d1405-94d6-41d4-a1e5-2cfa550cf516"
        },
        "item": {
          "id": "9b0b2fc5-4fb6-41c6-a181-d8db9dc8ad1d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b923f44d-52e4-4a85-9884-5dbdb210afbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc442d6-c38e-4e8e-9702-01e0bbf9c7a9",
        "cursor": {
          "ref": "b1887288-e7a7-4cfa-be4e-3cb166b84ffd",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "626863f4-bed3-4dc3-a82b-97201f0a2bae"
        },
        "item": {
          "id": "adc442d6-c38e-4e8e-9702-01e0bbf9c7a9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9fb4eb81-702e-4dbf-ad15-b2d9f1e40ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a4a3ad-d965-4dc6-bd41-c1e35ac55c98",
        "cursor": {
          "ref": "b6478dda-d52a-4dd1-8b78-7f1f88089033",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3de3ed29-e54a-4e6c-93c8-a895fa185f68"
        },
        "item": {
          "id": "d4a4a3ad-d965-4dc6-bd41-c1e35ac55c98",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "098b9d56-0bff-4677-af86-902501f16c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494b4d4c-8a1d-426a-9c13-528986bfd82f",
        "cursor": {
          "ref": "e285badd-83db-4552-b572-d630957a258b",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cb11fb80-13fa-404b-b531-53d1009d7ee3"
        },
        "item": {
          "id": "494b4d4c-8a1d-426a-9c13-528986bfd82f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a1630e2e-aa40-40f6-bcfd-5c52fe5f1185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09651d4-8472-47d6-af84-33661b4299de",
        "cursor": {
          "ref": "437d5e86-c421-48af-8a1a-219f54aab71f",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8aa0e13e-5408-4773-a592-5abaeb4de6e1"
        },
        "item": {
          "id": "d09651d4-8472-47d6-af84-33661b4299de",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b5f1e145-10b4-4581-b715-6ba107c7dde3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc296e34-328b-4123-a0c0-a32d3b94a2e7",
        "cursor": {
          "ref": "c89bdc0e-d9e2-4dcb-a9f1-71051248b56e",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "501b88e0-c891-472c-b0d3-c61f7aaa001f"
        },
        "item": {
          "id": "dc296e34-328b-4123-a0c0-a32d3b94a2e7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "05328852-ac73-4f2d-a4ea-0452229c30bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555930c9-7473-4feb-b565-df96ba1358ec",
        "cursor": {
          "ref": "26aba5e5-4878-40c9-ba83-e5a25719b9ad",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1d51983d-cdcd-4caf-b2e4-249f608da6c9"
        },
        "item": {
          "id": "555930c9-7473-4feb-b565-df96ba1358ec",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "91aae296-fa83-4f3c-98fd-cd604dfc09c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a416a8-9771-4e14-9db7-8cc7118d2de4",
        "cursor": {
          "ref": "aaff8b6a-5376-4b00-a636-c78b8a57550f",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "45dd9611-31fa-4eb4-b4db-cb3f42e1aebe"
        },
        "item": {
          "id": "07a416a8-9771-4e14-9db7-8cc7118d2de4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "83126977-600b-43a6-9a2e-a465ec2c2bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80a9d0c-4b14-4e7b-981c-e6518a62d30a",
        "cursor": {
          "ref": "aa1426b5-7b02-4091-baee-25e9bb61c109",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8dcf8827-457e-4bd2-b74d-d8485f767bb1"
        },
        "item": {
          "id": "d80a9d0c-4b14-4e7b-981c-e6518a62d30a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e810cb3f-c0e2-4615-b0fb-03456c5cdc82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe2a439-0def-4d35-a933-ace646e42311",
        "cursor": {
          "ref": "3d69c908-194c-449a-91ee-0a1a0f9c8621",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7de0c22b-f175-4740-ae95-4b3c18d33b1a"
        },
        "item": {
          "id": "ebe2a439-0def-4d35-a933-ace646e42311",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "08525740-2417-4da6-b71e-98d1ab9e2132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05795901-b10c-4797-b5a2-3c4635476fa2",
        "cursor": {
          "ref": "70436628-7219-42b9-a518-2a3092d51210",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a0790d7d-3603-4a6d-8814-cd389ef4d3af"
        },
        "item": {
          "id": "05795901-b10c-4797-b5a2-3c4635476fa2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a2e840ea-e3d6-4a07-ae77-090fb7bf7799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e1578a2-a994-4b79-b885-31bfa05f24ea",
        "cursor": {
          "ref": "17c1f674-4ac6-4372-a653-9e1f23629989",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4dfd4f15-c2a4-4a69-aaf8-c04b041304fe"
        },
        "item": {
          "id": "9e1578a2-a994-4b79-b885-31bfa05f24ea",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "82650463-357b-43d4-9b72-3956f9b11267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdabc10f-8ea8-4b83-90f2-c4b02d883f4a",
        "cursor": {
          "ref": "875cc678-e585-4488-8ef9-c0c236a4ad3a",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9518a67f-5966-4504-a198-782779d4eb37"
        },
        "item": {
          "id": "bdabc10f-8ea8-4b83-90f2-c4b02d883f4a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "003b920e-a649-4cb3-acf5-f551d7008400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8eaa79c-531f-459e-bfe4-da0fa439316a",
        "cursor": {
          "ref": "20e18789-5c73-4d8f-8b11-694ea60b2914",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2f9a3a15-97e7-4790-8a4e-4fd8f39a7d7e"
        },
        "item": {
          "id": "d8eaa79c-531f-459e-bfe4-da0fa439316a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8731a188-0431-4e96-8470-c954bfb3a245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b9f313-6438-46cd-88bc-94ff1777572c",
        "cursor": {
          "ref": "23effdcf-d453-496f-991c-7c47b185a365",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "dcbdf973-881e-4eda-a9de-c77fe08ea9d5"
        },
        "item": {
          "id": "21b9f313-6438-46cd-88bc-94ff1777572c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5abaa5df-93b7-40b1-9a00-53e58693f922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec4678e-e766-4098-ba90-6d0bf5e01629",
        "cursor": {
          "ref": "66fbbc3d-9c39-4508-bd6b-09af9fef51b9",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "43cea663-6740-42aa-ad65-ca372ed9df6d"
        },
        "item": {
          "id": "eec4678e-e766-4098-ba90-6d0bf5e01629",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6f70c1da-950b-4fc3-8786-8622680c25e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5022873-3d00-42d8-830e-f6260484efa9",
        "cursor": {
          "ref": "09a3612b-4880-4c07-a97c-64360032ea7f",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1bbf60c4-7cb5-407c-a31f-382b6f0d9e5e"
        },
        "item": {
          "id": "d5022873-3d00-42d8-830e-f6260484efa9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "eccd6d51-960a-4ead-972d-bb3f8e241d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf79799-13e6-44c1-acd6-0f1371f0a0c1",
        "cursor": {
          "ref": "77df3297-f0ce-4bd1-8b5d-7419444f4b81",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9bc7d4e6-4e85-4616-b6bd-13ede225247c"
        },
        "item": {
          "id": "ddf79799-13e6-44c1-acd6-0f1371f0a0c1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "11fdbc62-8c18-4dc6-9ca1-e5b65c6d4b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe66b857-d806-4f4f-ac95-6bae4996e725",
        "cursor": {
          "ref": "30d4eb81-71e4-409c-9886-a1ee8e5d96f9",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a0a810d3-6cb6-4d54-a0eb-bfc9391b859c"
        },
        "item": {
          "id": "fe66b857-d806-4f4f-ac95-6bae4996e725",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "217bbe97-e217-4590-aa58-8ff9cddfcfdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fc2702-57fe-40ff-a8a1-fa36be149150",
        "cursor": {
          "ref": "9a8c4f5b-e2e6-4a41-9ff0-b391aa97697e",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1dbecb3b-a06b-4643-b3a3-475e81ffc9f4"
        },
        "item": {
          "id": "b1fc2702-57fe-40ff-a8a1-fa36be149150",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c653c406-6b85-4023-8a98-c2015126e75b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608f5165-4110-47fa-9581-dc8f2aecaf93",
        "cursor": {
          "ref": "8cdcf523-938a-49e8-828e-6819a72f5f3d",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "12774a71-fded-40b1-af66-e9a4b0bce836"
        },
        "item": {
          "id": "608f5165-4110-47fa-9581-dc8f2aecaf93",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d0b9c65e-071b-4120-9c54-2a397fdfa754",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "68c44264-561e-43bc-b0af-b08f8c11b238",
        "cursor": {
          "ref": "2667cd90-3c7b-4abe-8441-fb3c1bc841e8",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "80b0adc0-f220-451c-b863-4c1e39c74fb9"
        },
        "item": {
          "id": "68c44264-561e-43bc-b0af-b08f8c11b238",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "9d29c955-5fd1-4946-80a0-2896698f9ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "172500b1-2774-4454-805e-9e04d4996e85",
        "cursor": {
          "ref": "eb98c473-1788-44b2-8436-23fe0dc48f77",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8952e935-07ae-4b82-b9a5-e2d7ce4b7609"
        },
        "item": {
          "id": "172500b1-2774-4454-805e-9e04d4996e85",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "07a26fcf-955b-4e5d-83b0-240090e2ba08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172500b1-2774-4454-805e-9e04d4996e85",
        "cursor": {
          "ref": "eb98c473-1788-44b2-8436-23fe0dc48f77",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8952e935-07ae-4b82-b9a5-e2d7ce4b7609"
        },
        "item": {
          "id": "172500b1-2774-4454-805e-9e04d4996e85",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "07a26fcf-955b-4e5d-83b0-240090e2ba08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a19ad6-efd6-49d2-858a-8ed27bb9815e",
        "cursor": {
          "ref": "1ba91738-ab60-4ad8-a76b-fb9d5cbcb002",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "537798f7-8119-4633-b9d8-2f2e21db59ea"
        },
        "item": {
          "id": "a4a19ad6-efd6-49d2-858a-8ed27bb9815e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "665e8e1c-e923-461b-97b6-59a7d6f26fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5caa17b7-e609-4d2b-acd8-e23268e5a987",
        "cursor": {
          "ref": "50ff671a-2c4e-410a-b09e-61cb77ca3562",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "82bf5fe5-4161-407e-a06c-84c579ef16f6"
        },
        "item": {
          "id": "5caa17b7-e609-4d2b-acd8-e23268e5a987",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3859155f-76d1-46c5-856b-38993a443b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c43975-ca06-4466-ac9a-8468410e22a5",
        "cursor": {
          "ref": "8287deaa-6ee6-462a-8fc3-c51590de9f57",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1a7c735c-d630-4dea-86ee-df808df48d9d"
        },
        "item": {
          "id": "c2c43975-ca06-4466-ac9a-8468410e22a5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6d76b0cf-4d1a-4859-8954-ff6d28ab345b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02038d7a-6227-41aa-9d0a-0024c765c029",
        "cursor": {
          "ref": "15d58434-1d55-4bff-b3a2-30bcb3674d6c",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "dae80ded-e6ad-4492-b5fb-4c4cfc732e80"
        },
        "item": {
          "id": "02038d7a-6227-41aa-9d0a-0024c765c029",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9244dbae-267e-4e1e-a260-f2f8d46ed301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f21c4d-9d9d-4322-b0b7-3c5aafcd076b",
        "cursor": {
          "ref": "d37e98c2-8fca-4db9-bdb7-dc65cfc1ba22",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a868bc26-d3d1-43a3-976d-7d19331b669d"
        },
        "item": {
          "id": "05f21c4d-9d9d-4322-b0b7-3c5aafcd076b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "60bd933d-f947-4968-a57e-c365379a55e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2ce003-5e90-48d2-986e-ba42cc437bc1",
        "cursor": {
          "ref": "4b660751-2411-431f-b714-57e56c4b2680",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "71d6005b-2bc7-4f77-aa2a-45041fb38d30"
        },
        "item": {
          "id": "7b2ce003-5e90-48d2-986e-ba42cc437bc1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c10577a0-842c-47ab-91aa-aeaf5fedef85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1e620b-8051-4d4e-afb6-9ce4c009def0",
        "cursor": {
          "ref": "14fd705f-e41a-4b9d-aee3-89b36d084ba5",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2c4c9b20-cbc3-4e2e-b6cc-2438776be895"
        },
        "item": {
          "id": "3c1e620b-8051-4d4e-afb6-9ce4c009def0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "80b93ac5-6acc-4b0a-89ef-911a57cd3afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0de39b5-eecb-40eb-b29a-fe332877cee8",
        "cursor": {
          "ref": "12921a83-c23b-4376-90d8-08d69a352e22",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "49fb2257-fbd4-4afb-9717-80dc02588e77"
        },
        "item": {
          "id": "f0de39b5-eecb-40eb-b29a-fe332877cee8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1de7be2e-0bc8-45ca-85ec-9ac964f11601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ca82ea-e2e7-484c-a58f-ca526fbff96e",
        "cursor": {
          "ref": "c809ff18-051a-4d7e-b491-262aae968c39",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d6c21415-6144-41c2-af42-1e426bc0cced"
        },
        "item": {
          "id": "83ca82ea-e2e7-484c-a58f-ca526fbff96e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "79eb5ce0-2699-4629-96e6-cbffc50074a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ac4380-f4ec-4312-8c75-d49dd5912f21",
        "cursor": {
          "ref": "564fd687-73dd-4af2-9ac1-f92614be2fb4",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b5689f22-4df2-41ca-afb6-598c5fc299ba"
        },
        "item": {
          "id": "b0ac4380-f4ec-4312-8c75-d49dd5912f21",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5d805f6d-378d-4405-a035-9bcb28ed0c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd18522-d4ca-4442-af20-3f90eca0e465",
        "cursor": {
          "ref": "14d77bb8-a3a7-4847-a930-3538874508cf",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ecf2bf8e-d7c1-478c-849d-e4cf8f203922"
        },
        "item": {
          "id": "fbd18522-d4ca-4442-af20-3f90eca0e465",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2461a1e4-38cc-4537-b2a6-0319e7957e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b67413-4e0a-446c-ae3a-3cfcc495b76f",
        "cursor": {
          "ref": "39637676-ac76-4ac2-a78d-8e5fa2292487",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "67a6f9b5-de66-426d-882e-8c72c1f65c93"
        },
        "item": {
          "id": "96b67413-4e0a-446c-ae3a-3cfcc495b76f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6aa56b3c-4921-4227-9884-30a2806e846c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1575c44e-4553-4cdd-a660-2adb84ef847f",
        "cursor": {
          "ref": "e8580f43-13cc-4857-aade-c774b92c72c4",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d476940e-520b-4fe2-b613-bff8a3ca1850"
        },
        "item": {
          "id": "1575c44e-4553-4cdd-a660-2adb84ef847f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cc54f3e5-cd8c-4aae-8f5b-8c7bbeaad1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67e6b48-b651-4c52-92ca-af5b7ace4a24",
        "cursor": {
          "ref": "98a3e573-c22a-49f7-83ef-48c828d365d3",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2abeaed8-2e72-43dd-aa6a-788f4639ac6e"
        },
        "item": {
          "id": "c67e6b48-b651-4c52-92ca-af5b7ace4a24",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "abac2cf3-47f3-4b0a-99c1-5e488fa9b5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef38a5c-75e9-4587-bb04-f4d7ec4286e2",
        "cursor": {
          "ref": "4d4033f8-a225-419d-9d46-131829c5f18a",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fcf52661-d2ae-4802-a2c4-0d6675131585"
        },
        "item": {
          "id": "6ef38a5c-75e9-4587-bb04-f4d7ec4286e2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7f4ea879-8c23-4e8f-bd4e-125989cd8b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fce054-43b6-4e91-835c-dcc56aa0c453",
        "cursor": {
          "ref": "45d8974a-d4f4-4027-98f2-fa831808152a",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "78338da9-03a7-4de4-8b2c-69fb9dbb6589"
        },
        "item": {
          "id": "77fce054-43b6-4e91-835c-dcc56aa0c453",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e6c26a89-4b25-4d10-9bac-107f8c33744f",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "4b34a20d-4fe1-4c47-9842-ad43db648d34",
        "cursor": {
          "ref": "fad1020c-a7fa-4b94-9166-41722a0904d9",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6244c8ea-967a-48ee-8442-c8af993369c7"
        },
        "item": {
          "id": "4b34a20d-4fe1-4c47-9842-ad43db648d34",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "8abae214-5278-4adf-abab-14e2b7948c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791412e9-417a-496e-8650-ae8d81093989",
        "cursor": {
          "ref": "76b8a393-96b4-4b6c-bf12-af0abd2d2963",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c39737e3-3fd7-4fa6-8d4f-8e14e9e5c719"
        },
        "item": {
          "id": "791412e9-417a-496e-8650-ae8d81093989",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "76fdf027-28dd-41c4-988f-15357b9525d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a11d37d-0057-4aa0-bd12-0bd608ef4075",
        "cursor": {
          "ref": "e5b8d42c-ede5-4470-8d4f-aa0539041133",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4c1e6722-3789-4d37-8025-a04199ca54a9"
        },
        "item": {
          "id": "6a11d37d-0057-4aa0-bd12-0bd608ef4075",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3af2db6e-1d7f-48c3-8a8c-4948c6b78a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3a5b64-afc8-4a9e-a2db-02b307573652",
        "cursor": {
          "ref": "57ff64b5-ca95-448e-be2f-7cbfa855083f",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f69c080a-d8b2-4de3-8ed8-1e1e6979d48e"
        },
        "item": {
          "id": "9b3a5b64-afc8-4a9e-a2db-02b307573652",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "48142a59-3390-4932-9add-107a0cb08593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c496f5f-a88b-4261-95c1-e546e0864c7d",
        "cursor": {
          "ref": "22aa13ac-695e-44f6-884f-665c0f4258f7",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6e0fa43c-0434-4dd6-a2b0-d9ac9f81801a"
        },
        "item": {
          "id": "3c496f5f-a88b-4261-95c1-e546e0864c7d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "100280b6-dda4-44f1-8161-68fb6232dadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86315ca8-8368-4be5-8d88-86a38e57ee98",
        "cursor": {
          "ref": "2b5bb96a-0cc6-4d5e-ae40-3e53fbc52781",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ac85ceec-f47d-4e3e-8dd3-ed1143138af4"
        },
        "item": {
          "id": "86315ca8-8368-4be5-8d88-86a38e57ee98",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2e01f0d5-ea22-495b-9a0a-b71007497cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7ccc21-c35c-4fad-97b7-6fb888b1ae8d",
        "cursor": {
          "ref": "b8792b40-3deb-4314-9127-2f938cecd312",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "fe7db232-e15a-4f1a-b575-7bbb7221a574"
        },
        "item": {
          "id": "af7ccc21-c35c-4fad-97b7-6fb888b1ae8d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "21e01681-8584-46db-9cd2-dc7f23683e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13aeac0c-d110-42f1-9dda-dc7c40202b73",
        "cursor": {
          "ref": "2151661f-b52b-4d28-adf3-5ee90f8ee98d",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "646b5a53-1961-4177-9f68-38028762e748"
        },
        "item": {
          "id": "13aeac0c-d110-42f1-9dda-dc7c40202b73",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0b956eaf-1e01-42b5-9c6c-afe6232002a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c10f5e-8f32-4ffa-b4ab-789cd846442c",
        "cursor": {
          "ref": "c397abe3-73af-4c76-98bd-491a40193e3a",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ec9a7187-91ce-42bc-b784-1fb95312604a"
        },
        "item": {
          "id": "58c10f5e-8f32-4ffa-b4ab-789cd846442c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cb2ab6ba-da2f-4b20-9152-e35d81861082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608f413c-f06d-4c6f-98b9-21e04d1dd90f",
        "cursor": {
          "ref": "2166f9fb-789e-4598-99b0-9f8cad5d3ec0",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "403c973b-a338-406a-a549-b7f73c8b63b3"
        },
        "item": {
          "id": "608f413c-f06d-4c6f-98b9-21e04d1dd90f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "57ab371e-15f4-44dd-966e-2d5c6719c9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0232599a-4728-404e-9999-578b92907e02",
        "cursor": {
          "ref": "e57960b5-6b1d-40d9-a5fc-755eed0c2609",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9e010fc1-6b64-4a52-b1a7-2aa398ede742"
        },
        "item": {
          "id": "0232599a-4728-404e-9999-578b92907e02",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "22043216-1648-4e83-9bec-e8555209d96b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4ac6e7-6abe-4409-bd6a-1e6afe887db0",
        "cursor": {
          "ref": "4110bb65-47eb-4e3d-9875-f1b0ce934542",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6c52892e-7da9-467f-8134-0aec1fd30424"
        },
        "item": {
          "id": "5e4ac6e7-6abe-4409-bd6a-1e6afe887db0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d4e25605-35be-4e34-b646-89ad60915b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4dc3b3-a369-4139-a11a-d5b35a03979a",
        "cursor": {
          "ref": "26e5ebfe-f5f7-4c38-986c-7be2ea124db6",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "34481f9f-afed-41d8-a641-4d202c0299b1"
        },
        "item": {
          "id": "ea4dc3b3-a369-4139-a11a-d5b35a03979a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1234bc2a-5f37-4907-9115-9093faf9fd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce45a837-4838-4c1d-bee4-b3d82f1acc4e",
        "cursor": {
          "ref": "6486a69a-02fa-4a1b-ae4b-18f01a759859",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "379b18e5-79ac-452d-8910-ec8ef7bbbca6"
        },
        "item": {
          "id": "ce45a837-4838-4c1d-bee4-b3d82f1acc4e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ed7f32c5-8e62-4db2-b60c-248a76dce14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5a07d2-bb89-4cae-b0d3-b2f39f994480",
        "cursor": {
          "ref": "9628f299-133d-42d9-a09b-a027cb0bbf3f",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "57df2c99-3b12-4da6-8b7a-86da0dc61e58"
        },
        "item": {
          "id": "1e5a07d2-bb89-4cae-b0d3-b2f39f994480",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9efcee6f-2154-4d58-a3b0-723d7b373dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b8751b-ce7e-4bd1-8793-47c1d9391e27",
        "cursor": {
          "ref": "85561c27-8027-479c-9cb9-7831d732aeb6",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d8abb477-4646-41a1-abe3-dbfc70282970"
        },
        "item": {
          "id": "10b8751b-ce7e-4bd1-8793-47c1d9391e27",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "fce4c81e-1612-4e28-a79f-feec2dadf042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7cdc71-59af-4164-8f3e-7bcf8238f8ca",
        "cursor": {
          "ref": "fbd86cf7-fb21-4841-8f4c-078dbf1645ba",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8910fade-33e5-4608-9b0c-6684be59f0f1"
        },
        "item": {
          "id": "1d7cdc71-59af-4164-8f3e-7bcf8238f8ca",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4a9a0bd2-9266-460c-b300-92813efacd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1792b5e8-15e3-47bd-b615-e1901cc4cfe7",
        "cursor": {
          "ref": "c0273baa-93f6-47f9-bab0-bee8c6d3fbed",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cb615cd6-a8ff-4adf-bde2-288ad2b0efa1"
        },
        "item": {
          "id": "1792b5e8-15e3-47bd-b615-e1901cc4cfe7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9ad8aced-c46d-42d1-8dfa-d531ce2a93f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e0c72d-72fe-4cfa-9991-836114867323",
        "cursor": {
          "ref": "9c0f392a-a7aa-45d8-bea4-a15a9a01506a",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a3a5683a-3458-41ae-ac2f-d24c2f86dbb5"
        },
        "item": {
          "id": "a2e0c72d-72fe-4cfa-9991-836114867323",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bbbeded6-bd26-402f-aea8-9ae288efb64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2437c223-afb5-4024-9ffe-0cd3c9b901a5",
        "cursor": {
          "ref": "91312747-cf5c-4690-87fb-13e7b5b64f7e",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c8c16700-3dbc-40b4-92de-710d73e5eebe"
        },
        "item": {
          "id": "2437c223-afb5-4024-9ffe-0cd3c9b901a5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "36567503-d67c-42eb-9de9-7806437e74c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e18c12a-d05d-4e79-9298-e8ff229cb80d",
        "cursor": {
          "ref": "71224ec2-1a31-4978-8233-f8d02920bc16",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "aca43854-fbc0-4d02-ab08-1583d06b0cf5"
        },
        "item": {
          "id": "7e18c12a-d05d-4e79-9298-e8ff229cb80d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c1073bbb-3219-4490-ba82-c5b787a0dbdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae33236-c92c-4fda-832c-9e4ec90e8212",
        "cursor": {
          "ref": "e3ca769f-bc5d-435c-b392-ab9e0430ad4e",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "64e667ca-9eaa-48f6-b50a-f292e3d9a2f9"
        },
        "item": {
          "id": "fae33236-c92c-4fda-832c-9e4ec90e8212",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0cbe325b-edb9-4a96-b2a1-7933d4034a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b66f331-1d78-4128-a8a7-b2121f433938",
        "cursor": {
          "ref": "0263659b-8770-48c2-b724-a373f73cb541",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a52d1ee0-eabd-4373-ae6a-82fbc08086c7"
        },
        "item": {
          "id": "4b66f331-1d78-4128-a8a7-b2121f433938",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f3f3bc31-5c6b-4953-9e49-6be62bfd53e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731214ff-9efc-47ee-9695-439c88b25e13",
        "cursor": {
          "ref": "85e0c758-6129-44c0-8dab-1d51d20aa028",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e8b83f62-63f0-4f08-9c73-6cfa5070b3ab"
        },
        "item": {
          "id": "731214ff-9efc-47ee-9695-439c88b25e13",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "65ba00f0-ac5b-4e8b-aa7d-28728a440a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d57e95-4cf5-4fab-be94-9f221a2bbbd8",
        "cursor": {
          "ref": "9276cc0e-5be1-4319-90e9-33572abb4db5",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3be21c17-77c5-43e4-b688-44645c3ed19b"
        },
        "item": {
          "id": "20d57e95-4cf5-4fab-be94-9f221a2bbbd8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d4b84320-8385-4a05-b9b3-297d5147f27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8d5f09-0dc3-4bdb-845e-c952d4fe6c92",
        "cursor": {
          "ref": "26b21843-c00b-45e5-95c3-f493b1478972",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "14bb6698-02d5-45bd-8459-aa845c8e423c"
        },
        "item": {
          "id": "af8d5f09-0dc3-4bdb-845e-c952d4fe6c92",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c56dc359-935f-4e6d-9afd-e4972bbdc941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d497f4-935f-42ca-90b5-e52b20648d0c",
        "cursor": {
          "ref": "8bbe776d-6e1c-441d-a4a2-6a045b2c56c1",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "134aac52-aca0-4563-a08e-d56ec0fb8028"
        },
        "item": {
          "id": "13d497f4-935f-42ca-90b5-e52b20648d0c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c6bf284a-69fb-4036-90a2-90353785667f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7058d23-eec6-46d1-a521-2508566304a0",
        "cursor": {
          "ref": "1ba44c05-6b4a-4980-b4d2-ae619e7a9566",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7732aab1-636e-4d85-a974-50e0b8432b68"
        },
        "item": {
          "id": "e7058d23-eec6-46d1-a521-2508566304a0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "78b9453e-4ad8-455f-9f2d-cbdfac11de3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef7719a-29c9-4994-ba3b-ae7bb7fb8a63",
        "cursor": {
          "ref": "c0bc9a85-7442-4bde-8d05-8c5e925e720d",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a33855d9-631d-4547-adb4-1de4fb7da39d"
        },
        "item": {
          "id": "5ef7719a-29c9-4994-ba3b-ae7bb7fb8a63",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "468c00c7-c3f6-4cda-9a47-ff135b786ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7812fa-0c78-47d4-8b57-e758db52392d",
        "cursor": {
          "ref": "59a50aa0-5554-4bfe-815c-f9a1d0e5634a",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "117a345d-cfea-4146-83ab-c9e8772147a5"
        },
        "item": {
          "id": "7b7812fa-0c78-47d4-8b57-e758db52392d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "358cf422-32c6-4309-ac51-ddf463bc656b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2686f9f-48d0-40a6-9601-7e6a3d863ecc",
        "cursor": {
          "ref": "708da745-29fc-45d2-ae37-33ef2fca23e7",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7773d2bd-6672-41d8-9a61-4490a5440576"
        },
        "item": {
          "id": "b2686f9f-48d0-40a6-9601-7e6a3d863ecc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9663897c-8321-417b-a241-d687956a7d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01dce39-0a67-4c00-822b-6e757bae0d64",
        "cursor": {
          "ref": "66aa8cde-d260-49ec-b9d0-5b8e4b0b18d3",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2c1712c4-1464-410b-9222-8554b2a14467"
        },
        "item": {
          "id": "c01dce39-0a67-4c00-822b-6e757bae0d64",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3bd7d9c1-6c93-4e15-afd7-c22af2fd6125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f8fec7-ae51-482c-94e4-35fe003cfd73",
        "cursor": {
          "ref": "32e8ac25-7bbc-4ea6-b75c-c97b116206d9",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6938e29b-0715-447a-83c0-2471485e164c"
        },
        "item": {
          "id": "e5f8fec7-ae51-482c-94e4-35fe003cfd73",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3e01ab77-0576-414b-80e5-3d08c281c863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49767cb9-ae16-435c-b7c4-434724c98441",
        "cursor": {
          "ref": "5cdd1fd7-a9a1-4324-ab60-0dd46c00cd31",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "675be3da-89aa-4024-bc1f-ce442bc355c5"
        },
        "item": {
          "id": "49767cb9-ae16-435c-b7c4-434724c98441",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fd5a994d-2b5d-48be-be40-04c202520b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62305bae-e5b4-4099-ad74-831e6714e3c7",
        "cursor": {
          "ref": "ec9db132-d4ca-49b3-82a9-1ac635841b0c",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2d2ccc87-acdc-49c6-8232-bc9cb25a5f79"
        },
        "item": {
          "id": "62305bae-e5b4-4099-ad74-831e6714e3c7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e060c03c-a73e-4a1b-a5d5-ee94609303b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fdd9183-8be3-48ac-b2a8-c691e8c91978",
        "cursor": {
          "ref": "59ce96e2-701c-4e30-aad5-85cb03bfceb2",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d6185e2b-b94c-4b15-ba81-2ed65a8b06ef"
        },
        "item": {
          "id": "9fdd9183-8be3-48ac-b2a8-c691e8c91978",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5dc22328-2ec4-4b8b-9def-5d33a073a112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d040c46-13db-4908-8bf6-a3c5b721dd8c",
        "cursor": {
          "ref": "68f1db0b-4d66-4976-8afc-37b7cb90cc37",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "aee5121a-0dda-4be9-8700-7a7c228cea81"
        },
        "item": {
          "id": "1d040c46-13db-4908-8bf6-a3c5b721dd8c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "413a2796-221c-4064-8021-805186996a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac1eba0-52d8-44e5-912d-ef00d262f677",
        "cursor": {
          "ref": "b5c2fb81-9a31-4fb0-90d4-c885fe57f610",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5d878ecb-340a-4ca3-8fa7-c9df727803bf"
        },
        "item": {
          "id": "cac1eba0-52d8-44e5-912d-ef00d262f677",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1d81d967-b28a-4f1b-b233-ad73f0b7a4d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1d0d3e-fc50-4068-8ba4-80e4335a7f3c",
        "cursor": {
          "ref": "2a70991e-0acc-41f5-9768-3763b6ae17d9",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bce18a58-f676-43b6-a14e-52d5a2a88c4a"
        },
        "item": {
          "id": "fe1d0d3e-fc50-4068-8ba4-80e4335a7f3c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a29c9e2b-050e-4410-b015-086a86b50f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544951ed-af0a-4e20-9d42-94752e5aa881",
        "cursor": {
          "ref": "74a131cd-c977-45d1-94d9-80aaf0f75591",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "13fbdb78-6616-4c00-b327-0461427fa9b2"
        },
        "item": {
          "id": "544951ed-af0a-4e20-9d42-94752e5aa881",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a97195ac-2e00-4f9b-9465-d68e10cb4aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b38beb1-c8c6-4649-bfb8-f0cbe9970680",
        "cursor": {
          "ref": "ce907482-5445-4fdf-833d-671e6178f40a",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "df2a0178-cd4c-4ab0-85ff-745d2d04f370"
        },
        "item": {
          "id": "3b38beb1-c8c6-4649-bfb8-f0cbe9970680",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5d57e6b4-b5d3-49d4-a5b4-41d0792fdf4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d19e25-4d93-42ec-92d4-2fc18ba92c74",
        "cursor": {
          "ref": "3b2f43b6-54f1-4afc-84a5-c9ad831ff02f",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "eb4bd71f-6df8-45fe-ba17-211b73953eb2"
        },
        "item": {
          "id": "98d19e25-4d93-42ec-92d4-2fc18ba92c74",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f7c21008-21bd-4bbe-b81b-be62525113c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6979f86-7b10-4e4a-adb1-e0a0284eface",
        "cursor": {
          "ref": "827e5dc3-5207-4b2c-8236-46a8866fa2f3",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9a6e5389-3eff-4c95-95ba-08fbaf846479"
        },
        "item": {
          "id": "c6979f86-7b10-4e4a-adb1-e0a0284eface",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8f14f7b2-c77d-4303-8d9d-06e931c29395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d62849-26b4-454c-9e49-9f865f76803c",
        "cursor": {
          "ref": "2ae20f48-bb54-447e-a746-ae299f88fb61",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0576385e-e390-4874-bdae-8ee44dee8442"
        },
        "item": {
          "id": "74d62849-26b4-454c-9e49-9f865f76803c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "55a071f5-a3a7-474e-b454-034cd7c99e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c002c615-6dab-4537-9f78-ddf7f864a962",
        "cursor": {
          "ref": "966a8cd5-4b98-48f0-8693-8661dedbf901",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0f2d6312-024c-482f-be66-895afaf1b5af"
        },
        "item": {
          "id": "c002c615-6dab-4537-9f78-ddf7f864a962",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4d107b5e-3ab9-4333-ab7e-6f02edf9a401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f02b4dc-f497-4e5d-8444-663490ddec14",
        "cursor": {
          "ref": "91c3d022-a5c3-4179-a5e7-e551cd9b6140",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "44e48b7a-3c4e-4aa0-ad96-d24d642e0dbb"
        },
        "item": {
          "id": "9f02b4dc-f497-4e5d-8444-663490ddec14",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "dc843f75-2e51-4c1a-8ee1-2df343f2c0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8846df0e-f5aa-4387-94cd-e906136f6d51",
        "cursor": {
          "ref": "bc055fa5-6d2e-4388-8a09-66e712744fe7",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "69c686c1-efbd-4e76-878b-27ae597eca26"
        },
        "item": {
          "id": "8846df0e-f5aa-4387-94cd-e906136f6d51",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "136b225a-091e-4df3-af7e-1092d13413b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496d367a-6b0e-4622-b43e-c76edc9d0134",
        "cursor": {
          "ref": "0f5546c7-c6e2-4d95-9fcf-ff1c2b3f2eb4",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3e12a961-8111-4ea1-af99-17a337a37aa1"
        },
        "item": {
          "id": "496d367a-6b0e-4622-b43e-c76edc9d0134",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dc9df0ac-07f2-45ba-a717-f3ae84d66728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90daccfa-32ad-4b15-ae82-6e8453cc7f53",
        "cursor": {
          "ref": "2fb94401-68ce-447c-b83c-a78d48409ab4",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4f641a18-986a-4cf6-b77a-d86c458f5b5d"
        },
        "item": {
          "id": "90daccfa-32ad-4b15-ae82-6e8453cc7f53",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "38f82c41-5fe2-4cd8-9921-d353b3eb7644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce32e86c-dacb-4d32-a7f4-a81e82f1a621",
        "cursor": {
          "ref": "b4b49b10-6346-4652-b08a-90586c532618",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "75f1b8c9-2e68-4385-b985-5d8ab28eee16"
        },
        "item": {
          "id": "ce32e86c-dacb-4d32-a7f4-a81e82f1a621",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "98eb7176-f903-4d24-bdf9-eeebef40c4cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a185ed-cfe1-401d-8313-ec2765ebd935",
        "cursor": {
          "ref": "e55dc9b0-f06f-47f6-8d96-48d882c053da",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3110f0d3-3aba-4617-b17b-bd14cfac66c5"
        },
        "item": {
          "id": "e7a185ed-cfe1-401d-8313-ec2765ebd935",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e8d29dff-e848-4eb5-98b5-530ffa64def8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e61003-5755-4b3c-aed9-bf1c703df6e3",
        "cursor": {
          "ref": "d888593b-f169-4ec7-bee0-28ac9bdb9e5a",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6cc5b481-e493-471e-9c73-5a9a74da4932"
        },
        "item": {
          "id": "34e61003-5755-4b3c-aed9-bf1c703df6e3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1bf59b27-4bc8-4826-a9a0-714270fcbe3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf64f6b-b994-4997-b319-c8df3de0d086",
        "cursor": {
          "ref": "6397d7aa-d844-4ec1-8e0b-92b918c5ce3a",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6d3501ba-4233-48f9-a8ba-e924b087c70b"
        },
        "item": {
          "id": "ddf64f6b-b994-4997-b319-c8df3de0d086",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c567ca5d-857b-4757-8dd7-913de3f75652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0b5057-e7d1-420b-9ac4-ece97327f44a",
        "cursor": {
          "ref": "620b4558-19cd-4f2d-ad32-df5fe7e30196",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "21029411-c62a-491e-88ea-3136b68c6d80"
        },
        "item": {
          "id": "6e0b5057-e7d1-420b-9ac4-ece97327f44a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6e44255e-2677-4efa-ad7b-d0d99675b676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5a3ebc-8800-445c-b32f-7bbaa4aacb12",
        "cursor": {
          "ref": "482ea733-63ff-4ce1-81c8-54975f426e2f",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "96ed2d94-bdfd-487c-aa69-52d3baf00e05"
        },
        "item": {
          "id": "3f5a3ebc-8800-445c-b32f-7bbaa4aacb12",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "afce223f-a5ea-45b4-a6c4-a1e8625be425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c957454c-3903-4d70-8167-e5bce1d1f55b",
        "cursor": {
          "ref": "4a9e8969-dd8b-472e-a886-d695110c739e",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c6fef683-192c-4a17-b266-e24146a5242e"
        },
        "item": {
          "id": "c957454c-3903-4d70-8167-e5bce1d1f55b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "69a56df6-3100-45fe-9484-e8c5b9325748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b988fdbd-6a42-46de-aeac-6fccebd5c2d9",
        "cursor": {
          "ref": "afcc4e23-5159-4402-b696-cc34eeccc41f",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "39d4a17c-d34a-4874-9720-ff4b62f779e9"
        },
        "item": {
          "id": "b988fdbd-6a42-46de-aeac-6fccebd5c2d9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "67876fed-1808-40cf-820e-1f58c7140e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8d4cbb-3925-4b01-88bb-47ca88ebef9e",
        "cursor": {
          "ref": "29af74d3-9fdf-44ed-bb11-557481929817",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4cab022d-602d-41f3-9863-e3f0cd49ebb7"
        },
        "item": {
          "id": "ae8d4cbb-3925-4b01-88bb-47ca88ebef9e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8df195be-f80b-4791-91d9-1db9247e7b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b535a56-abfa-441f-bc26-d385f7aa2270",
        "cursor": {
          "ref": "c77abfd5-f8d0-4aab-bec6-0d5d97b55d8f",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "77a5fa33-270e-4a29-bc73-b9381721e7bd"
        },
        "item": {
          "id": "2b535a56-abfa-441f-bc26-d385f7aa2270",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7e617ab0-dd20-4541-b76e-4825647f4952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc443c2a-ca77-4e43-ab88-25f23f6bcda0",
        "cursor": {
          "ref": "85a727e3-3b67-4097-bc02-f920d1d8d908",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "20ab178e-d3de-4ce5-93ed-169f799dd883"
        },
        "item": {
          "id": "fc443c2a-ca77-4e43-ab88-25f23f6bcda0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e72e69a3-0bfc-4cd6-a02d-66e3bed8fb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d210ad36-6556-4115-9e5f-bf9f8cddf9b2",
        "cursor": {
          "ref": "8e4c0dec-b119-49bb-8fd9-9ac4af5292c9",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "722b73a4-7b5e-4963-a7a1-9963358066d4"
        },
        "item": {
          "id": "d210ad36-6556-4115-9e5f-bf9f8cddf9b2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e8409195-bcc5-4cc0-b8d5-a9f90abf49aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77455f53-587b-4026-a8b6-2b2688918793",
        "cursor": {
          "ref": "bc014009-9ccc-4281-bc1f-9773ffd0c9db",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0a894e3b-ad38-4e20-9151-05d84604caad"
        },
        "item": {
          "id": "77455f53-587b-4026-a8b6-2b2688918793",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3b11ab15-3815-490e-a616-93d3b82145d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9298fc2a-6697-4734-99db-91b460e95e47",
        "cursor": {
          "ref": "3ca8d9df-3d9a-4527-8beb-2d8c57b0a3cb",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "eb5f215e-3a9b-41dd-9e6c-782873120008"
        },
        "item": {
          "id": "9298fc2a-6697-4734-99db-91b460e95e47",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "48b647c4-3752-4314-a85b-56b76e1acb17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c41aa6-b33f-45c3-aeee-77339f224d35",
        "cursor": {
          "ref": "ff2bc968-a2dd-4f27-baa5-68fe5a8ea250",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "507c7181-dd7f-4125-b82b-8693f9ece44d"
        },
        "item": {
          "id": "a4c41aa6-b33f-45c3-aeee-77339f224d35",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "32b6d127-9f98-4763-9b68-04b99fc2d3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bcc966-6a05-426a-b570-1182ab9982ce",
        "cursor": {
          "ref": "07ef205e-293b-4dcc-a8ba-4b12b17aad5f",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c51905aa-c42a-45eb-9b68-7398a7523990"
        },
        "item": {
          "id": "14bcc966-6a05-426a-b570-1182ab9982ce",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b75de58a-cdac-4298-a9cd-ae9d21330e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d197049-f25c-4eb1-a43f-9186d9a699c6",
        "cursor": {
          "ref": "5068a598-7365-4f64-90e6-93918400f47f",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6516bb7b-d786-4fb0-919d-764af30bae37"
        },
        "item": {
          "id": "6d197049-f25c-4eb1-a43f-9186d9a699c6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7ba19772-8822-405b-8114-d324f69885bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0a7d9f-d1c8-4c40-9039-292ba980eb94",
        "cursor": {
          "ref": "7d17fa81-1173-4bf7-97df-0cbad95afc1c",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "68c05b4b-bd93-4353-a233-e03a67c0b220"
        },
        "item": {
          "id": "db0a7d9f-d1c8-4c40-9039-292ba980eb94",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "fe604efa-bfd6-4c76-96d3-0e70bb2a490a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083a03cb-ceec-499d-b6ff-9349cfacf380",
        "cursor": {
          "ref": "a2cb1c3f-06f4-48f3-a69d-936fcbac00a9",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b6d2f6b1-c8bd-43b9-900e-6eac3fb0866e"
        },
        "item": {
          "id": "083a03cb-ceec-499d-b6ff-9349cfacf380",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "de432581-b63a-4844-839a-c89a3fba53e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c261838-3212-4ea9-9aca-adaa3322004a",
        "cursor": {
          "ref": "ecc8a3bb-ad57-4446-ac8a-68de0c2621d7",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fcd0a7a4-f623-4890-ad64-8b693392e7ca"
        },
        "item": {
          "id": "5c261838-3212-4ea9-9aca-adaa3322004a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "459111ce-fff5-4d0e-9e5f-41009df44b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5aa696-0b78-4b47-aaa5-5b7e96b9c25f",
        "cursor": {
          "ref": "25f011fb-11e3-4a36-9647-064f44e784b3",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d98983a3-eea5-4c00-8d44-6291ad82d9f2"
        },
        "item": {
          "id": "7f5aa696-0b78-4b47-aaa5-5b7e96b9c25f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b6809f15-64f8-4f5e-ae4b-ee4ea578a304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab3d144-569c-4215-a44f-694056a3f317",
        "cursor": {
          "ref": "d33acf24-de2f-4205-9ecf-8792cb27ba0c",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "543649e2-d14b-4caa-9075-20b5637584eb"
        },
        "item": {
          "id": "cab3d144-569c-4215-a44f-694056a3f317",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "86b05250-dbc6-448b-addb-68db053b9664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c59c97e-9504-4a17-898d-86b6fb9449c2",
        "cursor": {
          "ref": "d524be2b-d59e-4c21-9a2e-f6d7c8eecdca",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0fbeea36-d9e3-495e-81af-0b37f96899ee"
        },
        "item": {
          "id": "8c59c97e-9504-4a17-898d-86b6fb9449c2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "213d798e-bdc0-4c09-82e7-8a365c44ce25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6700b178-4de4-4e03-b758-a9c29edd694f",
        "cursor": {
          "ref": "d185cf14-9953-4adf-9525-639b56a6a139",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "356daf22-fcaf-4ff7-a0d5-da2f51a68707"
        },
        "item": {
          "id": "6700b178-4de4-4e03-b758-a9c29edd694f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8c07e2da-0c88-4e6f-906d-ccf18296a812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f722520-e80e-45ce-92a0-a6a857f5bfca",
        "cursor": {
          "ref": "6f1382dd-d292-4c46-8759-e7a60e89ec24",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e2532824-7018-48ec-8fc1-7243e807c8bd"
        },
        "item": {
          "id": "4f722520-e80e-45ce-92a0-a6a857f5bfca",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2173ac1e-3d23-4a34-a4ae-7911cf73eb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c410595f-6211-46f2-a410-2d666b8ffa84",
        "cursor": {
          "ref": "c86a9a49-758f-4ac6-a2a5-1d095fcaab5d",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "50a41363-0282-4a85-b639-2951a13fc848"
        },
        "item": {
          "id": "c410595f-6211-46f2-a410-2d666b8ffa84",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "98fbdaab-1b3f-4e7c-9b38-c232416b37b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f99efbb-c7dd-4a87-a5db-7fe102431bfa",
        "cursor": {
          "ref": "70e6af84-a082-4d3e-bce6-87a4cd24bc1a",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "23b5097f-a9ea-4a55-a9e2-c2c993977949"
        },
        "item": {
          "id": "4f99efbb-c7dd-4a87-a5db-7fe102431bfa",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "35a74ead-30a3-4959-83f7-09749f7746f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc69bc0d-347c-4ae9-b87b-1c0a6048209a",
        "cursor": {
          "ref": "d16c6f68-e8c4-47c6-b505-9cee017570f3",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "42e75dbe-57b8-43d4-a125-e12c1c1a1314"
        },
        "item": {
          "id": "bc69bc0d-347c-4ae9-b87b-1c0a6048209a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d6832d04-3978-4281-881e-682e3e4f1e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f3f96e-0d15-4d62-b161-c41502f9da9d",
        "cursor": {
          "ref": "dd49f00c-091a-4177-ab08-40fd10e3832f",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fa6fdcc2-f1d1-434a-9a3f-32dd2970bc60"
        },
        "item": {
          "id": "d3f3f96e-0d15-4d62-b161-c41502f9da9d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3cbc0d3e-bf89-424b-a8d7-705b797b1f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e6ae45-4337-443c-89c7-85363036a773",
        "cursor": {
          "ref": "698a7344-b3fb-466d-ae76-473a82a5b23d",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8c17a8a9-dbaf-4ea0-8070-1fc94c56284d"
        },
        "item": {
          "id": "99e6ae45-4337-443c-89c7-85363036a773",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e892fa1c-85f2-4e7f-85fe-8cfe566323ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa651fe2-bb19-4c6e-85ae-bccc5dd34f3d",
        "cursor": {
          "ref": "ef0b4baf-9e92-4354-a8b5-3795033a0633",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "da817f91-c1e8-497e-b406-8b4ef13f53f5"
        },
        "item": {
          "id": "fa651fe2-bb19-4c6e-85ae-bccc5dd34f3d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "47e51bd6-1d81-4727-bead-273d76adad0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da7ba82f-e1ff-469a-a6a6-6d6e1eef2954",
        "cursor": {
          "ref": "2c84ffd5-066f-4392-96b4-608876d86ee0",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "82a22896-2c72-4066-8ac2-b0bb63a8323e"
        },
        "item": {
          "id": "da7ba82f-e1ff-469a-a6a6-6d6e1eef2954",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ac6b25a3-ed9e-4989-838f-ba84abac2756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022c34f9-c1cf-4ad6-bbf1-5d3b57ba6061",
        "cursor": {
          "ref": "a64ae5de-f539-48a6-97ea-d8c2091502f5",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "069d1be4-3fb5-43de-a265-81dc37eb031d"
        },
        "item": {
          "id": "022c34f9-c1cf-4ad6-bbf1-5d3b57ba6061",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3c15446a-31cb-46b0-84ac-ddfbda24361c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a7c31153-965f-4f80-8b14-4609d53c673c",
        "cursor": {
          "ref": "5b84f006-a6ac-44e1-a5ec-e51c1094ec73",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9f940bca-0dfa-4356-b719-5976368ffefc"
        },
        "item": {
          "id": "a7c31153-965f-4f80-8b14-4609d53c673c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "95a120d3-5caa-46ce-a062-0a9e9b932e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "38eb6b47-fc3a-457e-b8e7-beed92330115",
        "cursor": {
          "ref": "84539d00-40e6-4101-adc6-2283d6f193a6",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b1b55ce0-1037-49bb-9614-574f3cb5ab7d"
        },
        "item": {
          "id": "38eb6b47-fc3a-457e-b8e7-beed92330115",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a3244252-70ca-4235-85cf-3e3f26905095",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0003c17f-c9ce-497f-a83e-8de1e3b99a03",
        "cursor": {
          "ref": "984fd354-4d4a-4cf4-9a0e-dc5b81976284",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b9e844cb-a625-4956-b609-f3223365e406"
        },
        "item": {
          "id": "0003c17f-c9ce-497f-a83e-8de1e3b99a03",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f50cf9fa-ff62-439f-b818-aeb2dadefb6c",
          "status": "OK",
          "code": 200,
          "responseTime": 2713,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "71900963-39a2-4c73-917d-b699c98d0c45",
        "cursor": {
          "ref": "90de8f79-41c5-4915-9519-77ac71aa6393",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9aedbc30-29df-4728-8cdd-e12abd28d5f0"
        },
        "item": {
          "id": "71900963-39a2-4c73-917d-b699c98d0c45",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "93f06c85-e579-452f-8e57-6e29e3856375",
          "status": "OK",
          "code": 200,
          "responseTime": 2273,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa54d6fb-220b-465b-be2a-7805cd655d93",
        "cursor": {
          "ref": "a3400ca2-835a-4e69-bea2-f16f0a277db8",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e50c70ff-422c-426a-9869-589fd9b524e5"
        },
        "item": {
          "id": "aa54d6fb-220b-465b-be2a-7805cd655d93",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "aa54d6fb-220b-465b-be2a-7805cd655d93",
        "cursor": {
          "ref": "a3400ca2-835a-4e69-bea2-f16f0a277db8",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e50c70ff-422c-426a-9869-589fd9b524e5"
        },
        "item": {
          "id": "aa54d6fb-220b-465b-be2a-7805cd655d93",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "aa54d6fb-220b-465b-be2a-7805cd655d93",
        "cursor": {
          "ref": "a3400ca2-835a-4e69-bea2-f16f0a277db8",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e50c70ff-422c-426a-9869-589fd9b524e5"
        },
        "item": {
          "id": "aa54d6fb-220b-465b-be2a-7805cd655d93",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "f2f1b84e-e829-4378-9a84-5dcb902b45bd",
        "cursor": {
          "ref": "356a96c2-7611-409c-aeef-609b903ae25e",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1b2811e9-e83a-4aba-9214-430381a18fd4"
        },
        "item": {
          "id": "f2f1b84e-e829-4378-9a84-5dcb902b45bd",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "dcbc99bf-b693-4308-afe5-b54aee54607c",
        "cursor": {
          "ref": "91e2cb9a-9230-4080-9ed4-67a9d5130d31",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3f0f9088-c1e1-40e8-98c2-421661f534e2"
        },
        "item": {
          "id": "dcbc99bf-b693-4308-afe5-b54aee54607c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "dcbc99bf-b693-4308-afe5-b54aee54607c",
        "cursor": {
          "ref": "91e2cb9a-9230-4080-9ed4-67a9d5130d31",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3f0f9088-c1e1-40e8-98c2-421661f534e2"
        },
        "item": {
          "id": "dcbc99bf-b693-4308-afe5-b54aee54607c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "58fea573-ef9c-4823-b48b-19a00f62e460",
        "cursor": {
          "ref": "6efa2e49-edce-4dcd-8ea3-e31111c47e85",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9a0e1129-9aa4-4b45-92f6-3915e110794f"
        },
        "item": {
          "id": "58fea573-ef9c-4823-b48b-19a00f62e460",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "0ea462f0-d273-469d-9c8a-f33c6f8f05ad",
        "cursor": {
          "ref": "f8089502-799b-4520-a811-d38509ae7f0f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e39eee6a-ac67-4401-9bc8-6437389aa1ab"
        },
        "item": {
          "id": "0ea462f0-d273-469d-9c8a-f33c6f8f05ad",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "0ea462f0-d273-469d-9c8a-f33c6f8f05ad",
        "cursor": {
          "ref": "f8089502-799b-4520-a811-d38509ae7f0f",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e39eee6a-ac67-4401-9bc8-6437389aa1ab"
        },
        "item": {
          "id": "0ea462f0-d273-469d-9c8a-f33c6f8f05ad",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "9e0cd064-dcdf-41c9-8724-edeceb9a995d",
        "cursor": {
          "ref": "d3103f1b-baac-43a1-899e-99256b3ec2ea",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "014753c4-c0c9-43dd-a72c-7677d08f28c1"
        },
        "item": {
          "id": "9e0cd064-dcdf-41c9-8724-edeceb9a995d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}