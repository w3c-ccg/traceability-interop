{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b1522ed8-0f61-47fd-ba25-1293c3224aa0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "992e5316-3aa9-47d4-afdb-d74e70d9287b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "345c4083-03b2-42e6-a82e-da8625fff9e6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7e0f3f28-088a-42da-bb10-752849715a74"
                }
              }
            ]
          },
          {
            "id": "1fcf4973-c132-4d9b-96fe-99a1174272ed",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27700afc-c475-486d-a7e5-2d9defc4bab4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b48b2cda-f2f4-47d2-92fb-fb54a0f8a2ac"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b54febb7-862b-44e7-a4df-28607a1c9990",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d89bc6b8-fca2-43b8-bfda-61485c338873",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bf815595-72b7-4180-bc52-500fb56beaec",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31699f09-dfb7-4289-a7b4-580892cddb1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1cc5b6dc-cf6e-4ac9-80bc-595383af8a18"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3e5f6a96-26be-49ed-bf20-69eef9934027",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "945fab01-0178-452f-b528-d33fe6a88ead"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "449fd68b-8b25-4845-afca-6a2a380cd035",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f604984d-7ecf-43d2-8dad-355c374dcc10"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "acebc5e1-a35c-46fe-83cf-5cbb4c25ea5e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f4f78b23-6275-49bb-884e-b45f63c2254d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f75ee0e-7c05-4bf0-9586-d6c5aeb1da4f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b32e08a7-52d1-4c2a-b74c-57def7f10f12"
            }
          }
        ]
      },
      {
        "id": "326544a3-9b20-4316-9492-deb71363c43f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7d7ee8ca-92a0-46b2-aeb1-c5eca7cce100",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f46e8bc3-77bf-485c-b60f-bbae8fc331af",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "13bfb79d-66d8-4ff2-92bd-1d267a0f07aa",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9578dc-ecdf-4235-b956-5604d2d81695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ada371a7-fc1a-43f4-ae0a-2933c7fbc0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37032a78-a4ce-48f8-926b-3f216f909766",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f3ea75-b044-4917-bca2-569c4a861aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "373e8ba9-0bdb-4263-b062-3d928f6448dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2696b2-9dae-49ae-af5a-299e8304de66",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aaedbe9-7e98-4c28-bff8-ce8c886937f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "842c2fd8-6589-47fb-b527-59670db62b96"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "15522ebe-1b33-46b7-84db-ce7137d78a77",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8efc326d-2bcc-4d1c-a49a-6b675c75423d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db587a71-4ff3-4822-baa9-4d0a425abbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04fb4b9e-e301-4c62-a2bb-45275ec70c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84436fd3-a7c0-4aad-bbdd-54c61c6e596f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8d6fba-9c29-46b4-85b1-ec2a4996baf1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ffb4ed10-8c79-4107-b77d-ad5fc7d4a5c0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ed63735a-1de2-4aae-82c8-fe85069eade8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0902a65e-f5f5-4317-bcf9-eed18415a4a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b375cb8d-0f5a-4ffe-9432-857991772bb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09ca7884-217a-4562-beec-05783f255b21",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1e8320d3-d2f0-48e9-89ec-ac1a6ae97f33"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc0f850d-1094-4f56-a6c4-886c4e956bc7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ffa5f231-63e7-4527-8864-c3dfdae3335c"
            }
          }
        ]
      },
      {
        "id": "9f2ff7ac-9974-4cee-801c-2713b0322a8e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "03be5f77-2781-48ca-80b8-3faa3ab7950e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "065d7863-97a1-45b1-a07b-2bf521759d64",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5de60eff-85c3-461f-b9d7-a12bb76de51a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2734139-0f19-452a-a31c-d152dcbcd269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57180546-61e8-4c50-9b82-238df78bff81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6f2e57-c108-4971-a248-7c1e4ba5194b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03b5e7cd-ebec-4bc9-abc5-5ed39069ca00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7aea6ab-b54c-4027-a9b5-1f3b1b7c7e88",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3eddfa-b7c7-4f30-8b19-5cf84ca2f4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ac3a48-3beb-4efc-86d7-000ee6675d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb604e46-b3f9-4a20-a543-f793ca5e4265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a23e8143-a56f-473c-b6a7-02187261407d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea8f41c-388d-47d6-bca6-d10bb0b542a4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ddf501-bf66-4991-a4d6-652f56385525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3dc9655-79fb-467c-86da-4aefd1c8a625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f735593a-5439-4e76-8f6c-b4d4223a32d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e77f50c6-c9c6-46fd-a1f1-d9f004c46171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a2f68e-6715-4e9b-9812-c2a148d36c43",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1ef5ca-435e-4fff-a352-d5ba15b29d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ffeb5d6-43bb-46a4-a312-d37da607ee63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caa99f5-ab9f-41bd-a3cc-ec95f43e2f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53522a13-c7e6-4ad8-b97f-6694ff3a7fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438693c6-79fa-4d29-adfd-55af17987e17",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1264ba60-6fae-4710-a767-3fbe80cb068f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21104129-4f15-4da6-999c-03f8b6436216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba870ed2-bf07-4359-8e2e-7fb9739763f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47749073-2901-411b-a1d2-b96ded498646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f193c0-1b97-4587-8e82-df785e3cf3e7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29c7a95-b3a1-4ba2-9955-24420d130f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf579b4-0555-46c4-9115-4efd4cda39b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b0294c-f506-42ff-951a-987f6d10445f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "904881e1-01a3-4d17-b291-ea4e8c58c011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e153566f-92eb-4da1-ae86-99807a8a42c1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68108a8b-e75b-4b64-b3b0-57cdc5e45142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efba072-7de4-4982-84af-ba8a957694df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3d793a-a02a-4b61-8046-f9fc06c3c14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "631ec701-a53a-430b-86a8-9628ab948a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2e405e-9b07-49b8-a1c0-c1d57e4eab8f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c443f22-6c48-4b09-91d0-b7e754c626db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b8c791-a91f-4b4c-8574-c2c22da1c524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489af8ff-005a-4b24-89bd-b92c2b202153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d7d1974-5ff5-4c4a-afa1-8b9a9ef49016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ba5543-42a1-4bf1-a034-3a5bab388862",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e5658f-7802-4915-a204-b70d469221e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "158cbb04-d0b9-4017-b2bc-ad5155b3a135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9eacf4e-27cc-40b2-b78d-fb843db4cb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01cfcef8-d5ed-416d-ba29-94edf0df05ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fcba58-7fc8-41f8-b74f-a190ac84f15c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0d3a93-487b-48fa-9b70-a5d69ee58b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d19d6af-5738-4fb7-a94e-f10a4c1cf331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fafb8cf-f9ef-451e-b5a3-591f00f9110d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62b1e544-5ae4-466d-9968-002a983b15b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e1eadf-56ba-4a24-b9f4-00c9bf4f500b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0fcd76-a124-4392-8a6d-4b661c03bed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4adfe5ee-b3ba-44b5-a19e-3fe31fdc8730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c70859-5bd8-4dbf-a019-0bf3cc82cd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a546dde-db4b-4563-8df9-97f8886c3368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1eaf1f8-a1f1-4987-8d52-f6e2e649759b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4218a2e9-6a4c-4a02-83b4-961276bf543f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb262f49-a15d-4af3-999e-43ecfebfe01e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cef10a3-7bde-41a2-8fb4-0bdc640fa5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d76069a-3f1a-4bcf-b6a6-91fd0113a7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e3ea01-dbdf-414a-95e8-032abc859c59",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da2b3f3-83ff-4410-95de-c33c07b86302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3d7ef6-98f1-4d32-aa26-d5f5c602cd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbbb8dc-e25a-4642-9a0b-ac9f9e41c7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4e43c04-11f0-4edd-8e28-2f2542dfede5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b69ca0c-4f47-4353-9f6b-2627059330a0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a398d874-1c89-46f1-ad7d-4089e8fd4e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f068bd52-23ea-4f9c-9614-fbc72c99a2ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f4d90d-6ae1-435b-a9f8-3eb43f91648f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ac09ad8-2565-43e0-b222-e4cae2b97908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac04fce5-7fd7-4a6f-84d4-6317e93cf568",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43991343-b078-4556-b145-b9e0009d1016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc45e2e5-a2f3-481c-b233-d34f7ec65b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddcb602-5798-4042-ae24-4b7e22e82db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1281fe4f-4efc-4d62-b1b5-38695b6b6502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6b587e-cfdc-44f5-b083-505aba9311cf",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c189a34f-426f-4016-b28e-e03911068d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b684c76-8c52-4403-a9a0-cb440ebafe00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426120f4-5473-416c-a39c-350f693bd062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67bc897c-fc00-4838-96f4-9441c495cfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d942c0-f72c-4f68-b5d5-3cc71f099445",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715e7af2-9bd4-40fa-b542-ee3d4dce5333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e02f931-e53b-4ae6-a0ba-48d580356486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ee5b3a-bcf1-476c-b6a2-90772e85a12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b10c845-63e4-411c-826e-007f3720417a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d77565b-f5c4-4cea-88bf-7d9d2bbf8920",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dacc1a8-40ba-445c-a7e5-0afb9119fafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2eff7a-c8b4-48ab-a194-3f39381a4d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3b4fa4-086a-4d8c-ba4c-0f92acbe0fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f183056-4811-45e3-8723-be4839e2e193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e35a4f-750d-4d11-8b11-4af8e36f73cb",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8acd74-93a5-4377-92ab-869e0d23ecb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f6acb16-7695-4db5-bdbd-144d106daff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14618cb-a82a-44d0-8841-b4509dee6a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5780c2eb-20f8-463c-8507-c7edbb6f3cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d809132-796f-41ea-a45c-edcb14377ba9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344d5948-7f35-4c3e-bcae-2fe7cc5692e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a351ff4-2baa-4a5f-84d7-6e2989c157e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3830cd6-28f4-426c-8b3c-e30ad98cb1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56498c87-ef13-44f0-9d84-637bb5cd033d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a37847-c131-4953-85ae-03bb11b87fc5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d7415b-48af-417d-bd75-31b0fd231b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "840aa9eb-cbdc-40b3-a1aa-3c199243bddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c076f125-86bd-4683-add2-7aee58401b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07754862-ce81-4e67-b01f-130a49a2d90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56b3b8b-332b-44e3-8ef3-ca0e36fde144",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26ff87d-e7cf-4d92-976b-5e094df3a2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f88c00-dbcf-4d77-8cc5-89175fb81141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423d9283-3808-42d7-9d22-12bcea83f815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0da5bb-90cf-4eb3-a65e-c53cbd4b5489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff28e614-635e-43aa-b0d5-d89e93590d4a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a316ef4c-a88a-4c60-bf25-76bcda486591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b37d56d6-5a88-4454-945b-b84ed214f2c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc90427-2666-4df8-ae0e-8e44f5137079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e0a95aa-fea5-49d6-ae47-ebf9dc8e9a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718106eb-9e24-4f5b-8912-0124aaf1474a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66e5750-4ed3-4afc-abbb-2082a4f6edba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769d2c8d-8bd9-4485-a081-d973f0473f5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3aeb654-4dde-4796-add9-180496965474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "580d4c14-4a64-4f3b-b5a7-c83c66374543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d89519-7f15-4576-a231-2fb9ef8d574e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24df543-20c2-4d90-8a73-c31e4d812bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4c0628-5215-41cc-b3c2-c0d9b7eb53c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51618e52-a17c-4e9b-81c5-995e75c8f3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5013bb8c-4c30-4066-9ec1-a3b8a166c5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e64f742-64d7-42db-8ac3-df4199cc33bc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32f0f86-c85f-428f-a983-d42ab8003bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e970e802-944a-4c2c-9fd5-a496d0bd7bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aac8157-5c63-4ba6-bc16-1a0f5ff6e67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "78389590-94c5-4e81-a608-330187c59ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae613c61-97d6-4e04-bf0c-19a125b41195",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54277098-8f81-48a2-8413-1e397a20c972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "848a0bb0-f6cf-40fd-b3b9-687cf53420a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8236c4e-991e-419a-9e6b-6978bc770e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0bbbe2d-6070-4aa3-9388-f5732c287832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639ac36a-a361-404c-ba48-b5fbae9089ef",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c78a16-fc9a-445a-9ddb-1d61c861c963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770af73f-26b7-43e8-8dfc-69de4fafd91d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86240e3a-ae21-487c-993c-4a5d1b75793c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7745586-5acc-4055-a9d4-413ed0aef1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c49b73c-795d-41f3-9348-9f1c651f42b2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598d1e2f-8da9-4454-be9e-b9d020318e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e633482d-7725-4bc4-88ed-73e54e7c7fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4756d33e-f9ab-47fa-92c6-95ac40d8d925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4be79a28-8b43-4780-b018-3d459e92646f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8484671-84a1-4444-b3cf-e7d652ada884",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9327cd-012d-40bc-8ad0-9c75d3212f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8525f758-30b5-4e82-bcff-e98a68eb3574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852ebcc5-5ee1-4124-ac42-dc64bccb4c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "31a8f4c3-c3ac-4c85-9c70-10a583f0fb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5743304-bb18-4a51-b797-96968874900e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607ddaa2-33d3-476f-9690-294933efddc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0233f8c7-4aa2-416b-862b-f3d6cd338f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23fa94d1-e012-4d33-8fea-0a02974b9e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b85e511-b9dd-4224-a451-40da932beb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85030828-7a94-4d54-b443-b2faa10232cc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df04a93d-d6b7-422d-9df8-e01d0d0cfd5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c253fc16-7fd4-4daf-9483-857e50e93e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4099c6-3c65-407d-9ff5-db9d6c21c56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "489dab2d-4852-482a-8c09-c8654b59a460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9855c8ff-d512-471e-9da3-763c5ee1e6f9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e0a4f3-ff5c-40b5-b245-1ad80fa2736d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c00c76e-f988-42b5-b201-46f685db232c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f5ef9a-498b-4a53-9ba3-ae61e742f7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc73f4e2-779c-40cb-8acb-9a93da498342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b9fc8a-2fb9-46d7-bb08-e145d43fa970",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71028fc-f30b-4801-9124-54d967e2bd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bf8b61-1a4c-4b27-a613-3014d953edfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebde1bf9-bb12-41db-bc23-07a0720b0403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85889967-9b7e-4a42-bcda-a93fab7bc07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf25e48a-de06-486e-98b6-37aa24c49c5b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317391d8-e255-4d26-8022-1425e23a270d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc989e0-a79d-428b-bfa7-0c622bd3ba82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906ece23-6403-4ac9-adb9-c98711c8f71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ea9818bc-8d79-4e62-a41d-c13176731327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e752bc8-5d4c-445e-8e31-73fbb9888f9f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f74672-e729-452d-ad7e-afa62a0aa774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6513b1e-84ab-44e3-bda9-aa55cc0b7728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30358737-14c8-4873-b6b5-680d17b0550e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "440beb34-ee30-4c77-99f9-cf554fda0744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec06c1e-80ca-4bd7-aadd-d0015d16c9f0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915c77e5-0dfd-4d47-9f99-bc1dc4f3b24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d3d299-2f84-4e73-bc79-062b09f4ebb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1669d19-30bd-4c75-9de7-687e333936c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ede68ad8-0b7e-4d9d-831e-58491a97739b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81b73877-c5aa-40db-9c3a-43f3dcf9f3ab",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970937dd-8861-4b98-85da-0af950f0339d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24adf668-36e6-453d-b7a4-3375b9fb76b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6071ad1e-971a-4d74-81e5-316ab11f76ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf35bc6-9062-455a-a6f0-742eda065aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a30d71-b3ba-4dee-9c15-d2087af14dc4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6cd85f7-78d0-4025-a57f-d543e38b6695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9bdfe48-a8a5-4905-b019-225a1c391a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95830efc-feb5-4412-9d0b-dba60f27ed8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b1aca3-ede9-43d2-8abd-820143c828ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11006c9f-ebeb-45c6-9076-e257d8ad5373",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856e5c33-2f0a-4812-9d23-3e982062d17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da66227-35a7-4ab9-b6dd-5699f7060ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fa888c-01cd-42d1-98f6-9afc079f6799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "075a862e-71eb-4b52-a456-343c1bef7163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d4fcd2-b89d-49ce-adf5-22587da06f55",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53a83ac-572b-4b8e-a553-cd8f3a6356fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c65a55d-ff58-49fa-96c6-71c9ab80c4a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc1c652-e0b4-4b50-ba40-dcc08873cc52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "56d1ffaa-4fa9-4680-8e63-95943518692b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55ebb9e-515f-4fbd-ba3b-573c1174d807",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564c8e8f-0640-4869-a954-c068eab20cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e223a1c-0dd3-4583-9ce9-69ae441ec599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f071115c-1190-47d8-b56f-32de40f4daa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6f50b6e4-45ea-4acd-8c67-10b1e3aa98a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d01533-93ac-4fb5-b6c2-9dce32c09335",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2432702d-20c9-48df-90d8-9a1c683065f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8ddce5-8ad5-4376-acb1-2be227db6729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d748cbf-4002-4c52-8790-301f2cd4d2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "202891cf-e76e-4246-8125-44f8a0d5490a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5328364e-d94b-431f-be0c-5a292dffcf07",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72c4ebd-9a04-4606-a7ef-2c83f5a0c8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a0e684-eb0b-41f6-9980-1a1ae536d38d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6908cd64-fe37-4b4f-862b-3fa9bfb079d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "785a6451-c532-4d69-ab45-5e7a47efe7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4352af3-ca19-4177-8d52-e2d45482ff43",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585a6166-077b-495f-b3c4-89cc0ab52da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f41604-021e-4dc8-907d-b465489b0c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406dcb51-0d7c-4e64-9ed6-01df366781dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d16f521-87d4-412e-8880-cd822527711d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6498b6bd-82bf-4b5f-87ba-9e91be3d20ee",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b80ca3-eb8e-4002-a937-0ca87d794af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9f0a6e-549c-4757-a4c3-68d4c9109362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070bdabd-3f42-46ca-befb-c28ca63a93a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "112c3d02-9ccd-4e1b-bfae-f0796e277f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661c4c30-2e80-4e21-b986-6d8c35a038cb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6367d5-af25-489d-9789-b4eb98304841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88eff885-8b81-4670-8b9c-e5d57694abe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba902b3-c4b1-4981-9938-9fabaf88035c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0831e2cd-124a-4a53-8136-cee618b29ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9e5933-03d0-45f9-b9ef-fd7ba2a4acb2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3823b50-e6bf-4f88-bb49-99226f637bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf2175d-d31e-4326-8fc8-71c4e12e7c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ffa683-7054-4ed7-8205-7c4ea4aa5b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "532e4335-6f91-405f-a340-ecc430423e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4348555-4e60-4c97-9b46-5a06b7838457",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5f811a-be3d-4d83-8695-13a902040279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0139b4-57b8-4c78-9793-ede6d6965e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451ebb88-3eb9-4441-a884-c315969a6c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "481fb326-731c-449f-912e-e5285787581b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a981cec4-97bd-403a-a3f9-8eab5f6620f7",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb31b901-71ec-4faa-b08c-68e534b3bf5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f7ea3b-f7c2-4c72-9686-ad7ca857dea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c62659-a6c8-4854-939d-2e830a1380b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db189df9-0e87-41b2-9a0f-6ce75d3ffab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc64992-39d0-4e0f-b66c-58eaad30c20c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797be599-ba3d-4c2d-a728-60554530ade0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4356d9-296d-48ca-b52d-8cec5703c89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560c6ea2-4d12-42ad-b625-dff52e12d726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee1e7054-2915-412a-8571-48a69188fb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d953acbd-d9dc-451b-b820-350074648b3a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280b6748-2ed0-45ef-9007-dac9d04175e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c14f21-1805-4279-812f-8b4c97dc3910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15b6ade-58fe-4ee6-95bc-53cbe2e8a7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "90c8c2a2-66cd-490d-8b63-f7671a20705a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f60bb0-dd07-4877-a0a1-9beb7ffa8e4f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39c1ed8-5766-4dba-a718-70eb61963efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416fb469-164c-4095-9a52-e74277da309b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae98ec5d-4512-4e0a-8b11-1d8332f32970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdf834e-8315-4ed9-8682-5c1dc5a2edc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4055d5ad-7694-4db8-a3c6-5630e107d892",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381e54d6-04ac-4052-b1c6-90260e9426da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c6a632d-c28e-42a3-b094-98c9ee3841a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d258d68a-b327-4749-a45f-34b2ca5ca548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4ef056-ce2a-41e0-9456-2206fb06aca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48261ddc-63f6-42bd-b054-102a4b6b103c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7505730-c95b-4fa2-9a88-c4f8f9f70fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7424df33-a4e0-4d98-9227-0c025d13a997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46164aa3-6642-43e3-8f32-ac207decc28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3730feff-2f0d-42ce-9904-a17d18e30fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684f0e67-67bf-4c5c-98ef-509b57c5100d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b9d10d-fb36-43d7-94bf-0d1688170982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b5bc9b8-929a-4a0a-b450-df8c8d657777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956d2643-7949-4691-ae5d-76370f565395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "55904a6f-c06e-4b78-bd42-010d0592477f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee58bb0b-5a98-48b2-bde9-2d8a4fcfdce9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906a47fb-b423-4f22-a5ef-5559d9803b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b8076f-586f-416a-a578-ca8bf1793b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97edc943-b129-408a-b0d2-b06f948b254f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3bdc71a-981e-4f74-a286-f5951cfb5722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828f3f34-5d64-4002-ba74-2c2af13b516e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920c7a93-9ab1-489b-80ba-4c8b36e92dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809bae21-32ec-4f20-abf2-07ec972477ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ca1b78-ba7a-4b2b-a78f-2f188df9f82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "37592128-4aa2-42f0-a522-1a745a38389a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcfd081-76f6-4512-9cf5-da810fb64a09",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cce9ec-51a7-4c0a-bc7f-4237c0905eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d10036a8-9411-44d6-a1d7-87d826609c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5357633-4c9f-4705-8c2f-b8324961e066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "26d67d46-b9bd-43d9-9711-3d4e941315f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce195e0f-66a3-4dd8-858d-ee17091fa22e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db567d8a-c7b4-43ec-9f0e-70cf780deca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e100a01-522c-417f-8199-a2f126ce2d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc512e7-6573-4bc9-ba39-058bae7d2eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9dbcc8f-247b-4058-94dd-1b4d0f9ac98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f8280d-69ce-4acb-b338-e9cdc8bbd09e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8289632f-007b-49bd-bbfb-75b5996ba37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74332f81-ea13-4429-b5ec-83c956492fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca4d25d-548f-4c08-9481-92edb39321d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1de6f572-0525-473d-a361-e76abb05cf18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80b9db5-7597-4998-a031-5b8ffa71f3a1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6cbf8d-7b9c-464f-a950-933c430c2a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e1ad9e9-d79e-40e5-881b-d2a140c16f4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3acdf066-31db-4447-835f-88e4863ba0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9d4435-e9c0-4568-b703-9c15509bd80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7973407-3bb6-4752-a386-3b3696f76033",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b350f2f3-89bf-4619-a80b-389b347752f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05d4bf9a-e140-4a94-b932-0a79fdea7954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b03403-5713-48c6-8e8f-672507e2d662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2101a3a1-c431-44f1-b12c-9c6487258290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554b1486-2132-4556-971c-38379cf72e2e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c004f18a-af23-4e51-b676-949b9ae62a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "827c1b59-bfa5-4b9f-999c-4c58d2024d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36210ed3-f9ef-4840-9c46-af48e774a9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5d7b2e-d67b-429e-8fd5-a34fb3f7cae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a31eb0-3fad-4c03-938f-838efd571090",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bc7bd9-f4a7-413e-93ae-e0b480070dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8dd3f5-2d65-4f8a-9f4c-cd88112da2c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40db43f-597c-4f15-b341-4bcc32ffb5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3add27cb-5f05-4226-8d09-595b43cad2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9122ceeb-c679-4de3-b063-cfd2251c7caf",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aaa1558-24db-4a9c-aecf-445197c4ce29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0d95ed-12f2-4e3b-bc67-adca33ce2651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da489627-4a7f-4fb9-9b92-00cfadfd7981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8c36da-c8fa-4519-9f15-96984f4e1535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18857510-de3d-4ef2-a469-08508a77110d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9224536d-91f0-42a6-a4e5-4f5d36e41b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08d91fd5-2b2e-45ce-a5ea-30901b2b6a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156aea76-25ce-4739-9442-1598bb3e10bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c5c9d4c5-2dc2-4c5b-a3e4-fca8429e1240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99019551-f562-4e47-980a-c4c0f99f104e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb904efa-f4f0-4c18-bf6e-474d251a246d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e176b2e-0166-4f19-ba0e-32a764638027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e735687f-bb40-4a30-bd43-05d3d8d79980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "084a8bac-cd5a-41b5-a61f-52d83a5ddce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e41b5c-6fbe-4d77-bf07-9f996f456f3f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc8593c-1729-4f01-9a32-60e7e21ac22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d2261e-e36d-41dc-97b3-6f2d92533d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736f2d83-7bda-4f2b-91dc-07652a650220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ee9dacc-064b-486b-b57a-818e2c8a14e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952bba2d-215d-4405-ac3b-5881df98a7ea",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ef104e-7120-4d42-97d2-977ceb66d0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113d848d-8400-46d1-a891-707b5e31f88b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18191242-b3e8-45bf-98b9-52da4d4e935f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a70b1a0-f947-46da-b5c7-e5e7d1b15153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126c8533-e6c3-4b65-bf86-19e7d3e4863d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1512aa43-6783-433b-9752-64a44877a730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2a68a21-7db6-464c-9489-2a3c4d1c71c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2716ae26-3299-418e-8ceb-04b52c81587d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eca94ab-a862-4f63-8d1a-a06790ea7e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a5f6cc-d5cf-4dc8-9977-446f4700a828",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920e8ae4-ebac-494a-8594-68b54f7db0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38944b15-2a10-445c-b329-d7c27dcf8e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0878e98-c315-4e07-888c-e37ee84a22f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f655930-11c7-4411-a9c3-122fa176b973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfa3ffc-cd7b-4902-ace9-44de513ce26c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b36ce4-d7ca-4fb4-a6a8-563fe0b20c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d3def0b-42a5-46fa-b37d-18c28eacffa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38a466a-af94-411c-bffe-8804e00fea39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fe6a559-7895-4e98-aa3f-9cabd66ebe2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2bb621-ba68-4a24-8e61-15581b0aeaf0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eaf286d-9fcc-447f-9790-738c0427ff00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09e06825-2dc1-47f1-8239-32ecf20ca0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fad1ae-45d0-4a9f-a0d6-0ffb9239b865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8a8898-72eb-40b3-a994-3e9fbd03a5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce339b6-4dbe-44f2-9f36-b22c9cece3b0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dbbce9-e46b-4dca-8356-ac0d1e2f63c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed0d681-6f2d-4b75-b59c-c4e666722d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70782ee8-79ab-442d-9b12-7955b836ef9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "19d45e2e-8442-4434-a295-f286416ecf82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb36b55-0cd4-4983-8ed3-3df3406df567",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9390365e-f34d-4c32-84bc-282f83555013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1d29fc-8250-4c81-a6fb-053f79a72108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fef53ad-afac-4212-8220-9a2b5a48730c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a7480ce-4bd2-4094-b018-e31fc7476622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35539657-1764-4a25-affa-f2d528df4c22",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff958c8-9688-486b-834f-3df645900795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd0c23ac-fd64-4a54-9167-9a86e569a57b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93221cf-259b-4506-9a40-53e22d7bc0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b9d73ef-c37f-4d45-b495-f57c0ac4fed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0451af32-8ebe-498d-a8ab-a711466f8ee0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cab328a-d1ed-4128-a108-3f6c8e9efa73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002359a7-3331-4a76-980c-6be5d3a612ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7bdbc8c-b62c-42d9-be53-bd719287bead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9a8e4e-5949-45f3-9c62-06498dc945fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909fc3d6-e75a-4b65-ac30-585f3e0ae3bb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6f49f3-7d11-401a-9fd7-bc6646ec6a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15826033-8bae-425a-b9cf-02be2e97a60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429f9d28-7bfb-4961-beb9-5d337a55c7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2d7676-1d3c-47ed-a19b-8bf828faec59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c6747d-5a3b-413d-a91a-e1ec0c1331d1",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2996af7-8968-4bf3-af6f-e1114a536a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0baeee-7b4e-41dc-8471-4cf220a04f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbe39e4-cf4f-4030-ac2a-3760a2c81834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd92b659-d78d-4989-bbd1-804cc9c9a7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfcb0ff-5112-4ad1-b1fd-9101d1b3a7dc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f9935c-1f88-4316-8828-98752894013a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d0df78-7a7e-43dd-b2a0-715dabab1168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556b93bd-0911-468c-83bc-4cffcbab94a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "22ee8f85-5a61-4f6f-90c5-af29af01179f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efbfda3-e360-4b79-ac37-badb1d91de52",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92849650-2d50-4c81-997d-f2a349cb334b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a87e0116-b659-4729-88a4-6318b8010e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c9a103-5c39-44e6-b6a5-b81d99338021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41f053d8-fd89-4399-bdd4-a6fddb6ec9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273d02f2-adf6-480e-ac1d-bd7aafae63d3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0c15d1-776d-4abe-848e-a223487341bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9115512b-568a-46ad-8f50-2450cb4a73a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d299fdc7-4d9e-4a00-ba74-34da37d59c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4803a4-838d-4eac-9dfc-9e855c4d5c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109f730b-b69b-405e-b0db-ca6b12129bbb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1e491f-a7ad-4922-bc94-8d4b6853946f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3526b9-c830-4d14-bf6f-9b4808e0315d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de0322a-032a-44b1-879c-18215fab6a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5961b2a0-f6a0-4d25-8227-dcd0052f3e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb0fe16-32d6-4600-b45f-c0f7df857a18",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269b60f7-4da0-4fb8-9a07-356f3b6ea6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b43238ff-f55b-4397-b738-91102618cafb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f71e08-30a0-47a5-8079-a9b7baabb1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f319a01d-d1ad-40a8-8f10-5b67659c07df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61fa995-340a-48c8-aa19-00a7db7ca42c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2faa2978-a5fd-40d7-b14e-02da918ba1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14089ceb-21fd-408f-8aaa-09942b0df270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8a63d9-c87a-4531-9598-fc7979df3fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9df9f15a-51c2-4838-8cf3-991801ec346d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a2412e-9ee1-4720-bf09-0326767c1eb3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a0db1e-baa4-468c-971c-fbdf3cdbde0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc83993-4dca-452b-872f-cdcff902bcbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4adf7e-eaeb-4502-807b-8510d7dd7eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc1fc6b4-e5ba-4c6d-97ad-9d3e7636672d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371676d4-2fe2-438f-aa72-f5703f648283",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e76c4c-a946-462b-b363-805bc4758508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222c8c64-9bf2-48d0-b3fc-54243e575bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323d6e41-3079-4aeb-bab0-bd7431161aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "64df78bc-9532-4201-8001-805a0a2a02a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4063fe5c-e3ad-434e-b2b9-804560761802",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a7bef7-eec6-45e3-a6f3-7f33f11f14b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196aa849-ff85-4aa0-903f-6f31bd3e1e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d54e27-d54f-493a-a3f5-e7ca101c26bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b78407f-0379-4720-85ba-0483dc5d1259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2e56ad-85de-49b5-abf9-b04e9577e34d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a77bbc-d585-4fec-9d2e-55c5f0767998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2bfdba5-65c5-4c4a-b026-dd7beb8bec57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecac47e2-af5e-4338-b46b-0deea55ff843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a485d33b-8e14-4091-8894-115889a66821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9797f0d8-16f2-47eb-969a-8a30105fc428",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a60b851-f2c7-47ac-9b80-bd56df572da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30073adf-71e2-432f-9859-67c15bdb1c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345b57f6-8266-4950-81e5-5b00d4e92a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8baea02b-e033-4ad6-b905-afbc1beef2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21aaf937-454e-4dd1-a319-678ec89bca88",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe88704-997b-4cbb-8170-eb8d95328980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4477dab6-7b85-493c-a4d9-4e8e75debce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb27475-2251-4397-8d5e-d8886b552a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3624ff-cc2b-4bcf-ae90-118a31ccd619"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "70537c11-aef2-48db-ba63-9b4052dc4b89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02eb46d6-8376-46cd-b152-28aca57f8c18",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891271cc-4772-4b25-b3ba-517ba432abb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10cb57b3-a4e7-4ee1-8ddf-f03b17cbec01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f5d16e-2ad8-43a2-9e28-bdc29882017d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f8738d7-4bdb-4b7a-9b54-922f5f6334c8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "895dc186-c269-4431-870c-b7e98353fff8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de33112c-8a06-440c-bb26-febf00f294b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c36e040b-3065-49f7-8bd7-b2b8d500acd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6649c81-c3d3-4e22-b6a9-af6aea6fb78e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d779132-2019-4a29-bf63-944228893314",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d7c9817c-0aea-41d4-82c3-eec4d35a66e0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4df30b21-dbd0-4d84-a790-f2677efe3eae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d07342d9-3c8f-4356-8a36-11de2dc7b29c"
                }
              }
            ]
          },
          {
            "id": "87914ab3-8595-441a-831c-c2e13b4be795",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d0bf2744-6333-4b9d-a1eb-cca451b3a57c",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "984f7e71-bfb9-4ae2-b497-add33269ae1f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e1063e-a7ea-426e-bb28-746766d0c193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "52b9a6ef-fd25-4ce7-bc95-fb0feee4f2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64df1941-eed4-42a6-955c-7f9d61898158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e72b00-a41c-48de-a2d4-cc66f636dc41"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "75501d4b-2ae5-4bc0-919c-9f247eeed9f3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cb41967-a3ff-496c-b810-d0cb8e81eaf3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0594b0a2-2d6c-45b9-9b14-7a5328a26198"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3735e49-0e1e-4097-b614-2e36fd1c4574",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7026dcf9-3ac6-4a09-872e-a1a114cb4ed7"
                    }
                  }
                ]
              },
              {
                "id": "baccf91a-c1cd-4c0d-93e4-a66c30aa26de",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28755b08-1684-4faa-a961-c450ead13f6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34849323-d1e6-4cc2-8017-12d45e167a7e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8505dd62-098e-45b1-9ea2-05547553b32a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6e94f564-5b36-4c3c-9aea-b25ae9f3e45b"
                    }
                  }
                ]
              },
              {
                "id": "565ce249-f92a-4d73-8183-1535362920b5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "412e1bae-29a8-44c5-8828-80cc5d26e182",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1c975f1-9c0d-4a77-b9ed-08dcac5edd0e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5da8758d-bfad-4082-97af-d867397acec5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7fd9cea6-5b31-4549-9a24-9b4ecd1bd4a3"
                    }
                  }
                ]
              },
              {
                "id": "fd93c66a-52af-41a0-8010-4f244cb46c57",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed695e0f-7386-4491-9819-a65050cd55eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f50a407-dd26-4c6c-9a84-6d768b0e4040"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5cbb4a8-ed54-4513-92a9-63d41465bd74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1d56af5e-bd44-4226-a7a9-2b0541422544"
                    }
                  }
                ]
              },
              {
                "id": "a06c25c9-cf7c-4987-938d-2b3f96d96fea",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1609c72-350a-4671-b584-fdc4c70ae538",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1619d186-0a92-4b2a-8bfb-4b9eac74a18a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7718d22-47b4-4e16-b08f-5d827f38a777",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b8a65f33-8b70-461f-8b55-ddc9f273292d"
                    }
                  }
                ]
              },
              {
                "id": "0a3fbb90-fbe4-44d4-aff1-707327b67d86",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "26a7f71a-b462-4bc5-a7ce-d0da33ec3376",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8aed974b-1df2-4533-8820-5c39a2f3d623"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9627843a-d69b-4a6f-8d1c-885e51910ace",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "34e36d96-6760-4509-ad84-acfdd032e50f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "087a2675-334f-4b61-9e03-f88f9dec8e5b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b1081c65-43e5-4771-82f5-ff254a159bce"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c3cccec-e5a5-445f-99c9-a5820857956b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d2aa1047-d8ce-48b1-b518-e583d5b24714"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68e653b8-bb6b-423e-a599-1e9bf4166360",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "72948f4b-7efd-4a15-86fb-99b834c28aac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ecfe04d5-ef77-492b-a18f-6953b154ebac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98e5e378-53f9-4214-aa8e-f3ef3389285f"
            }
          }
        ]
      },
      {
        "id": "3899b9dd-6029-4e1a-ac66-23971d865759",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "64a61abf-5b73-4377-8a23-716c26d9eb0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a229f2c4-16b2-4556-af4c-f24d38050a75",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2f7286f8-760c-4ed3-8c29-b9445e9a9c69",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3435b590-24ac-42a5-9c85-b27c0a50f96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "240d15bf-6e27-420f-858f-91512744706f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832575b0-06f2-4993-81ca-bfb865b10168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dac5fca-f895-4957-9baa-a35b3b7e0784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bebf7b6-4ac0-4f0b-a91e-57db36f4aea0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5fa2a4-dab4-4831-8105-90e280e149e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "160cfd41-dfc5-4de5-a4fe-b4d07319ef6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ae1d7c-8992-4517-ae91-018e0131d172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c5bb447-258e-45f3-b65b-0dfa8b80a293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46283c26-40a6-4300-8cfd-92a0ae9e209e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c0c551-1048-445a-97a8-c756a33c6fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955dab35-c259-45a3-ba4d-6e62643b2370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042b88df-f8b0-4c38-b1e2-78ae91f2ea74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56583687-5b30-41ce-a1a3-38893d2a387c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24f2faf-dab6-4bdf-985f-cacf431375ac",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e72fce-6299-4b24-aed8-e5bc8a9f7027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b3e600-6cdc-498f-9eb9-fdf2ff218756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ba4a72-6710-4674-8ab2-20c1c722c244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09f2c44b-e129-4592-9a13-f16efdad7f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3749bad2-ba90-447a-b296-ae082b8fb630",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf1579e-f5d9-4211-9c87-48202b129eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e1cdd7-188d-44ac-882e-c115996dc485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61c7cc2-c809-4b7c-bcad-1bb3c10d2166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d1d38c7-71db-4ad6-a68f-44f1aff512e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d9b52a-ead2-4162-8438-19da5da5cc1d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c16959-da84-4c74-919f-f5ba4232a19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22ae9ac-976f-4579-8334-322074cff95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8933dc4-7ab3-416f-a331-9f0ac2c2b2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0910390-6106-402b-9b46-c652eb47076b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd6dadb-61ff-4656-9f1d-ec381fffee33",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc5d3eb-6edd-4661-a968-5be60564f3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e6894a-6c53-4acb-b6e2-d8bd8133b214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55092be1-5b70-4794-a6d3-dfc10fdbafab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "77b2f892-14dc-4b51-b26d-9577068cecb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848571e1-28fb-4289-9b4a-b1df773415f2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4658d44-2b19-4e33-96c7-48bad0ca3b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f0678a-7caf-42f4-88c1-f8afbf6860d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aaf4a4f-543a-4aa0-a0f3-477668e4530d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "021eebf9-50ab-44a1-b4c5-3bd4b62c650a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ae25f6-664c-4720-8d19-c41170be3f26",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660e4b49-42f1-4630-88df-704287a0d0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5acc8bf1-4315-4be8-9469-410cfe0b27ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266941b7-9729-4c33-a3c3-11f195215210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93679e84-95f3-4595-9660-87d72db96e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2037f86e-80da-46ac-9df4-45faf1de3ae3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b66a4b-3f4e-4996-a8fc-95099765ddf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f6af27-1872-453d-bc8a-b743ddb0d394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f7bdcb-07e0-45fe-9cf1-ea7a6115d643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "950bbc93-69d8-4d19-86d6-5aeaececc780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18b5d41-4276-436a-9848-8c0e13e4f10d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b94774-27ff-4ff5-a7c4-18ebfbae3542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc62161-1c6c-432e-83e1-a737b0d438af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7058f82-bdb0-40b4-92b8-7462f28a6378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "54a9a646-dd06-4799-84f6-f22f2b44e67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80be8dc-3eb7-4914-9a5c-499ea7ab8424",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d76783-e3e1-4a35-98da-108d08b77091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfe3ca5-e328-4a23-98e7-df71c60db096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdda5a69-1d5b-4baa-a01d-b238702ca187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "851f7c18-dbc5-483b-bbb2-124045ff6a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddd9dce-9edf-4318-b95c-960950423f79",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "771de235-2dd0-4dbd-8e0a-0feeb35f0128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81aa279a-ef8c-44af-bf05-1db3937366c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb38dcd0-606a-4aa6-89b7-a2c1b6e75fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad82e52b-a959-444c-a5ee-d6e41d1bc805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c288817-3b6a-4951-b027-894d62274cce",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660a50a4-d591-4ce8-a765-381017a4e0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16bc6284-947e-472f-89fe-2d9d0580002a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a85d54-c9ab-43e9-a13a-f74c478eb589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "074dabc3-9e92-4871-a4cc-446b4357bb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac8b33e-9cee-4117-a536-9c528ed123ad",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c439e0f6-3e32-46be-9688-a68ba62ebe8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b56c35ae-39ae-4ff6-b528-1f3db61016c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af18c8a-3ee0-4cfa-a69a-b03919543939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9072252-24f4-4135-bfe8-04a5c91b77ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75eaacb-8a0f-47a0-ba5c-db1a359906db",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4665f26-3c53-4881-bd7f-5c96e4319128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "288ce531-27bc-4e7b-bf6d-45e105212b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3474a93b-cf2c-4c2d-ba3f-81c41e212c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "81c2d2b0-1299-45ea-8810-5e836a1c19bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7f8a86-d096-4a5d-b351-390f8b45e0c4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a614ee-178d-4f40-be1d-e07633311693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba6c15f-609f-4f4e-9f2c-9eb03edf2ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea575ee-f1bd-4208-8651-9738f454688f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "052d8ed5-86d4-4044-ba1d-fa948047b2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678c148c-94b4-448f-aa3f-2f4bb817830e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4412ccc-0900-4c51-a6e7-f3c4964acb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7fd3fec-1e20-40ad-9522-d767694d0e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c77753-d875-4e57-b7dd-5447a4f0d9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e017732b-045b-43e4-806a-5e06fb0f11ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2771cad8-9c95-4691-9e06-92778e93e09a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa2dd5a-7721-479b-88f1-b97ab389e8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58441135-e3b7-46df-b1a8-5381edd65bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f97954-8d6d-4ace-b17d-eec959252ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f79b7a-61a1-45b1-b5f0-4da22c2df724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ac7780-a43d-4531-a370-656bfb153ed1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b198a60-42ab-4eff-bb85-693f5695d4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf38228-ea00-4130-ab44-8216993194de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3824f452-7cd1-4472-b5e9-8bc1f7c3fce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db3f3afa-df5b-41fc-ae1f-b26e99054ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7795589-8f46-4baf-8e20-6b5f95431267",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbdb9d0-6f97-4847-b150-ff122032f90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5c991b-00ad-410f-a384-dfa5669c0a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645f2e6f-e5be-437f-96bf-b3b31f6287cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0873dd00-8631-4a80-9dd8-0b318bb40aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb2c936-4d16-45b8-9ebf-878ce59f79b8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1ec96d-4fb4-4cd8-81bd-3ab4503a019f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc2dd0c-2c62-4ef7-9a36-b7960c5ed5e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ba9233-3685-48ac-9cfb-147d43c9e3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c51118e-488a-4907-b08d-404fd1529cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cb558f-7dbc-4a7c-bcd7-9be26edf1189",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8c20fc-057f-4cfb-9e59-578440bc5c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a093f98-95c0-4ecf-8d90-74fe9f6301e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c59b62a-499c-4ffc-8ff7-f8117affc769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e886540-2c64-4275-a8a3-2931494e8cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00d1934-410a-4b85-91e7-e60d09179dc4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e867669f-0311-4b09-acd1-26a47bbd2855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9d577c-e0a1-4927-ad66-1e5cba702cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f434adb-96ff-44f3-a63f-aa5e34c05f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d796f35-b14f-429d-931d-0a72a777966c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a68052-3911-4dcf-ad13-54a939b87c9f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8dd330b-1a8f-4a4b-9ad9-7bac01646ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c79f7d9f-550a-440f-9616-dfff75bc158d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd83ce83-1924-4515-8ae1-22e1588a9cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55c65d5f-ab92-4fd5-af19-1ef82d7604f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8f01fd-b66a-4f26-82c6-9b81766d1450",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6085dc06-005a-4147-90a9-6eb4d620cbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab981f20-f2b8-4501-bc44-0222508de2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4edd50-c95d-43d2-9fb6-1cd5c0ea2639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "184404ce-7a7a-4045-8081-21ce8cd2d051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a99556-b16d-4701-b34f-1a44448b86fe",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff0d19a-66e1-4fd1-a0b9-4999dba9898a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b262ee-8b1c-46eb-a4fc-abf1b49a7504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96662175-133a-4f97-b9c5-ac48e181d572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01d5e00c-4f62-4466-9070-6e9f10555811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae8b1b8-078f-480d-828b-eb713f4e7a72",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acd2f9e-3389-4d8b-8ced-970340737b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44dc212b-3b5f-4ab2-b5cc-e62cc7a64f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712aad78-c9be-419d-a188-3f6fae82225f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83b66c80-9bde-4c98-b209-64a384d13772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2464995c-fa7c-49e8-b7b5-7cecb9c001e7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08be5259-5819-4691-ad6a-9733061681ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e6b9144-df4f-4ebb-9347-6acca751fffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f23da1-57c7-4b4f-af15-bba94c99bab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3bb0ef4-e344-48e0-8c81-4ebd813634ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5780f89-323a-4794-9bfc-41b365676ce5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3ae10b-1a7f-448f-9f65-31f2261c228b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc17cb7-2246-4455-8905-343f3dd99081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff470eb0-0d5c-4b6c-b060-b40de1d51ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad096c70-3e50-4912-95ed-e9d053cb619c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d481313-5a5b-456a-9142-a42684a09394",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31711a5b-11a6-4330-bb90-5ecb2fbbff90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d97b4b97-86c6-4c73-a2af-9fe36a6f1526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28dc860e-8748-4707-b139-e714d5c71e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbcd3c1f-ae9b-44d5-9297-46821b6f3216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e35e0f-58f4-414a-b940-6da0b3d530c9",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76336a4-f6e6-4df8-8dff-8a2847fe5268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a5469b-7ea7-41de-9a34-d1687b204aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084399a4-1e2c-4847-8057-357100f1a7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e50eeb30-460e-4a13-ac33-1207efc76d5b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7b9fb114-a56c-4b4a-8208-c1bbc543c26b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f90e6f8f-821a-48b8-8954-67f6c292b4b5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166cd73c-4d99-43c7-9e04-23370ea4333e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b64c0b51-b40e-47ea-b3d0-1c151cd636b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "339edbcc-f26b-456b-a750-1596bdc4dce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9e575db-074b-4eef-9895-b52e2a454aca"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4272bda5-b7d7-478c-adcd-48ebc5fba858",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76321314-85df-455f-a795-161ee25ac984"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f2a03e3-2344-49cd-902d-102238225607",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "854c6c81-0fd9-498f-b6ad-7214cecbb519"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cf00c335-0236-4714-b55a-a5f8a06c131a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c740cf8-9f18-4c13-b094-01da077d12df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa5a44df-02de-44de-a89d-fc21497948e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fbde7694-b31a-453d-8e1a-e4ce998ba39b"
            }
          }
        ]
      },
      {
        "id": "2043e99d-2162-4ceb-ba80-4cc180084d94",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "eb7191a5-9d8a-4552-9fda-8f8acb1b8a06",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5bb7bb6-4197-4b78-b723-f3b52a1075fd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6066ac4f-d71f-4ae7-925c-61ffe402b38f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f947d13a-7aca-413d-a3f6-dc2032bcc1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4409dd2-6b76-4a0b-8bcf-72331965ac80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691f5751-def6-47ef-bd54-de7523ed94db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d18aef55-4c3a-4167-91a1-6b56c31d275c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c58f27-99dd-428e-8b06-f36e1987e73a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f277107c-9fab-4859-ac9c-577573b3f622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ef217c-0e5a-480e-9912-ad3714c7461b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fce9284-d1e7-4c8a-85e1-68b70c5cc52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e361d23b-7e9d-42b8-9b61-5d2f47efbec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e63ca81-3762-45d3-bb27-dedd9ef7f1ad",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17973fb0-7731-4a9c-a0c8-8bb5e8b2e4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50917d7-4111-45ed-8ee4-e4177720697f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85999bd-2e3a-4ef1-94bb-95f38f33da27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a547f940-ae1f-4edf-a543-137045075d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b1553a-9da7-42b8-b049-6fbf6b13f828",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c8c59f-94ff-4047-a647-c65a181c3bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e93748a-b6f8-4113-8a42-96ee63b7f0a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25654418-0e0f-4fe6-8614-329c5dfd4d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f120bb2-0f1f-4865-b739-a0cf02426650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3339d435-e5f5-4eac-afdf-a29826744904",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "babb4ee6-9ef5-49ca-b000-1db722292b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6886e109-da56-43d1-97a5-f3ddecd2a89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1be8b5-d1e3-42d5-8075-8d6e8e660404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f828d0-b918-46ab-8937-64b4bd1ddc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef57211-b49b-48d6-b06d-7e08ddddaeb1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb8ab13-0577-43a6-a2fb-cc7d2d4bddc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff746a94-2da6-4021-94a2-c894740afd31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f88dc5b-2854-4a6e-9304-d85769b361c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "340d0f30-713f-41de-84b3-8433ffbad366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f6b864-a0eb-4ccb-83e9-775c6efa9a86",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae287b9-2d55-4dbb-ba93-e57ef8541fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "587ef81c-13e7-445f-86eb-77998dfd37a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab793dc5-735c-43c3-bed3-d1bc17d63efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a44adba1-7db1-40cf-a051-ef35241f3861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64e1379-dc8e-4226-9a91-09b3461cb375",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3db230-8d88-4aac-b028-490c2a2b6cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf22f631-2df7-4572-8212-2c34994c353e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e88a4f6-56e4-4431-b8cd-891c52d1590d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5967968-e9b4-4d18-ab9b-f485a0377bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5579c037-21ce-434d-9fd4-0a5cced5618f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb780868-9fbc-4afc-a4b6-93d2c4f1a66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138938eb-1621-4382-95d9-548675aa3d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f1dff5-b66c-4e07-9f18-2186daafa1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "613d62ca-88cf-423d-b6a1-d8b4748a9296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa70a42-ee63-4f0e-b305-29e4e70e119e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f398af6a-e3fb-4192-969c-63f4b6bace25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626baf66-ebec-4ace-95e6-eab307574b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1a5f5a-0335-4988-b2a6-2f3e6bb0e46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "013ea443-1049-43a5-ac1b-82f748f62796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a720ae-ca2f-461c-9155-7d7e9f6ae059",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f98f8fe-710b-438d-9abf-ab044a0690e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49425c63-3e82-4cfa-8555-8ef37a734517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1722f9af-8ef2-4f44-86e3-ac02e475de36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3c82f1a7-4179-4e88-b2d6-42331ad19ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4cdd79-2c5b-4dd0-8f4b-1fd500f501e1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d094d8d-76b1-4482-9473-8aa0e9f9929f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f8ae87-80aa-43c4-8e71-0db381bd41b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca5c163-cefe-46fb-a55c-3122d3767d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d2d3f4d-0aa4-4ef2-b1eb-0b3ded49bf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eeeda4c-d991-46ef-9448-d5403c4115a3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f698163b-7f87-40ac-b4ad-210c1d3cdcc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6c8dde-a72c-488c-a3b3-c98ff1749738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b59a867-48cf-4e87-a357-9fbfc9cef60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63b954b2-c78d-436a-9bc7-097dcc43be69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6bca11-7b1e-4078-ada2-5f72e2f15188",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57e2edd-55c0-42fe-ad22-816b93ccc4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfee9cd0-943e-4fec-a6b7-6e31e14a63e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4b6aae-dfdb-4d23-a0b7-52557bea5528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9484933f-c2d7-480e-b00f-ee937cc0e81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944da977-8bf1-47d5-bf59-f7aa99f86fc7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33c20c5-4225-4584-86e8-0d07f50d493c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625546bd-43ee-42e9-a2ff-0eed40024dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d2bbef-9fda-4145-9bec-543d61e4376f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0050a917-a927-4766-810d-dfcaf0f856bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ead7f9-b6e8-4d2e-bf50-ef4710856159",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f2cbb8-b876-4404-9fdd-e6356858c0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb20b86-bdb0-4efd-82f8-595d23915009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc966b89-3691-4b53-bcc2-da2be1232f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "26e7965c-fffd-4974-81f4-12d1f7b520e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183333cc-3f24-4005-b901-0476a1015270",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f9cad5-665c-485a-9c68-3641cf5e8e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6f5198-169b-460b-bdce-ebcebf7004ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eefef540-2aed-46d5-90a1-1a3e9355c97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f92f79b7-4d09-4a81-a345-a4d34e590c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1205b8c9-dbc6-40b7-a776-fe329f0792ce",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af6e619-44c8-42ad-95f8-55ee49e6cefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482ccdc2-a3a8-46e3-a665-6801ceb317fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4410abd0-c0fa-4763-8ba1-8466f61f3b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "09892c1f-7b8f-4827-8ef2-4d33bf20fa05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f88adea-2f9a-40b9-bdce-b4cc67c9bbed",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86257b8f-2cf6-419c-8fe0-f53faaa0a916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f57e77-2ae8-48ef-aa33-8366d808d9c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785994ae-5d17-445e-8d36-ca6e9c356a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4bd41c-20dd-43b8-9622-fdb9e64de4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee22aa6b-8de6-488d-a5b0-9bd929136f76",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788540da-7f97-4193-8c85-8f6e88328425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9029b141-6a2a-4705-b5b8-f9f415dff8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489393c1-8ca8-45ba-af25-575d52405818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "919999c8-465f-4fa2-bcdc-8739d971c197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd92bb32-1d03-43dc-9331-a4367c2baba4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b024b0d8-0d38-4868-b583-7f3c7d6f7c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a19fed-133d-4ba3-8394-9d6e82ca7e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4f8108-a28b-4f7b-89ce-24d722fbb77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3446b9b7-d98f-4063-a4d8-516020f4d5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9af16c5-7ccd-41cd-bcf6-8c350a1f1119",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a3a66c-3592-45b2-a1bd-5037cf68a4f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62fb2d73-7edc-4ec5-adc2-11a93f3db24e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb6f107-0688-4332-a0a0-9f11653ff0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98dd3574-1bb6-491a-82b6-bc3ad5b96984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77683de6-3ec2-448a-8abf-f13a8c29b4fc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc041470-eff4-4799-8ee3-9c32bcfd2423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f4ad16-125c-45a9-87d0-a18554964a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e055184-9184-4f46-aafb-cb7e262052da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c57378fb-584f-409c-9d2d-75e49929eaf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0750f6d3-1414-470f-9c5a-8543944dd1bd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b57535-9bd8-47f4-9c16-f51106ba92b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "835ba281-b3a0-4229-a28f-98c670aa7a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf3ed5f-5e1f-46a5-ae06-623a7531a456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4829415d-8a11-4163-b333-fd493852932f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61ef195-4951-491d-9338-41c97c0fe5cf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db547b85-5fb5-43ed-8403-a3ffaf1194de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29206eab-636b-4d20-8c45-c0c0150a5216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df51ffc-58af-483c-b5c7-64bf05bebb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e9613db-c54e-494e-acdb-ede2baa19996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7b8bcb-f14e-491a-a6e6-33a226dc29c5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a05ad6a-14ac-4c69-9057-87a55db2f208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387a08ee-a39a-4977-b7d8-b9b6cc5ec43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d133f2ab-c7cd-4e0e-8379-088590d16785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d6cf29-5035-44ec-b54a-63cbcd046974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c679c14-9858-4704-8947-2f4747d44a0d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4a89e6-5208-435c-b6f4-f046b7b3a5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b187e548-218d-4965-bd74-c10c5b490d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2a4c94-d8f6-42f8-82bf-2d62312e0093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c17d1ecc-f0fe-49f1-bca0-bacf1f1fb743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35442f6f-4abd-45f2-afd5-3d2e1bae2754",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085411e5-faa8-4827-ab4f-7e770ec6e291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f82df714-6a6f-440d-92eb-7f9ca69463f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a051cc-6b37-4c7a-91b1-47cd66572649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a6741d9-2f9b-4681-8f15-84e2a1d64e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b8df52-10af-454c-9a23-831fbdb723c3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77f9b68-d752-428a-9656-85071ae1dff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "636e9cc9-2da0-4229-96e2-555b7ac2ca8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a256bceb-e600-4331-a261-419a7f58235a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f416e3d0-4848-45af-9b9f-2a25e93062a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5245c7-d472-4356-972a-7959a887ad8a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d25aaf-57d0-4ca0-8066-114ddcb3b06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b188b448-ae79-48a2-8231-67dcd766ea9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ddeea7-6d85-4d88-a172-0024d4e8d806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce157d05-d128-4ce8-be51-06cb5493e827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16775eaa-bcd7-4f82-aaf0-6567ff2bafb6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6252d480-4b9a-4081-a36f-9a66c69061de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e5d485-79c1-4106-9d29-12c7f5e90d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a2a942-5c07-4170-9cf2-4771cf2802ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9916e2-054c-47a4-a9ea-9c8cf4d9982a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1b9052-e517-485c-9de0-1ae10648cdf9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b479aa-ec0f-476f-8572-29c74dc9f320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f464b16-2677-4784-bdf6-3c16b405ba64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5cf3fd-2dbc-4dcc-942b-9d7cb3145cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18368c2a-be0b-41dc-a033-bbf85e9af56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa23fd13-5960-43a7-a147-342c38ab2fed",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a167fe1f-90a8-4233-a283-edc54be881f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d21ef6-8b08-436f-b5d3-54af4e578a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade705ae-6ffd-46b0-80e5-074127529dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b78ae326-d213-4702-9683-a87e60173233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023450e9-2fd7-4ffa-bf2f-f32e81c5172b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b0ba6e-480e-415b-99e0-e5896499798a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f964cb12-ecfb-4418-a226-adcb79178518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b48fba8-4d2c-4778-89eb-334682408d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2005401a-761f-419c-bab2-4e4d988d44f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cce2b1-582e-4112-b8da-1c63034c881d",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e49b31-98b2-463b-a652-f78c186e8e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23dd763-176f-4ce5-be4c-ae39ee1da7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8afca363-5fdc-4853-b827-36b58835683b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6163ec67-0f11-4d2c-98cf-1be10cd6a2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3544e3-45e9-470a-be65-954052a99d99",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fccbff7-a62c-435a-871c-0f053de1a468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f936ca2a-41ac-47eb-b632-906b0cdfc280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb34ce80-493f-4aa9-a4d3-5793450dc95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0ab5ea-9070-4736-a73d-375c3dc84a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25002420-8add-459d-afbf-8a7023437212",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faac0cb8-cc35-46a4-838d-4d457f9b0960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d83e561-583b-46a0-900f-2b0151865be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d108e601-8cf3-4c8b-a5d9-5792b7c43ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b46bb8bf-7203-472a-93d6-74f37dbfcf67"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "34157b33-3a4a-4344-a045-f03ed1de6ea4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "784a2e98-6df7-46cd-8657-4095ce0b6cf5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b54cf4c-58ac-45e4-83fc-61ef6f9db5c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8b832671-e128-4657-806a-b69a8fe67883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de608882-8361-49bf-b7e8-510e9cfb74dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ce28777-bfed-4464-bbed-29e0f54bd73d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1861185-5d25-41dd-b42b-c120d2123a93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26b82348-de64-4cfb-9726-5bf5e8a6c85b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bda55bac-ae4d-458e-a733-d0a62c4597bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b28a415-0ff3-48b0-abbe-92dd006e23e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c54c679-3a22-4f59-b063-8d8c5b5ca0c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b1e38231-3e51-44c4-9037-c7afeccf7462"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ee8fd83-4e03-444d-ac17-23abe43153f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "776f43d1-727b-4e6d-8e36-3aa757ee5576"
            }
          }
        ]
      },
      {
        "id": "377e4483-f78e-4fd9-ac81-4579dd2796ee",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a23f626a-8519-4501-ac6b-f90eaadc5989",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1dfdafd1-0524-4ad6-b83a-fb090ab73502",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f76d3f30-8fdc-4b44-98fd-b4f2233099b7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db417c9c-fc31-48b1-ade2-813d1b2e3e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9083b1fb-2832-4694-91f1-687a37d53a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998bf432-d8b9-4b22-8513-a4f518ba2c77",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bb45c9-342b-47be-b265-04537c1a801b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f055ecbb-fe34-403b-9875-82d55c19ca66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93b8392-4f77-42eb-ac8a-ba4312792f95",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e745ffdf-8524-4157-a5db-f259a0e5ee37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a28637d2-cc82-4f28-bc43-e30dcabde325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd07477-b4b8-44db-a0cd-a9f6748d9ee1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf0f4f3-5148-470e-a19f-fcdc4e2ff70a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfc9e4f-e249-4646-afc6-d597083843d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c1dc37-9536-4e32-9522-526910015f70",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "362746f4-aae2-446e-85ed-4f1e2af011f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e0af3a-b9d5-4770-a038-6a25b88748a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0347fb1f-bd88-414e-b5ae-1f84d7a4be8b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a345773-8866-4f2c-b32a-a3dc6b7d327e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32679428-89e4-4d56-9ad7-b55b2d353f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9370f8d9-a5dd-4078-9013-51710f070a14",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce77362-672d-4ded-adde-142f8938334f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f7dfef-e687-4e56-90f2-6b4600d0d3ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "084412fb-492d-4c41-a643-75f3c06f6283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49d3f21-ec47-46b3-82f3-920dbc050c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92cc66e-d262-4287-9d2f-bac0c4beb250",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df00d101-7962-4328-b0cb-52c06765fdaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "773ae008-1da5-410b-91a0-9c849f3c03dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde55b64-f6c3-4cd3-83e7-d91cee836fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01526d4d-a067-4efc-b49f-abbd48f69477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41c4ccc-ef46-4f84-8260-eb5277b1b29c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8cb0b0-c625-4e97-9119-f5ffd204ae52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7f02ccd-bff9-4d78-af67-7fdc8f177ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad29086-99ee-46f4-b7fd-11323270f32b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b2030a-6a97-49be-890f-49ed9eb249b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a949df-6569-42a7-b915-4188e4b627b3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7208bb-79cc-4230-bcff-c97dc16fe6c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9419574b-0cb3-470a-9415-1465d37d17c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfb76dc-acb8-4ea8-8a13-e46148b2f849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6accd65-72a8-417e-9d7f-4278f99baa3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344ef373-d40e-4fb1-b2b3-26ae4bc60228",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c9e239-22ca-465b-8444-624f81c2fdb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00942df1-7d52-4eca-bcd2-7430bf81f18c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37ffcb5-9caf-4470-b98b-c069be533b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa0f991-29d8-4c0c-8a60-03899611f2e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913b6670-e8d7-4fe7-9b92-cdc7ece4728c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef033af0-9e4a-492f-8c44-133d6f6c4900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd01bd11-c27c-4f27-acc0-7ab76a7ec01a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e618395-2a17-4384-962d-61e912927b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb27d27-6e06-4a4e-9ade-1c741ac8ea4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a759e3-6a94-4b20-8d01-b54d6918e847",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e34f4a-06ef-4ff9-a02a-3aa1cdf8b287",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2a8bf61-6117-4ee6-9700-9a5daa3f498f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba96f88-9aa9-4e26-86cf-eb1cd32dc314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad24f695-ee61-46db-97f5-225ecc87a98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3f3220-63fc-4410-8b5f-83290c4e6242",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538ead9b-8fa6-4cc6-bf59-02ddb4c9f5a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a92b6be-fcaf-4f95-8d18-f870cf8521a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e02e15c-251a-4773-992d-d74f916fdc74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34067ef8-6f4e-4547-99ff-72641055d4b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9979ffe-8f45-408a-a99b-2ede6cae14bc",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9126220b-d0e1-42ef-8b6a-535dabc82634",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c4db97d-fc0c-4c87-8fe4-9aac16ae0019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182d01ac-0a5a-4f6b-8748-4ae0a854712e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7b6ff2-06b8-4bd4-bad9-5bf93c09b7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c26ca36-2a7b-4947-8d39-fee7ffe50ce4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e61ffcb-4044-4535-b420-7cc3209ee015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3285dd9-1d8f-432d-860f-4e2803fc7b8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b996f5-0e5c-4732-bc95-8f5b95b7d8b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c56304a-39ef-4c1e-b057-49d0defee61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e696f4-7036-48fe-9305-a47c2bdac1ed",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3826a73-5909-4fa0-a757-d22df3272b50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63be2ad8-2725-47e6-bf34-5f9cb7d68e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21325b98-4e5c-4d0a-bba9-392f0b3e863a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae8ae66-8e05-4d74-90a2-2e4df1341b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c2f816-1575-470b-8acb-8a7ff1c99c31",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16425056-882d-4d81-863e-e47b6c10c03d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b3d57a-914e-4625-900e-102967bbb7ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f9931e-aaa3-4f2c-8e32-d99e7232806e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab313d2-82cd-4b4b-a588-0d6f5a5254f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9b147c-dabc-42a7-8fd8-d46b24a41de9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a37dbb-5303-4871-9c5f-75d1994604d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa45086e-f281-4157-b412-b10e9382eb9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69864de-a97d-4e02-9b08-1a2206f1774d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be76d8c-1f74-4906-94ba-77979e100a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99fb994-601e-4949-ab14-47e87e798edd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2985a1-bdce-428e-b83f-954825ec592c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792a2c32-2154-4ce0-a9f8-9ec2671c4c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a52718d-7428-4408-8687-16f5ba9c5820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c87183-2bd1-4aa2-83b2-b4e0ffee71d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff55d56f-07cc-48ac-9a2a-f2533d3ebdb1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38999f6c-8b36-4850-8d66-caeda8cbbc43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "936c925a-1f71-442c-83c4-b4e6264d38c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3dda552-72f1-4467-b1e1-4be9fb192ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c57749a-0d4b-489f-8573-68ad9c8fd511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4737d22-6089-4403-82de-1545a98e36f5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968efe11-defc-4f3c-89b6-bae80e1d7b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7af8f3-e403-4c5c-89d2-dee36ec7a367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af24c92e-be59-4f57-828a-09594f9be2c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481ccac8-783b-4092-b3fd-0d8a39568b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2901b1d2-fced-49bb-be87-54d3bc147f90",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf39fdc4-57c7-4d7b-9e74-5b25ff18ce12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208de154-a70d-49b7-ba56-63b841b494dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a17091b-5ecd-48a4-9fd8-c78c0e1da7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c03c267-198b-47bf-95a4-139c86c09320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f27162-8cf2-4ad2-983f-5af7bbebcdf6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a19c1c3-8168-4797-8d3c-80e2b64f6781",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "897c6046-b40d-4098-b118-53107cad3814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf60fd1-0e7a-4191-a2de-55bea029f45a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cab39a8-1fd7-4bf0-96b9-f11a7b05f2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f1e589-050e-40ff-808e-c0cb21d1d41d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417a5a9a-10b2-4b3f-b12a-c9ee46d76419",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d94dd91-ea42-42d0-a29e-51e265ceff2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e892ea-2774-4771-adbf-aced2f07e31a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1eea3a-13f1-4e1e-a687-23fd2ff1d820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7acedf-cf0b-4bfa-9348-0dcf670194c5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10fdfc0-1eea-48ea-9444-62d35bb47d6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd15f6e-3738-4d5b-aadf-7e1058981f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c33483a-3686-4243-b4eb-536541dcdd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc20fba-a072-4e52-86b1-d78d0b5af911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f096a361-df7b-40d7-8e0b-280ca48677fe",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e7a15e-0c83-46b6-9128-eec4a4029f58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0990cbc5-ca53-4e7d-95cf-3f707baf4c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6401741-00a6-4de9-8597-94cda40fca55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f408f1-3220-4253-81b2-3e23ea4a060c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf4cb29-0e65-4f00-a74c-21182da4d2a9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbeb9041-8051-4a0a-a764-c41d22b1d484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a589400f-9113-4266-9dd2-6bb7bfea3b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04ad147-08cf-4e90-937a-122a2aea3857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecfe443c-7ce2-4e7c-ab74-99d7b2ed86ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d057ce-230c-4679-aaa2-a10f780e1667",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb71067e-6dae-41d4-8d1c-ed7f9842d423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bea2293e-e4d0-4f1f-a9e8-ac6fff7d5040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c949d0-dc4c-48dd-9c75-c6845b278ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9bac98b-859e-4e54-8efb-8dbb797822da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2e364a-1e56-4478-9275-4076a372d1a1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a09fe83-fe22-4a43-b406-08842e92c1a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cddc1ab-8fd8-4fac-b7d4-425dd491c685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51fc632-8779-4db8-9265-28b97389ef57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d81431-f043-4ab3-ad06-2fb651e67880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dad7fa6-9d0a-4f8b-a7a7-261b64dbac50",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3599eafc-ed86-4ed0-a266-2815643bf3b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6b0a14c-5559-473c-824c-fa43a6aa455d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5136d9-486f-4ec3-8637-5516f1972fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a30a6a2-9cb3-4e5f-9671-6afcbd72e8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03682c14-5cb9-4fb0-8660-332e600402e0",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891089fd-6db2-4a57-9e6b-c1adcc9d4e2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b6263f0-5d2d-4302-89a6-590276dae6e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eec2992-c984-47d6-bdeb-3d0d984601c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2dcb7be-2fdb-4dcd-8806-f95a4f60c9b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62cb911-6e09-445c-b45f-5e6a7858a554",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372385f6-68d7-4de6-ad48-098e775dd939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04c06ce4-f486-467a-9cdc-898143a74f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a684a8bd-4efb-4376-9753-9314f5bbf372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbb9823f-a00d-41e3-a3e4-d72e54307ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2ee250-9044-4bc1-bec0-971cc982d73f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fe5271-4a6f-4147-a3ec-045b1b227273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b659afd-3317-434e-8bc8-cec5bde0c65f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777b55c7-7a85-4e1c-aa3e-5a2494cf509f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0e0dca-c932-4ee5-a81c-3323931d7ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84891128-6fa2-483d-9136-bc147a4b9974",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502bb326-5de5-4eba-80f8-3a43e70e7fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8127a6aa-911a-40fe-996a-db180b96155d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec49b4ea-e191-4acf-b047-746a33f0e6ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d86392c-29dd-43da-9a82-6a2c4ad62959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c07d5da-0314-4581-83f5-37d606572b5c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7026f1ef-b798-49f4-a117-ddc80dc29a3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4120507-799a-44b4-9477-7e07105f9cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c95b6c-15ae-421b-b66a-b5914502414b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3380c771-8cf1-4a62-b8a2-62545103e541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2141881d-9dc4-4150-96ab-488c0fe8c279",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e044d040-179f-4abd-9def-8820fdfafb4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab3b264-c509-45f7-924f-2314b6eb52ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686a90a2-f0c3-4b5b-9290-ad375f415809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfcd4e30-e806-44f3-aafa-b06f4eeccac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc06dd4-6ed2-443b-a335-6a6821387adf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e56eb0-5280-407e-b080-4c90eb9c6fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e338a2-1e93-4b65-910f-c4d00e123125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d9454d-0dea-4691-a770-89387b5e0113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acda57ab-3ba3-4525-9400-512b772e633a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62871d7-9259-4d58-babd-0fc80d5a5d8f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20eaf22a-55a3-4623-9755-38b7b64663ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe40e0c3-5627-48f8-9630-9126a3941878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b712e4-0792-4a50-b27a-b64a9b6a7db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8502a90c-9ff9-4a85-962f-e3d70faaabfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4123b56b-fe97-47af-b2e3-f8c5e5a73cca",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a523e118-a92f-4956-84ab-20d3110750fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7289119f-29e4-4725-9d1f-bfde1ba6b7b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8b1607-2d6f-4acc-a478-10f26869d7bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f90293c-4edd-4cd4-8e83-b6e12dbfd8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e550c5-76fa-41b8-a1b6-b139a2b4ed24",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9296e03-01fc-40f9-a5b7-cfa2b14b3161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7db6360-81ea-44a9-8b5e-a40532a9532d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44937ff2-1038-4997-80dc-2e69bdf1e0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0453b0-e032-46d6-a280-cf7761ddc252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62a3d74-6db6-4b54-9945-22fcd2e604b5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c16ae75-a699-4701-8182-fd9e45f49275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9888062-c0d7-45b6-bad8-3b9c787ff4b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ccea79-6ee6-47ea-a2c5-4211722a0f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908da136-d018-4d96-b303-f06f1a05b9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab0650c-2ba6-4e09-96d6-4f20b4239f01",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91adf006-753d-481c-97ee-7523cd7a9e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d99604-ce33-4182-9569-f15347da4e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f56b80-3d58-4051-a9e6-46ed1aab1e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd74f64f-520e-472d-993e-554948d4b5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae17d57-7414-479c-a366-4576344d7049",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a161bc-d045-48de-8f48-1ae9e02fd755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e638e661-33e7-4486-b896-6c121a43b928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84805c7-c7bf-4c5e-8aad-fe0f517419da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872ddc26-78cf-4041-9086-f0f3e5fb59fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342170db-8d2d-4c57-9c75-3d8928da52e5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bae83b0-6806-4710-919f-b49e01446d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75bb07e0-d9a1-46a7-86f0-828265588d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d692078c-599e-4265-bb62-ef2670944d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13267827-e9a6-4753-8cfc-34ce9d6d31c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4960069c-99c4-4425-bf06-1eb9ce85a73a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fca4656-a0b4-4721-9cf8-b25c0bbb44c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbcdf0b5-fb48-4800-9be2-1411864cc0f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fad5124-c687-469d-bac5-b6c1e4d582b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12a9c12-edc6-406e-ae19-7d82a7afcab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02da837-1bd6-4c95-80cc-c861ec6f901b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71cfac45-a00e-4a9b-a0f7-f4b7957e87bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a647c9e7-c1dd-41fc-9db0-c18507be2bf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a0a3df-269b-47c5-9a2f-1147705a58b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c9d28a5-87b3-483a-9ffe-0b8a3370446a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccd23ca-1cdd-48b6-bfb1-51f29f31f793",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ad04d9-3400-4fc8-82c0-ae99bd9a1a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de24baeb-2cf0-4585-8647-e7ea351020a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa81a2dd-c19b-4ad9-a8b5-631fe54f43f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6be223-4ba7-44ff-8497-4a8f6b2afbb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a532a7a8-49a3-4943-bba8-529b943e6a99",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e211599-553a-4c7b-b00e-be960a9643a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a17c3e-5f7d-45c0-9f10-aedd63257580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48520978-290b-4ff7-b543-364d9cb0bfed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7606a5da-93aa-4007-8c46-0efe43548815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e5c013-165b-4785-b03d-9920c66f4c3b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4912382-a84e-41c7-bd53-849c03599d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed12dc60-86c8-4e48-9c1b-f18f57d0482e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "259da9c3-579a-4407-bd10-e7ea5f4f575d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcb750c-7dff-49c7-92fe-fa6ab035d188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce688e63-32ef-479d-a8c6-723d985bbdb4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f727ba6-a04b-4872-9b57-4408e0f39d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18433afd-0728-41ce-bdb2-a85fb8514ab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f224adb0-fed9-471b-b224-5463e577d1e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d6b2f4-85a3-42b0-956e-d66b0a0f2a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c2a8c7-10c2-49cb-8314-9e5122050e5e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f15daf-a1ed-40a9-96a8-bf5386ea0e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0120652-fc48-4f1e-9a52-0ff6bdf1d735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f125940b-5c2b-4fe4-bd74-8750061d151e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d357913f-8eaa-4726-8778-7cc2481079f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1dca42-8aaf-439f-8c6a-ceb7f1985b58",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61aed8d4-3950-4fb3-902c-01b880c300d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3daeb56f-5c69-45c7-a80a-70b712bcb4f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d0706c-a38e-4e71-947f-e26a91b71949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59c6954-b075-43d4-9803-55731570e837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1985c735-f3ba-4520-80c4-ede380a533ed",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31f217d-05f8-4227-9bf4-96edc9fe11ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852c0c49-99ed-4604-afd4-50e365c71f4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5539e6f-c3e9-4595-baaa-7d0441cb7322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "286c075d-8d99-406e-8afd-6cb9e70339ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0180d0-fbc4-4ee4-98e7-bc76781a39e8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0f9c71-ca7f-4d1b-ba32-ad98a37d20ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508a7964-7b18-490c-a8d9-b1b8442cb7b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ea8fa6-aeaa-4b4b-bb4b-f39a9f58cb93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f38d74d-8de6-48fb-b350-fa06c865f4c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be67bb3d-0859-47a0-9d35-7af24abc1593",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30eaceb5-6b87-4a42-9f41-a8a247d5d7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8961373a-d93a-49b6-949d-406414de7580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1d19ed-c45f-4b7c-be39-42bb56d4e65d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5468add4-a5b2-4bec-b323-51db51bec253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc40c0f9-d623-4322-ac2f-75ee7058cbc8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5931377-750f-40e9-9dc8-2a6ad84a7716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5972343-9924-4178-8d80-3d10ecb9ae1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edccdafb-2327-47ee-934a-c8b65c52c13c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ddfe7c-3320-4385-ad0e-1867fc940eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed08035-17b0-4bbc-9eed-e2760d617a7c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3507921-0d21-45b4-ab39-5ede68879f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9ec7a7-4c56-43d3-af0c-d479229db96b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1292e520-010a-4a4f-8f01-2eac7f1f9feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4277fce9-d59c-487d-89bc-f77afcf9c6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3ab1e0-631c-423a-b2b8-3090c137e7a8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e926481-d9de-4ee8-80b2-19d02b781cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49974fd0-e309-42d5-9d48-04aedca3dee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "092930dc-9894-490f-95d3-a40a09c69476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a60ff03-56c8-4c1d-9d23-65c6703071c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5fd4c1-03ea-4495-a7e2-713982e44f51",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e260152-2ae4-4476-a442-40688903487e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823fb6c6-68ae-4236-adbb-0458622c2871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781ee4ef-6b3e-4edc-861c-28559b0b4c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a2f85f-b1e8-44c6-ad47-741e678f87e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0424da0-6535-4dd4-b281-29249dbb1d91",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bbdcfb-95d0-4f2c-9e61-352c881d69d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe50fc5-539d-4fe8-81df-64c800dac983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f360599a-ef0f-49ce-99a8-9d384ff2ce9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "575a004d-fec9-433b-bcaa-a903ea3bbdb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe9573f-3810-4ab5-bc04-ca9a6751265a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24f8308-9e00-4a4a-935b-5cc5c50a161d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9f1bd2c-5de5-4ec0-8f58-320a7b9c7103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b327bb0f-582e-4456-ab65-fb4fac17fda4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae64bf6d-aae5-47db-9525-543f9f505691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000c8fa2-bbe4-46f8-8223-77b42940eb6c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50eaf268-70f4-4d5c-8045-52ef566c4a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f30da77-44df-49ac-98e3-e4e2b73b3718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a05cf9-85b6-4f5b-a9be-61dbf00c58c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b95883-420d-4b92-9137-14b321a89fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938c9b7b-1f10-4f16-a0ab-1c346ce79efb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f91a690-3715-4307-83bd-d7e40131873c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d55d2b5-e623-40bb-9c3a-a80a77995df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36ddd9e-683e-4f92-8cec-7bd000557355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad03d66-27ce-492b-9756-3eede683b31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f192fce-7b6d-4e7b-83a4-1f27516a1853",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22845f56-f35b-4e50-a019-618e8eeb882d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ea7449d-792f-44d0-88e4-383999ee0a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c29ae4e-7423-4581-b193-4ad99d78595d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ebb57a0-f4e4-4b7f-b4cf-812dc032b298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96814b34-df37-4861-b15c-73fe9d203f0a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc3060a-833e-4954-8886-59d6f10a6b87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d345a57-22bf-4b99-8bc3-65b6ade85b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e696d5d1-5730-4236-bb01-fcd9c7c05b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5c2eba-f721-48f3-bb0b-6df78dfc0817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475aad2b-8235-4b5f-9ba7-0c90a0334b2d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab930a36-842e-4e43-b0fc-5956e23a3360",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e7e0006-e8ed-4e2d-bdc5-fc842cba5b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40daf5dc-33e4-4a6a-a0c1-7c99f67e3a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326dbd71-159d-45c6-831c-f4b4edd489a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e01dd1-7858-4533-b145-5e47ed5f76e6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b57d69f-1ac0-417a-95e9-b787c218bd89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4d60079-32c7-4765-847b-3ed24df5ed95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3d2481-fe39-4106-9d7f-c23672ab5bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a94a4a82-c443-4316-8dd1-2149c47273f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba9e5c1-8b2d-4043-959d-a279e6d9830e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3704d22d-945c-4103-b9a5-175857a0fa6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a2e472e-e1d4-46a1-8192-eb99dc646ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82f1de0-95c6-466d-be74-b2a5098f7b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a55b501-b5cd-4e18-bfc5-34609b675075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5860bc80-df66-402c-8989-354ea7f226bf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b088f80-d5d3-4c8b-986a-87c4af604645",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3569667c-0b58-4d2b-a6c6-f5136c48bcf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c970cc98-b5d8-4907-8332-15753a348c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ee5fe1-a2f3-4fe2-8305-44b1ab1e6995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee31d67f-260c-421f-a423-7e1d945e4889",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5487f2a3-7697-4542-b611-6065d5b7602a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0aecfe9c-0bf2-4750-830d-3d4d11b82452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77edf309-9a0e-4be3-9f03-726141bcf213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac28f7ec-5a54-4269-a81a-43fa5a2d5aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092259b7-6e7e-4deb-85e2-f8df82255715",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c14948-b8d2-4621-b4de-511773cdefed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfd3acc4-aa93-4169-b76b-c512f8594a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12d0e5e-f501-49c7-8350-3d6a1b70dba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0923de8-485c-43a1-a63c-d4639105d613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18edbb7-3aa2-43f8-b6eb-3baf9a7991ec",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9e724f-c085-4808-b186-d1a63d9680fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cde0582-3273-43e0-9ae2-62e3606d70a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd9070b-bd83-42aa-8ba3-a8113f58ea0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0a3040d-d19a-4a0c-b0f5-df20c79ee6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efedfdd6-b5e4-4cfa-8e14-27b4bba1045d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc28773-e156-4e79-8889-698766f4cbd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2eec316-dfd9-4d0e-966d-167b0b5a02d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6954b3aa-5eb4-42d0-87cf-c36e80757fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0accbe-36df-4fdd-8a65-4b5456d2c1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453cacfc-dfc3-4e99-82ef-4d9a178f9f71",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea07489c-509d-41f5-a6b5-9f5d98a26e5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7d5b7a7-6a5b-4f3e-b10f-919ebfbfb840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb28b68-34ea-4468-8ee5-b532d0987104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d316d8ea-1ff1-4992-8e33-1899c4c8ba8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762490b5-c978-4cc6-88ef-7f719292c932",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64b2e50-f074-4f68-8cb6-cf2b32759078",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54efb83a-29b9-42fa-b822-fb623765256d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2341419-62ca-4b19-b3ac-0235919f69b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1666147-58dc-4cf7-848b-4f88682ac4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef52256c-df03-4597-8e4c-d6ea8326a66f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a04f1b9-1663-4587-a03f-4e0386e5d79e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fe7370d-2984-40e8-b2b4-327011b1f2ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efed413e-b787-4979-a916-397d2756fa3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdda6fe9-c9a8-4b70-ac1a-c84e18f0e139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea992c7b-e3eb-4f96-8181-d6724c821087",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38f3a28-18a7-418a-b4a8-9afcf8c30e0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34e8b247-e7d5-4de4-998d-6cc7a2e9c302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e43441-ecc7-44d4-992d-3f9bcf82e55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa5fe42-a2ff-47c1-8914-336f17cf48a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f36958-9b65-4d90-bd1b-e0abca3780bc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722a2fad-a567-4b26-bb0e-39fd8251b555",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b06f2557-f423-447d-9b38-e077e07514b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef14603d-5536-47eb-adf1-41f9d2b461e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927521a1-9dbc-41fd-83f9-10690e9fecbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50022c63-78c0-42eb-aac0-c125fc096b87",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067bf5ca-e7f2-4eb8-bc17-f39e18b0b958",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ae0bb6e-5328-4d80-b9b7-b3dbdc62f53b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b87e3c-be6e-436b-977d-25ebc2df5da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a725c5-2cb4-4f2d-9758-f82c8e8f6434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10370d7d-b7d1-483d-9a90-abc298160e72",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b347c67-e728-4667-bc3f-8d1bed6610cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebfb43c2-1af3-4039-870b-87437bfa9367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2ae1a4-69c7-44c2-b1d9-7f1573bdfaee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a69514-24a6-4c97-aa45-5c69f1641427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cd4991-b177-4dac-97a4-0fcec712a1a5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28130261-302e-4864-921b-0aeb81b5db92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58ad2125-cc3a-46b3-b64a-fa8237088445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12537245-914b-4bc6-8a29-3142d0ae43b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23aa91a4-d51f-41bc-ac6e-b51ad018c2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821ea1cd-f2c7-4335-897c-ab356f643805",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c898e0ee-0cdf-437a-81e5-8fbcbf38f3e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e2be30b-9c40-43b4-95ff-2d8cde807f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46775159-9572-42d7-81ff-1f2c32afb4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2964fb36-641e-4f9e-b2b3-1b3046162e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76945c98-9452-4e7e-9294-2da7d5334ebc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4682623d-4836-48a7-aab5-d8b42a47a25d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58e01dcd-f34f-453a-a196-4bf97ca20fb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f20031e-9bc4-4c54-b87f-e735784daf56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d70695fb-3a8a-4325-837b-84cd30ff4510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b313ac70-25b2-4be4-a98a-ee4076d33683",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8311b45-ab2b-462b-b092-9ad0f9358612",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4f06660-f223-4b16-a33b-a430ca431537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60a2e46-be3f-4dca-875e-3b7980f924dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5675926f-c5ac-48bc-a613-0f46f62c5c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5701b0d-ef80-4a49-bf30-fd0464d243fd",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4c27a3-1ade-456a-85a5-97a4027622a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3845b313-a3c2-4de2-b967-6f2e811d0255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692c9bde-82db-45a7-a33c-78737771317f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70392406-8c8e-4073-8149-03809036bb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6de36b-3a70-4c87-acf9-c7449d409330",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64b82dd-1d5f-4acb-927f-0a8d44a2b56c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aab2122-6273-4411-b586-ae5260e21ca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbb5f24-d38f-474f-b5a2-cff4343bf494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78fc7152-357c-47fd-81f0-17b601bf7110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dca98b-7762-47ee-b2a1-2169b3ca73bd",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a42b046-ecd5-4002-a405-7c3bce160a87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73240e43-de06-4ecf-ab04-ea26d5a9de90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb80db2-beb3-434a-ac97-8a1e65ff28ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e9e4ae-e921-47ea-8bac-029433c5117c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e088328-ce44-42ef-bf66-285bca621037",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7f0206-bf32-412e-a81b-a351a304151c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c2fc1dd-6933-452b-aba1-8d3a0a5226be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98563429-cc8b-48fd-94a6-75f881d19ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f421a3-701d-4a87-b585-27d344eea322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee101db2-8e6b-4101-b9b3-8ee5c587b2d7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51faa79b-a162-4eb8-a00f-b6ac74f2a88c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9dfd19d-7688-4213-918b-e44aff5fb313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "447b7143-8ac1-418c-bb45-1a22d17abdbb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d9432c-6520-4be1-9dd4-e62801e6efef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe2962b-47d1-4dc9-aca0-16808b02ad1a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01387a8-def7-4cca-8304-f12437205088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1848f572-408e-4b2a-849c-2e3dcdfe8ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8209b24-4dae-41c4-8f9d-b1fbd937c5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6fdffbf-80c0-4e63-b2c2-b5a509f14b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a5e852-30c8-49cf-a011-9f0c4efd1177",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d14368-231d-4692-addf-dbeb19f160fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69bd8a71-dc5c-46b3-b0fa-0060b2edf16a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d91fbe-7e4d-451b-9024-5bb340aa5e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9324d3cd-6f2d-4987-8fa1-5396d20ab765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232506b0-0ce5-401c-a645-e76142d494b7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5ff9c8-796d-4782-aa1c-b17e3a232c74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5649f788-d5a4-44d6-bd7f-12b63eeb2e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4693fabd-b751-4a31-9084-ae71cdbde5ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6dd7f9-7566-4fc2-8803-a2ebf5d0bf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6187ec92-9188-4158-8047-6c2791aa5cb2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7757ea2-c9e8-4f9a-b971-5bd0f7f9ebcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00c2fae2-9e99-4e12-b043-3b4f6b9e6162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e0cde7-f530-4e2c-a2ab-bcd89cb6defd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b63a5dc-de85-4001-afd2-e64d588ec586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33783fe7-6288-437e-b164-45721ac2ee00",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ea12a5-f13a-4802-94f0-544ace0844eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bd137c0-7509-4c85-bd44-43da5873f527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37aeb66-1481-4286-8f0e-91589a3d0726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e12c5a4f-5701-4aab-9744-0511e23dfc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366030b0-925f-4243-9ecf-b8cc62896dca",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59d55a4-485f-421d-bed0-14734d1641af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdf7efe3-e529-481c-bdc0-122f69ab667e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34d3691-3cb8-4d76-9810-d2b7c82a33c2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df14c7fa-96be-4890-8d85-6b6bb7d57cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efaffed0-a488-4f05-a34d-dad0fe605ea8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b4199d-8daa-43cb-a41f-d07ae835058a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b05dbc48-7ce0-40df-a1c5-52a6b110cf2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ad9e8f-48ee-462b-b221-41b98b18ed79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d6598e1-01fd-489c-9238-0da88576d462"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "247c3455-fd6f-437d-a0cd-78e3434073db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b83946b-0cc8-40c8-811e-d399ba38ce03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52323a9e-9fff-4592-aeb4-723af2289f17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe55749c-5028-4c30-bb2b-4126adb65741"
                    }
                  }
                ]
              },
              {
                "id": "0266d3b5-3831-4a2b-8d64-228a20402330",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23e2b130-be34-498e-99ec-2065c6bd67bc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaf22de-ae29-4fbf-8194-1843689b0dec",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "65097a54-74f6-405f-8d00-2256bea56409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087d966a-aa2f-4709-860b-101b54c46cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "715dc59b-5256-4f04-820d-0b2bc7bb1a82"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a2d089b-aed8-49bb-a01a-4adeb5d7ff9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bf9bc32-2e20-4374-ac99-9aa31466526b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a46b3b82-c283-4158-8cab-f6af373ec512",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "298346c5-e42c-4bd5-875b-d18498d117af"
                    }
                  }
                ]
              },
              {
                "id": "63dc23e2-5380-4a24-a9ad-ee6a8c75c51c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "55c2223e-6bfb-417e-8387-13f13f165b1d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d7f166-aca2-4a1f-a01f-3f889900f5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d239eb58-7a2d-4f44-9bcc-6c795e7ad669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9ceb29-dd90-4083-be35-bbe7e1fa77d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3b0b0b-f7c9-4089-ad17-50e9037e7c9c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f85795ba-0e60-4321-bd05-df5e41276cec",
            "name": "Positive Testing",
            "item": [
              {
                "id": "292e0fbf-fcd6-4c38-a3ee-323eebc2e537",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a26b754f-8146-45d8-963d-1c097a13f083",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8006af81-c9fb-42a0-af13-b6818d5e7890"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7cb9ce21-f820-45f7-9918-774d174ff2d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ad530cf-5829-4b41-a423-ca9e48526605"
                    }
                  }
                ]
              },
              {
                "id": "6ed1e0b3-16c1-4f32-86bd-b3ab6c5be26d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eadde19f-c83c-4c98-83ee-106bf752801a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bf5a6cc4-f968-42d0-9fef-d7c0fb25ba3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7c447f7-1e28-40af-9680-9e1a64c070c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eed71579-abe7-4962-ad0c-c22d6073a0ab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6535ea8-f5bf-4a82-a670-14b9b7484435",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "46fce22f-0bb7-4ed2-92ca-999942e4ebd4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4041fdf-2f77-474c-8528-68306727f941",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5878f39-c412-458d-8e18-5df45b923903"
            }
          }
        ]
      },
      {
        "id": "12ea8201-07d8-498a-aab2-aefe718e24c3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "69b75b1b-a20f-48dd-b716-ce260e173899",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3414a165-5a9f-4fee-b8c1-51b47552f13e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df561e41-c706-4f5f-ba01-5875b0ff3824",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf1380c-caa7-4c3e-8198-59ed4b449400",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b150565d-d34a-4a6b-9ff0-96430ddb5911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfe0d69-548d-4fc3-85a4-17fdc332ec42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee26a67d-d3e9-4b42-8101-c3f99ca5fece"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5518a9f2-82e2-415e-b240-f0f833be2ef1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c57131d-133b-4b56-a913-b04e224e6d8f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75c571ad-58cd-415e-8bdb-53b4da727a2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d9486cf-0419-4c06-8fcf-d21fd4f23549"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c901518c-1f4e-44de-bd05-c07f9f20093a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "123232cd-96cd-43ec-9442-f39c572b623b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e258a6c-be1f-45ad-9055-de95409e0517",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3953e2e-74b3-4d15-9246-3767e1278f33"
            }
          }
        ]
      },
      {
        "id": "c8f79814-bf60-4e69-9470-3f4cd4048356",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "48be1a75-36ee-41a7-be8e-632370eb4e6a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3d7ccf7f-a15f-41e4-9c99-1027058f1537",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8f7aa74f-a9d6-4c72-ad41-e4dc89332443",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7d9656-fbed-4ba6-9a93-d66af406e156",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48098a07-fd45-4c5f-9a1e-b65f2b4ab23b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9524e5-af8a-4ce4-8692-8fbff3619f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8557d6e4-3ca4-4afd-8a1a-1ac24a599cf4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d683b655-3e1d-4d06-8a25-b99edf5d9def",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d9fc318-e6bd-41d5-96c6-cb43c2c6932a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b13f1e31-b941-410e-944b-234caf30d5eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7eb6432f-7d97-434e-b288-cc2a4a41007d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5c2bcff2-5a31-4ade-8bd7-50c13034b5d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3d6d615b-7b57-42a7-ba04-f9d59bfed18a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6b6cf39-652b-4f0d-bfc8-b52df87eabd2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fcdd9fc4-7724-4360-9325-5343df71a765"
            }
          }
        ]
      },
      {
        "id": "2dc2058c-0f71-4c73-b418-8295ee7eaa08",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e25495b2-31e5-4a8e-89ee-08afc1f19725",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1bc86787-c218-46e0-a7d0-230a18714d04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d213d6b7-a292-47d7-ae51-7c97c06f2e13",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b5cb23-c80d-44a3-b5f1-5ba9d948e45c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20204414-a239-4109-a279-6dda491843ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c94cf42-dd65-4e7f-ad1e-43d39a203775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "059b93b5-3b66-481a-88a2-576d64205ab6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "baf596de-b9d9-4c70-92b5-08d54555f5c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81be4882-edce-430b-8b3f-ebf290aef40e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7be4e0e7-71e4-4e47-bc4e-a9ba9c834ddf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7270d1e3-276b-42fa-8f5e-e08186b8a2a6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3dfb4ee7-fcf6-4df7-a828-116a27543f48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ef71ab7e-5b5e-44c9-8f46-08834a999a51"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a1d3a66-3235-41fe-ac2e-c6b9abb8becf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d6d2f06-6a3d-4f4e-b114-b51f1ef0e46d"
            }
          }
        ]
      },
      {
        "id": "40c66997-abc9-4ef4-972f-b97099d7b154",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "646c2ad7-c9e4-47bb-8d03-68e38a4c9db9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d552a68-01fb-448a-947a-a15e09fc7f21",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ac7cbadb-5f13-4916-8889-13df4e86301e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d776ff90-a003-48bf-bb87-8fea37c17a77",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f79a4c4b-6492-48f9-9537-16aac53e20e7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 116.59649122807012,
      "responseMin": 4,
      "responseMax": 636,
      "responseSd": 78.84006899360625,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708389215723,
      "completed": 1708389258124
    },
    "executions": [
      {
        "id": "992e5316-3aa9-47d4-afdb-d74e70d9287b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8462f58e-8729-4975-b5d4-493a2144df5f",
          "httpRequestId": "d0604b09-57d1-44e7-a517-85549be80280"
        },
        "item": {
          "id": "992e5316-3aa9-47d4-afdb-d74e70d9287b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "51275f23-c0b5-4f59-b830-a23eefbcfc35",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "1fcf4973-c132-4d9b-96fe-99a1174272ed",
        "cursor": {
          "ref": "668bbda8-f02d-4133-900c-fad07f841681",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9f1c84aa-07db-40fe-8dab-c669c229f473"
        },
        "item": {
          "id": "1fcf4973-c132-4d9b-96fe-99a1174272ed",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "138af3a8-2072-4ab3-9020-fbb448a57b14",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 0
        }
      },
      {
        "id": "bf815595-72b7-4180-bc52-500fb56beaec",
        "cursor": {
          "ref": "36ec41b2-1921-41ce-a9fd-f4547faa36ff",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e3351de-ad7e-4193-acf5-9bb8e448817d"
        },
        "item": {
          "id": "bf815595-72b7-4180-bc52-500fb56beaec",
          "name": "did_json"
        },
        "response": {
          "id": "7e5381d1-a703-467f-b985-68a74c219b17",
          "status": "OK",
          "code": 200,
          "responseTime": 248,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13bfb79d-66d8-4ff2-92bd-1d267a0f07aa",
        "cursor": {
          "ref": "5013fd01-5163-4109-aea0-511cccf417ee",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7afc64c2-0ab2-429e-bfae-eeec00b0b7c0"
        },
        "item": {
          "id": "13bfb79d-66d8-4ff2-92bd-1d267a0f07aa",
          "name": "did:invalid"
        },
        "response": {
          "id": "614491fc-ff7b-4d59-a105-2e324016b671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13bfb79d-66d8-4ff2-92bd-1d267a0f07aa",
        "cursor": {
          "ref": "5013fd01-5163-4109-aea0-511cccf417ee",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7afc64c2-0ab2-429e-bfae-eeec00b0b7c0"
        },
        "item": {
          "id": "13bfb79d-66d8-4ff2-92bd-1d267a0f07aa",
          "name": "did:invalid"
        },
        "response": {
          "id": "614491fc-ff7b-4d59-a105-2e324016b671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37032a78-a4ce-48f8-926b-3f216f909766",
        "cursor": {
          "ref": "e2005147-fbc5-4fde-b7ff-d386d7cce7ef",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "eed44020-d3e8-4ea2-805c-d7d4df8d51a5"
        },
        "item": {
          "id": "37032a78-a4ce-48f8-926b-3f216f909766",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7a9b8eca-2233-4d32-ad72-b2751ddb2c17",
          "status": "Not Found",
          "code": 404,
          "responseTime": 138,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2696b2-9dae-49ae-af5a-299e8304de66",
        "cursor": {
          "ref": "dce06832-f46b-43a9-b427-9226d8418ec6",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "34b2b6f3-90ff-4d14-bce8-0b6d045edba5"
        },
        "item": {
          "id": "9c2696b2-9dae-49ae-af5a-299e8304de66",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "793b2391-dfd8-4db6-af2e-d3e6fa89a74c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8efc326d-2bcc-4d1c-a49a-6b675c75423d",
        "cursor": {
          "ref": "330a4352-51f7-4a17-ae46-2af1a7e71ad5",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1cecbf54-5d8b-45ec-84d2-58c19192e4c9"
        },
        "item": {
          "id": "8efc326d-2bcc-4d1c-a49a-6b675c75423d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a61cb050-db20-4b0b-b00b-deaa405fc546",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed63735a-1de2-4aae-82c8-fe85069eade8",
        "cursor": {
          "ref": "b2b0b75b-17cf-4958-9d7a-c55dbd66b844",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9475799e-0aab-4d1f-a54a-92bf7bd2c36a"
        },
        "item": {
          "id": "ed63735a-1de2-4aae-82c8-fe85069eade8",
          "name": "identifiers"
        },
        "response": {
          "id": "02802622-2911-4333-b49f-397c924aa8f6",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de60eff-85c3-461f-b9d7-a12bb76de51a",
        "cursor": {
          "ref": "f18772c1-7123-4f10-9a6d-02feca4d9b6f",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a2f3d0f5-24f9-4cf2-a00c-f15c94c37607"
        },
        "item": {
          "id": "5de60eff-85c3-461f-b9d7-a12bb76de51a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a2ee4188-37c2-4d49-b67a-4a8e3ca25e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7aea6ab-b54c-4027-a9b5-1f3b1b7c7e88",
        "cursor": {
          "ref": "ba5c582c-e44e-4bea-a24e-8e94c7cd4db7",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "10cf49bc-9b85-4ba5-ba3a-6873cb409511"
        },
        "item": {
          "id": "a7aea6ab-b54c-4027-a9b5-1f3b1b7c7e88",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cb9e17f4-4b6f-4727-b01c-71a751d3c4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea8f41c-388d-47d6-bca6-d10bb0b542a4",
        "cursor": {
          "ref": "1e8eeead-89cd-4c11-b343-261060ac4744",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a42c7bcf-6113-46b1-9678-90715948797d"
        },
        "item": {
          "id": "eea8f41c-388d-47d6-bca6-d10bb0b542a4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "84f9a9b2-b99c-4257-ac07-ed50799b5377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a2f68e-6715-4e9b-9812-c2a148d36c43",
        "cursor": {
          "ref": "7af3d90d-9c38-49ab-bfb0-c90e211dcc07",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7607f432-9667-4225-b2e8-6184d0f150b2"
        },
        "item": {
          "id": "56a2f68e-6715-4e9b-9812-c2a148d36c43",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0db47653-63c2-45a1-aac6-13e6946b8b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438693c6-79fa-4d29-adfd-55af17987e17",
        "cursor": {
          "ref": "a021199e-3eff-41ef-ba23-5e5de503eecf",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7eebe2c1-6062-4fa3-b66e-7fdfcef85330"
        },
        "item": {
          "id": "438693c6-79fa-4d29-adfd-55af17987e17",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a66da8ef-ead1-44df-bf6b-b910d7a00f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f193c0-1b97-4587-8e82-df785e3cf3e7",
        "cursor": {
          "ref": "e178ff2c-e53d-42b6-ace0-a1b6949c1a22",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bf0d2d20-c47e-45b2-a051-775716381b2b"
        },
        "item": {
          "id": "f7f193c0-1b97-4587-8e82-df785e3cf3e7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cc250ec0-2423-401d-881c-3b07ae3b9b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e153566f-92eb-4da1-ae86-99807a8a42c1",
        "cursor": {
          "ref": "c37f465f-a331-4b07-a0d5-7b53d7d0ccb1",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b6a79098-c841-4e40-8a18-4395076af540"
        },
        "item": {
          "id": "e153566f-92eb-4da1-ae86-99807a8a42c1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "cab7cc9c-a82a-413c-83e9-f3e053eda383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2e405e-9b07-49b8-a1c0-c1d57e4eab8f",
        "cursor": {
          "ref": "ce96f421-ead0-414b-bbd0-6e2ede9a0d2d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b387bda3-c467-47f7-bb62-34ae94bb2658"
        },
        "item": {
          "id": "fc2e405e-9b07-49b8-a1c0-c1d57e4eab8f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0e05a0a2-eeb5-41f6-b289-b3f8695f9e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ba5543-42a1-4bf1-a034-3a5bab388862",
        "cursor": {
          "ref": "6af4c133-ed33-4854-9558-495a697aacf3",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "42d797fe-8078-4409-a041-db83bdb1c931"
        },
        "item": {
          "id": "94ba5543-42a1-4bf1-a034-3a5bab388862",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2a40d963-d612-405e-930e-80d5f9487f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6fcba58-7fc8-41f8-b74f-a190ac84f15c",
        "cursor": {
          "ref": "5f59f7f8-5d20-4fd5-8fbd-b1d9921f3833",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e0a7109e-94f2-4bcb-9640-5f4d68ac39be"
        },
        "item": {
          "id": "a6fcba58-7fc8-41f8-b74f-a190ac84f15c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8b9d9d1e-18ed-43a5-b464-2826f53974f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e1eadf-56ba-4a24-b9f4-00c9bf4f500b",
        "cursor": {
          "ref": "f70bba80-0e22-4dc3-905e-a420f5754614",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "62ef5e56-2733-411d-8bea-b19fe455c63f"
        },
        "item": {
          "id": "f5e1eadf-56ba-4a24-b9f4-00c9bf4f500b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ac75cd0d-05de-4e4f-bbba-731af3b45f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1eaf1f8-a1f1-4987-8d52-f6e2e649759b",
        "cursor": {
          "ref": "649de802-4682-45fb-827c-4af0b470c4f6",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d8cd5cb1-4615-4b57-addb-86eaf589f69e"
        },
        "item": {
          "id": "a1eaf1f8-a1f1-4987-8d52-f6e2e649759b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "da58c917-0cc8-4485-9425-e90416170156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e3ea01-dbdf-414a-95e8-032abc859c59",
        "cursor": {
          "ref": "d4a7c1f0-e776-4a3c-a310-45b7195db242",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d65640ee-1ab7-408f-a5bd-7ac9fb7866e6"
        },
        "item": {
          "id": "96e3ea01-dbdf-414a-95e8-032abc859c59",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f7f8630c-2b55-4a22-9e0d-e65de9308b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b69ca0c-4f47-4353-9f6b-2627059330a0",
        "cursor": {
          "ref": "32d25955-f334-4185-83a6-df03f7e3234d",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5db85570-5eb4-4df3-b33a-e61b186e05bb"
        },
        "item": {
          "id": "5b69ca0c-4f47-4353-9f6b-2627059330a0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1f382d70-c06f-4b96-aec3-df70200c0add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac04fce5-7fd7-4a6f-84d4-6317e93cf568",
        "cursor": {
          "ref": "7a48210f-42e1-429a-b676-3d58dc7b67bb",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2f5bc1cc-4189-42f3-9e03-f4a72a278b7d"
        },
        "item": {
          "id": "ac04fce5-7fd7-4a6f-84d4-6317e93cf568",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b6f60c36-0dc5-427e-afe1-cf654c549a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6b587e-cfdc-44f5-b083-505aba9311cf",
        "cursor": {
          "ref": "189d55a8-844d-4646-8e24-5c96ccf4c091",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1cab3796-7bd4-483d-882a-90ad021f3565"
        },
        "item": {
          "id": "1d6b587e-cfdc-44f5-b083-505aba9311cf",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9fc54e65-6862-4ca3-8909-50348f6bc382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d942c0-f72c-4f68-b5d5-3cc71f099445",
        "cursor": {
          "ref": "6de35b90-5d7f-4389-adc2-3c646df7a453",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ec124eee-2000-40b1-8e52-05e9fb5b1881"
        },
        "item": {
          "id": "c7d942c0-f72c-4f68-b5d5-3cc71f099445",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a761e316-690e-4ebe-a2ca-ea399975dccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d77565b-f5c4-4cea-88bf-7d9d2bbf8920",
        "cursor": {
          "ref": "a03ba529-ca19-4b5a-9335-f6058211640f",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c2a28e24-1d77-453f-a2c9-a45939a8623c"
        },
        "item": {
          "id": "1d77565b-f5c4-4cea-88bf-7d9d2bbf8920",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "074e1674-70d7-4f5b-9b0d-beb8a7f8ff61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e35a4f-750d-4d11-8b11-4af8e36f73cb",
        "cursor": {
          "ref": "76fa2bc1-4c97-4aeb-8162-c983aff695af",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "21470075-a478-43eb-976d-e2906c962197"
        },
        "item": {
          "id": "14e35a4f-750d-4d11-8b11-4af8e36f73cb",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d19d8129-d0d4-4fe2-b307-bc2434e153b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d809132-796f-41ea-a45c-edcb14377ba9",
        "cursor": {
          "ref": "9fa01697-dcde-45b0-8b15-d0542f146b29",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a4b1a545-d5b8-48a7-be76-5dc9fe326bc7"
        },
        "item": {
          "id": "0d809132-796f-41ea-a45c-edcb14377ba9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "57372234-25e3-48c5-b2a0-f4eb07a58216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a37847-c131-4953-85ae-03bb11b87fc5",
        "cursor": {
          "ref": "e5fce93c-1cc6-4066-bfb5-f1cec1a3c871",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8d3ac6ff-ea46-4f3b-9fa8-a9201f08f373"
        },
        "item": {
          "id": "54a37847-c131-4953-85ae-03bb11b87fc5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f03f8542-aec7-4c1c-b349-24b6fa32db29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56b3b8b-332b-44e3-8ef3-ca0e36fde144",
        "cursor": {
          "ref": "d71d3ccc-f636-4ab8-98d0-2388379971df",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5e2114ad-3f09-41bc-94aa-f15f8f3e6af0"
        },
        "item": {
          "id": "f56b3b8b-332b-44e3-8ef3-ca0e36fde144",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d034a49a-a3a3-474b-9b6a-097652a2e45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff28e614-635e-43aa-b0d5-d89e93590d4a",
        "cursor": {
          "ref": "0945ab55-044c-4645-8a80-a32aef363293",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "76143038-4885-465c-ad39-07c4497720a8"
        },
        "item": {
          "id": "ff28e614-635e-43aa-b0d5-d89e93590d4a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1606d640-ae9d-4359-91b7-11133c7fc219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718106eb-9e24-4f5b-8912-0124aaf1474a",
        "cursor": {
          "ref": "72497dc6-594c-4760-8a85-da18377d9425",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "29c08356-5ae2-44a4-9b3c-709c5b7801e7"
        },
        "item": {
          "id": "718106eb-9e24-4f5b-8912-0124aaf1474a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f290acac-3bf2-4108-b8cc-b1ab93ac8314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d89519-7f15-4576-a231-2fb9ef8d574e",
        "cursor": {
          "ref": "5d6c03fd-fce1-4f85-b298-c6b85470a4cf",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f883c414-e9a3-4b48-a801-80dbc355e807"
        },
        "item": {
          "id": "65d89519-7f15-4576-a231-2fb9ef8d574e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2d52199d-1678-4641-a216-8a848393c2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e64f742-64d7-42db-8ac3-df4199cc33bc",
        "cursor": {
          "ref": "af0c35d1-cd9f-46f2-92ba-1ea8e91568e4",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "98885064-8fd2-4424-b7d5-0d1696736caf"
        },
        "item": {
          "id": "7e64f742-64d7-42db-8ac3-df4199cc33bc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "755c140b-b2d1-4df1-9701-e0642b2c8399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae613c61-97d6-4e04-bf0c-19a125b41195",
        "cursor": {
          "ref": "68a350c0-850b-4c0e-942b-b9b1cf198f41",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e1165bd3-bb0f-48f5-9e9e-6dcdd2bf8c6f"
        },
        "item": {
          "id": "ae613c61-97d6-4e04-bf0c-19a125b41195",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b6a215ff-e9b0-4c20-84f3-a7ceef490b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639ac36a-a361-404c-ba48-b5fbae9089ef",
        "cursor": {
          "ref": "112bc85d-dde0-4d11-88ca-ea146500e759",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e396174a-f083-451f-863c-38b463395602"
        },
        "item": {
          "id": "639ac36a-a361-404c-ba48-b5fbae9089ef",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8bb0cb05-caf0-41c7-8e5e-2db6bcc6fa64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c49b73c-795d-41f3-9348-9f1c651f42b2",
        "cursor": {
          "ref": "c3698092-535d-4161-8b49-2bd9bc874fb0",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "33ac3af6-5e82-4f52-a47c-ddba3b1a1692"
        },
        "item": {
          "id": "8c49b73c-795d-41f3-9348-9f1c651f42b2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e0303ffe-8e1a-438a-8693-1f486166c0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8484671-84a1-4444-b3cf-e7d652ada884",
        "cursor": {
          "ref": "42b9e6f3-6581-442b-a135-af5cc0ce909f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "febf7940-91ff-4301-b6d4-8e2065e1c0e5"
        },
        "item": {
          "id": "d8484671-84a1-4444-b3cf-e7d652ada884",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6bbc9441-5615-42f9-815a-408bb205f721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5743304-bb18-4a51-b797-96968874900e",
        "cursor": {
          "ref": "46f15d5d-4e1b-4090-95e3-2c41a27a4073",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c0129579-250d-46bb-b394-52748a88b740"
        },
        "item": {
          "id": "b5743304-bb18-4a51-b797-96968874900e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5d682290-9338-4aee-80bb-d2e87e8d36ee",
          "status": "Created",
          "code": 201,
          "responseTime": 636,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "85030828-7a94-4d54-b443-b2faa10232cc",
        "cursor": {
          "ref": "da4057d3-8009-468a-b5ab-a645f757d897",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d9edffc9-4167-44a3-9b2b-538aec7c2d15"
        },
        "item": {
          "id": "85030828-7a94-4d54-b443-b2faa10232cc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1beafd6a-3000-40e4-a5d7-54c74bf5afe7",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9855c8ff-d512-471e-9da3-763c5ee1e6f9",
        "cursor": {
          "ref": "1a9252a6-3245-4bb7-a338-0a49762ba7a1",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "36cf8ff9-70b1-4858-93ab-edd0267a973f"
        },
        "item": {
          "id": "9855c8ff-d512-471e-9da3-763c5ee1e6f9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a4583e00-7d99-4e89-a558-d62601fbcf71",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d7b9fc8a-2fb9-46d7-bb08-e145d43fa970",
        "cursor": {
          "ref": "7459ecc0-0fef-4e3c-89b2-89c3890d685c",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d3a4bc84-c404-44dc-bf59-5024f2b1c963"
        },
        "item": {
          "id": "d7b9fc8a-2fb9-46d7-bb08-e145d43fa970",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "68b8bf66-1584-4aaf-9d17-5f7f3ec803c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf25e48a-de06-486e-98b6-37aa24c49c5b",
        "cursor": {
          "ref": "43e10d0f-7e65-4315-bc25-da88ed642901",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1ce24492-e52b-4631-bd72-69d7b9ba767a"
        },
        "item": {
          "id": "cf25e48a-de06-486e-98b6-37aa24c49c5b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fcfdb4f8-fcce-4511-94a4-d2447ab07970",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7e752bc8-5d4c-445e-8e31-73fbb9888f9f",
        "cursor": {
          "ref": "f63966a1-76bf-4c22-8ffb-51913823974a",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "83125587-c550-48e7-af32-73be8a00d0d2"
        },
        "item": {
          "id": "7e752bc8-5d4c-445e-8e31-73fbb9888f9f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e4b28abf-74ea-4239-ad73-d2f8b0609355",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5ec06c1e-80ca-4bd7-aadd-d0015d16c9f0",
        "cursor": {
          "ref": "0ff0e000-4199-486f-91bb-53b57e2e6932",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d59765ec-e76f-47bf-9ef7-508e87d268cd"
        },
        "item": {
          "id": "5ec06c1e-80ca-4bd7-aadd-d0015d16c9f0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b86e3a44-39d0-43ef-90cc-cb654b4256bd",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "81b73877-c5aa-40db-9c3a-43f3dcf9f3ab",
        "cursor": {
          "ref": "91283927-bc82-4905-95dc-7e7e113c80dd",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bb1cf9de-396e-4b6a-83d5-e0b7aa0e4769"
        },
        "item": {
          "id": "81b73877-c5aa-40db-9c3a-43f3dcf9f3ab",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fb21c0aa-0e45-446c-b9e4-dc9ccc2cb7e1",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f8a30d71-b3ba-4dee-9c15-d2087af14dc4",
        "cursor": {
          "ref": "7db5ee12-0dda-4495-a041-b5f68072e833",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0ea23808-85bc-4355-9c70-5852d657a41f"
        },
        "item": {
          "id": "f8a30d71-b3ba-4dee-9c15-d2087af14dc4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c0532f8e-2638-4eb1-bb91-7b68c83045df",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "11006c9f-ebeb-45c6-9076-e257d8ad5373",
        "cursor": {
          "ref": "dc10e81b-53bb-406e-b8ac-996726256500",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0948734f-f92c-4fcb-8e82-a03f607538c8"
        },
        "item": {
          "id": "11006c9f-ebeb-45c6-9076-e257d8ad5373",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4aa89384-e88b-4ce7-b2aa-a178ede5e1e6",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "70d4fcd2-b89d-49ce-adf5-22587da06f55",
        "cursor": {
          "ref": "3ea09429-98c1-4b2f-bafc-a580d7c47019",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6c59e73a-a76f-4fad-8294-b65feb70c3c5"
        },
        "item": {
          "id": "70d4fcd2-b89d-49ce-adf5-22587da06f55",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a0b7a3a7-a2b9-46dd-bd4b-57f717b1012d",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d55ebb9e-515f-4fbd-ba3b-573c1174d807",
        "cursor": {
          "ref": "07aea017-6ddb-4154-88a0-bf0554c3cf37",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "02967893-190a-47b2-a5cc-1e65ea7eb731"
        },
        "item": {
          "id": "d55ebb9e-515f-4fbd-ba3b-573c1174d807",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "fb6dfe50-a291-4492-b826-be8007b0454d",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d8d01533-93ac-4fb5-b6c2-9dce32c09335",
        "cursor": {
          "ref": "537e4cac-52c2-4ce7-b0f8-5568b25a4048",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b1a97f96-d4a6-4ade-a4a2-491fe6791cce"
        },
        "item": {
          "id": "d8d01533-93ac-4fb5-b6c2-9dce32c09335",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4a201d7f-6686-421d-b901-e8d3fa21e4ba",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5328364e-d94b-431f-be0c-5a292dffcf07",
        "cursor": {
          "ref": "12939975-3506-4414-8100-1a55ae24d9ab",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "973747d3-a3d3-46c5-b252-a5bc5720c874"
        },
        "item": {
          "id": "5328364e-d94b-431f-be0c-5a292dffcf07",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "241532bb-c7e4-4770-a108-58df7d4e26ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4352af3-ca19-4177-8d52-e2d45482ff43",
        "cursor": {
          "ref": "175153e4-2684-4c9d-b894-2ba54f785f67",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "07360dc0-1b2c-44bf-beff-b92fac9e1043"
        },
        "item": {
          "id": "e4352af3-ca19-4177-8d52-e2d45482ff43",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "27859506-727b-4313-827e-4f07ca61f012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6498b6bd-82bf-4b5f-87ba-9e91be3d20ee",
        "cursor": {
          "ref": "51493621-16c5-40a1-af68-de1c37690850",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "463023af-fd46-4383-a476-0c9c70d94174"
        },
        "item": {
          "id": "6498b6bd-82bf-4b5f-87ba-9e91be3d20ee",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4cea5af0-8551-4aad-8945-836e10a952e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661c4c30-2e80-4e21-b986-6d8c35a038cb",
        "cursor": {
          "ref": "197246ca-5f19-4b44-a9e2-ed9c43231fb1",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "02fb4d70-17bc-4193-8023-67a15d0b68d5"
        },
        "item": {
          "id": "661c4c30-2e80-4e21-b986-6d8c35a038cb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "37bed0be-7be5-4e6e-93f5-4189e2619d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9e5933-03d0-45f9-b9ef-fd7ba2a4acb2",
        "cursor": {
          "ref": "d70574e9-4aa2-461f-96ab-7f0bbce8fdbf",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "874fa9ce-9b63-488e-ab90-b978378933a7"
        },
        "item": {
          "id": "ef9e5933-03d0-45f9-b9ef-fd7ba2a4acb2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3f323821-dafa-4c33-9768-70b0f3cebf1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4348555-4e60-4c97-9b46-5a06b7838457",
        "cursor": {
          "ref": "c3b0829a-32ac-469b-86d4-88014c0ccd0b",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "59f581cf-18b1-4b7b-911c-6071386dd3f4"
        },
        "item": {
          "id": "a4348555-4e60-4c97-9b46-5a06b7838457",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f9eb0cb0-0084-405e-b78f-481af68e1e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a981cec4-97bd-403a-a3f9-8eab5f6620f7",
        "cursor": {
          "ref": "ad1a0464-9e32-4a8e-beff-aac754d2b281",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7a3d7687-f4d0-4e57-ae76-61a8d13bb271"
        },
        "item": {
          "id": "a981cec4-97bd-403a-a3f9-8eab5f6620f7",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e7a714e6-e308-4101-afa5-c10aba0dab65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc64992-39d0-4e0f-b66c-58eaad30c20c",
        "cursor": {
          "ref": "46bdc315-68db-4ea8-8c76-02255c7d6892",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b0a9221c-d796-486d-8aae-857cceb3fc29"
        },
        "item": {
          "id": "8bc64992-39d0-4e0f-b66c-58eaad30c20c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a34b6221-5f0f-431a-9de4-e00d3d9ed2e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d953acbd-d9dc-451b-b820-350074648b3a",
        "cursor": {
          "ref": "2e8950f8-c563-435b-94f9-277f227e0ddb",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bb4626e4-d03a-40dc-baf2-326d077e0fbf"
        },
        "item": {
          "id": "d953acbd-d9dc-451b-b820-350074648b3a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3fdeca45-c1c6-469e-96a2-32cb0a76a85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f60bb0-dd07-4877-a0a1-9beb7ffa8e4f",
        "cursor": {
          "ref": "4a7c7d0a-3d4e-44b2-bcee-daa3dfdcc1a3",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c9e1f6eb-654b-4e51-80fa-1c5ebf550ebd"
        },
        "item": {
          "id": "00f60bb0-dd07-4877-a0a1-9beb7ffa8e4f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a5f19340-8870-4592-9d32-b41e019e7ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4055d5ad-7694-4db8-a3c6-5630e107d892",
        "cursor": {
          "ref": "d22cfeab-2830-4e18-9c60-199ee36776be",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6b3e16bc-3981-4629-a130-36001cf41797"
        },
        "item": {
          "id": "4055d5ad-7694-4db8-a3c6-5630e107d892",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6f474864-7cbe-4516-a174-aa6735aa11bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48261ddc-63f6-42bd-b054-102a4b6b103c",
        "cursor": {
          "ref": "aafe1eda-3516-4637-934c-bcc90da77112",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2628b742-5f10-4798-b14a-fa1dd109bbaa"
        },
        "item": {
          "id": "48261ddc-63f6-42bd-b054-102a4b6b103c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1636aa2c-9648-4f56-bb47-c6f2527ab51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684f0e67-67bf-4c5c-98ef-509b57c5100d",
        "cursor": {
          "ref": "7629ef20-3220-4d8f-87e8-0ae5ddf917f8",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "16b0f6d5-6aed-4695-bc8c-796da5c8a3cd"
        },
        "item": {
          "id": "684f0e67-67bf-4c5c-98ef-509b57c5100d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "91eef187-621d-4819-9373-a29f2bdbbf26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee58bb0b-5a98-48b2-bde9-2d8a4fcfdce9",
        "cursor": {
          "ref": "39eb823d-63e8-45ef-b75e-a89b73327006",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "51878beb-1d7d-4966-9b8c-6c6b96ec6b1a"
        },
        "item": {
          "id": "ee58bb0b-5a98-48b2-bde9-2d8a4fcfdce9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1443f097-e72c-4a0b-b74d-07f0b62d00ab",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "828f3f34-5d64-4002-ba74-2c2af13b516e",
        "cursor": {
          "ref": "e0762a75-798d-4b4c-9e0e-3a8f50483dcb",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "65a2525a-9ced-4dcc-9292-1acbc979cff4"
        },
        "item": {
          "id": "828f3f34-5d64-4002-ba74-2c2af13b516e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7d5587ef-6ef0-4489-8739-139de5525f88",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3fcfd081-76f6-4512-9cf5-da810fb64a09",
        "cursor": {
          "ref": "78fbab2d-2a68-4b1b-97c8-b2fdc710ca04",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "bf193a00-ddf5-4445-8b3a-3ea88430c834"
        },
        "item": {
          "id": "3fcfd081-76f6-4512-9cf5-da810fb64a09",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1b7256a2-4ad5-4c20-8774-9de081952c63",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ce195e0f-66a3-4dd8-858d-ee17091fa22e",
        "cursor": {
          "ref": "e7f63899-ce7e-4a82-ab89-c113177afc9f",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5f674bc6-f80b-4870-9439-a43380f740e9"
        },
        "item": {
          "id": "ce195e0f-66a3-4dd8-858d-ee17091fa22e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6a7064a8-d960-45ab-9a34-c5261e2fbd1d",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "31f8280d-69ce-4acb-b338-e9cdc8bbd09e",
        "cursor": {
          "ref": "bcce46cc-1071-4fb1-921d-5f4482decb02",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8363bf04-56d7-4b63-8289-848693fd75ef"
        },
        "item": {
          "id": "31f8280d-69ce-4acb-b338-e9cdc8bbd09e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8eae00bd-eb26-4d60-9d22-143cc8de29c9",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "e80b9db5-7597-4998-a031-5b8ffa71f3a1",
        "cursor": {
          "ref": "44c3bf1a-82a1-4fcf-80f2-9f0f0a517f86",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "53a3f15d-c357-40a5-9f7d-f6b362c8c849"
        },
        "item": {
          "id": "e80b9db5-7597-4998-a031-5b8ffa71f3a1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3763876a-fa13-4966-8b78-c8f86d3d4204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7973407-3bb6-4752-a386-3b3696f76033",
        "cursor": {
          "ref": "da1e4f1c-f59e-49f7-be07-e84c64f0d6ed",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c8e3ce7f-4cec-4041-ba05-d3e670db46c4"
        },
        "item": {
          "id": "b7973407-3bb6-4752-a386-3b3696f76033",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6e041f1f-f8a6-4493-8770-53e0f70b05dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554b1486-2132-4556-971c-38379cf72e2e",
        "cursor": {
          "ref": "c4fd8708-007e-49d6-87e0-2f74de5af173",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "372297ae-6e87-4a64-8319-7ee3e979a9af"
        },
        "item": {
          "id": "554b1486-2132-4556-971c-38379cf72e2e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e3ade4d4-d599-43fc-a6ba-7840e579bc29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a31eb0-3fad-4c03-938f-838efd571090",
        "cursor": {
          "ref": "121a0c57-0098-4b04-bb8d-29aec8508871",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "abf7a670-4992-4d19-9a0a-e4c0ea4608e9"
        },
        "item": {
          "id": "19a31eb0-3fad-4c03-938f-838efd571090",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4090ccb1-e85c-45f3-8e11-10c43fa13c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9122ceeb-c679-4de3-b063-cfd2251c7caf",
        "cursor": {
          "ref": "1cdeb9c1-4874-476c-ad0a-bc058c3bfdb9",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "edbf1fb4-7e73-4cc2-a375-ef9665687e07"
        },
        "item": {
          "id": "9122ceeb-c679-4de3-b063-cfd2251c7caf",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "01b55f93-06d3-4ad2-b23e-82b354699c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18857510-de3d-4ef2-a469-08508a77110d",
        "cursor": {
          "ref": "0d33eee9-eb58-4dc2-80c7-1101adc781d2",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0db86701-c8f2-4cfc-8adf-08115d6b32b4"
        },
        "item": {
          "id": "18857510-de3d-4ef2-a469-08508a77110d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "64ddfd99-78cf-4fe7-81b6-01c574000f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99019551-f562-4e47-980a-c4c0f99f104e",
        "cursor": {
          "ref": "21e58070-33bc-4b84-934e-31ec00e218df",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "182d010d-60c7-4f7a-a4e2-e1f1dad6b9d4"
        },
        "item": {
          "id": "99019551-f562-4e47-980a-c4c0f99f104e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "baf68dd9-48bc-4935-9df2-7446f660f017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e41b5c-6fbe-4d77-bf07-9f996f456f3f",
        "cursor": {
          "ref": "84208e6d-5113-4473-a189-619cfc8ca0eb",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b501de75-2c25-4f12-979f-b42e26108b8c"
        },
        "item": {
          "id": "b2e41b5c-6fbe-4d77-bf07-9f996f456f3f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e92b51a9-22af-425e-abb0-abedb18badcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952bba2d-215d-4405-ac3b-5881df98a7ea",
        "cursor": {
          "ref": "b8a39672-7f7d-44ed-a45f-0bdbcdb8d5f3",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "735da598-06d5-44a6-86ed-f52745f0dc0e"
        },
        "item": {
          "id": "952bba2d-215d-4405-ac3b-5881df98a7ea",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c424bc9d-6231-4df3-8aa7-9787425d4c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126c8533-e6c3-4b65-bf86-19e7d3e4863d",
        "cursor": {
          "ref": "50c01b9b-0312-4484-a0a1-015f367236fe",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b1a3820d-2349-4949-a3cc-6c5fda89684b"
        },
        "item": {
          "id": "126c8533-e6c3-4b65-bf86-19e7d3e4863d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5d3267ac-d481-4ca1-844c-6d1a67b1b2ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a5f6cc-d5cf-4dc8-9977-446f4700a828",
        "cursor": {
          "ref": "40bafb0b-cf5c-4375-8eef-c7a92d2a630c",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ea9b989b-0024-4ef1-9147-1231c8407083"
        },
        "item": {
          "id": "45a5f6cc-d5cf-4dc8-9977-446f4700a828",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1c88a3a9-54fb-43b6-9f2f-70ec5e8f76ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfa3ffc-cd7b-4902-ace9-44de513ce26c",
        "cursor": {
          "ref": "4781e941-1436-4644-9edb-9e6e6a988cf2",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e2313917-739b-41fd-a2f9-e81176c5fe2d"
        },
        "item": {
          "id": "3bfa3ffc-cd7b-4902-ace9-44de513ce26c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7329463d-63ba-4068-8e49-37ea7d6a3299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2bb621-ba68-4a24-8e61-15581b0aeaf0",
        "cursor": {
          "ref": "3f0e6989-3d01-4050-947f-ffddcd8107dd",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e9a4ab8f-3e39-4afb-877e-0e1b441f55e0"
        },
        "item": {
          "id": "1b2bb621-ba68-4a24-8e61-15581b0aeaf0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "182f3c4c-9f98-405e-be80-a2cbed5a5221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce339b6-4dbe-44f2-9f36-b22c9cece3b0",
        "cursor": {
          "ref": "028ba1f6-2092-4981-8787-b92633558c15",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7bff5f1e-3856-4f8a-b8d4-8c417f241005"
        },
        "item": {
          "id": "4ce339b6-4dbe-44f2-9f36-b22c9cece3b0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4c5e3524-3cdd-46e0-bf71-fb71f9807636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb36b55-0cd4-4983-8ed3-3df3406df567",
        "cursor": {
          "ref": "597ff4ba-ba0b-443a-a229-e8c9dbae3548",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a6c3f375-d34d-44e8-b7e5-d8dafff24dd6"
        },
        "item": {
          "id": "ffb36b55-0cd4-4983-8ed3-3df3406df567",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a64a6f49-8839-4353-95d3-3d103d199eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35539657-1764-4a25-affa-f2d528df4c22",
        "cursor": {
          "ref": "edc51eda-33c6-45b8-adb7-b6576a76d4dd",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "14ee6d05-a3e5-4a59-94b9-e4027d82d6bf"
        },
        "item": {
          "id": "35539657-1764-4a25-affa-f2d528df4c22",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d75f5351-791f-42cc-9805-e2aa916ef36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0451af32-8ebe-498d-a8ab-a711466f8ee0",
        "cursor": {
          "ref": "632e665c-962c-4cbc-91e6-844dd58b2654",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "da669e0e-44e2-4946-aab1-123b09ad1794"
        },
        "item": {
          "id": "0451af32-8ebe-498d-a8ab-a711466f8ee0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a498f96f-a029-405e-9378-c93899bbcfb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909fc3d6-e75a-4b65-ac30-585f3e0ae3bb",
        "cursor": {
          "ref": "eda13263-13d7-47bd-bbe4-7e13e2c41eae",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "584f11b8-f25c-4b0b-a48d-b01ee94c929b"
        },
        "item": {
          "id": "909fc3d6-e75a-4b65-ac30-585f3e0ae3bb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "aa19cb75-0e0f-45ad-8422-1081fb664f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c6747d-5a3b-413d-a91a-e1ec0c1331d1",
        "cursor": {
          "ref": "ebcadb7f-ae66-4c8b-8439-8fa25822f5ad",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "450db86b-d117-4e6a-b81f-1ecc2710b0da"
        },
        "item": {
          "id": "86c6747d-5a3b-413d-a91a-e1ec0c1331d1",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f21dd5f6-e93a-4b26-8cd4-01e7d7e3e06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfcb0ff-5112-4ad1-b1fd-9101d1b3a7dc",
        "cursor": {
          "ref": "fa075d0a-a349-47c0-a062-88e0c49cb429",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c82d717c-992a-4299-8407-1c761c900525"
        },
        "item": {
          "id": "9cfcb0ff-5112-4ad1-b1fd-9101d1b3a7dc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8b2e2258-5660-49c0-a838-2b5bb6e2db27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efbfda3-e360-4b79-ac37-badb1d91de52",
        "cursor": {
          "ref": "29a33b27-a3eb-44d6-b281-a0a1e640012c",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "50ad1825-a5d6-42ff-b553-f09fcbcfec95"
        },
        "item": {
          "id": "0efbfda3-e360-4b79-ac37-badb1d91de52",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4bcb3991-8687-4a65-8ac3-0a3a58d76a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273d02f2-adf6-480e-ac1d-bd7aafae63d3",
        "cursor": {
          "ref": "64bbd46f-9f77-47bc-a712-a0edbe5bde18",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e4180435-df0a-46c4-a4dc-71fce386e1c9"
        },
        "item": {
          "id": "273d02f2-adf6-480e-ac1d-bd7aafae63d3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7f5b6b2f-f6ba-4322-bbb2-d4c67062af5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109f730b-b69b-405e-b0db-ca6b12129bbb",
        "cursor": {
          "ref": "981fd136-1246-4e95-b9a3-3792bedeb4d5",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a0af6dbe-88c1-4f22-acba-d8e0b71102d6"
        },
        "item": {
          "id": "109f730b-b69b-405e-b0db-ca6b12129bbb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0d480814-4ca7-49c8-b910-61ec55475a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb0fe16-32d6-4600-b45f-c0f7df857a18",
        "cursor": {
          "ref": "14c93def-2f47-4af7-b0f4-8ecb94d618fc",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6c2fd4e0-e9ca-4c0e-b6de-4f85400f19d9"
        },
        "item": {
          "id": "acb0fe16-32d6-4600-b45f-c0f7df857a18",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9b09085d-ee0b-4978-bd6c-589c4b7aa1a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61fa995-340a-48c8-aa19-00a7db7ca42c",
        "cursor": {
          "ref": "53807bf1-c7ec-4903-971d-8b76198369d7",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "129fe1a6-5a6c-4017-b00c-55c7b3e6ce46"
        },
        "item": {
          "id": "b61fa995-340a-48c8-aa19-00a7db7ca42c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b2c8a6c1-9c6a-43b1-90b9-e005d943c603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a2412e-9ee1-4720-bf09-0326767c1eb3",
        "cursor": {
          "ref": "6de47fe9-4b16-43ad-8a86-cab377cd9ea2",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8d3b342b-58d1-469b-ab54-fea30b6cd8b7"
        },
        "item": {
          "id": "00a2412e-9ee1-4720-bf09-0326767c1eb3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1b1f0da2-5dba-4788-b5f3-62201b09527e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371676d4-2fe2-438f-aa72-f5703f648283",
        "cursor": {
          "ref": "bb9fb20f-c1cf-4d76-9f65-223a9ed4f107",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8a0b7334-6a7e-4fe5-85b8-0897df2d3e98"
        },
        "item": {
          "id": "371676d4-2fe2-438f-aa72-f5703f648283",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d5b3d353-6510-4339-a11c-e13c30c97363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4063fe5c-e3ad-434e-b2b9-804560761802",
        "cursor": {
          "ref": "9ad83817-186e-4fe5-8d4e-7a0b09518fc9",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6ebdf13c-26c3-4f05-acfc-d2f53b4d1510"
        },
        "item": {
          "id": "4063fe5c-e3ad-434e-b2b9-804560761802",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3250961e-1e4b-4d44-b28e-b48990983e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2e56ad-85de-49b5-abf9-b04e9577e34d",
        "cursor": {
          "ref": "86973b2b-80ad-4480-a86b-8d3c3ca3e3a7",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ae5dbd5b-8916-4636-8396-95e66210c4d4"
        },
        "item": {
          "id": "8b2e56ad-85de-49b5-abf9-b04e9577e34d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e56b16ab-3562-45f0-b37b-2c9f53e811c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9797f0d8-16f2-47eb-969a-8a30105fc428",
        "cursor": {
          "ref": "8a774079-46ef-47af-af0c-80008182738e",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f82594b6-ebc0-4622-a68a-a0921421fb4a"
        },
        "item": {
          "id": "9797f0d8-16f2-47eb-969a-8a30105fc428",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "31c12ac2-7b26-466a-bbe5-d29f7e9fab34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21aaf937-454e-4dd1-a319-678ec89bca88",
        "cursor": {
          "ref": "8a60d890-f822-4222-bb62-f203181b4e1a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a74685c8-8ed1-4abe-a76b-dedaa359a1c3"
        },
        "item": {
          "id": "21aaf937-454e-4dd1-a319-678ec89bca88",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c5163d42-ebbe-43b5-9427-35f3e172512c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02eb46d6-8376-46cd-b152-28aca57f8c18",
        "cursor": {
          "ref": "a4fcec08-221e-4870-bee1-f3ef6a401aa0",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "141a9921-2a65-4d56-ad5a-46d210d42e2c"
        },
        "item": {
          "id": "02eb46d6-8376-46cd-b152-28aca57f8c18",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "695b883e-fde6-4701-b3e9-f0b69ca6dc2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984f7e71-bfb9-4ae2-b497-add33269ae1f",
        "cursor": {
          "ref": "412ad16b-8d98-48db-973a-f1b8bfefb1da",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5f0471a1-5e4a-422c-9b1f-376b7bbbda2f"
        },
        "item": {
          "id": "984f7e71-bfb9-4ae2-b497-add33269ae1f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "32fcf45f-05a3-42b2-b0cd-db84745347dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "75501d4b-2ae5-4bc0-919c-9f247eeed9f3",
        "cursor": {
          "ref": "1e8d368f-5aaf-4b5e-afb2-ccd68d2cdb28",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d4281cd8-a00c-4e21-addd-af5ad5278e82"
        },
        "item": {
          "id": "75501d4b-2ae5-4bc0-919c-9f247eeed9f3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4c50cf98-a0ae-4f49-8498-85613984ec1e",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "baccf91a-c1cd-4c0d-93e4-a66c30aa26de",
        "cursor": {
          "ref": "1c4ec4f0-08cf-4168-8508-5508f14033ce",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "40958087-2d12-482a-8626-1cc971ef9ea7"
        },
        "item": {
          "id": "baccf91a-c1cd-4c0d-93e4-a66c30aa26de",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "59e88f6b-e7e8-4368-8d1b-19d49f6ba742",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "565ce249-f92a-4d73-8183-1535362920b5",
        "cursor": {
          "ref": "c717b878-182f-4090-9215-20cb7915324a",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a7e20193-a8bc-4ded-acdd-7494d8c4042f"
        },
        "item": {
          "id": "565ce249-f92a-4d73-8183-1535362920b5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c1e40418-2115-48ac-b82e-70ed5ee53dc4",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd93c66a-52af-41a0-8010-4f244cb46c57",
        "cursor": {
          "ref": "41693098-5625-4f36-907d-dce75509d926",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "539d69a9-9894-42c4-bc3a-13ef44e03363"
        },
        "item": {
          "id": "fd93c66a-52af-41a0-8010-4f244cb46c57",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "382dfa5d-4efc-4a29-91df-0aaa5b2c0c31",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06c25c9-cf7c-4987-938d-2b3f96d96fea",
        "cursor": {
          "ref": "68fd9537-4fc7-4506-bc88-33d5b95051df",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "31ad2c14-9323-42c6-a574-2ec6b311a85b"
        },
        "item": {
          "id": "a06c25c9-cf7c-4987-938d-2b3f96d96fea",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "309b6079-f9ce-4bdd-a8fa-69a90c52a0d7",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-20T00:33:54.965Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-20T00:33:54.965Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0a3fbb90-fbe4-44d4-aff1-707327b67d86",
        "cursor": {
          "ref": "4a7865cd-2b58-4c3e-9a6c-153de1454f9c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "4886ceba-4c11-4111-928d-3610fbc8ce6c"
        },
        "item": {
          "id": "0a3fbb90-fbe4-44d4-aff1-707327b67d86",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fbd5c712-1ab1-4fa3-bc77-952848b4f2fa",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7286f8-760c-4ed3-8c29-b9445e9a9c69",
        "cursor": {
          "ref": "c74aa6a6-4e4f-42d4-91b1-8588a11955f4",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ef316121-052a-4217-a2ae-6d6bdf7b0e86"
        },
        "item": {
          "id": "2f7286f8-760c-4ed3-8c29-b9445e9a9c69",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0e265ddd-8451-4c37-97e0-8375e121f088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bebf7b6-4ac0-4f0b-a91e-57db36f4aea0",
        "cursor": {
          "ref": "67f98054-4557-4637-942c-df30a40e93a0",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "409e0987-0c54-48da-89c9-96754e2beba2"
        },
        "item": {
          "id": "3bebf7b6-4ac0-4f0b-a91e-57db36f4aea0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1fa97284-97e2-46ce-80b6-98ccb4c43522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46283c26-40a6-4300-8cfd-92a0ae9e209e",
        "cursor": {
          "ref": "2b85e756-a4fe-4d1e-a767-fa291424f1fc",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0393d559-de71-4f95-970b-d11b29839668"
        },
        "item": {
          "id": "46283c26-40a6-4300-8cfd-92a0ae9e209e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e536ede8-02db-4cbb-a9e4-f833874e9354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24f2faf-dab6-4bdf-985f-cacf431375ac",
        "cursor": {
          "ref": "516ad578-5e6d-478f-9fdb-5733208b9343",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0d07bc8c-542f-46cd-b397-ee732b025d2b"
        },
        "item": {
          "id": "e24f2faf-dab6-4bdf-985f-cacf431375ac",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0086980a-428f-493b-b0a0-417bd7109247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3749bad2-ba90-447a-b296-ae082b8fb630",
        "cursor": {
          "ref": "4bb91dbd-ca56-4b14-9663-8dc8a62406de",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2e10f0f6-54dc-44df-99f5-9e7e2f43475a"
        },
        "item": {
          "id": "3749bad2-ba90-447a-b296-ae082b8fb630",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3f066f4e-921a-4564-aa87-e0bd15f735ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d9b52a-ead2-4162-8438-19da5da5cc1d",
        "cursor": {
          "ref": "0fec6c17-3d9f-42c5-a39a-af88793d0777",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6b4ab47f-2a0f-495d-9513-8aadb6b2675e"
        },
        "item": {
          "id": "11d9b52a-ead2-4162-8438-19da5da5cc1d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9f4dcbd1-09f8-4043-8168-3e4c056d7b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd6dadb-61ff-4656-9f1d-ec381fffee33",
        "cursor": {
          "ref": "d27f58ce-4237-4847-a586-be8c5e273a6b",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b3d5ce13-4060-4e52-a13c-37d99f98a9ea"
        },
        "item": {
          "id": "4dd6dadb-61ff-4656-9f1d-ec381fffee33",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "84c65bb0-b665-4549-88b4-c4b7f79d9e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848571e1-28fb-4289-9b4a-b1df773415f2",
        "cursor": {
          "ref": "d882c9cd-1775-46a1-ab40-cf52a70b8709",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f388bc39-d035-412b-b98e-733ef02d6205"
        },
        "item": {
          "id": "848571e1-28fb-4289-9b4a-b1df773415f2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "609170e9-3812-47d5-ab21-a4e4a52a69b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ae25f6-664c-4720-8d19-c41170be3f26",
        "cursor": {
          "ref": "61dd9d51-40f6-46be-bf3c-396462ef1276",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f50cf772-1466-4f48-9fd9-ad6ca95fcf2d"
        },
        "item": {
          "id": "87ae25f6-664c-4720-8d19-c41170be3f26",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7c7ccef2-6eea-49b3-9e60-97602c5118a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2037f86e-80da-46ac-9df4-45faf1de3ae3",
        "cursor": {
          "ref": "f433af2d-2d0b-4ed9-9ce9-d92053851ede",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8e99bcf3-fb98-4feb-bfba-d77b2d596c81"
        },
        "item": {
          "id": "2037f86e-80da-46ac-9df4-45faf1de3ae3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d552c53e-c6aa-444e-80d3-189ff4242906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18b5d41-4276-436a-9848-8c0e13e4f10d",
        "cursor": {
          "ref": "78d73b34-7069-4a52-972b-41256d5ef243",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a738736c-5bc5-4a12-8749-1b8609d4625f"
        },
        "item": {
          "id": "b18b5d41-4276-436a-9848-8c0e13e4f10d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5a63bc39-14ca-42b1-b4f1-7f4be3fed948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80be8dc-3eb7-4914-9a5c-499ea7ab8424",
        "cursor": {
          "ref": "409e1baa-be25-43c5-9670-d37d7683d4d4",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b7ca82fd-5621-45fe-b8f6-d7b3b4f7ae4d"
        },
        "item": {
          "id": "e80be8dc-3eb7-4914-9a5c-499ea7ab8424",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bc42f445-12d7-43ff-b845-19ea688f84e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ddd9dce-9edf-4318-b95c-960950423f79",
        "cursor": {
          "ref": "64213618-a4bf-4bbd-93b8-28ae16bfbfe2",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a419e786-118b-48cd-957d-9d8d0c552354"
        },
        "item": {
          "id": "2ddd9dce-9edf-4318-b95c-960950423f79",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e41b1dfb-b4d0-4b71-b40b-8f4eec5150ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 131,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "7c288817-3b6a-4951-b027-894d62274cce",
        "cursor": {
          "ref": "1f715744-ce6f-465b-87cd-f4a55fd2f749",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a6d23965-c005-4300-9b7b-70dfec17c43e"
        },
        "item": {
          "id": "7c288817-3b6a-4951-b027-894d62274cce",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "327f74c4-1945-4075-84de-2ad8f52d3fd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 132,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7ac8b33e-9cee-4117-a536-9c528ed123ad",
        "cursor": {
          "ref": "2c53c8fe-e19b-4f8a-80c6-69b5f2be754a",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b7e93b35-a7b2-409c-9c81-7125d4aeb020"
        },
        "item": {
          "id": "7ac8b33e-9cee-4117-a536-9c528ed123ad",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5780cb8f-b6bd-4af3-8de0-ce53458d6d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75eaacb-8a0f-47a0-ba5c-db1a359906db",
        "cursor": {
          "ref": "7e216973-bc9d-4123-a4b5-192832cda6a6",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4c9f3680-f24e-498b-b019-c1f53eda0f06"
        },
        "item": {
          "id": "c75eaacb-8a0f-47a0-ba5c-db1a359906db",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9bb423af-6077-40a4-bf56-aed5611e04c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7f8a86-d096-4a5d-b351-390f8b45e0c4",
        "cursor": {
          "ref": "3c127ce2-01f0-4d3f-9f36-d9797e687d22",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f7355c32-026d-41e5-90fb-e066dc8aa882"
        },
        "item": {
          "id": "7f7f8a86-d096-4a5d-b351-390f8b45e0c4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e27d0f69-e4f5-407b-8636-a60bca3bb4cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678c148c-94b4-448f-aa3f-2f4bb817830e",
        "cursor": {
          "ref": "233928a3-570e-4a87-9c57-04a6299a87f6",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "dd9d2137-0101-4a48-850a-255f66583ce9"
        },
        "item": {
          "id": "678c148c-94b4-448f-aa3f-2f4bb817830e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c4baba94-a6dc-4168-bc50-e903683ca893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2771cad8-9c95-4691-9e06-92778e93e09a",
        "cursor": {
          "ref": "ecbf5e77-3812-435d-97a7-9066fe967f5d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b086c36e-8489-4750-b565-6f3d828bfb97"
        },
        "item": {
          "id": "2771cad8-9c95-4691-9e06-92778e93e09a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2fb2ce54-2e69-42b9-81c4-44c5e44a3d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ac7780-a43d-4531-a370-656bfb153ed1",
        "cursor": {
          "ref": "025d31f6-d224-4c0a-92d6-9851df4eaf09",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f285165d-ef2a-4237-8134-788451d98285"
        },
        "item": {
          "id": "c7ac7780-a43d-4531-a370-656bfb153ed1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2b80a985-0e77-4ccb-ac06-b72c673c7834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7795589-8f46-4baf-8e20-6b5f95431267",
        "cursor": {
          "ref": "9329447a-d3bb-4aa8-824c-1a018f477fd7",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8ef584a2-2386-4be8-b64f-c3423838b0da"
        },
        "item": {
          "id": "a7795589-8f46-4baf-8e20-6b5f95431267",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dc8066f2-2a1c-45e3-bec3-4b379e2826a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb2c936-4d16-45b8-9ebf-878ce59f79b8",
        "cursor": {
          "ref": "7b66d410-2a43-494c-9fde-0216764a2188",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4b0ef8d9-4a24-4596-aaaf-c3c675e0e2a9"
        },
        "item": {
          "id": "4eb2c936-4d16-45b8-9ebf-878ce59f79b8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "16b40472-bec0-4781-a9c4-9e15471871d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cb558f-7dbc-4a7c-bcd7-9be26edf1189",
        "cursor": {
          "ref": "5dec8d50-7eab-4c5f-bdfb-5ff7127db51e",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "57fa326b-dd71-4a80-842a-295e18c1b2ef"
        },
        "item": {
          "id": "50cb558f-7dbc-4a7c-bcd7-9be26edf1189",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "34b2634c-2cb0-4d62-85da-dd6dbb98dbe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00d1934-410a-4b85-91e7-e60d09179dc4",
        "cursor": {
          "ref": "b2fae8b7-eef2-43b5-b73f-0f7cd8a6f123",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "daebd767-4138-4fe6-b377-53f8d8afaaaa"
        },
        "item": {
          "id": "a00d1934-410a-4b85-91e7-e60d09179dc4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "25276cad-8c10-4b30-8fb3-4d37672ce6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a68052-3911-4dcf-ad13-54a939b87c9f",
        "cursor": {
          "ref": "76db815c-69df-4962-ad30-b2f86949bfd8",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5b943119-fb3d-4cf2-885d-b5dcd48deb8c"
        },
        "item": {
          "id": "32a68052-3911-4dcf-ad13-54a939b87c9f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a6b56cca-1f75-4c22-ba78-72c5da190f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8f01fd-b66a-4f26-82c6-9b81766d1450",
        "cursor": {
          "ref": "50b5f107-a17a-47a7-8b74-44054286e09f",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "389ccc9d-02f2-4d0e-9d5d-a21f693e304c"
        },
        "item": {
          "id": "4f8f01fd-b66a-4f26-82c6-9b81766d1450",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c2c026c9-378e-4bb9-9cba-4b8a730af42e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a99556-b16d-4701-b34f-1a44448b86fe",
        "cursor": {
          "ref": "e4ffe4e8-b7a7-4a90-bb17-66642041de7f",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "538101c5-16b5-41d1-8e97-2ae98c850341"
        },
        "item": {
          "id": "b0a99556-b16d-4701-b34f-1a44448b86fe",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b3a2b61c-fb4c-4e2f-a736-000c78f93ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae8b1b8-078f-480d-828b-eb713f4e7a72",
        "cursor": {
          "ref": "0c9f0b3f-f5c1-4977-bcff-a5551f0f1639",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9e908f6f-b7a0-4594-acab-4c514a5f203b"
        },
        "item": {
          "id": "5ae8b1b8-078f-480d-828b-eb713f4e7a72",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f6b9f465-f7e2-4fbc-854b-492f31084856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2464995c-fa7c-49e8-b7b5-7cecb9c001e7",
        "cursor": {
          "ref": "3977bc66-520e-487c-92fa-b82d38dc9cd1",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b3646e6e-642b-4c3d-bc16-5f8b92edf6c5"
        },
        "item": {
          "id": "2464995c-fa7c-49e8-b7b5-7cecb9c001e7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "399edb55-4720-46cf-a3e0-fa6e8225ff97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5780f89-323a-4794-9bfc-41b365676ce5",
        "cursor": {
          "ref": "6ac1da08-ff6d-460f-9df5-35807171fa2d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "64d6b41d-81a4-421d-a542-7b5e9f8bdc5b"
        },
        "item": {
          "id": "f5780f89-323a-4794-9bfc-41b365676ce5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d8713a46-c186-42cb-9bf2-6e036f9e8156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d481313-5a5b-456a-9142-a42684a09394",
        "cursor": {
          "ref": "d44a2eed-35d6-41c8-bc97-96c0660a6794",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cf29cd7d-1927-4a65-b9a5-59b5f0f41249"
        },
        "item": {
          "id": "2d481313-5a5b-456a-9142-a42684a09394",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1a2543ef-8725-4a0f-a791-7ef6c653a58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e35e0f-58f4-414a-b940-6da0b3d530c9",
        "cursor": {
          "ref": "7e0a94b0-1208-4725-a886-2326052424bb",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f8ad7da5-71d5-4ba5-8d06-aeaa7c766f86"
        },
        "item": {
          "id": "51e35e0f-58f4-414a-b940-6da0b3d530c9",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d4a28875-63ec-4015-a379-9864e11e952d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 129,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f90e6f8f-821a-48b8-8954-67f6c292b4b5",
        "cursor": {
          "ref": "919d5eca-e698-4609-9f0b-0db23692c9af",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "11ae85d8-214e-4002-aa64-193c505149da"
        },
        "item": {
          "id": "f90e6f8f-821a-48b8-8954-67f6c292b4b5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9dbd94aa-9e4b-4385-b077-cad6c839f90e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6066ac4f-d71f-4ae7-925c-61ffe402b38f",
        "cursor": {
          "ref": "27fc721d-ad59-47a7-846e-744b9f58d364",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "490aeab5-a7ec-4bd0-b2f1-e4b19f5ab435"
        },
        "item": {
          "id": "6066ac4f-d71f-4ae7-925c-61ffe402b38f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bbe1e05a-f0da-4eac-97d0-9c56152e9c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c58f27-99dd-428e-8b06-f36e1987e73a",
        "cursor": {
          "ref": "e2756e55-5c0f-4ab4-94ad-46f9adbb2553",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "64ad875f-f0fe-44bd-bebd-ec4d4a956323"
        },
        "item": {
          "id": "40c58f27-99dd-428e-8b06-f36e1987e73a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8b6655fd-ede3-43d6-a5a3-c396cd6f60c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e63ca81-3762-45d3-bb27-dedd9ef7f1ad",
        "cursor": {
          "ref": "ba8b39e7-6ec9-4fe3-a926-d8c7b98a352d",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "24bb5c30-3639-4cda-956d-158598aff218"
        },
        "item": {
          "id": "9e63ca81-3762-45d3-bb27-dedd9ef7f1ad",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "eae5c55d-d907-482a-83ab-a174774d7dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b1553a-9da7-42b8-b049-6fbf6b13f828",
        "cursor": {
          "ref": "3d6f96e0-bb76-4d8f-bcb7-96a60d1d560b",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "aba4a7aa-eee4-44ad-872f-a35ca11506a7"
        },
        "item": {
          "id": "28b1553a-9da7-42b8-b049-6fbf6b13f828",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "74a5b7b0-84d2-4f9c-9a77-716b54e87a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3339d435-e5f5-4eac-afdf-a29826744904",
        "cursor": {
          "ref": "3f735462-256d-428e-8a5f-e338e7d654a5",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "00e338a5-5105-4a65-918e-1be6c7db5f9d"
        },
        "item": {
          "id": "3339d435-e5f5-4eac-afdf-a29826744904",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f5867cd1-1ae2-4baa-b27e-9b6ff618476c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef57211-b49b-48d6-b06d-7e08ddddaeb1",
        "cursor": {
          "ref": "28e310b9-47cb-4340-8b7f-06b77dcb57a2",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7f8dc5d0-c9b3-4e57-95d0-2bd522ef900b"
        },
        "item": {
          "id": "0ef57211-b49b-48d6-b06d-7e08ddddaeb1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "288d3180-b2a2-4797-8b7e-781c06b9ef34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f6b864-a0eb-4ccb-83e9-775c6efa9a86",
        "cursor": {
          "ref": "0a494b08-b212-4c6d-bc83-2e2d08d7ea88",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "20261fc7-2d33-4ac5-9db5-01d957864ce0"
        },
        "item": {
          "id": "f8f6b864-a0eb-4ccb-83e9-775c6efa9a86",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cea6466e-2454-46af-a2be-ed169d08e675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64e1379-dc8e-4226-9a91-09b3461cb375",
        "cursor": {
          "ref": "dabcbe2d-2947-401b-bd1a-b93e4bb48d62",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3dfa81c9-f6e7-4052-87dc-a10e605ca878"
        },
        "item": {
          "id": "d64e1379-dc8e-4226-9a91-09b3461cb375",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0978c5a3-0076-4f92-808c-146340b76e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5579c037-21ce-434d-9fd4-0a5cced5618f",
        "cursor": {
          "ref": "76070802-e4d8-49ff-a88e-e1b794dc9253",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2139e958-1764-435d-a15f-7058ebb0107e"
        },
        "item": {
          "id": "5579c037-21ce-434d-9fd4-0a5cced5618f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "72115299-7d0f-45ff-87ad-0c674d6df410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa70a42-ee63-4f0e-b305-29e4e70e119e",
        "cursor": {
          "ref": "8010e791-e01f-4b3c-8d5a-b585e67c182c",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d43d8f33-ccb5-4aae-b013-cb478d0d2340"
        },
        "item": {
          "id": "eaa70a42-ee63-4f0e-b305-29e4e70e119e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8e163237-f47a-476c-a132-d8927845f2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a720ae-ca2f-461c-9155-7d7e9f6ae059",
        "cursor": {
          "ref": "1725f083-fbbb-4b4d-b7d6-4d3f5c0c5f35",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "502c5a2e-463d-47fd-aadc-aac6edef5533"
        },
        "item": {
          "id": "e2a720ae-ca2f-461c-9155-7d7e9f6ae059",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "98998218-9c86-42fc-b286-26f621761c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4cdd79-2c5b-4dd0-8f4b-1fd500f501e1",
        "cursor": {
          "ref": "5a89a6ea-a259-442c-8ca4-505a6a259b86",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8393f048-5123-49a2-89f6-b596ceb2a3ef"
        },
        "item": {
          "id": "df4cdd79-2c5b-4dd0-8f4b-1fd500f501e1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "aa77c338-71d4-4950-8b0f-8078ba2f344a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eeeda4c-d991-46ef-9448-d5403c4115a3",
        "cursor": {
          "ref": "06b6bd16-7bb6-43c5-a7cb-74477ee2bb1d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c209158c-e8c9-43dc-9170-5c64a3bb6944"
        },
        "item": {
          "id": "6eeeda4c-d991-46ef-9448-d5403c4115a3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "87ab7f32-80ce-4712-94eb-39408fa7183d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6bca11-7b1e-4078-ada2-5f72e2f15188",
        "cursor": {
          "ref": "76e40412-6e91-41ec-987b-2374c5dfe138",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c8b3754e-79dd-4336-affa-51a16e7a5c58"
        },
        "item": {
          "id": "3d6bca11-7b1e-4078-ada2-5f72e2f15188",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8400d8f7-0815-4cfe-a2ae-3ce7cb140e2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 136,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "944da977-8bf1-47d5-bf59-f7aa99f86fc7",
        "cursor": {
          "ref": "a5477997-67f7-4d0d-88b0-70660e266f92",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6cc0fee4-25d3-455a-8940-db34be37bec5"
        },
        "item": {
          "id": "944da977-8bf1-47d5-bf59-f7aa99f86fc7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6832a634-88e1-4cfe-89bd-6b7d3b1f66a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ead7f9-b6e8-4d2e-bf50-ef4710856159",
        "cursor": {
          "ref": "79ee2778-57bc-4cb3-8da0-5fb581e931c0",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3b16ca6c-7102-40e2-a5ba-fd23ba73a7de"
        },
        "item": {
          "id": "98ead7f9-b6e8-4d2e-bf50-ef4710856159",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "70cc5753-a5a8-4911-a1fc-3977b16390e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183333cc-3f24-4005-b901-0476a1015270",
        "cursor": {
          "ref": "ca3a8457-12b0-4c72-98db-fe08dac0cdd6",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e88d9345-7847-4c37-ad94-5c2d422137a4"
        },
        "item": {
          "id": "183333cc-3f24-4005-b901-0476a1015270",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e9b18fc5-475c-4cfd-9c69-d2371cad324b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1205b8c9-dbc6-40b7-a776-fe329f0792ce",
        "cursor": {
          "ref": "97e84920-d43f-421a-bf91-f3d704c92245",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "405945b2-0f2c-4236-adad-95f1bbd1eb46"
        },
        "item": {
          "id": "1205b8c9-dbc6-40b7-a776-fe329f0792ce",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "65ca2735-8a47-4220-ae22-5cd0f56b5869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f88adea-2f9a-40b9-bdce-b4cc67c9bbed",
        "cursor": {
          "ref": "0cf18b66-8f03-44d1-af5e-807205e7f5e4",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7bbba65d-6e95-4a76-a144-358ae22113d8"
        },
        "item": {
          "id": "9f88adea-2f9a-40b9-bdce-b4cc67c9bbed",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "65171689-2af5-4a79-b2bd-71e42a38853d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee22aa6b-8de6-488d-a5b0-9bd929136f76",
        "cursor": {
          "ref": "f3128f04-326f-470c-acbd-f902b09060a3",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e810ebd5-5f41-4ab7-8fb2-b55be3da5d04"
        },
        "item": {
          "id": "ee22aa6b-8de6-488d-a5b0-9bd929136f76",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e5fb4d14-6bb8-474a-b4c8-e4613ab74a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd92bb32-1d03-43dc-9331-a4367c2baba4",
        "cursor": {
          "ref": "83ad0048-618c-46cf-a7fd-0f6ae0a8efc3",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9ae4c541-eca6-46dc-8268-4f0c5b0b00d5"
        },
        "item": {
          "id": "dd92bb32-1d03-43dc-9331-a4367c2baba4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b1e8d4e7-5c9d-4e2d-96f8-c34788bc02ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9af16c5-7ccd-41cd-bcf6-8c350a1f1119",
        "cursor": {
          "ref": "d6258fee-1ae9-4589-99c8-83476e257158",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b4c4cdc8-04b9-49fb-85f5-da16a22e7f0a"
        },
        "item": {
          "id": "e9af16c5-7ccd-41cd-bcf6-8c350a1f1119",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "21d86d13-b3bb-4618-8b06-daaf77f7ce3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77683de6-3ec2-448a-8abf-f13a8c29b4fc",
        "cursor": {
          "ref": "2ebf8e3e-b0e8-448c-be2a-1d6199cac802",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c577b325-edb6-4f92-a929-532400be2854"
        },
        "item": {
          "id": "77683de6-3ec2-448a-8abf-f13a8c29b4fc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4e13d81b-478c-4681-8bc9-1e7e4f47f9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0750f6d3-1414-470f-9c5a-8543944dd1bd",
        "cursor": {
          "ref": "6c28ff61-2e1c-4efa-b940-f07ea3873cf7",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "29027a4f-add2-4ee0-ae36-681a4606b55f"
        },
        "item": {
          "id": "0750f6d3-1414-470f-9c5a-8543944dd1bd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "77c76f20-add4-4d81-b794-6f4dd269a61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61ef195-4951-491d-9338-41c97c0fe5cf",
        "cursor": {
          "ref": "c0506290-7e96-47fb-947e-211e5c8a1bb5",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7595a535-9be0-41ed-aec7-a77ac684ee7e"
        },
        "item": {
          "id": "c61ef195-4951-491d-9338-41c97c0fe5cf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4708c764-e468-4c68-837a-d16abb0c7e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7b8bcb-f14e-491a-a6e6-33a226dc29c5",
        "cursor": {
          "ref": "5f9e03c5-24e4-4c38-a072-6d668f735ab6",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a02deaa1-d1a0-44fa-892b-17e878b42c56"
        },
        "item": {
          "id": "0e7b8bcb-f14e-491a-a6e6-33a226dc29c5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f75b4b46-d16a-47a2-96a5-9d56c8e0957e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c679c14-9858-4704-8947-2f4747d44a0d",
        "cursor": {
          "ref": "e152ce6b-f7b2-4b65-b855-0621579922e8",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8ab1b811-a86a-4e57-81d6-bf54e1e5177f"
        },
        "item": {
          "id": "3c679c14-9858-4704-8947-2f4747d44a0d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7ae144b9-62d9-4a7b-b597-abb7650f9914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35442f6f-4abd-45f2-afd5-3d2e1bae2754",
        "cursor": {
          "ref": "a669d2b2-ed5c-4b13-b19a-37bd64c4854b",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2b843c4a-ed1c-48c4-95b3-305735541c14"
        },
        "item": {
          "id": "35442f6f-4abd-45f2-afd5-3d2e1bae2754",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "440b3a15-a953-4a26-a4f4-448fff7d6ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b8df52-10af-454c-9a23-831fbdb723c3",
        "cursor": {
          "ref": "570faa00-e48f-4d89-9ea1-5268ba9369cc",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "13d31bc6-d5c7-4cc3-88e4-f5629da95139"
        },
        "item": {
          "id": "80b8df52-10af-454c-9a23-831fbdb723c3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "04843220-17af-4721-a658-10c7228078af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5245c7-d472-4356-972a-7959a887ad8a",
        "cursor": {
          "ref": "7510ba05-383f-4dd7-83e8-4c1788107472",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "aafafd6a-6220-49dc-82e5-45c045bd9403"
        },
        "item": {
          "id": "ca5245c7-d472-4356-972a-7959a887ad8a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6624a6b4-3a0c-40cf-a78f-4e75dbeb1ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16775eaa-bcd7-4f82-aaf0-6567ff2bafb6",
        "cursor": {
          "ref": "263d781e-a0f1-4fd4-a9a0-c8eee450e49f",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c167ac3e-577d-4b8e-a4ce-2e60ad3089c1"
        },
        "item": {
          "id": "16775eaa-bcd7-4f82-aaf0-6567ff2bafb6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5baafe84-2429-4bba-a778-21a2ba0a537c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1b9052-e517-485c-9de0-1ae10648cdf9",
        "cursor": {
          "ref": "8858e65f-13b6-46fc-bf40-e164a31de82d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f825572a-88f3-45e7-a78b-31b4ff82c0cb"
        },
        "item": {
          "id": "9f1b9052-e517-485c-9de0-1ae10648cdf9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "182e8189-2ad1-46d2-b0e5-0aaa2874ff0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa23fd13-5960-43a7-a147-342c38ab2fed",
        "cursor": {
          "ref": "37055ed6-de44-42d8-a452-59533705228b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "17fdb827-7702-4527-8bc1-a62c949d1d5c"
        },
        "item": {
          "id": "aa23fd13-5960-43a7-a147-342c38ab2fed",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "578b17c5-bfc5-408f-9ac5-9ec9ed8f2dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023450e9-2fd7-4ffa-bf2f-f32e81c5172b",
        "cursor": {
          "ref": "9bde027e-4b69-42ee-9fbb-682c90a93995",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "939966b6-1fa0-4a68-80b1-b4d3875aa44c"
        },
        "item": {
          "id": "023450e9-2fd7-4ffa-bf2f-f32e81c5172b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b6cb080b-7650-44e8-92cc-65c72fa07ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cce2b1-582e-4112-b8da-1c63034c881d",
        "cursor": {
          "ref": "6fd5d9b5-0027-45e1-9616-65cb0fa2b7b7",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3281a6fb-d65c-488e-9b50-59c81174cf7d"
        },
        "item": {
          "id": "72cce2b1-582e-4112-b8da-1c63034c881d",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7002d3f1-1c58-48ff-b076-86e1179b5acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3544e3-45e9-470a-be65-954052a99d99",
        "cursor": {
          "ref": "86952c0f-97c5-48a3-8cb2-e0cba6234224",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "15b2e44a-6265-4e63-8e8b-dcccf509722e"
        },
        "item": {
          "id": "7e3544e3-45e9-470a-be65-954052a99d99",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "fb0a18a7-b6ca-4954-9e39-dbbe62b4143e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25002420-8add-459d-afbf-8a7023437212",
        "cursor": {
          "ref": "6a0d0344-19af-48e4-9687-c789e71039b4",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d37804ed-60b2-4cfa-a4cf-b7731e0ecc1f"
        },
        "item": {
          "id": "25002420-8add-459d-afbf-8a7023437212",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "cc2b86b0-e346-4e43-86b2-b2cfef27e4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784a2e98-6df7-46cd-8657-4095ce0b6cf5",
        "cursor": {
          "ref": "b245af99-2c78-47ea-8327-37b2ea918c2a",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "47641f1a-81c8-45bc-b916-12639d5aa38b"
        },
        "item": {
          "id": "784a2e98-6df7-46cd-8657-4095ce0b6cf5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "93d7721c-778e-49d2-b21e-a1e483890975",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76d3f30-8fdc-4b44-98fd-b4f2233099b7",
        "cursor": {
          "ref": "365d744f-bb87-40fa-af55-0eb188c8f2cb",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "62c83b15-89e2-4a78-a572-7a7a4e95f868"
        },
        "item": {
          "id": "f76d3f30-8fdc-4b44-98fd-b4f2233099b7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8ac24379-cd63-44e8-b2c6-392c99e6b0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998bf432-d8b9-4b22-8513-a4f518ba2c77",
        "cursor": {
          "ref": "9d8fe55f-1506-4fc7-8a00-3c955b3c79d0",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c2ab878c-2c36-4fee-8b53-5ade92ae02d9"
        },
        "item": {
          "id": "998bf432-d8b9-4b22-8513-a4f518ba2c77",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "78d65b15-39dd-45a4-95da-0e00524e3d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93b8392-4f77-42eb-ac8a-ba4312792f95",
        "cursor": {
          "ref": "40e51c08-aa7e-4ed3-94a8-d3fc9a53ce9d",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9b05a7ca-0d14-4d99-8cc4-b0daeedf0f46"
        },
        "item": {
          "id": "f93b8392-4f77-42eb-ac8a-ba4312792f95",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2b2a0ad3-fcbc-4a8d-8a83-ce370615c8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd07477-b4b8-44db-a0cd-a9f6748d9ee1",
        "cursor": {
          "ref": "a9468c6f-0b3d-4a69-a7a8-e35c317fbf9e",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "668c8427-a764-4454-bc63-7412c41bc83d"
        },
        "item": {
          "id": "4cd07477-b4b8-44db-a0cd-a9f6748d9ee1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "19edad37-ab48-4bb9-8319-a2c3e0fa3943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c1dc37-9536-4e32-9522-526910015f70",
        "cursor": {
          "ref": "ca6d5b21-ffb4-4023-b8bb-43575e9bfc97",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d004ad53-764c-4dab-bc1e-0e3af018b01e"
        },
        "item": {
          "id": "16c1dc37-9536-4e32-9522-526910015f70",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b5cd5d21-dd00-4797-85aa-fecbeb8f675b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0347fb1f-bd88-414e-b5ae-1f84d7a4be8b",
        "cursor": {
          "ref": "767b1bc7-607f-4462-a598-32641c15f462",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c0182b1d-574d-479a-afa8-435baca6685b"
        },
        "item": {
          "id": "0347fb1f-bd88-414e-b5ae-1f84d7a4be8b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "774e6d22-9326-4fd2-b37b-a0ed9902f803",
          "status": "OK",
          "code": 200,
          "responseTime": 198,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "9370f8d9-a5dd-4078-9013-51710f070a14",
        "cursor": {
          "ref": "48832cd0-297e-4487-b5eb-933b19332201",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fba61ef4-d12c-42b8-9614-451907c8edf4"
        },
        "item": {
          "id": "9370f8d9-a5dd-4078-9013-51710f070a14",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7c35ead7-c611-42eb-a2d2-845f2d96ba91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92cc66e-d262-4287-9d2f-bac0c4beb250",
        "cursor": {
          "ref": "7feb00c1-cd6a-40c3-81ae-c70c940cddd1",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cd79052d-db92-435b-9030-a520610eebef"
        },
        "item": {
          "id": "e92cc66e-d262-4287-9d2f-bac0c4beb250",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d22a63b6-a80e-431a-a770-8188b5baa268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41c4ccc-ef46-4f84-8260-eb5277b1b29c",
        "cursor": {
          "ref": "96c84982-1c40-4a19-baee-fa986efbbcd2",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b4a3fa04-507d-4788-8baa-13ef9a382837"
        },
        "item": {
          "id": "f41c4ccc-ef46-4f84-8260-eb5277b1b29c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9f5165e3-65d7-4c90-9d86-7a5f74cf67d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a949df-6569-42a7-b915-4188e4b627b3",
        "cursor": {
          "ref": "b1ee2867-84a0-4374-8b83-9d81ee642d25",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5673c07e-4caa-42de-9bb9-c5d27fca0d64"
        },
        "item": {
          "id": "90a949df-6569-42a7-b915-4188e4b627b3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1713166d-57ce-4274-b6f2-74d342b69492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344ef373-d40e-4fb1-b2b3-26ae4bc60228",
        "cursor": {
          "ref": "5ed36837-f139-4331-9f4a-30b5eb33a72b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3321c2fb-693b-41b1-8c14-58c6e69ae34d"
        },
        "item": {
          "id": "344ef373-d40e-4fb1-b2b3-26ae4bc60228",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6990e474-6f50-4e89-b8fa-d2a808fa381f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913b6670-e8d7-4fe7-9b92-cdc7ece4728c",
        "cursor": {
          "ref": "83644b05-04fa-4def-bfa0-101609737991",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "37f45a94-173b-4c78-ac34-99a387e2b63b"
        },
        "item": {
          "id": "913b6670-e8d7-4fe7-9b92-cdc7ece4728c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1728d42f-ea88-468b-b4de-8ede7a693a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a759e3-6a94-4b20-8d01-b54d6918e847",
        "cursor": {
          "ref": "419c34c1-1a27-4bb5-b7dc-1af39d657a26",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8ddcd14c-26c5-4d74-ad26-59f6144a314c"
        },
        "item": {
          "id": "a3a759e3-6a94-4b20-8d01-b54d6918e847",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "46201640-b5fb-467c-bf87-650a1dfff5a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff3f3220-63fc-4410-8b5f-83290c4e6242",
        "cursor": {
          "ref": "f30fa95d-4aa4-4820-9347-27e51572ca0b",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "58281889-8471-489b-83ac-f4cff021c73d"
        },
        "item": {
          "id": "ff3f3220-63fc-4410-8b5f-83290c4e6242",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2a8e4740-d84a-46c4-b8cb-245361521b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9979ffe-8f45-408a-a99b-2ede6cae14bc",
        "cursor": {
          "ref": "dcfa7b94-f42b-4e8e-88cf-05825f1dde6e",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "790bdafb-190d-4037-a3dc-323517fcfe2a"
        },
        "item": {
          "id": "b9979ffe-8f45-408a-a99b-2ede6cae14bc",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7b873f56-ee1a-4808-9ae8-557c37864b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c26ca36-2a7b-4947-8d39-fee7ffe50ce4",
        "cursor": {
          "ref": "693b73ae-ed07-40a6-9a8f-a50ebc197f28",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c091c783-0423-4187-a8af-b80746d882b5"
        },
        "item": {
          "id": "6c26ca36-2a7b-4947-8d39-fee7ffe50ce4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "752a22f9-aeeb-4eb3-8893-7b958216e181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e696f4-7036-48fe-9305-a47c2bdac1ed",
        "cursor": {
          "ref": "d4ae2e6d-0c8b-4c6f-bd4b-cb3717841e81",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "38aa3903-b3e5-48e3-9e21-fe3fb0166751"
        },
        "item": {
          "id": "02e696f4-7036-48fe-9305-a47c2bdac1ed",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "572943ec-13bc-488c-b4db-05c6e5291870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c2f816-1575-470b-8acb-8a7ff1c99c31",
        "cursor": {
          "ref": "8343b4c3-6441-43cb-ac7c-2f51c83bc3cd",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4b9026b2-d7bf-4ba5-ac7a-8c7e7021f428"
        },
        "item": {
          "id": "a6c2f816-1575-470b-8acb-8a7ff1c99c31",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0bc2ac28-2b26-4743-b064-d7cadbf0c1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9b147c-dabc-42a7-8fd8-d46b24a41de9",
        "cursor": {
          "ref": "c724ba15-3466-4a85-acf7-0c98f815518c",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "46c33ed7-762a-4095-8e4d-4557cdafbb8f"
        },
        "item": {
          "id": "cb9b147c-dabc-42a7-8fd8-d46b24a41de9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "318755b2-32c2-44d8-a558-ef2cd950925d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99fb994-601e-4949-ab14-47e87e798edd",
        "cursor": {
          "ref": "46078369-f8ad-4d8e-b0a4-5e973b257c81",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a6c99e7a-4481-4305-86e6-2d10ff21d10b"
        },
        "item": {
          "id": "b99fb994-601e-4949-ab14-47e87e798edd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "93b0449f-b889-459d-ab70-178f519e3335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff55d56f-07cc-48ac-9a2a-f2533d3ebdb1",
        "cursor": {
          "ref": "faf3b612-72bb-47d6-891b-8cf195cc358c",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "bd3f1b44-9e6a-4db7-86bb-745a81130a11"
        },
        "item": {
          "id": "ff55d56f-07cc-48ac-9a2a-f2533d3ebdb1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f6d7adfe-d6d8-4577-871f-404120ab01ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4737d22-6089-4403-82de-1545a98e36f5",
        "cursor": {
          "ref": "c8fdb8de-3a02-43b1-b005-5b8d7a3b76cb",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "bab15911-dff6-4efd-b0c1-8d996e4ca755"
        },
        "item": {
          "id": "c4737d22-6089-4403-82de-1545a98e36f5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4bfa9cfa-b99c-4ea8-a2a2-84b078fa3f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2901b1d2-fced-49bb-be87-54d3bc147f90",
        "cursor": {
          "ref": "00e4eb22-e9a1-44d1-a17b-204a4705a6a3",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b0ec582b-2d06-4e03-ba5b-299d01134422"
        },
        "item": {
          "id": "2901b1d2-fced-49bb-be87-54d3bc147f90",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "96ba28ea-3832-44d6-a2e6-b366e153001a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f27162-8cf2-4ad2-983f-5af7bbebcdf6",
        "cursor": {
          "ref": "6622ce98-4869-4bf4-a8e4-99f5effb631a",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d38d617e-6c7a-45b0-bc53-833a6ca2c8ec"
        },
        "item": {
          "id": "18f27162-8cf2-4ad2-983f-5af7bbebcdf6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8acb0d23-fea7-4f54-9c8a-b72893feab27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f1e589-050e-40ff-808e-c0cb21d1d41d",
        "cursor": {
          "ref": "54edf39a-2b5e-4d58-b7b6-c1ebc6c00fe3",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "07820673-4077-4679-b1e2-0cebe14bd79d"
        },
        "item": {
          "id": "46f1e589-050e-40ff-808e-c0cb21d1d41d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9c6c981e-a2de-490b-a26b-e9e9e4350f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7acedf-cf0b-4bfa-9348-0dcf670194c5",
        "cursor": {
          "ref": "20ddcaa2-299c-4fbd-86f6-e256614b422e",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2147523b-3c1a-4d48-bd06-4f56fae98b6f"
        },
        "item": {
          "id": "ce7acedf-cf0b-4bfa-9348-0dcf670194c5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "694087ca-1522-4233-8111-2c73b6ee7921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f096a361-df7b-40d7-8e0b-280ca48677fe",
        "cursor": {
          "ref": "4d552c58-5f5a-44cb-ad01-baf4b4f2c7d9",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cabaf410-66c0-4802-b641-898e806dc2bb"
        },
        "item": {
          "id": "f096a361-df7b-40d7-8e0b-280ca48677fe",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c0e9471c-705b-4066-b5f0-3fc9d88191a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf4cb29-0e65-4f00-a74c-21182da4d2a9",
        "cursor": {
          "ref": "321c219f-893f-4662-af6b-7b7929692100",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4d9a8b21-2beb-4661-9b58-2cd62c171366"
        },
        "item": {
          "id": "cbf4cb29-0e65-4f00-a74c-21182da4d2a9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0bea1471-c818-4ff1-9668-c683591d585e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d057ce-230c-4679-aaa2-a10f780e1667",
        "cursor": {
          "ref": "c125fc69-a2a5-4fed-9493-c2d3d183017b",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "804bc540-116d-4f0f-8838-2e1f104584e5"
        },
        "item": {
          "id": "f1d057ce-230c-4679-aaa2-a10f780e1667",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2b701106-3a7d-4130-84d9-028633406b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2e364a-1e56-4478-9275-4076a372d1a1",
        "cursor": {
          "ref": "3e97056f-a575-40f6-bede-1b42fe3db68c",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4c9bb034-4203-4944-8420-3234bed686a1"
        },
        "item": {
          "id": "ad2e364a-1e56-4478-9275-4076a372d1a1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ce7400bb-c93f-42e3-808c-9443a9d1efce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dad7fa6-9d0a-4f8b-a7a7-261b64dbac50",
        "cursor": {
          "ref": "094a6d32-23fd-4f29-bc80-ce7c5e38dae7",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a83d7c7a-d788-468d-8322-9b87cf4ffa46"
        },
        "item": {
          "id": "9dad7fa6-9d0a-4f8b-a7a7-261b64dbac50",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0c183939-76b5-4511-97d5-7ed7720963e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03682c14-5cb9-4fb0-8660-332e600402e0",
        "cursor": {
          "ref": "6798ca6a-f7aa-4acf-bbfb-80f5f6ffc486",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "04ae8bb0-449a-4dae-8a6b-8ebbc0b9076d"
        },
        "item": {
          "id": "03682c14-5cb9-4fb0-8660-332e600402e0",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7e7620a2-86a8-4672-b09d-9e1c24143cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62cb911-6e09-445c-b45f-5e6a7858a554",
        "cursor": {
          "ref": "baf141ee-a31c-4f6c-848d-cf99ae476257",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "996c5090-656f-4557-b58d-2d281da910ae"
        },
        "item": {
          "id": "a62cb911-6e09-445c-b45f-5e6a7858a554",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "22618f0a-b48e-411d-904e-dcad394d2a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2ee250-9044-4bc1-bec0-971cc982d73f",
        "cursor": {
          "ref": "885c20e8-5f91-491b-882e-e9f093ebf1a9",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7b2d59fb-f7a4-4d92-b636-684629b0556d"
        },
        "item": {
          "id": "6c2ee250-9044-4bc1-bec0-971cc982d73f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5aadee3c-9145-4705-8d6c-97bf43f20b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84891128-6fa2-483d-9136-bc147a4b9974",
        "cursor": {
          "ref": "d45cc1d1-7f0e-405f-881d-0dfd05ca7976",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "04ca9427-1943-4ab4-a7cd-1d762f613b50"
        },
        "item": {
          "id": "84891128-6fa2-483d-9136-bc147a4b9974",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bb986cff-7a7e-472a-8509-bd5827336ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c07d5da-0314-4581-83f5-37d606572b5c",
        "cursor": {
          "ref": "5672ca43-419c-4fb9-bfb1-b456efa4eb65",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "dbe3b5a7-37e1-4738-b468-0e9cb85e604a"
        },
        "item": {
          "id": "6c07d5da-0314-4581-83f5-37d606572b5c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "79a889d8-89a6-43aa-ac89-baee157e98d1",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "2141881d-9dc4-4150-96ab-488c0fe8c279",
        "cursor": {
          "ref": "62b727e7-9d09-4be6-b68c-037b1fee879c",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8c041888-8b30-4ab4-a383-fc9c46d12387"
        },
        "item": {
          "id": "2141881d-9dc4-4150-96ab-488c0fe8c279",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ed558207-e5ea-4376-a56e-00114cbbc379",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8cc06dd4-6ed2-443b-a335-6a6821387adf",
        "cursor": {
          "ref": "34463a34-d3dd-4666-b2fb-0fdd50232837",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "315f779c-4311-4e68-9b6f-d5a66fb50790"
        },
        "item": {
          "id": "8cc06dd4-6ed2-443b-a335-6a6821387adf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9b971b45-96c9-4bc2-aead-28250c96d506",
          "status": "OK",
          "code": 200,
          "responseTime": 199,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "c62871d7-9259-4d58-babd-0fc80d5a5d8f",
        "cursor": {
          "ref": "ce763a23-242a-4060-be2d-d412a0249d49",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c20650d2-af18-47f6-a45a-c74a1a9388d1"
        },
        "item": {
          "id": "c62871d7-9259-4d58-babd-0fc80d5a5d8f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fc43f6d6-11f5-41da-88fd-d6dd6875d910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4123b56b-fe97-47af-b2e3-f8c5e5a73cca",
        "cursor": {
          "ref": "5069fb58-8b24-45df-a91f-2b58bb1e826a",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1d5da14f-c03d-4f7b-b138-411199e9c861"
        },
        "item": {
          "id": "4123b56b-fe97-47af-b2e3-f8c5e5a73cca",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a0da5125-4a31-4b9c-9f55-20d02bac936f",
          "status": "OK",
          "code": 200,
          "responseTime": 183,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "97e550c5-76fa-41b8-a1b6-b139a2b4ed24",
        "cursor": {
          "ref": "32f3f503-bd45-4ced-8862-102a24b2ef5e",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "511b6acc-482b-46a3-b19c-2e086680b388"
        },
        "item": {
          "id": "97e550c5-76fa-41b8-a1b6-b139a2b4ed24",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cb6e0622-0f8d-40c4-ae18-c13c939d13bf",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f62a3d74-6db6-4b54-9945-22fcd2e604b5",
        "cursor": {
          "ref": "49849873-c29c-4c57-9d5a-ca04f61d86b1",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0fe680c3-f354-460a-b368-12ad38bffaa3"
        },
        "item": {
          "id": "f62a3d74-6db6-4b54-9945-22fcd2e604b5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a12bed04-6a6f-4d8f-a816-ac638f4f0eb3",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "aab0650c-2ba6-4e09-96d6-4f20b4239f01",
        "cursor": {
          "ref": "b8af0e55-4649-4cd8-a43a-ff0a68510c41",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7cce90eb-fd77-4d4d-9a8a-c9af6c290eec"
        },
        "item": {
          "id": "aab0650c-2ba6-4e09-96d6-4f20b4239f01",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6c8f0a34-a49c-432d-b6b1-5dfbaa03a2c8",
          "status": "OK",
          "code": 200,
          "responseTime": 202,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "2ae17d57-7414-479c-a366-4576344d7049",
        "cursor": {
          "ref": "414560b5-c37d-4c41-a990-4ec62b7601f7",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "693d3add-005c-491a-8db0-9822b800023e"
        },
        "item": {
          "id": "2ae17d57-7414-479c-a366-4576344d7049",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ac9fea83-41e0-43a9-9dc2-d58b0eed50b4",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "342170db-8d2d-4c57-9c75-3d8928da52e5",
        "cursor": {
          "ref": "46dd566e-482f-41ed-b8fe-599b78d4e4a5",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0ba55c35-9cae-4c7d-ac10-94969a984769"
        },
        "item": {
          "id": "342170db-8d2d-4c57-9c75-3d8928da52e5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f3e6b9e5-e03a-4b5d-8ea7-a8a682014415",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "4960069c-99c4-4425-bf06-1eb9ce85a73a",
        "cursor": {
          "ref": "a668b499-19a2-4687-9fba-2a7c21a16a55",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "45b69c96-8f22-4c4a-9d69-4d2f4e66d693"
        },
        "item": {
          "id": "4960069c-99c4-4425-bf06-1eb9ce85a73a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "e1ed0d21-737a-4d47-a92d-1cf2aeef366f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02da837-1bd6-4c95-80cc-c861ec6f901b",
        "cursor": {
          "ref": "647cc392-23a5-452d-b454-b289d1b57df7",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1eab2ce9-7a4c-4c37-88ec-e59e8b768b5e"
        },
        "item": {
          "id": "c02da837-1bd6-4c95-80cc-c861ec6f901b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8b685e4b-8910-49c2-8950-7b3b8deff6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccd23ca-1cdd-48b6-bfb1-51f29f31f793",
        "cursor": {
          "ref": "f354a9a3-48f5-4959-8819-95cf52e93a39",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "883e3f9f-8b79-4be4-b5ba-49af340518ea"
        },
        "item": {
          "id": "8ccd23ca-1cdd-48b6-bfb1-51f29f31f793",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "695688af-b9e9-41b7-b328-3edde58a5d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a532a7a8-49a3-4943-bba8-529b943e6a99",
        "cursor": {
          "ref": "9583672f-9cfe-4dc4-8ea7-5f0778223ff9",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "24ad34d3-5c7f-4f17-ae03-52a74619155f"
        },
        "item": {
          "id": "a532a7a8-49a3-4943-bba8-529b943e6a99",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d976068b-6985-4a5f-8f57-3a7d80eb9d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e5c013-165b-4785-b03d-9920c66f4c3b",
        "cursor": {
          "ref": "eed63e78-a2ff-4423-bb14-e6f1534cf6b6",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ef8f4e2e-0cea-41bf-9271-320d452aa1a3"
        },
        "item": {
          "id": "f5e5c013-165b-4785-b03d-9920c66f4c3b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "58d57e9d-2e58-4d7f-85d2-e401799ccc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce688e63-32ef-479d-a8c6-723d985bbdb4",
        "cursor": {
          "ref": "0f1eda5c-d926-4e5c-887f-2398b4fa3a20",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f4ed98a1-7a6b-48ec-b351-bd64fbb28062"
        },
        "item": {
          "id": "ce688e63-32ef-479d-a8c6-723d985bbdb4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "12963ca4-c6c8-49d0-9b61-67f253ce951e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c2a8c7-10c2-49cb-8314-9e5122050e5e",
        "cursor": {
          "ref": "700080fa-8961-46b7-b0ba-0b018959e510",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ad0f706a-965f-460c-bce1-5ded6706114f"
        },
        "item": {
          "id": "d6c2a8c7-10c2-49cb-8314-9e5122050e5e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f81f691d-c1c9-4a30-9182-882b3186f5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1dca42-8aaf-439f-8c6a-ceb7f1985b58",
        "cursor": {
          "ref": "5f4e276d-e059-4868-85b1-e1ab8ec4846f",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d931f66c-ee20-4c50-a578-9fb5dac6eba4"
        },
        "item": {
          "id": "da1dca42-8aaf-439f-8c6a-ceb7f1985b58",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1e59f316-8839-4062-9d54-2f886dcc8dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1985c735-f3ba-4520-80c4-ede380a533ed",
        "cursor": {
          "ref": "4a880a9c-5dcb-4e3a-a64a-24dfc1e30b4a",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0582966c-de76-48b8-a068-0237afc0e274"
        },
        "item": {
          "id": "1985c735-f3ba-4520-80c4-ede380a533ed",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b48f3970-9ae8-45b9-8673-c6ea4ded1479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0180d0-fbc4-4ee4-98e7-bc76781a39e8",
        "cursor": {
          "ref": "c704b072-63c5-4262-b026-7e1de0aef5e8",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1127f614-5041-40bd-8213-0a1905e32847"
        },
        "item": {
          "id": "5d0180d0-fbc4-4ee4-98e7-bc76781a39e8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "056c31da-1308-4f52-9ea9-b3f85603df3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be67bb3d-0859-47a0-9d35-7af24abc1593",
        "cursor": {
          "ref": "cdbd214f-1f8a-4f3f-8d31-1a7a9127b636",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "99e0ec7e-ce40-4874-b360-94b195ce2557"
        },
        "item": {
          "id": "be67bb3d-0859-47a0-9d35-7af24abc1593",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b05863a7-7a6d-44fe-be44-5477c865bc46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc40c0f9-d623-4322-ac2f-75ee7058cbc8",
        "cursor": {
          "ref": "e2e54056-c94b-4268-bc42-73eeb1121b54",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "75b1e505-f3e5-4ab1-9c39-5d8f2a8ce9d9"
        },
        "item": {
          "id": "dc40c0f9-d623-4322-ac2f-75ee7058cbc8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "feeb46b4-e5f3-435b-b466-40c46df15ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed08035-17b0-4bbc-9eed-e2760d617a7c",
        "cursor": {
          "ref": "8b62b885-d691-44f6-93d6-020ae3f7fe12",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7b8be7f9-8052-45d3-9279-0bd5ec1b3fe2"
        },
        "item": {
          "id": "7ed08035-17b0-4bbc-9eed-e2760d617a7c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5b325bb7-f1a8-45f2-bc5b-b66cc2de2493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3ab1e0-631c-423a-b2b8-3090c137e7a8",
        "cursor": {
          "ref": "b7509a4f-d54c-4955-9e20-ad49498e0752",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "14dd7394-9a10-429f-9102-0829f0124b8c"
        },
        "item": {
          "id": "ab3ab1e0-631c-423a-b2b8-3090c137e7a8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e9d381f8-025c-403a-92f0-4632316cad10",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2e5fd4c1-03ea-4495-a7e2-713982e44f51",
        "cursor": {
          "ref": "83cff820-8754-4bef-888c-7945a19ddac4",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4b292578-6047-4795-9c14-948431436b70"
        },
        "item": {
          "id": "2e5fd4c1-03ea-4495-a7e2-713982e44f51",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3732592e-3f0b-425e-9c8e-233733af1b10",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a0424da0-6535-4dd4-b281-29249dbb1d91",
        "cursor": {
          "ref": "ad476e65-14e4-47fd-9c53-feb5b0a04fea",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3cd17dc2-1f4b-4263-af00-370165029c14"
        },
        "item": {
          "id": "a0424da0-6535-4dd4-b281-29249dbb1d91",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "06de1a84-c572-4850-8cd4-87d702e9352e",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4fe9573f-3810-4ab5-bc04-ca9a6751265a",
        "cursor": {
          "ref": "9f6ae440-e3c7-4b27-9113-d1dae2074491",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8e247c57-2474-4437-830a-792b1df085a3"
        },
        "item": {
          "id": "4fe9573f-3810-4ab5-bc04-ca9a6751265a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "76029c57-cffe-4e52-9f47-11b88fc33abb",
          "status": "OK",
          "code": 200,
          "responseTime": 208,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "000c8fa2-bbe4-46f8-8223-77b42940eb6c",
        "cursor": {
          "ref": "8a8dec59-098e-4bd0-b31d-d442082704b4",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6b6c49de-c3e7-4d38-9cc4-c1e19d35e710"
        },
        "item": {
          "id": "000c8fa2-bbe4-46f8-8223-77b42940eb6c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1e5bf50f-1dfd-413b-abd9-8328c1e3714d",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "938c9b7b-1f10-4f16-a0ab-1c346ce79efb",
        "cursor": {
          "ref": "ac386893-46d8-4592-a790-bbd56f827a6e",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4d338ca0-35e3-4639-8fde-4b1f3113b708"
        },
        "item": {
          "id": "938c9b7b-1f10-4f16-a0ab-1c346ce79efb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a55b004a-eea5-4a5a-8460-9f33d575d8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f192fce-7b6d-4e7b-83a4-1f27516a1853",
        "cursor": {
          "ref": "1862bb08-ecd0-4534-b91a-41207893248b",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "11b0957d-c3d1-4994-8245-9d7dd99e47f7"
        },
        "item": {
          "id": "6f192fce-7b6d-4e7b-83a4-1f27516a1853",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2317c7d1-067c-429b-90ec-40abf133c444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96814b34-df37-4861-b15c-73fe9d203f0a",
        "cursor": {
          "ref": "706e720d-0285-4c0a-9a44-1e9ef50abd8c",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6e92103a-c83a-4448-906f-c927b1ccf4d8"
        },
        "item": {
          "id": "96814b34-df37-4861-b15c-73fe9d203f0a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b707e04b-8e07-4f0d-9c1d-e5d9aa2eaf05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475aad2b-8235-4b5f-9ba7-0c90a0334b2d",
        "cursor": {
          "ref": "7736a41b-8606-4724-858d-915af6d4cf6e",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "debc2767-f164-4400-b80f-f473c9360b2d"
        },
        "item": {
          "id": "475aad2b-8235-4b5f-9ba7-0c90a0334b2d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "db5f958a-f229-4a1a-a755-99144d2f7b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e01dd1-7858-4533-b145-5e47ed5f76e6",
        "cursor": {
          "ref": "db5b03a6-1076-4f07-b5c9-92a48561b3c0",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "85688f6c-8087-4725-98ad-dda7935dae8b"
        },
        "item": {
          "id": "22e01dd1-7858-4533-b145-5e47ed5f76e6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4014b9dd-f325-4ab2-ad67-320ec6213a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba9e5c1-8b2d-4043-959d-a279e6d9830e",
        "cursor": {
          "ref": "de8fcd3f-ab15-4fbc-b638-6c4a59f12adf",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "eda31738-8fd2-4385-9c36-19b2d48c6cac"
        },
        "item": {
          "id": "2ba9e5c1-8b2d-4043-959d-a279e6d9830e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "dc258d9a-9e92-4df3-a343-3fb0502549ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5860bc80-df66-402c-8989-354ea7f226bf",
        "cursor": {
          "ref": "70e3c02a-eec4-4f23-b842-4d4c0920ca0c",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "605bbfe2-1472-4e82-8fd0-283b55316501"
        },
        "item": {
          "id": "5860bc80-df66-402c-8989-354ea7f226bf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "953ffc3f-d1a5-49f5-b365-53bc39f3e6d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee31d67f-260c-421f-a423-7e1d945e4889",
        "cursor": {
          "ref": "754e6788-4805-40c8-ac58-5bfd77801012",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "faec149a-5e81-4bf3-8fc3-d7d35fed91d3"
        },
        "item": {
          "id": "ee31d67f-260c-421f-a423-7e1d945e4889",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bc85c841-2aee-415d-8109-cd94646fa3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092259b7-6e7e-4deb-85e2-f8df82255715",
        "cursor": {
          "ref": "4fc5f2a9-0312-4023-b93a-293fdd862509",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "abfcd48f-1f68-4752-9bd5-6d7ce710d39b"
        },
        "item": {
          "id": "092259b7-6e7e-4deb-85e2-f8df82255715",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f568ff1e-6f90-4eee-8b3e-2e046cda4917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18edbb7-3aa2-43f8-b6eb-3baf9a7991ec",
        "cursor": {
          "ref": "321977fc-0fd5-4c67-b965-bd03c1b7d268",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fbc5df2a-ce8c-4f45-a31e-32aa87c6f69c"
        },
        "item": {
          "id": "b18edbb7-3aa2-43f8-b6eb-3baf9a7991ec",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "503088c3-0543-43cd-a505-3bb3f2955ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efedfdd6-b5e4-4cfa-8e14-27b4bba1045d",
        "cursor": {
          "ref": "18b5ad57-15bf-4f23-a2e3-c78d3d7e2eeb",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "225874e0-14c3-4aad-8852-e9f75ca03247"
        },
        "item": {
          "id": "efedfdd6-b5e4-4cfa-8e14-27b4bba1045d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3bfc7ca8-121e-4e52-8153-1305dff6f727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453cacfc-dfc3-4e99-82ef-4d9a178f9f71",
        "cursor": {
          "ref": "dbfa493a-cf99-4869-ab84-738092e19ba1",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "4f9eac3e-4bab-469d-90b9-ecbac583b48c"
        },
        "item": {
          "id": "453cacfc-dfc3-4e99-82ef-4d9a178f9f71",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f148bf82-3890-4d83-bd59-ff08ed6cb3c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762490b5-c978-4cc6-88ef-7f719292c932",
        "cursor": {
          "ref": "9c692607-72f7-4667-8885-7c2f93997587",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "f4b27219-0933-4ce6-8267-a7e9e9bfb00c"
        },
        "item": {
          "id": "762490b5-c978-4cc6-88ef-7f719292c932",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c53c0a85-9a87-4f3f-87e6-ece72fb0eb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef52256c-df03-4597-8e4c-d6ea8326a66f",
        "cursor": {
          "ref": "d46bdd7c-2c9b-4177-822f-37acfccd7354",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0b41b6aa-9401-4816-8b97-36c0a0d85fef"
        },
        "item": {
          "id": "ef52256c-df03-4597-8e4c-d6ea8326a66f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4dc6f387-30e8-4d66-a51b-48e1a118757b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea992c7b-e3eb-4f96-8181-d6724c821087",
        "cursor": {
          "ref": "f64241a2-bf96-4dd8-84a2-5c0d3b4110fb",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "462d3529-ecdc-437f-8f5b-7ba65bb78c5a"
        },
        "item": {
          "id": "ea992c7b-e3eb-4f96-8181-d6724c821087",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "732d6c36-5e68-41f9-af39-bd6c04623b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f36958-9b65-4d90-bd1b-e0abca3780bc",
        "cursor": {
          "ref": "9712a225-4bca-4a92-a633-b5142200ff45",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2924fdbc-6297-4763-a3de-5147cc965b30"
        },
        "item": {
          "id": "65f36958-9b65-4d90-bd1b-e0abca3780bc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "35ac92dd-88a3-4b03-8929-e2b54abe303f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50022c63-78c0-42eb-aac0-c125fc096b87",
        "cursor": {
          "ref": "e69c93d4-530c-4fef-8358-ba9b1088db59",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "80bac156-b53e-4c21-af5f-51006d7dca8e"
        },
        "item": {
          "id": "50022c63-78c0-42eb-aac0-c125fc096b87",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "64d853a1-f21f-4023-97f0-20e99d44204d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10370d7d-b7d1-483d-9a90-abc298160e72",
        "cursor": {
          "ref": "22753632-4460-4d58-bb95-733296f57e5b",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b5342a46-a85d-4bf2-abfe-d6f83acd6f16"
        },
        "item": {
          "id": "10370d7d-b7d1-483d-9a90-abc298160e72",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "065cfd22-eefb-4d91-be60-5e8c04d14a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cd4991-b177-4dac-97a4-0fcec712a1a5",
        "cursor": {
          "ref": "8ff49bfa-e0f0-4483-8c18-ce5bc95d8dc2",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "0d125751-a083-49bb-bc67-84230633eaf7"
        },
        "item": {
          "id": "66cd4991-b177-4dac-97a4-0fcec712a1a5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1b893962-d0b5-408f-ae6c-e64413ad9891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821ea1cd-f2c7-4335-897c-ab356f643805",
        "cursor": {
          "ref": "944528ee-d7db-4290-9c6e-c8f5d6585fc6",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "88d80ee8-8409-4fec-8e1e-5b421ba11d52"
        },
        "item": {
          "id": "821ea1cd-f2c7-4335-897c-ab356f643805",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d542fd8d-fead-45b7-ac4c-4479f2f39de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76945c98-9452-4e7e-9294-2da7d5334ebc",
        "cursor": {
          "ref": "cf9069f6-dc64-4738-a373-c2f9e994a48e",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "a9390e6c-bc67-4fd2-8cfe-6afa0044d854"
        },
        "item": {
          "id": "76945c98-9452-4e7e-9294-2da7d5334ebc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "436e3a0e-c1cd-4218-b2be-197c6ca32dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b313ac70-25b2-4be4-a98a-ee4076d33683",
        "cursor": {
          "ref": "80788f6e-7a78-4803-ac40-58516e30b329",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d8fd5c9d-ec3a-498b-ae34-5870e3bcbca9"
        },
        "item": {
          "id": "b313ac70-25b2-4be4-a98a-ee4076d33683",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d44728bd-ae14-4b8c-ae8a-897bc957dece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5701b0d-ef80-4a49-bf30-fd0464d243fd",
        "cursor": {
          "ref": "b9264143-2faf-4511-921d-ef8b220c387e",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e3a55f4c-e730-4e2a-86e3-fdbcc6b081e7"
        },
        "item": {
          "id": "c5701b0d-ef80-4a49-bf30-fd0464d243fd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "90510b84-6d99-44c0-a239-28ee22598356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6de36b-3a70-4c87-acf9-c7449d409330",
        "cursor": {
          "ref": "db947a6f-e2fa-4f8b-9a1c-57a5a7e7e9ed",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "14003576-4e18-4ece-abe4-a1d255961325"
        },
        "item": {
          "id": "fa6de36b-3a70-4c87-acf9-c7449d409330",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e765f912-ad6b-4343-9e04-613af2dc4313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dca98b-7762-47ee-b2a1-2169b3ca73bd",
        "cursor": {
          "ref": "4cd76c28-d772-4c46-8d22-6b8e58b78ea9",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "6b80e011-0e6c-45c9-a7c7-ace65d840b3d"
        },
        "item": {
          "id": "17dca98b-7762-47ee-b2a1-2169b3ca73bd",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6bca9a53-7235-4a34-8006-cb384cf2537f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e088328-ce44-42ef-bf66-285bca621037",
        "cursor": {
          "ref": "d398ba6d-6a2d-4d8a-ad82-77207994fa92",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "37fe161c-fb37-4764-8e7c-88ef6a3ca752"
        },
        "item": {
          "id": "9e088328-ce44-42ef-bf66-285bca621037",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2033d103-1a20-4831-9db8-024ee6018dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee101db2-8e6b-4101-b9b3-8ee5c587b2d7",
        "cursor": {
          "ref": "ca912800-fb53-4614-87cb-7785cdc6741d",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "593d7a14-4946-4c3d-882c-a75dd64ae50d"
        },
        "item": {
          "id": "ee101db2-8e6b-4101-b9b3-8ee5c587b2d7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "393dcb33-00c9-4cde-85f6-7ff92ef31103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe2962b-47d1-4dc9-aca0-16808b02ad1a",
        "cursor": {
          "ref": "63aad3f7-5e68-443a-97af-a7e9c5aa89b3",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "947d1152-9359-45c6-a653-511c9c98a657"
        },
        "item": {
          "id": "1fe2962b-47d1-4dc9-aca0-16808b02ad1a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a6408db6-7f5e-42c2-993e-2a00e281c97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a5e852-30c8-49cf-a011-9f0c4efd1177",
        "cursor": {
          "ref": "e57c42dd-0c46-43af-ad29-37a5b0d7c0c2",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "264edfb0-8115-4cbe-b7a6-b711e711fffb"
        },
        "item": {
          "id": "08a5e852-30c8-49cf-a011-9f0c4efd1177",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "db969272-2573-4b1a-bbf4-2daf9b6193fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232506b0-0ce5-401c-a645-e76142d494b7",
        "cursor": {
          "ref": "e96dc8b1-a1f7-4614-a9df-732e485b62bf",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7f1974d5-5319-4894-8482-7e57e586ce04"
        },
        "item": {
          "id": "232506b0-0ce5-401c-a645-e76142d494b7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "15c77d92-f6a5-4539-a873-f9fae2f39853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6187ec92-9188-4158-8047-6c2791aa5cb2",
        "cursor": {
          "ref": "49744fa1-b6f3-4e13-a64c-b53b268bc590",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "de110386-7ff9-4017-8ce3-b81a31750206"
        },
        "item": {
          "id": "6187ec92-9188-4158-8047-6c2791aa5cb2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9a6241c3-e415-4fb6-8552-f05d0542750d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33783fe7-6288-437e-b164-45721ac2ee00",
        "cursor": {
          "ref": "34b46750-cf78-4b5f-b869-6b35db689f35",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "83f4393a-efb3-4829-85e2-f8d9fb50b736"
        },
        "item": {
          "id": "33783fe7-6288-437e-b164-45721ac2ee00",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bee13aac-a368-43a7-9080-2d58f037c27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366030b0-925f-4243-9ecf-b8cc62896dca",
        "cursor": {
          "ref": "78661af4-3707-40a5-8562-34cec5b2b962",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ff557a91-d6d7-4f85-8b3b-1cb1ad23d5e8"
        },
        "item": {
          "id": "366030b0-925f-4243-9ecf-b8cc62896dca",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "58f4cad6-a41f-4323-b17e-c855f4aaad7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efaffed0-a488-4f05-a34d-dad0fe605ea8",
        "cursor": {
          "ref": "af9779b1-5e21-496f-b71c-bb2bffeecb29",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "8b1486f4-6b1d-41ce-a632-75361540c8b9"
        },
        "item": {
          "id": "efaffed0-a488-4f05-a34d-dad0fe605ea8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "57922903-9810-4263-a8d4-d36cf9f4beeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e2b130-be34-498e-99ec-2065c6bd67bc",
        "cursor": {
          "ref": "04446e37-b9d3-4adf-8e84-d0e9e7cdb812",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "a1d8100f-16af-460e-87f5-066f55195753"
        },
        "item": {
          "id": "23e2b130-be34-498e-99ec-2065c6bd67bc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "94934515-06bb-4ee4-b7fa-d309c6a2774d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c2223e-6bfb-417e-8387-13f13f165b1d",
        "cursor": {
          "ref": "b0c0351e-6e46-435c-b6a1-20322595d660",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c93a4b05-b0cd-4a73-a96c-02d350d71dfc"
        },
        "item": {
          "id": "55c2223e-6bfb-417e-8387-13f13f165b1d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fc0fd017-627b-45a3-8935-36c9b896ca3c",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "292e0fbf-fcd6-4c38-a3ee-323eebc2e537",
        "cursor": {
          "ref": "f7ee11d2-0934-4660-b2c5-77b8df48d989",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "260315d3-147c-45dc-aed4-1aee05e22949"
        },
        "item": {
          "id": "292e0fbf-fcd6-4c38-a3ee-323eebc2e537",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1db0aa01-5b85-42b0-8f8a-c6f02aea7120",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed1e0b3-16c1-4f32-86bd-b3ab6c5be26d",
        "cursor": {
          "ref": "b70219c8-a82b-4005-9ec7-8fcefee9923f",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "fa252c4a-fa09-4f14-b643-c47d72bf9c0e"
        },
        "item": {
          "id": "6ed1e0b3-16c1-4f32-86bd-b3ab6c5be26d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "09960cba-d8ee-4b21-84a3-e27837c1d4b1",
          "status": "OK",
          "code": 200,
          "responseTime": 172,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "df561e41-c706-4f5f-ba01-5875b0ff3824",
        "cursor": {
          "ref": "a0bc8797-1369-4daa-bf89-eb4c9cb16681",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0a53d0af-8df9-44e0-ad7a-f390f246bb1c"
        },
        "item": {
          "id": "df561e41-c706-4f5f-ba01-5875b0ff3824",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9b82d614-ed63-4b41-b234-0883c0813001",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df561e41-c706-4f5f-ba01-5875b0ff3824",
        "cursor": {
          "ref": "a0bc8797-1369-4daa-bf89-eb4c9cb16681",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0a53d0af-8df9-44e0-ad7a-f390f246bb1c"
        },
        "item": {
          "id": "df561e41-c706-4f5f-ba01-5875b0ff3824",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9b82d614-ed63-4b41-b234-0883c0813001",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7aa74f-a9d6-4c72-ad41-e4dc89332443",
        "cursor": {
          "ref": "a4c1db9b-7c8c-4cc6-9c6c-4bcd1df92990",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "2b84279b-7b5b-4660-980b-f4614d32e422"
        },
        "item": {
          "id": "8f7aa74f-a9d6-4c72-ad41-e4dc89332443",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "179a22dc-1578-4fb1-af06-f00e034f57a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d213d6b7-a292-47d7-ae51-7c97c06f2e13",
        "cursor": {
          "ref": "37659d2b-06f4-43a1-9d5c-f5a6ba12cd25",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "e58747ef-1198-4880-a1b0-7f31dd68b96c"
        },
        "item": {
          "id": "d213d6b7-a292-47d7-ae51-7c97c06f2e13",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c363abb9-e770-470a-bf8f-dadeabb7d667",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}