{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fe3d8214-e33d-4945-ad4e-b3090fc104fe",
        "name": "Clear Cache",
        "item": [
          {
            "id": "39b46985-cef9-4305-a83f-5152cf1d4701",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b87dee34-39c9-4e97-b9c5-921967ed688a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5733e5b4-44e8-4765-b3ba-5a7ee30435ca"
                }
              }
            ]
          },
          {
            "id": "49eab1b4-98fe-4727-8702-9d83266a813d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e691efa-cfb0-4b62-8886-d8bb6bf72f07",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f8402633-fe02-4aae-bfa6-41471fb3e290"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e6b4878d-26bc-41f9-81ab-18268faedfe3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f2ba1757-3cc0-4d8f-ba53-9c7712989c13",
            "name": "Positive Testing",
            "item": [
              {
                "id": "df821745-72b6-4405-9be2-cfd5013055f8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd33dd49-5384-459a-9dd8-5db60673b60f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be9d8463-87b3-40f2-8ef3-3552d3d8475c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "06078df7-7140-47ee-8ec1-e45e0b335f3e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d41c62d5-2431-4e24-ba3a-da8e7ba576f9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "16b2d790-bf6f-4935-994d-ef4243d05782",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d3e403d-d809-461a-b37a-d4016e72fe1a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8755b87a-f194-4a7a-ad8f-42281b0fc680",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "63f71f00-d3e3-4ac4-bdb5-1a626e784a68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc526b8a-0f47-4bc5-b241-b57cbb561fbd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1d1a10a9-ce9d-47d9-b45e-7a9802c9410e"
            }
          }
        ]
      },
      {
        "id": "fa90a4f5-5eef-466d-96b9-e703625921f8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4b8b228e-3334-4044-9c90-32124ee530ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e7d0e78-04ad-443b-9d3f-e59646fbf487",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "12ef714b-1c78-401c-a101-c32cdddf8388",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e248a80-305d-4b1c-8108-f59831b04f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d39f637-76f5-4dcf-b999-8968fe1b99fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25086f2e-1ecd-4156-a1c9-2e4f1281c70e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1180d95-c2b9-4d1d-872b-68070b0ad7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84b65a3f-4b05-48e4-a60f-dc77a0ade7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bd2f65-8a1e-4fb1-bd9d-e86599f2018b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb01457-b162-405f-b3a8-f237b9169e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fce468f-7a8a-432e-aae1-726f5214e9bb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f5728ca5-97c8-44ab-918a-3a2feac9cb07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d925f60-2e9d-4271-bb8e-e395e5a563ee",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ef941d-cca5-4f69-b1bf-56b3b8531ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c422f8e9-3cd7-490c-aead-e8e0d0806f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b833ed-af1e-40b6-b87a-bf2ba316d10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59eb8888-b0d6-4416-b97a-0f85b4dfe0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc99d26-e866-45e6-811e-c201d49a5606",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c186db0-7cc8-4702-ab98-38b2bd858cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3d28671-98c1-44a2-985a-f5f22482d821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7c7401-ba71-4b8d-8c1f-01075180e011",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8e3e85e2-38cb-4b81-ab45-d6b35743c693"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "71757558-ab1c-410e-b161-f9cd52027a90",
            "name": "Positive Testing",
            "item": [
              {
                "id": "693a3f4a-6f80-4ee0-ba40-0da913120314",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85026c70-cf4d-434d-9c9b-fafd6812c1ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8eeeecf7-0a7c-43e9-a02b-76d85915c2be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f800ad68-8b50-4ba2-9833-d6939039f5dc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c5961fb1-0913-4548-b01c-04471490d1c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ee7c9e6-8ab6-4424-a895-f33f3d253015",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d81baf9-eead-4ab5-9743-6d4701a3864f"
            }
          }
        ]
      },
      {
        "id": "114fd0d8-2e3f-4fe4-80d6-46691e59a0fd",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "72984e6e-eb00-4cce-8db0-2d53596deced",
            "name": "Negative Testing",
            "item": [
              {
                "id": "345ff51f-5366-4b79-9cbb-2c53248d1397",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b3a47a46-293a-4054-9372-34dc4acb707d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54779bb6-5d15-462c-8aa0-10f93cae5449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca30b938-b242-4c99-b4ca-f9b738423088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d50846c-1f81-4e24-b8a7-d1971328573c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8aeba022-20c5-45a4-ab89-96575d902457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e237b7ae-a59b-4dff-bae8-56a0da037275",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eed2f82-c9da-4cdf-b902-908ab2a9ca75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d717b0-3de8-433f-aafe-1ac7e004bb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2181d2a3-d4a0-42d5-820f-241b048b6771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7635ee9d-4c86-45f3-b4ee-18a305f0e449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849e8e1e-6a9f-4d59-9c3e-9eadd3534533",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa404c5-d613-4f3a-8b23-ace0c2591919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e15303-c943-48fa-bd1f-bf5d26a8875e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8627d5f-6b06-4deb-9f77-4b6f439bf933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "940b6c3b-df31-4b29-8d97-f2fc68a40e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b30eaf-eab3-4d52-9217-bc0476c79635",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50d1921-10bd-4085-8e7a-865bbe5e0aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0d3e06-8a34-436e-bc86-69b6e3753940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa806013-48de-47a8-827c-bc9b433e0309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dad4d80-9daa-4b4b-a8b4-e9cfd234d2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c222b703-ed6a-4b52-bbda-0d4fbe61980d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3358a893-8e48-443e-a3d2-db36a9180422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918dc1ff-0558-4dc5-9f4a-e91da582ec6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d018fd-26a1-4f3d-a402-57f0dbc415fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40d6b5d0-7672-40b8-803d-1b88b9be8531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f416aee1-6543-4ad9-b7a4-8a667f0bb7b3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb23419d-edbe-48b1-8df8-b9cde2145458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3db0d0-8697-4311-ac23-ca698821e9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe98a87-1f75-4780-95ab-f558ab8fce71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "454e0c74-c187-4e07-b022-06139af55756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec65be7d-7817-453a-816f-62cb960f8321",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea200d09-ee8d-43dc-a012-4e9323477948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "689622b2-daa3-49c9-8ac6-978d33886c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54104910-828a-4d04-8b8f-204277ba49ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e687c95-f91b-4bb7-ab90-55e19b029ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2d0f43-ad86-4aa8-a63e-7d9de1821c4d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd15154-0687-4597-b941-e4692578e8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97f7bc0-42b2-41bb-84ed-a6577f8654ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bbd49f-89dc-44aa-88a4-3babdf9ece67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20fe102a-ef05-4339-b1a3-3e815ed955a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5c369e-9d1c-44a7-b33a-0bd6ae7078f2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34771cb8-2af2-4a5e-a821-9eb0d4f3f952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dfd2acd-14f6-46f9-9d29-f8f9cb7acc61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67c951f-c300-47fb-9244-017b9bef2554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "357d0392-7384-4363-a4ab-9b5352bb0416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d19206d-b93e-4d48-8d2f-0540a36a0029",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6523ce8f-a4f4-4220-a284-bf8b73fa1e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d278a133-cf94-43d9-9419-e80104068a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02aa829-2ae8-40c6-85f7-35af32b8569e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ad5c599-2d17-498b-8571-858c50b2a9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b79853e-7ef8-4ce1-b203-a70950478578",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8c8353-5f93-4140-8aa1-3b8d86356e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddcd7582-1373-40ce-ac19-6525bb66dbc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4335b2d-3987-44c7-a973-fb0f4aa1415a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f42980f9-b6f5-4c40-a7eb-c80a25041551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527bb226-2d80-493e-8eb4-3b66b1554a2b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9de1a8-8cd1-4db3-b68d-a139a1b5a1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997c89b8-b23d-4c4e-bffc-1c3b42b3e4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390a1765-ed63-4624-b78d-4742899ac693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "683cd9ed-aaf2-4135-8762-ec097d827c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d112abd7-5465-41f6-969e-7d3e50372bd1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edfa0ad-803c-4e5f-80af-85111c01e08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a8ae20-75a0-4050-897a-7c4eed110835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f81b3d-2e32-4d73-bc83-61ad969ca12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2967113-8c3a-4dad-9360-41092653f717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d0ddab-23ea-4ab0-9900-6f358b3b84bb",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1534e838-517f-405a-ad48-705d1afc1be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b13b62b-46b4-4647-b61f-f8fd50400b77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9a331c-9b60-463a-b1e8-5d9ded296d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee44b4cc-c0d0-4ce7-abf3-852cc9b8d2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffbf647-1863-4f9a-90fd-baa1d067a703",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af033f73-eee5-45cd-8b76-55b16ba145e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "963fba9c-1b50-4250-b101-4973554d7dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa869dec-d173-4de8-8098-111e8682eaba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c8eae6d-b589-4d51-b502-1715992ff361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9de66e2-8d84-4e6c-a8c3-9f05c66b4024",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde3ca82-f5d4-4965-a348-e42f463d9c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8132180c-87f5-4cc8-b8be-ea4f2c61e6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1b2fd8-2e5d-4920-bf0b-bf3966f69a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a0e729a-2254-40a5-9135-b0574fb45b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34663090-2a40-4fac-b208-579920aab6a2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66fa9f5-c271-4229-b1bd-184162aa4f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada7b14a-90cb-45ce-ba76-3b2d056fba69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f4a3e1-bdad-4a3c-b8bc-f991355607f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "190f0876-7259-4f2b-95de-298cb93f7e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bca24b-c907-4e12-b416-ad8e096355b5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ddfc64-a768-4472-b799-9bbbbd0e5df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4cf6f56-305e-4c15-8e1b-78c0d3a466af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd45086-8943-4cf4-898f-a4be71165df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d07bc749-eaa6-4c26-908f-a101132eb9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed89e62-ae72-49b7-a05d-5e087f2b89c4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1047178-f6dc-4a69-b6fb-d4fd5eb90eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb6cd4e7-50c9-431c-807f-a7a3bbbb6c97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bdbe08-f9da-4bd9-9486-2e491aea759c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c1967a7-62c3-4c28-b773-e31405a18b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79814307-741e-4849-b54f-96e1b8e25637",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bfc31f-d402-4d05-8a42-bea75703a678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51274de5-cdc6-4c41-b90d-80c60f383dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23121b1b-5753-42d8-b500-27626ad1b024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d05aa92c-5ee6-439b-91fd-be487515242d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fe86a4-9a5b-4b2f-a2a0-c9ec2d1eba6e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5550066f-04dd-4e1b-b30a-5a50b15f45c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79362ff0-8dbb-4b23-8218-16f48c3bfef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02b47ca-5461-42ff-bc56-b5b6d43f081a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "313c593d-0527-4fd0-b1c0-ee09b6aa7ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7dabb59-c55d-4acc-9c1b-947e197a71f5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fba4ec-e19a-428f-ab7d-26b2b85766de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc68444-0de6-4bb8-9642-99b5d74447cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aec860a-e33a-407d-a5da-45469015450c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b89f8f2-7fec-4853-9570-8b5ca18c03de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277e4f79-3c92-43e6-a09d-5c0ade028fb8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5ab827-8d02-47b6-8013-b0881e9409d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b608f5-c68c-4718-9baf-7398975dbeac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3511e772-7a7f-45f4-b2cf-1ab34b401f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9119b8b-fc22-424a-8fa5-90bb9ce8e24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898318db-8562-4f24-b114-8b129f9a6b59",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f048734-dd8d-4f05-acae-8fab1a6e13d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c697be-4e79-41fe-98b1-a9ba5341deb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6b2d94-ebc3-42db-afec-3d654e22761a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dda88fc4-0eaf-4169-b08c-f861223335a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42852c5a-e948-4d65-a393-99c0056a50f8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c913d0ba-9702-4a16-83c2-c62c42efd96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83d94e0-3e16-4edc-ac34-c5651a31ef21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d19e27-f9e5-4324-a8e7-91d478367d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6fbea493-2633-4f9e-aec5-e159b7feb3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e4a1c1-33d2-471c-893c-681e85687a4f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dae233-072a-438a-9f1a-09103b76c533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8eb4a33-e8ed-4f1e-b2d7-e21fcd1c782c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a763e48f-b52a-495c-8b7e-657fb3d8c549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "44dd003f-3078-4c2c-8c3d-69b4d68cae0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4517878f-8ba2-40ed-be53-b63e12c7a306",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21258a19-43ca-488b-980c-f694cb2760a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8584856d-166c-4222-b78c-e5d1007c547e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e3d9e6-f134-4e8e-9f24-473fef296398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3056d76-f4c3-4433-a98e-c9d6b55726b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa346ea7-f350-4ad2-8e5a-bbd7be533725",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b968cb-7477-466b-8c01-e70379e44ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd6c5543-2c13-4b80-b529-a75a4c9f52f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e54bf11-9fea-4d99-97bc-bb7fbbe7913f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1740fa09-4ebd-4891-8213-a900d780899f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb76c88-75aa-41c8-a11b-cb9a8dfaa2cd",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd5ba6e-39b5-4bff-89ba-6168854450e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ceb0787-e1d6-4e92-a486-e00b36456079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2334224-1264-4438-ab04-fff0e63a0199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cddabac-eafb-4130-b29d-1c8f0e422698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeb8418-6823-4ef8-84e8-4b4dd3c4ec5e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1635f12e-161a-43d9-a80a-e635b81894a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec52f05-3b50-4963-bbc8-adb9b076e4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef8fedb-9517-40ef-ab09-987d307de12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "046af0cb-abeb-446a-a01a-fe29c46d46b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fed3d6-ef10-4582-a667-a9f68f705772",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86eeb399-5f9b-45a2-b18b-4701414d8005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce9fc9b-78ab-4f09-95d9-136ba49df44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffdcfda8-ebd9-45fc-8217-000370edb788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d24f93e9-679a-43f1-8bbd-e061869e8c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09eb11d2-020a-4006-9625-b72413ed9490",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1183405d-1d45-4e88-9e0e-9ccc0934df65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c225d6e-d3cf-4278-889d-1e06ad996731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fb6d11-71c3-44bf-b1a5-d21c113d9a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb2c39f-952a-4f3c-98a9-79d89f0ed60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e72666-69ae-4317-92c5-7a3efe51d46c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31617c59-7617-4a88-9941-f6d23bfecbf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849a5d5a-785b-446c-af90-50b8c0affa5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff426cf-e5fd-4769-bf9b-022817bba7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dddfd934-5517-4ad0-a67f-d7f7fc978043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a25f0d-402d-475c-9dcb-74bf8cebe9fd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84c438f-04a5-4ec8-b9b5-276f1b217f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecb7316-bdb7-440c-9aaa-a40f8e8233be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3750e1ad-66e4-40ab-9b7a-bdc4fc8be666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd9cc680-7d4b-4ea9-aeed-182119e254a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf74b396-f7eb-4c69-a9ab-44af128163c3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10c8a25-dbe4-4813-b0da-d47e3e1ab6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78aaa2f7-6a15-418c-9e4b-28072cf15fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43de318-b815-40df-8b98-19504dd00efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b09f16da-4e49-43e8-8252-e30fc106b695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9a592a-00d7-42a4-b6fe-85b7c625299a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0486212-a343-41ad-b62b-f0ed55bbedc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd597182-ed20-48c9-a4c2-11568400dbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c4a6d0-fe90-4b20-85d0-7ee5aa9103ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d28b562-29ce-447f-93ae-b001ed4ed634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371b6b18-b1cf-4fb8-9c06-43837a32e71b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545f8513-01bd-4f8c-8758-720cb58fd14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae554e7-b82e-40df-8f34-2cf72442f94b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1158ba3d-66bf-4a5a-a928-62560725b636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c73250aa-c0d8-438c-a3eb-ccb5f5a9045d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7892db-d399-4e37-8f3a-7b7b4540bf0c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016c930a-adca-4e73-b55e-c84a0a528b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1488b22-070a-4021-96a3-a3be164656a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79919137-a7bd-4884-8c0d-b8aa40150ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06bb439c-9af7-4ee7-ab66-5a4004cd7ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064679eb-6e0f-40c4-bca5-3ac81c23d936",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0351e2d-cd48-4e7e-b50c-9eac30afbb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679e1c98-cb3a-4a55-a819-5f2cf94284b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbdc51a-43f8-47cf-be91-4ac55637cd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b254ebf8-13d6-4389-8e3f-1abfb41f9c0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116554ca-790b-4c32-92f0-7b24d4b2abae",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2257f5-44dd-4e98-8358-2d72fad06d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66fe6a24-3912-4b58-816d-2613fd7c3b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5154e1-7957-47fd-af95-e6caffc62a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e555403-eb11-481c-9cc8-f79a2c094e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8d941f-b85c-41c6-8d85-13b003391bb7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8c6dc8-a14d-4ac0-8489-b4ecad019f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62840dc2-2dd3-4d20-bd84-568dc10d979b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a627951-387a-4ae5-b392-d7337427c6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7552520e-80d8-43f9-8901-910c1985dce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fa77de-35aa-49ca-9588-13def1763437",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8266f024-374f-46da-8aae-cb8ad3c22f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8cdc93-9cf5-45da-8ad3-886081092bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf6e819-7683-46d9-8f1c-f3ceaa7ae6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a21e362-0d77-49d1-91e4-611508c6695b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3ca4e3-0926-4f04-878d-d544ed634e16",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dde1302-1128-40a1-8100-cd252b45c0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ca4841-d530-4d5d-b558-50f17f9d5979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d061f6ab-43f5-4fec-a7a2-b6cbde1dc10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "553a7ca8-a333-427e-869b-c306bbfcbfec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222d8794-5ff8-4e1c-941b-d695755f8653",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830dcc39-0d27-47b7-b2cb-e4fd75d55e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1c86d3-dd41-449b-938e-091a448f6b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab2c3e5-12b4-4846-9fc8-9f0508626397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "cfff5b5b-323f-427c-8198-c2a61114581a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a285fe07-883a-4dae-b0a3-936586367a9f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c18d582-af46-4e72-9176-7f53803acbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b5e567-8e62-44a9-811c-a4fe7694dccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54084c6e-708e-4c6c-bdc7-346f66d8899d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca4c2a2-19a3-44dd-9e23-30e5db5bff4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ba189c-43df-413b-b0ea-cb9d18273ab3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2561f05f-fefc-430d-acb5-2a621fd220db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fc89aa-f195-4a79-b97e-386d7a6653a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30c9309-36e5-45d7-9543-7879d6658a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a6ada9d-3697-492f-b6a4-c2cc87aea468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d244fab7-d45f-4a0e-a25e-e9e0de1f2f27",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e6832d-6e20-45a6-805d-1282d414eb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbef6fa8-3345-47d0-bf85-fe6cc9bc10c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637a8952-d65b-4f3b-9113-6cd5644add1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "809190de-6bd6-4dd7-9f1f-2a42653cea40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e972f6d3-be81-4257-b24e-30c7b025cff6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad4d4af-8c94-4144-819a-6b2a1166b7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995e1227-a207-463c-8c7f-e31bd1aed609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3bf448a-1f28-4dfe-b25c-db3d49f61675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d35580b2-e5af-494d-8831-a01e65398114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c461edac-2ab7-4a5a-b3af-0bcf574a8ba0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2205c049-1bfa-4987-9264-d76faa3b6e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07fe1a7-3c2c-4a85-84a2-d1652b5197db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca06de7a-e3f6-4115-b21f-92db7f2dde32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29484271-f1f6-4f71-a569-21ed9651372b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e32fe7b-b87a-441d-b0b9-9782e80092bb",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550341c7-cfec-4aeb-8024-2a49eccf72fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c3b0ad-165c-488b-bd8b-96292f92cf80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3edfb7-dd00-4e22-88dd-7e95b7434d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db307580-8392-4a43-bf70-ff72a8315157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb8f974-c967-466e-8f0a-7357718bac1c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e683f0-27dd-4478-b65d-626a564d0d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d9b28f-836c-4116-9dd6-25e06faca6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc73cb70-cebe-4736-91c5-b40b14d2c6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3dfbe699-2950-457a-b3c5-0557c6766371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c122d9f-aea5-4e3f-b516-529e3d0407b3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09772cb3-b9f3-40e4-a784-41daf80099b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6a044c-75d9-4bd8-95f2-861b076270b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca34799-f624-4368-9f2f-9e283e12894b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f589b329-d0d4-48e0-a2e7-435e32b6a5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6f4c7c-3da8-4e77-aff9-0563b9300165",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef670213-99ec-4bf4-b912-44a525e666ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94fafe5-518f-46a1-945a-fd0701917f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed228997-27f8-4d94-8d81-475a259aac00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d243b69-e726-4b75-a64b-8949d433218c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b62194a-7fab-4e0f-8bfe-cd38fddf3ad8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28256d3d-50d4-4207-82f4-71d5283b2f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c265da8d-002b-4621-8736-1389ca94298c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f988d9-ffc4-4349-abc2-8f527665fca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb611a7f-e0d8-47bf-96ac-4ceec3d58bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cf4f56-aaef-42a3-9efb-ceb2d106ff71",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a52b55-fbbb-4d35-9194-e3c0cd5372eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1155f9a8-4a23-4cfc-b067-692d57a5866f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d62d700c-fe94-4c81-a2d8-2b961ac770e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "853d52dc-04ad-4293-a165-c8df4427a0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b99f71-7601-4ad7-ba8b-6e4ddf74b322",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9300bbb0-ddd2-483f-a073-8f5864e0767d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83de55c5-9896-47b9-9557-916774ac6c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3374c5fc-8a4e-4cfd-bfd2-ab3fd784594d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96423f41-598e-449e-a4c8-5b227b69632f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facfbca7-0e0e-4a92-8750-7ef79c9bec33",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c3c4bb-2a04-4128-83bb-8970828f1d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8b6f50-b405-4c22-bce8-ec5cd2fba46e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf8ba54-fd71-41e1-88b7-025131d06ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cad6c6ef-46f5-4097-9ec9-2f9356a3c3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112ffcb8-12b3-4181-9286-783fabe8ee60",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253f0d3d-3eb1-450c-b633-55c79a189a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd22be5-4412-4c9b-a678-a845c16c80a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe03d39-ae59-488c-babc-3f773b48f298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "327163b4-9cc4-4f3d-9423-5dd1df46ede9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81e72fa-8afd-4f7d-9642-025543a50cc0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ffd73c-ce33-41c6-9ebc-3693545db301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce1628a-d043-4629-bd15-fa09618bb998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da127b1e-d2b8-4a6e-b38d-89dee5eccb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "057dbadc-df11-448e-b552-3bf020d9964a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2224f61-7c04-4a0d-85a7-bba4520c429c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf16314-3870-4fa6-af9e-359943c54503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d057a3-3fe3-471b-a0bd-11aa0d8559fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3d663d-e429-4e56-929d-8b0b59b6cb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5985e87b-043a-40fa-855b-a4b4ef17b2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080e3a21-4f6e-4f5f-ad69-9ec026fa7578",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068500a2-a73d-4f94-bd79-fecb9f8387f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a046e2-86cd-443d-9bb0-fc5896bda525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27331b04-ea0f-4b80-9f29-b67a20181d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "535e6300-6b49-4f3e-8fe2-264928b63185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363aeab3-2906-4ebb-af4a-14610a8a1a76",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08a334f-4db4-4d1a-a538-070760e2b8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "922c98c0-bcb6-4ec7-9636-2619b3299d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb22ab09-82ea-40af-8671-6d8bf563d916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf42d845-1296-409f-8931-39f1d54abd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a48ab75-f0e4-4eab-884c-aa5da36666a6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8dd994c-c4c3-41bb-bfc8-fc528b1f0c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bca2d32-a3bf-4868-aa56-ad1a8606afbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c912c3e-1924-413c-adbf-55689102e959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b88667-9837-43e6-b3ec-82696c1d7e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953d8ad5-acac-4155-b28c-21c8b8612d9d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "821df2cf-5213-4061-88a9-d81de16e918f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218654ed-57cb-43c1-a1df-f135350887ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b2aa7b4-114c-4baa-8410-242067fd59c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "19a6040c-aded-44d0-b0d8-21897b7fb794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44be52e1-2c26-4bb4-b325-cda1b651de4c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca0cd2a-b58e-4ebc-a12c-9c977d89d6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927376b8-4c42-4bb5-af6d-fcbcc1c16d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503aea10-cab3-44b7-a68c-ff5eef1cdd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "983178a1-ecf5-47d4-8019-b15916175fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0a2a77-2a2f-48f1-9188-1917db9d216e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdac838b-4d5f-49b8-9d9d-997506020c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78c373b5-f326-46c7-9fcb-3df30c219de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8213d526-331f-49c7-bb9e-12bbbeefdf64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74c588ed-5b0b-41ed-a0f2-791cf58fc01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298acce2-47c7-43ff-bf82-4de9672fbf2e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a314089-7d49-42ab-8f0b-0a2edfdef66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41362528-820d-4461-b635-3c9e4eeada2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae700aa-bed2-4dbf-a863-4896c6b42a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2013442b-de96-4d71-a667-fc3549c31a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df74351-dbdc-4743-aee6-002e10608329",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3801fc-644b-40ca-a63c-6f6784da20e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458b275f-3b08-41d1-af87-5d845462b430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee786ea-705a-4e6d-9552-9f9983774c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8394d47f-1a0e-4a09-be7e-211b0803ec6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e2c926-deaa-4021-a54d-742af9be6c92",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3477b2af-cf26-4a8f-a093-bf03f8c75328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a71a94-2a29-411f-a634-4da76953d7ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d93b6c8-de2a-455a-ac9b-8e7829d232fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e605531a-e50e-4c20-8a0b-a083801fc471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70895ec3-a21f-4334-847c-921dd1ad64c2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2aef85-1897-4234-9eab-5643032822ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68ab88e-b98b-4aa3-adfb-7de09b46e6ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a305f6-1ce9-40c4-b5dd-433540dcced4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "63ae6f21-f9a5-44ef-8810-7d3912cec443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edcfef75-45b4-4322-91d2-14b8cd3e24d8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "829bb476-be3d-41a3-9eeb-dc84d356cd50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357901bc-f8a9-4e73-a5e6-f76fe59d4fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbdf9f30-9e10-49de-ba55-66e6267487d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "10cab711-076d-4fe2-b15e-68d9bb29779e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2058efc8-26bf-4301-b4ff-a794502a1cc8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e10363f-e683-4bd1-af2f-2aa7c7500938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2d47da-e8ba-4d39-966a-35e7dccd4cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b04e5f-8271-4402-95cf-c431d873e93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e14ca97f-bc5a-49f5-b0de-13ed0039accb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79390d3-e883-41df-8808-f0b238b04563",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a29ed57-c9b6-4000-8122-7dd6bf7aadbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4b2c89-ee6b-4c96-93a3-c05121a858e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d934c388-9caf-417e-8073-dcd953555bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9fcfe9b-51c0-438d-8840-94a4e06e61cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b178126-277e-4ca4-a92e-f82437f067fc",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9558e552-edb0-4aac-9aac-f0114034a10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f732a31-5e71-4aa6-88f3-f29333256099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce9f930-259e-464f-9f89-062986f460f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4be2db37-aabb-40bf-a7a3-c656c5585214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8935b4bf-929f-45be-a946-3ec3d8e3a9f7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117ccff2-f94d-4325-8448-8d4d845ddebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8e26df-440b-4d1f-b923-9aa131e4400c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c024533-aaa6-4a87-9d92-9a33351fc2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17ddcc85-f874-4a00-8999-000917fc473c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0b7c7c-fc3b-418c-9b7c-86dde92a5c98",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920aa39a-68f4-491a-94ad-0370ee9c378c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f067a0-fa51-4c33-b9d8-04ca18902270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04879f91-dda6-4d74-b8de-c5d80acc11e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4eda082-1e3a-48a6-85cd-d544a4d4988d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2b53db-91ee-4e42-8f20-038d8ed9b25a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be50abf-4af7-4465-8a1d-cde529972a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "453b5daf-1e60-4520-b34e-cb7376660c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b82e23-a40f-4d25-8dec-52801b89abf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae5c8cd-f44f-425c-8cac-ed534cfb6ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50182f88-1275-442a-ba01-e0ed2c83be23",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3c3698-c9de-4057-b139-d122b3ada6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd869e6-1522-40ae-9e68-b40db788d59c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610b6fde-1da6-4d26-9c9d-1359ee4ea268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d4af530-6abd-44ac-bd22-faf8b136a257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdeb5465-1d30-497b-b6b3-17efd016a174",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b1ab80-dea3-42f6-a321-e2690ab6dbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b28ab5-0364-4f89-bb79-c9dadecd634c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19508ab5-dec3-4e88-8f50-d4ef8d604ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a08cbe8-64d0-44f5-b6df-84e01822a8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8980a7-c23d-4401-a205-684887af531d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e290e6-0f33-4db4-842e-ae04411d2524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610f0b74-7752-480a-a731-86d3a2fc7b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39350aa7-0e51-4fed-aab9-7e36901d87ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae402fcc-74c1-4f44-9959-b48232798a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c445d9a9-a6dd-40f6-98c4-57199fb19fa0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa53e92-316d-4f95-b699-90d41702259a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f72e07b-6f86-4605-a408-64504771ce2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6ae41f-e3a9-43ae-9818-3583c9d72cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37bb8e9e-d3ed-4245-b436-f59cc506e252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d1ffff-4a6f-4c4c-8def-dde325d4547d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc6a52e-7049-4817-8836-1bc3987915be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a01012-f1c8-4741-a8ee-4cb04f4052c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4433ecec-5e48-47c6-bd11-da8cb6d9b160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ddba5ce0-7b7d-4677-b8e5-e62238b7d3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5e25fe-a7d3-4b89-84c4-a9ec6fce28bb",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c0f46b-565f-476f-b4e6-1bd975dfd210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa5add0-db8c-4f5a-a770-1db008c6b090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348c273d-eaab-4582-81db-81c83c08f7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e588b3e-2236-4b54-9d4d-d83141b4a2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec1f466-a231-4abe-b98a-b15fec1b2295",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0caab50f-1b98-4dd2-9589-74f4fc8b9c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae6aad03-a81e-4729-a715-0ba89d5d492c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f6d92d-ed21-48e5-a329-b633b907563e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6459a0b4-9939-4a23-9ecb-6172d52a8574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6366cc-d7a1-4037-a12e-08ed00b20947",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba295bf-8b45-4b9c-8b65-5b5416216438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81940325-520b-4c58-b7a9-846e28703c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52cf0597-4eba-43ce-b575-6df89361f662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a193d24-c044-4724-84cd-82b9822d701c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9642bf67-342e-4d6f-9370-29eb91dc19ef",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebde204-9302-4edc-af20-2494efe0809b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393a6ba4-f1ca-40ed-952e-d9bb21ee0ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209738f2-5863-4e79-8280-709726269857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f313b3d-dc32-4492-8649-d0f0afa7c6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3153423-fbb5-41f1-a959-0cd545789c3f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d71fbd-479d-4396-9a19-f9e9f1c8f0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a4e6bb-0da1-4a05-b32d-c4005ba1b689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9cad212-ef5b-4871-a5a0-19aa6acb8a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "03e24845-5586-4df0-b1ba-72f281bc5e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3849728-d698-4bd7-98b1-2003d6f6a88a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3207a1-91c4-4da1-98b4-2375e1f6f49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e508f0b9-7b07-4c03-af90-4d3b9d5f088c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238d281d-0e30-41fe-a70b-f2745f224ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50fcf163-ba26-4408-a6e2-1dd3c45dfd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff8691a-fedc-4570-b679-c4d15a4b24be",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e248df-8de9-4600-ab65-106813799edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa614c6-361c-4ea0-81b1-da058b3af0d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9b0131-f7a8-4307-920d-33b2eadb3e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1ee84c6-ae89-4c62-b6dd-2fc3c23dd674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53b83e1-eac3-471a-9144-3ea5e2df6664",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76727015-1c9a-4813-86b0-1181bfd0845f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d19cd4-6258-48de-acbb-eb4d8747956e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1e6d3f-23bc-4f07-8345-b0c018fb7f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "17b8a9bb-fc9d-4d3d-bcd9-8f1c56380dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ceb0d19-062a-4655-86da-b107eab32212",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a81f8c-92df-44f6-ba1d-f24e319dfa5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7a5e6c-02f5-4d60-bdaf-e3552c294a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92834c4-ec98-469f-ad49-729964057d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b062f043-6b03-468b-b720-812a2a7d1e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626bf32c-570c-4294-acac-214f9bdf396c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f187b82-4eb4-4746-b298-8c93a4ba997a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60e7c4d-56c8-4f64-a880-108f56d76460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267bbf7b-56ca-4d6e-8af5-5d218d65bb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "60ac0636-6449-4d67-ac66-fd44388c8310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce21927-470d-4041-bd9b-9c48610b6196",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32a5ceb-cf66-41e2-b671-c7f17016997b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78e64da-5121-4a64-9539-8d8f73969a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1313311f-0655-4236-ae58-090f7a7831e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6dcb30e9-8cb8-4a45-8ab3-876e10eb20f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2222916-4262-40ba-88b5-19984fc94491",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62baaea6-5ccc-4290-b1c0-6343bd02eca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dc8b893a-2a62-4f18-9cee-b69f5d1d3b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b411de8-b60c-4329-b97f-20953efecf61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a958392-6095-4ba9-a93b-09c01b86325f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c47ce74-0042-4593-8098-c43861ceff4f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1992b1c-f8f7-40c7-a774-315267847e6d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c1309c-a9b9-4f8e-ae85-e853d08fe3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "57880b46-4a6c-4cc8-8e2f-98190f424b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7c4486-f769-4436-98f7-5f3e7fc92b91",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d31808f7-0123-408b-9fcb-e566a660b5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabfbc1d-d90e-4319-b999-9af93f6b1c4e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acebb85-ce7c-49ae-b560-f4ec31286ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51fcfeef-fee5-4d71-a41a-08d5b58c09d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84953ae-53e3-4e09-ab38-c26066946c3e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "12f13802-4b1d-468f-8a68-7e9bc4685207"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d588ca9c-a9af-4566-9bbe-df2d09b2880c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "474d8d52-7be2-41ff-9bc5-4043f3cefc91"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "abae0ea9-c1f6-44c8-b5e0-6d8727234903",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "210b3be6-6528-43b7-832a-2dfbe18c1fc4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ccf5cea3-ba3d-493e-bfbe-0060917cb8cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3f9f074d-3c4c-4d37-8bbe-39b56583ac06"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "82b95297-a4d2-42ef-8913-4b869fe6df49",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19b4b39a-c071-45ca-8f09-2e9de06d6931"
                }
              }
            ]
          },
          {
            "id": "54dd1d97-10de-431b-8072-5a0c3675e660",
            "name": "Positive Testing",
            "item": [
              {
                "id": "397a6af4-03c4-4e2a-8532-7e7bb2b94589",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a0b1cd2-0b92-4f60-9c9d-136bb3fef7d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9131b4ba-2fb8-48e8-99c1-76ee251a90e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8dbfe932-f19d-4a7f-985b-973210565f83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a6939945-d876-4b1a-ba5d-cbd4a229116b"
                    }
                  }
                ]
              },
              {
                "id": "421bb750-f6c6-499f-b05e-db06c2a2ab45",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b8aef15-6042-430a-9e25-f5d586975e23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e95450ab-08ed-412e-8797-dcf9a6abf0b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5c90e37-fdb6-4fd1-a2b5-a0c5cc707828",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "111cc823-46ed-4bb2-ab0d-2dcd852f3190"
                    }
                  }
                ]
              },
              {
                "id": "c2025ee7-242f-4045-8231-36599e42be38",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "550b9298-562b-44b8-b2dd-c7efc3c349a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18ea648d-598d-4966-9994-b8f7e0fcd5f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc8843b8-8c1f-4988-9a38-d464e112bef3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "3e450e15-af62-4c3f-8c43-447ecb7cdfab"
                    }
                  }
                ]
              },
              {
                "id": "3df397dd-73dc-4e98-a483-45c90c1d9662",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "224ace7a-38b0-42d5-aafa-686c1b3f916e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91822a9a-9050-4611-89a0-2ce974466e5e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "545e8104-b7bb-411e-8fe1-75007ddb987b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "324a8a12-6af2-4ac2-a530-2af8b778bcc4"
                    }
                  }
                ]
              },
              {
                "id": "aeb1ffa1-bf2d-4cb6-a811-5cf39e1d2295",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64f57417-59a7-4481-afb7-343bbfdf1bd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "09a31d47-668e-4738-a0e0-b88326a98105"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5823b615-7ff0-448f-b66d-3a2fe2b1eb10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b259c8da-32dc-4d27-aa57-7e2df8d1b88b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27e66a46-8d05-4c51-a051-fff409f79b30",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4721d87a-b8b7-41e8-b71d-ef337bc75940"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "28a64164-ec8b-4b53-8e10-92db23ddb6a4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea3775d8-c87f-4671-b0a7-b43b20a5ec5d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "251e0eaa-9eb5-4f13-befc-c8a61e51d2c1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9bb8b7b6-074b-438d-9a78-b17acbe40b6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a77aaf8-b0bd-4387-98d7-e131a7042691",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "82d458ed-211c-44ed-956f-8ea70e331b6d"
            }
          }
        ]
      },
      {
        "id": "c4f367ed-33ec-4f4e-b400-36caff2836fb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "22ed7b06-d109-4251-bf4a-76cf408474bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec4cacfc-0309-4242-a213-605f405e8b9f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "823b9f59-b763-4c82-87fe-a0b553eef302",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c485e8-2c9f-410d-a2c1-9c03ce5190bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a662630d-cd5a-47ac-ac1c-f34431ba4ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35771005-03b9-430d-b4b7-235a21d6ccfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce21b49-2838-4c9d-9a2c-f7d9b5dc7f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bad8ee-b39f-4bdf-a115-02bcc298ee2f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b91810-51bf-4457-8c39-ffde9c485b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3000ed-ef80-4954-9bbe-870213b83e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c81b18-e7fe-472f-a2b4-91983f524972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ea5bf1-ad79-4e69-af39-5a3715e5c792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1758fb-ea82-4dc6-a7a3-a400accbc1bc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9838a4-8f02-4b0f-aca3-a2f0440a7dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02fbb1a8-c427-45c1-a7c5-31e715d1a4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d2215f-a300-4869-adc0-6d835db6ce98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f32a968-4045-4525-9c20-6575a53f7a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aeeb582-f001-4c67-ad07-b05f77421b17",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d089a1a9-2448-4d8a-bbd3-aaa30a2e616b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88368362-77dd-448f-b128-7e692fed1367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8688e87-ddf8-4ab1-914f-23b7681f5255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecfb2956-a5d5-4267-af38-ced0e269fba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa85728-9a86-487c-b23c-6925b93a61f6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29730bd6-1e0f-4b8b-8504-707cc13da8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f64677f-d61b-4b8d-840a-4fcbc9fb4c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95ea692-4be9-4fab-90f2-e3b664e7c1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3163908-c5ce-41d8-8cfa-705747ba9aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704498bd-9048-4328-a9c8-a89914bc7969",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35874536-9904-4c5a-825c-6b0be51bee55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64ed53cc-98b4-424d-8773-29390ce95791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e6dd5a-64ee-4c78-be38-7e471cc88061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac1220b-d5db-464d-951d-9bcbcc890c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2cf5e17-084c-430e-b7bb-0dc53023c272",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d881d51d-6e81-4b5c-8789-1a0e3f5a534d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51b15a6-df7f-4ecf-bedc-66ce64db3dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c35f40d-e8b9-48d8-9be3-fb8ca0d387b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc2961c-0ba8-44df-a408-27bd5ecaa52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d597772-3771-4e06-84fb-b5cbf0b321cd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956509fd-64c3-4b53-821e-af9258d1e48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b90822-fcc9-43f0-a7c7-24477aaf1b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1083af88-dc4f-491b-a094-7e7ebfd16eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf91be1-4227-417a-a23e-50715c68c464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9493962-4a78-4f24-89bc-ed0f24d79fd9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d84ff1-7a65-4ebc-a998-d5b330aa85cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "998d5496-ae21-40c7-ae01-167baee48008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcce691e-c5cb-452f-b261-16dfc6932416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a2e606-3098-49b7-beba-661488bdfe58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d392dee-d41a-439a-87d2-6e1bf9baef37",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380e834d-f23e-4ca1-95f7-8a9734672fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "159f2a3a-8d46-4372-bba4-78a2f1b36b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d3bdb6-6432-4c0e-8efb-6ec54fcf43ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c60965-4632-4659-8e02-17502e54dbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30e5eb7-746c-434c-9d8b-68f60a5dd87f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9daaf533-9f98-4680-88d7-8f9530bb1602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26244947-4548-4f90-a19c-400e53a22e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1412941-8aa3-4948-b309-f1e091d507a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3fadf214-77ef-4aed-9557-1d8fa5c5f0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64179d24-1a48-415b-8d5f-17c3f1603ec9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf24d2bd-83b3-4a61-a71f-bf6bf00d6307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3cdfd82-5471-4aa0-b57c-4be89f32fe2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b60de7-fe46-4a27-9b3f-4c9f7cb01a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3305bd6f-272a-4893-92b0-c7b1ed829908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c313c6ea-ea91-49b2-9708-f08b281ea59e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe75864-77b9-417a-8f4d-67774accf2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8abcf3d-d761-4687-8ae7-04246c56ef77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a59991-009d-4063-b15b-0a0c8fd4978c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b258247a-0f6b-4313-a7a7-05a43149c55e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f194cbc-edf8-4681-834b-9af321df512d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238c2768-cb09-45da-97dd-0479b2c4ad0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d40f9a-7cc3-4f9e-b1cb-d594f850d05a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a8498e-8da6-42a8-8532-7977f5066b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc37f7e0-5ed9-4db4-adc3-6b87b4633914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32423f08-de72-4a0e-834b-fb952d73f419",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5daf91d4-64c8-47af-880a-e8f61fe62300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5078022-9cff-4223-b239-f689f916fd63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5531172-b63b-4e55-add3-133dc4d781c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "63694b1b-f8ab-4e76-88ca-66d319097cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49180962-ff22-49de-9542-97408103898a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e89b86c-3b73-4a26-a803-c518a9ab7d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e3d157b-3316-40f8-ad68-a0ce6678984a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06a3e28-0459-4104-93d1-1abdbf939bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b569d8f-71e8-4434-a59f-061180fd8c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd472d5-96cc-46e7-a9d5-96e138daa795",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc57fe8a-4bd3-4197-b5ab-dd3b620d57d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a426f2a7-ccf2-4508-8fd9-124b3c06236a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ee41c5-7081-473c-b721-b3841e947f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "54304226-9aa1-4c94-bc86-9e2a58f7bd3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e90ffe3-1e23-474c-b321-56ee55446544",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5458ce1b-9df1-472d-b0ed-7066489aab9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56072436-e2ca-467e-9a04-d8598219abda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58ba9e4-9ecc-4fd8-9fd2-d89042f74028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f04b42-0cee-44ba-89c6-d40a4b958e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c72dac-fe21-46c2-84d4-719bcb3fd125",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a9c694-cd28-4ade-91a8-80b1a613f32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a6cd990-a91c-4b1b-8cd7-0b767ed578f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3d78eb-bc3a-47f6-81aa-1fd9cd7c3d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba703354-542e-4ea7-b452-18dff8d1a5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791420f4-7dcd-43e0-8d5e-8a6c55c82a9d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825c0106-cc19-40cc-bfe1-d45015dddaf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b4c3ad-d778-42c2-9052-091d9d71e284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabb0369-77ec-4588-af59-59140e37df9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "109ce142-a5fe-4d1c-842f-f6ffe6c4fca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8accca-f3c0-4403-9f75-d4073f3096b2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bf8fd6-b7d5-46ce-a722-3e02f6457add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8595dbc-21b2-447c-b2c9-77cfc54d110c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc31b2c5-9096-4198-969e-5288760661b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53347c23-62de-4819-b902-59efdf2a2814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a095ba4-4f8e-431f-b2dd-a1b576ed8740",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029d6999-7157-4d6f-8841-618cd8454604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce7e3a7-a4ea-4ea6-802f-0c1dc7ab8edb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "098b3933-8ae5-422b-8570-5fd59e32c1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf1bffab-e838-4aea-8ec1-8767eab38710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7aefaa3-7fc3-4f7f-879b-7f99a316aee5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0e3918-2fa9-4312-b120-2d80c3837f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ccd5242-c0ce-49b0-85fb-0b1664310cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612dad69-5dc1-4ded-bfd6-6a455fea81b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1708b4c-6f9f-41b9-ac1b-a082750de70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05db0ed3-1baf-454d-a79b-c9b795bc5b3a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b1d64e-db5e-4f29-b616-b7c391333e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e175cc-2874-451d-a53e-29a073282a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b161f203-fc68-4353-aef5-a2b2d997a16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f25cbf-3e24-471e-af4d-539bc656d9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66b0ee1-4e51-4cf4-9403-22d99f2f4410",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0376e9-bf59-4f9d-9712-573699e4a0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f07bb80d-872b-4ed5-9fe1-e0189dcacce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba87d076-2437-4366-9fee-0ce5092aef38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d14e685b-a2a4-45f4-8742-899c0de2c6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a218c1-9a02-45a3-a26f-12a13bd03faa",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4000fb-c164-4f86-bd08-90e063449b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa2cb04-2242-48a6-a452-19255f15d047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c10c7b-12bf-458c-96fb-237961a0b282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea44b999-b775-40ec-81be-dd737f3e11b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0727d8-0c79-48ad-8445-b49ba04c90d8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1212750d-6681-4bfa-9a84-2dc4f0a84421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d48c1fa-d696-4250-bd03-2e58a03aa6d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4115f27-8e13-4ae5-a481-e8fcde365bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90d04199-1516-4969-b051-c7f941dc165b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114a0ee9-0f97-4a39-95e6-60018122f7d0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db39512-49a0-46cb-90ea-986041d230f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70518a87-b77e-4431-adc8-2e522f0ef012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f10f885-b785-4785-b8e7-05f9b0705e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a310b47-a382-42e6-89aa-7fbbb233d0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37932710-f1bb-4802-87ad-20f5e10348a4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4776f67a-16e9-4dba-ba41-4c4442c36451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4242431b-e26c-4eff-bbb4-1d19f40227a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5247fd-ba0f-4655-9fc3-6773cc756c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fba4d1b9-083b-4911-949d-419cb544112e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13a08b5-4003-4a9a-af2b-2eb32d16422d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afcdb3c4-1088-4163-ab20-56ce392f6a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50673dd5-6e13-46cb-848a-c6b684f22f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778d51b7-d02d-41cd-af44-e51edd01ad3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88b1ad23-d2e6-431c-8586-7fe13b1d6175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f42124-3f96-4d1c-8e34-731b19f4c07d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6118a3fd-ab6d-4ac1-a34d-f1f32ac6671c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7269fd03-961a-4fbd-91fd-e3bb4394b298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994dc95a-4f03-4481-8a97-6f9dc48bcb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "315e9e51-ee6c-419f-9e59-95433b17ff61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464bccb6-8fe3-44f0-9dfa-5acc093f6b85",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b233263e-0040-494a-87b2-e00be8fb1c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31e2b33-f99e-47a9-a84b-8fc25441de50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11b8d45-ad64-401c-ae8d-74ad33565f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53d69ed1-9e56-42f7-b7bf-4cf32d13e894"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "33cafe98-9562-40b8-8e71-012caf58256c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7eaf486-55df-4c12-9e6c-60f1b20edf34",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b51b2d-1186-465b-97ea-ba824169eb47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59e4286-b75d-42f0-94a6-1dfe08b31819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8399b5-e09b-4815-a3c9-9b57c486abca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "387712d8-90a6-4091-b2f6-f10ce3724e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a32a6b-4cf3-428f-a526-c59a10597d9b",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d815b405-b59c-470e-91de-3f8de1c96cd7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "da713d53-3395-4d1c-acb9-7a69296b1834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1d5151-4ea6-440b-b231-7d97fb6b6912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce3559a1-2475-4aa1-9044-eb299705fcb9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51ce929b-de3b-4ffe-b1a6-9ab0f0437fb8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "758d9639-4598-44fc-b93e-f20d6ac38e62"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcdc6e08-cf24-483e-b95a-08690b6877de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f733277-b6b4-4785-97db-452f2fbb835e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b5f13ba-6889-4691-b2f0-0a4695d9e597",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ed22244d-aa3d-4054-83db-86bb434b941b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc25717c-d8b9-43ad-8ca3-14f78bac3925",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "299c0b8f-cb35-4921-bf05-7929d36d50ff"
            }
          }
        ]
      },
      {
        "id": "439238fc-731b-46da-b3ef-57654e7cdfe3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "053cd371-2db6-4d9d-a2ff-f29b74eba7df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a883a0df-b250-4ac5-928c-220846b03b55",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "018ec38c-a252-4e7e-8784-e54427ac97bf",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdba9b73-735b-48fe-a527-0da462a12474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565e9498-e9a6-4339-a34a-13c86ee6f427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbb8a8b-f015-4216-81b4-72a738a5d3a8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4eebb5-92c3-4dc9-b903-2d1d91204434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9481759-97b6-4e19-9f05-e3d2cc0f6e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1002db1-e112-4eb4-99df-6258f6915f78",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "234a1a59-2804-4738-b902-e9b9051cf0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a97be007-bd05-4e18-bbdc-a467181919c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a863335-384c-492d-92eb-58c30a00fb56",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5893262f-8afc-4af0-b130-d26829604d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e2176d-bf1c-47a2-b40a-e2064087bd99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "543ccb28-1001-447c-9092-d42999e98d57",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626adcc7-422f-4a27-8e82-878bfccf74aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737ebb55-4965-4bdf-86e8-dee17836dd12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0358de28-2528-4a29-940a-52d7916444f4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667a85d6-8d2a-4dc1-8239-319d8cea151b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a7c2867-7390-49b9-b6c2-f30c24388fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20b6445-73af-4a6b-be36-770be5f6f81e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aebbc7d-5085-4ef1-8d15-4415100a9e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3abf06f1-6207-4967-bb4c-209545e2de5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be85dd6-1eba-4813-a444-c2c441dea9fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b3943ed-61ed-42b5-877f-32b71e7a5869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae818bf-8922-4a16-932e-44f7c972a8ec",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d326af9-5135-4a28-bd54-289d6fef0845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a455ce98-6eee-4faa-8dde-05edae468c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5322dfe-658a-4617-9daa-8feb683e46ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11885b7f-8f82-4252-b3ea-27673e2d4518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe6b3a7-d441-4a64-89a2-84b13db008d3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e076c6-0b1c-4474-a18b-4ae85b86305b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e78d666e-a8c5-45f1-9b74-70ae3429d61e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8be289-3837-438b-a2ac-5e79a6957f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d29bb6-8ca1-452e-8593-66239256b355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc953ba-59d2-4d0c-a534-0c1d57ee2908",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b979060b-9887-49f0-ba34-79d30d2e35db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6bda7f4-ce7b-4e2a-a946-76c42ec70c91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d84992-15a3-4051-80af-1f83850d7178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dfaa4db-b54e-4665-b4f4-e63888f79c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1beb99-83d9-4827-9970-1716c7a289ff",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc622089-2fe4-4bde-9127-a2594258d688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c61fb0f-2274-4269-902f-462b9cc5e71e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21de8d09-b8b0-4a6f-8229-5ae9dfe39ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9dd85f6-536b-4a88-916a-484d507930c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b953429b-e8a9-4b39-9f51-03a492feda13",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5338c224-0999-45bb-911c-17ddf198a9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02600dde-4422-4388-bf8a-f936a6362bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff6d47f-cb55-4126-a77d-82b15d486d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e55c115b-4d49-4c21-b76e-5ccca936cde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deed95d1-0f4a-4d3b-a4c9-cde0d1f23f1d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa9b498-3fa8-4e5e-bf88-576117a9587b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d5365a9-42ba-448c-93e5-f335db5f9ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "569e53c2-4a9a-47ec-8386-25b933fa1f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0098aa38-31e1-405d-a47d-566136d486d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09929455-1db2-460e-aef2-7e8862fef0a7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dff8a84-0cab-4801-a883-0614b2d82bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ca5f9d5-8a25-4a09-95ef-f890db921110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "697d7024-0306-49f9-aa97-4b3079cb579d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0eb676-b5c7-4f79-9756-369dfdcf0808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bc952a-4415-48fb-897c-0f2d54c3ce78",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "958e4a78-636f-4d1d-b0d8-d4740e081f50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6619be0-4b7e-439c-b753-4112303aee5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f06da6-9843-491c-a7dd-424aa570366f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37607af9-138d-42c3-9bbf-1d806c645ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72275d5c-bb57-4216-afdf-aae976bcb8f5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9de4b3-ca12-412c-8577-5a70359130f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25f8a6d1-3129-4200-97ef-9f3d87251f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15db568a-7fea-4854-93cc-f436d0d09628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "087d39dd-8062-479a-9e69-0852b47ee856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4331398d-4f93-454d-99d1-1d806ced435c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbaf9feb-9fd9-44e7-b772-c78638eb4948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94562fbe-fedd-46aa-8b43-a2778c665c0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94821ea7-101d-4b50-931f-fadadd28a350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9aecbe-daea-4f07-9288-5c13c1c8c135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e0fe17-4cf1-4b1e-90cc-1384ce2f4039",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2104eb-97a1-4bc3-a33d-80d8fcf56c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45bd65bb-15e8-46a6-9a4b-87348ffc1eb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4ec3c9-576c-4c41-9586-7e7ef28c4130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4eb39d-8f31-4764-a212-a94dbcf8b2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0a673e-daaf-452b-ae98-f886a76bf037",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060fc658-644a-463c-80af-83a1a9f155a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bedbe0d6-dc43-4da3-8503-6e5a710928a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd80782-bfac-411f-bdef-710dbd156579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62f350a-cf26-426e-ad01-164f073ff8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1469908a-a5f4-48dc-a8f1-dda9be3a0982",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4332112-6674-434b-b1a8-c77f6e1009c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977e6c7b-1994-434f-b412-98200de550da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be2f941-23eb-43bd-9132-33af323afd2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec6e117-50ce-4852-9f8a-1cba8931d112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ea9e99-3f55-4169-8c7f-f8e81e20039d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9475837d-d7fc-429f-ab05-634aad33b484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b313c02-19e2-4b99-a66d-fd12b2f3a9de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e43f43c-b363-4d04-8b97-1ae6c1861c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd74956a-46fd-4343-8911-a5f64451c6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6bf154-6bd8-4a3f-b2eb-3859190d2152",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f8cbe1-8e4f-4eda-a80b-71e0b9014895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9672bac7-d651-4360-a2e6-fa2d9a6630f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfda8bc-9c3e-4e60-98fb-81e7f85f403d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5287c160-ab2a-4369-bc05-d3423e270c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a397a28-3de1-4234-b096-8457ef2056d6",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc6bb2e-b501-4bae-a28e-86936f0f340f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406f1214-99a3-4ee6-a41b-9b56cf9a87d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0e9b31-107a-496e-90eb-a15896883bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13531b1c-ea83-4dad-a09d-f493179a2cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54fc277c-3347-4d09-9b44-5555a291e5ee",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33623b2-92b4-4f25-b465-0b65c59da881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b99c53-3ada-4f19-91a0-a2806d99d938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e2e7ea-a0c1-46d1-92b0-1788cdb0748b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31214d09-2d99-40e2-9b3b-318d60efc263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93982d85-9f49-4cca-98b6-fe2902e51a5b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6d2780-b3d0-43f9-812a-ad78d3aa9b5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e99f95e5-1a86-4efd-9330-efb9a1458624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc892beb-7ec5-4a58-a449-b5770e9e0631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb07d4bc-7da4-4f83-8a93-9d1a60b67a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952136cc-8f01-431d-820e-92657c735c34",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf96f552-d262-44e0-ae1a-5bdf684ea5d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64cc125e-44e7-43df-b24a-2e638c6546cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cd79e4-6b3d-449a-9069-9400ae463310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea13604-424d-40ef-a6b4-ca17ae345cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e98c27c-5428-4c12-b7c4-ef1527c3bb4a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc028cb-cee9-458b-ac8c-11dcb02d21e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9be27a83-e0a8-4f17-872b-d5c4bac3cb3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3825d472-7e39-43db-b56c-335082cb9d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35adee9c-9e83-4afa-a465-b4ce7e7ea3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed89e6bb-c578-4a68-bf75-5901d0b716cd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54919a40-1582-4d14-8eba-a505a7867a57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7469fae8-0c52-412b-aff5-8fb48eb68ccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aedbff0-cd53-442e-aa84-d82dab410e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f5fb4a-a989-4a5a-9c86-f44fc476c365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d133c96-f080-46a6-bd37-4db218bff2c4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6a3da0-b1d2-4680-91e6-1dd28a73b7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e740d6f4-9834-4fde-8bb3-b1aba5303255"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1154675f-e6d5-4781-8a0f-515a1311128f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56e5dc71-4f86-45c1-aff4-0c7b4d57e795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904c3760-d1d3-4de9-9df2-c009b26bbeb7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a3c5a3-ac21-4e44-9eb4-4640d05a5151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e70e3968-7e64-48d8-94c2-e9d8d6d8cdeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ec4f89-4c8b-4265-9e17-e0bb9ff55d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958f2761-d62e-4ac1-9a71-8c057922fb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fb6303-bd49-4602-a6d2-f0dd8ebcbecd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf94c3e-7d8a-417e-9e7e-4f0309a706d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60a93b55-0f75-47b9-8adc-03e2bb201148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2578fdc1-d65a-4005-86fd-7f31cd1bafc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee96dc9d-77c4-4c43-85b4-64ebed885049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c872b48e-5e17-45ab-bd12-e02b27d3177e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ead02c-f0e1-4736-b04b-02d6020ca0ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aea93ae8-dce1-4603-ac12-9f3602c3033c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5e84c3-1e63-462c-a853-f4d3769080ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7b5466-4d0f-4418-b8d3-cc39da6e28fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8464b91e-2449-4b88-9e5c-b16f24c759c1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7e5ed6-2b67-487d-95cf-5f13903502aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ad9627-093e-4186-a47b-f35ab471c98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c9401a-aea9-408d-8b50-a5eb3961a5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1b7a96a-568e-431f-887a-6d9cbdc90520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1856d6e-c2c0-4358-839b-520d2869722f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77669c4b-d1e9-4c1f-afa7-5354797d721f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2956d9a3-cfd7-4561-b2fc-a9f6aa458a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f5dd1b-3d9b-40ca-a5a6-6b4855681b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd69e75-7401-40bc-953a-6ff10f65dc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2562d5d0-163a-4999-90a1-1c040c63aac8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ed37d9-9f3e-4d20-bc00-9ac556713a04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ada8ba1b-f40e-420d-ac17-c4a8de3027ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "befffe5e-b782-4822-83ef-6fcebe3b1b98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb47a2de-3361-49b3-b0ff-08d9e41a3500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32588074-25ab-46d6-ba1b-c8d7624da7fd",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df147c90-73c8-40de-858e-ae6d98902731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55bc19c3-5447-4418-a9fc-893fb9aa507b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3931f622-f0cf-4f13-88a5-a064ac0ee6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d1f79a2-7e21-4994-944f-a2ccc2f909c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194d2431-da22-4de9-bee3-9794eae0d9a2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15f92f4-1b9b-48f5-9f6b-4e4f6f0d0f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64428043-fa40-455d-8bf0-52dc825a77d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81cb1bb-1927-4932-8d03-a2abf4b40997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662a18a8-2966-48e9-8c89-f0369b9abbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea77284-fade-4adc-bae3-f88c2a59ba17",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ddbe43-d0fd-4008-904e-e59cc0acf444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7966153e-fb0a-49ed-905c-fd1d2ac61848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ba1b6c-cbc0-4d1d-968b-6987002cdbdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca290aee-948e-49a6-8c71-9c02ab2b7aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "283743c7-b9fd-4b61-b464-5fa08f2d10ff",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551674c4-e919-4d39-879e-720b89cd1b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d335a62c-bb04-4bcb-ae86-9afa67dc191b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6f5f3f-2e12-4c83-a31e-5c7d92dc75f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89fb8389-6945-44df-b74f-97047cf445df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f79f6fc-61fb-47c9-a879-cdfcb1bcf5ef",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af454638-2c3e-40a4-b418-029ebf714bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd951bae-6fc4-4c3c-85a8-f7615d5271ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45eac8c-9f43-45c3-9f56-2193682bc7bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da274dc-0121-4347-b87c-63775be34556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f93c90e-aeb0-4ddf-9d38-a37e190f859d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8109c2-81a1-4b7b-a8a9-834617d432a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c07b71-79a7-4ef2-b844-43455de4ec10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b86670-494d-4c5f-92a0-906f0286273d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d24f950-2409-4372-8677-36e2e22805ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e719ae58-0662-4dbc-bb01-63b18ba9ff4f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71bf89e-68dc-4383-a523-ba424d39fae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ecd8839-35d1-4f8f-9c27-17a12da158e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f209bfd-92d3-4690-8019-76451bafc54c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528d8c76-637a-4d2e-ad4d-3590d234d609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fa4d89-ad6d-4f32-b617-5d1f13d40f2e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d1d3fb-44df-4a7b-894a-7fefbe813b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ab9bf2-9d5a-4bd5-8cd9-b2dda4f75c44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "879249ea-7f96-49b0-a1bd-fc7669dbb6b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5081a7f8-8189-4234-9e50-94cd34197bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba0650c-6410-4a86-a37a-63d214cf386c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805f5ae2-3beb-4b8d-8cea-11d39933b0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c11067f-c02c-4ed0-bcc9-ee9494f6b647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f450038-783e-4bee-add7-0da6ef3f3447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d509f68a-3051-4e6e-a0f3-a9409228c038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a415a4-e94c-4a07-bcbf-a4d784c56622",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1307cefb-cdfa-4620-91bc-76039f86eccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7db569f-9f04-4a6f-b3cf-da5e4a22e10d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77548da0-36ac-4146-afd9-951cc97ad19c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236ba9f0-b7f0-40c9-8fa8-d1a23d9fe1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3dc9108-957b-46d0-bd27-c46d56005f10",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30112081-1552-48d4-a2d1-849589ac52eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a87e4f-9f2d-4cb1-b138-72a8835fea1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "904b9f0a-84fb-40de-9510-a2163b80ef0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "907e51f6-6d4e-4423-8f97-0bc55fd0c4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a776e1f-464f-4e32-b0c3-3fa3b2184f75",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6762e1-a716-45e0-ae27-d54b3f24cc4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8161166f-825a-4835-833d-4afb3cd98158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82073e02-fbc3-4861-bdb8-afcc62003216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70380bb5-9725-449a-8cb4-78e2f49ff55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ed0ca0-4ac8-4625-8e80-f9babc87d709",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2461a6-1cc4-4dd5-92fc-180dc9dd128f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2092b3-5bb8-4138-a072-d8bad93f4721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "155cc6db-4dbe-415a-b96e-99f85076c2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ccbfbf2-ea1c-46e0-82b9-f37ed19092d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acea991-993b-4889-8cdc-d4c60f7a509e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1065bad-0e9c-4f0f-a07d-1fd04a678081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b91240-e3bd-421c-9bb3-e413c81a49a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "011d7fb9-c43d-4e33-a088-c578bd8cf9db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d09ffce-2b7b-4d4b-953e-0e25ac4deac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4850bfdb-51d7-4460-8531-018342b84ae9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b05b60c-e8fe-433b-92a1-ed855aae89d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571fb841-4482-4f96-9113-dc899114314f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8bbcdc-7ed5-42ce-837f-dfd12643098a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddeffd8-3a54-444b-98ce-860dcb8beb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9823514b-9baa-4b1c-92cd-d90cc004070f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d436f930-4401-4e7a-8da3-7f2024aad67e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3bc9b0-d638-499b-8e86-084f92b5b62e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed12215-bb57-4ecc-a947-0477895719e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c8402db-e31c-49b7-8545-66cfeb565c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284b0207-ac65-4b3d-9c41-d0c1c6cf588c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f476823-aacd-42f7-9d69-2abcfac57a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba3b8d7-42f7-44c7-85b6-1d9b468fbe62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b225c37d-b636-49e8-b90b-06ffe40133dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315d64f2-5136-46e9-beb6-96601a38f70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebe426a-1014-48cc-a328-1055ec8e20df",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4271ff55-6578-4f0a-a223-f6966233dbb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d7d04f-41af-4ed9-b36e-f83ff6db294a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a2cd05-1b8f-4935-8df9-b105d7b3f055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f793cd5-3ebe-492a-b94c-8a4843096af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe7653a-d40d-48c5-9f1c-31e2bea606b5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a52e31-699b-40c7-ac93-e6cd792e05b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa57a3b-245e-4356-a96f-fef20d6e03ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "740704b1-afbf-48d1-8095-36e8934caf65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9498d751-6fc3-48f6-92b6-0be493bad847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41ab8b2-e426-4b4b-90d6-1f954ceea797",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119339bc-e4ea-498f-bba7-2de9f55858cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d5a2a8-250f-45b7-b8be-3a69a311a589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "820e6a7e-aaf9-4cf7-9740-200c7a79424c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b04eca2-d386-49f7-83a1-9e0482c97249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51f7d82-b9c0-4b3e-b096-93d8ffc22301",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288d95aa-48d6-428b-a71b-d8b6ee250a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd084a31-d707-454a-bdd7-147bc5f95241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "427d57df-8f40-46f9-9c40-f1b307dbba03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f08f37b-5535-47ea-b073-7d028a50b098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b1d1dab-84dd-4d20-847e-37be85ff12cb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6110f24e-2782-4e8c-9112-77222fc36969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da5a9f7-9817-47f2-85ea-1aa51b6e90c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8d22fc-0cff-43b8-beac-12112d3201cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ca7143-6790-46a4-8eb6-028cee8077a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c70997-19be-44a4-8a69-ef66b189c24d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006535b9-73ff-45a1-8868-8b9e014b7b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3e1eb1-6fb1-4b70-9a7c-b7668403a3a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc98caaa-996a-403a-b78d-3295b8803527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c6b365a-c70c-4f2f-91ee-1232d8876788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51899d43-da06-4292-ab5c-37344e607c2e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5513299-e99d-4ec6-a2c7-f4796592771d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5f3ba8-ca7e-4f9c-ab09-8ec76f4f9d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6e8376-6849-48af-8aa7-12044c9ac37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24507266-4693-4098-be65-3f46f069c7fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226bd54d-d438-4cf8-a80e-cb18356b054a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10d542d-09ae-4077-8682-f4804c792570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b9d05f-75dc-48e5-b635-80b50a822e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e58cc9-ac15-4f6a-ad4d-c381e43eb657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "787eee41-21c9-43f3-a105-bcb04c74cd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d902d20-820f-4bde-8629-89b77fe36715",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c455963-ccf2-46f7-bc5d-cabfeca79f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6cddf38-87ac-41ff-9d7a-f37a58b5e8db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a73b68-37b3-4173-8cb7-9ce175327abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f59a35b-f2b1-44a8-8c2a-65e1afd5c398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211f111c-a576-4e3b-aea0-cd8149603ef5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93752a2-73dc-48c2-b61b-3c0034da959e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa7ad70-9fa0-49b6-80c7-30d0ebe63c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91607723-ca0b-4dd5-9757-c763b9cf41a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "942b3949-59b0-4eb2-a446-e23751d913f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b4ddce-f959-4299-9776-519dfc9a8005",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242851cb-b01e-4bb4-89e8-cc7d4a467185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754afb73-fcbc-43b4-8877-d96fd7a8c4d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15df44e-24eb-4b52-97d2-102db7c614cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64908a88-f9d6-4f11-b429-991a45e06278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14310cf-cad0-46af-ad01-d4d5a7bda505",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ffa759-e5ef-4ff4-bf16-5a10d26a1965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c2fd7e-874c-443e-80fd-64f6bc730fdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "007160f5-2ace-4e51-9d6f-c73aaa73af36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abad451f-59b5-4343-b246-ebd2731b07ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b911247c-3c2f-4a38-b62a-0419c7453ee2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a576446-a38e-465e-ad53-fbc505db1fc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53cf7b54-b884-4c54-91f8-af211ebf79b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ba46aa-2f6b-4ec4-abbb-9767e20358d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761d8fbe-07b9-4030-ae6e-3a01847b5bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0762cc7c-95b9-43ab-a33e-ed219fb985e2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680308d3-a74e-4320-9d5e-45edd051cf1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "698073af-da78-468b-91b2-1afa3202d935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcaf7867-e937-43a8-bd4e-c3f67087ab77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb6f75a-c0b7-471d-a729-c41c04e7396e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a25d69-cb9b-46a2-8c40-234d0e5a3632",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14cc9a45-e164-41fc-93e2-cf60ed78f75f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cdba3a2-6fd9-4138-95a9-a3d6b4b15f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0b26e6-1ec6-432d-9754-74ce1ca15b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "524726fc-f662-49d1-aaf9-c73601a10555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2eb552-0130-430f-b2e1-3aa207b76827",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be44400-66f5-41d8-9524-f4f28d2e7bff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "015a4a70-eba5-4f18-bf1e-0ce3765f2f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631654c0-55c2-4ae3-ac81-822be90b1ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e0c531-27b0-4c00-8af6-34f7cc8167d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1354a8af-bfd6-48b3-a0aa-83bd29b93953",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f158c1b-b693-4c8f-82b6-7ca48943bdac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af41e3fd-c813-457c-8678-a795593f22d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42cae812-49f5-4c42-b2ac-6ed5813290fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9d6961-23da-432c-a5ca-237e5a41cbd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274798da-f281-463f-828c-f0d7fa506c87",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b61a411-2c00-415c-915c-573549d008f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d893ba3-3a17-44bb-a84e-b0d7bb59e6e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5b4123-8a52-43ca-860a-4751037938b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d54edba5-cd69-4c7c-a80c-f2ec08fc300f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c556923-f5ad-45cd-83ad-19b7ce95f9b1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d4f83c-6f60-48eb-aa8b-ca3401d47aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7390c303-fe54-4046-921f-a3d505af80c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c94375d-37d6-43ad-a7b2-2ce4b1c74409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af596ed6-e0d0-450b-a27e-dad74263ec07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc0e987-12fc-45f1-91af-e292d5b9c328",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c77f16-6354-40e7-a436-5a285becec2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a99585e-915c-4901-9489-69ec4da4c279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c35f81c-4945-4699-a942-848b99414921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6cdf6d2-3c3f-4aa9-ae3c-5f9bf990e918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762b0ef1-4e9f-4e0d-be0c-7864353c32f3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e70b24-846f-4ad4-9e31-92593407a60e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9361ae9-5564-4d55-93e9-1d796b5884ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc08dd89-e87c-45a7-8112-e3d27266202d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1824a1a-4e39-4f8a-be39-560d3eca49b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202c27d1-c857-4fc4-bb36-c0aded09a2ac",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f8f7e2-005e-4288-aff7-41f3c79d064f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d51b445-3de0-4f7d-b7c2-e12646adcbf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043a8f77-60f4-48f9-894a-130b73f87d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4de19b2-7845-492f-961e-fab682f48c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7b6e4a-cc99-4740-98be-898535e1502b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97e6893-fd8f-4b11-8ceb-8e8e3cb650db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "395b5c22-db29-4be1-b303-00409bb87bb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e104973-c813-460d-90d9-c2137f385f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4abb7def-5f18-49a2-8522-cfc14cb002cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1373eb90-f700-421d-8186-a3cf800ee645",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977daaff-bcf9-4806-b5f3-3ba302450cf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d126f03-df25-4e55-b9cc-617ff4841e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55d456c-5ccf-41ff-b7f4-b1715f41b5ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7bee9e3-93a4-42d1-a50a-2a91b2a8d59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c5fda4-56c1-4f86-bc7b-4deb94824c43",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b042626-e6bb-4d68-9841-dc87f2df89bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b176dd61-ecef-4393-82e4-528b4a4eba63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "844813f5-1c13-4191-b9fe-2ead264d8059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d3c9a1-c181-4b7c-adef-4225e38da89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227b0a2c-e558-457b-ad4a-e8d83a2e4cb1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7aed8b-20bd-4b23-b985-ad1a4da93a8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2e60778-e270-4f43-bf95-657360696cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522d5666-e031-4473-891d-72817ffcee1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517503c7-7ec8-446d-bfbc-03e84ff72dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41505787-c17d-4744-915b-31af6707d1d5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e8dd75-d144-433a-bf86-b53a6da62f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16117f16-c926-4d82-9778-2603548ba7d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8c3e05-198e-4728-bd4b-76d893a44b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14552d1b-115f-41d0-acaf-7dfbb50430a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70802d16-db25-4e9a-9423-7bffd7d24e91",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d50230d-1238-4046-bd27-acb13c0774ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86571255-b905-44e6-9550-f7ecf5976a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "648d000e-8fcc-4980-a68c-39d97c806864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1df5f40-8f9e-40b1-8acc-4be352dc691a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59330be2-0f7f-4307-a862-d5c044be97ec",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad00807-1493-45a6-a9f1-f2ab2b071ceb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d9281f7-af00-4259-bc33-a4eb544f3acd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab45b62e-86ab-4c70-91b8-c67c7d23ba40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486f9a66-d29c-4117-ab7b-266964a1deeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419412d6-3279-46ae-8360-2eacc012db30",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20d60f4-f20d-4e80-99f4-9a75d7181e4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92ad13d7-bd58-4c71-b3e2-82632e5d9441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee5646e-7c4e-4740-bcc8-99b639ae0187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31df8c9e-090a-4d38-898e-383a724f06c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32f1392-f885-4638-a973-16e247296ac5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421972b1-ece2-495f-87ed-022c7adff1e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3fd080a-d9b2-4b31-abf4-53c6180d65d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "117a5257-c388-4b79-8dfc-54e2be9ca62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8187e554-5df4-4c11-bba4-219df7cf322d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d91ebf-1933-43e7-942c-f066ea151b62",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3c50bf-b1e0-4cc1-999f-73c9c601a1aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76b58aac-c16e-45e9-b836-ad3c1d8fe3b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4b2409-02a9-477d-b828-3445302aea09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f48f23-9882-4a1f-a42c-4cc6369da864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8390867-c304-41ed-8914-ba90a30d77b2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6324eb-1772-426c-92d9-96a905e066dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56dc5343-8146-4a26-ad6e-640323388f3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e377c3ff-3723-488e-9791-24b5a8e741e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca0d3c7-1c33-4805-af89-e81a3010c377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ecb97b-85e7-4082-a7a6-c43a3a2f3337",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675341f4-a014-4e3a-b2dc-50e1e104ecbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f40918bd-06a5-4f96-bab9-401a0370af47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6261913e-63d1-423a-9362-f5d4d62f951f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3172baaa-80fc-4ef7-9d8a-53d4e50e68a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4902d773-034e-4dcc-9b08-45ed22bc69d7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ed1a70-6e5d-4ba4-b4df-08ad1417b874",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41d8ef71-42c9-4a6e-83d9-247bf0a6cb9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b0b860-a72a-48c7-8618-2bfa0b4ccbbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a2cead-a344-4a99-bc37-50fb2959842d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe81dd4-83b2-46a6-bf04-e01c2536185c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7938e84-d3db-4b3b-b9e4-a7ff27e913d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "538a55de-b4b5-439d-bf94-63ff2dbd52fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "390c088d-eb37-4243-ad9f-e8729a26e07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11a93c66-5fc9-4d54-ac9a-e9cd1d06e29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74774c48-d34e-4ea4-9680-fc1dc554f8da",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99dee8ef-983a-4da4-9364-ccba46c7e5b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "812f10c9-f716-43ff-9018-ae941289a0b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818fabf0-4fb1-408d-8626-84beea6396bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d5cf99-7daa-4c18-b5c3-7e5a79db2362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471b7a1e-2a51-46e9-8fd1-9d001b525806",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f2c6d9-5799-4549-9bef-2a7fdcdd1c1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "149ac676-10f6-4bdd-a2e3-de457acf1a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1d93ec-24ba-450c-b95b-b5b89b146dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df8a8c6-6548-48fc-a3d0-187f0b199d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8385fda-a04f-4702-bb96-bcf3299f32e6",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c23784-05cf-4869-9ec3-ec38cab1be15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98a79b28-4f13-4f3f-bede-d32519e616f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f72ec6-9098-435d-b730-be7256170642",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c09119-2b63-4acb-86a3-e89d60b3b376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0ad0b7-0b64-4932-a572-2357d3b15736",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7124c5bc-b79c-4659-a05f-ef8c2136af72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fe783e4-7616-463f-8f3c-88197034a28b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfe8326-f522-4875-8cdb-d1c643fb1a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9368f6f-6128-49da-8143-650afe4ddbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48e9b35-f221-4bc6-ad29-1233b8161f4c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4788c394-db62-4879-a1e4-4ea3f5b1210e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9fb0a60-c185-45fa-8487-c72f73f3b0a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efcbd09-5c90-49c1-a233-f14309d16ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce5f802-f165-41af-99dd-deb673e9fb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a776f56-5ca8-40ae-a6ff-5ee63768f4f8",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1911a367-b472-44bd-a289-9fea7e2b3e36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9685917e-55cc-4b7e-919f-8922de480610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85536933-1f4e-40eb-816a-02a09e0ce740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3e8306-84b4-46aa-8131-b49f8b3d7c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950e5329-2502-45ee-b477-07d781e24c29",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72260e56-f836-42f3-be12-59833834c5cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1cd57ea-6a54-42de-b064-b18009af09db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79167752-a6e3-4d17-bf26-ba84ae272134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04078f0-e105-4217-99a8-02ae8cb32b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82608529-9051-4d19-8056-25e5c1eb5ef4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb72399f-2ab2-4590-8d55-851c1c59e70c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0ac4955-cb7a-48f0-9581-7745c535f63f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c72b18-fca0-4c3e-a87b-64ad0184c693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ffad5c-8b41-4722-8194-76e4ebce4791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8329d3-dcc1-4398-8ec4-3e947eaaac3a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe7e18d-ef54-4432-991a-00ae0c57008d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29bd8a6c-8602-4b7d-bb19-badcda6d803f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d80073-a9ae-4326-9b1e-267a47449c08",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c875ca-50ab-4140-8d81-49da5d286974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac296166-e7cb-4a68-9ca3-647766c34f74",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd32e16-c363-42b6-8dcd-a1f9d9b2d578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd734088-8b8a-4a92-9e4b-acdf0f2ddfc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e234af5-a052-43b1-beab-e961000e7dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f455567-f7ad-499a-9cc3-2579c23c9dae"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5aba3f8d-3fe2-49d6-b554-f1d870d050f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4dbdafb-2413-468e-924d-da1635dcbecc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f52139df-300f-4921-9743-886adafe5a34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf0aa3bd-288f-4cfc-8802-ea25fa79bfe6"
                    }
                  }
                ]
              },
              {
                "id": "4887559b-37ca-4dd9-846a-80ce367781e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82190ea1-bf56-4705-b5e0-8ecab8fabfe3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5263c6b-b3fa-4e12-8284-8b0d8305bca5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "59aab429-2eaf-47e2-9f36-5b5293e2a863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3bbf43-7a68-4975-ab0c-c34da2d7072a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6cb5144a-3a49-4b0a-9805-4c1f48723fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58923420-0d72-47b8-a6ff-e229b518f009",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcbcc2b-a021-41a8-a8c9-d71baca4ebd5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "06bc1828-978c-463b-8553-580f093b2580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7423e7d9-052a-4d80-8861-7a0d4ab07008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed9f6192-1fb2-484f-b449-a046fb844a8c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb4594da-e311-4949-a447-c89646303f02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d8d9982-aa57-4d5c-9088-c188d23a2536"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "50ce270b-ecf2-4147-9608-d0c9fdcb1287",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae5a2e06-dfa4-4701-b984-800c6fa4c53a"
                    }
                  }
                ]
              },
              {
                "id": "c1c64d21-ce8d-4f7b-8bf6-1fc7d7d129a0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b73603fc-b385-4762-80a2-776981b66f5b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d9a769-9c7f-41be-be02-189f4844ac21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "026b395f-2ad1-4ee3-a7d1-89f0318a06b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7bebe02-10b8-4cfb-b939-ee698449c979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63571c6-b95a-4c7a-b631-7ef2ecf25826"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "653bb956-0b68-4dbb-aff6-53a0e806cbf2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7e70fe18-f9c1-4534-9924-1f4bc6d30bae",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9d057e1-c3a5-467a-b138-f09038bbaa8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "76395dec-ba87-4dbb-a2d3-afffd4fa38fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed5fb22e-d4c9-4ab9-a12f-179b0b2aa100",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ba0fb56-b767-4808-af23-7d00cbba0300"
                    }
                  }
                ]
              },
              {
                "id": "aad0c088-d670-4d6c-80e7-d48bfdbae502",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e242911-5dcd-4d67-b731-9cd1aed0160a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ca389af-14d5-485c-a615-115d2ff261e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8bb58a4-b0e4-486a-94d3-1dab49a60f69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac3c535f-b539-4853-a45f-623cc44bb388"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f08ed31e-5f12-4c28-8bf0-a5010579f3bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2599e8d4-92f0-424f-9235-da1fcdf727e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fc26d67-3358-4ce2-842f-5eca5496b7be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3360242-9c86-4b71-93e2-f675483df337"
            }
          }
        ]
      },
      {
        "id": "c5fc440b-0f84-4a7d-be6f-b3dae4b81e9f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "568433ec-c1c7-49ab-b2af-fda9f6e6ed5d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8b0014b-51d8-471c-8756-4d7824606609",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "260f86b4-8414-498d-9a99-acb72a20eec4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0633bf-78b3-42d4-abe4-872975c28eb9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8c3ae8d3-a9d8-4271-ad58-ff68c1db0090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40ed19c-dc6b-430c-9a0b-cf933c5f5cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5d16838-3260-4176-989c-b7975323185d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5599ae10-c886-451c-8f7a-f79ee35c1884",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0504a90e-501a-4dbd-9814-e30cab70af74",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f481e0ad-30ac-4cb1-b099-b553629dd984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297d1c7a-edd9-4c63-a186-9d4967c24155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5efe8c89-fb7a-48d3-b374-af37eaf81d99"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a431c54-af96-4e73-832b-4474d6d82b12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ecaaadf-1339-443d-b9cb-3ef250680567"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1e2c901-f1d2-431b-ad74-49b231399b4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd881586-7fb5-4aec-9966-42c32b1e4b00"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27ee33c0-47bc-41b6-8521-41caf94a70f1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1ec81289-a3ef-42db-b291-a23541e91905"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34599451-bb2d-4e37-9321-88ec99b1d358",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66ac12b5-72a1-45f2-8e14-522c03b5d530"
            }
          }
        ]
      },
      {
        "id": "a1017170-47c5-4591-a723-471bc6a38244",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ae29878d-8031-4bd5-8bd7-e3b889263fda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e50fe9a1-0845-4e86-b216-4c4dcc8ce596",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "294f274a-a828-4ad5-b21f-ec09d2893953",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c16d72-c167-4143-ae4f-595b80036e1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "db9c46ba-095e-46be-8e63-873564bfbae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d819011f-e31d-4c39-891d-a5691754d1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76233d32-4d4a-4719-babe-8f5d9acc5aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d392720-d420-43d9-a590-4de13637e903",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf9a0da-6e17-4c68-ab5b-a1dcc464f446",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ed9b70bd-a518-46dc-b32f-90791471efb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c154c9e8-1d9e-413f-bcf6-405aff50f5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "375423ea-756d-4489-80c1-cf108e89ce68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "815f02be-e1dc-43e8-bdb6-add5b130ef76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8219f73-7904-44bf-8df8-a38060fd0846"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a18924ff-2755-4e63-80ae-e8c26ebc59e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2dcde12a-9373-49bc-ac90-ed80b325cd4f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c28d69de-899c-468a-9649-170f1e19ec05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "243e73d1-6409-4b8c-8fad-bb68bd7ef5d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "648fe7eb-87c1-4623-aef9-a8d80e7de873",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae1ad249-3196-4e04-a8e2-225604655b17"
            }
          }
        ]
      },
      {
        "id": "461ed2f5-2066-4253-aca1-070382311676",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "59f72da8-40f8-4d63-b1b2-50af3a1f65f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f1b67b9f-7a27-4b1e-82ab-6884e321a1ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae556eee-9dfd-4ee4-91e8-c339dd88f79f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e9e7c0-6738-4d60-94d2-2623bf7ae4a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "422e2e29-cba8-4d09-b03c-11427abd08b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee5d303-b3ac-42c9-bf2f-1927a2824600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "048a02a3-e055-41b0-befe-69decf031990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f3f2a5-59cd-4718-aebe-4233ae5cea35",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a903d1e7-3ddd-4df1-8e93-b94bd1a2b512",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b0c4c3d2-fab9-4118-9d9a-6e86740b22d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb35b74-ea5a-4f2f-a310-9d092f023b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d19faad-baf3-4e77-8919-0554e3aced5a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea548159-cad0-4846-a34f-2673f51665ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16d9ada4-3516-4f55-b5cf-15b24d5181c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a48a6aaa-6db3-4834-a6d9-800801c20762",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b02b9f8a-1b25-457c-8e36-1d8057161727"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "586cfd8a-87ee-4638-8c18-b5fb8bf0b562",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6ebc56c5-f7e4-485e-a1c2-94b13c32f2cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f9b229c-ecc4-489c-84c0-1a1c7e1e8b7d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24eadb0f-8af6-44a3-91de-9e14875affa6"
            }
          }
        ]
      },
      {
        "id": "c75710b9-7a6d-4f56-9477-29edb965c695",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dbbef692-a8ce-4c1d-a8a9-5609bca9c8cf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a55e18c-54d8-4be6-8408-9bae776aac8a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b2c56c47-ff4e-4eff-be76-0cdb6800a9d4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffd530fe-27d0-40b2-abc4-432904bb261e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20daa73d-4783-4530-aeda-94e2dedcc584",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 60.93586707266199,
      "responseMin": 21,
      "responseMax": 435,
      "responseSd": 40.13032680567412,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674693531221,
      "completed": 1674693557358
    },
    "executions": [
      {
        "id": "39b46985-cef9-4305-a83f-5152cf1d4701",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fea63ec6-c08b-40f5-bdfd-2203e875ff91",
          "httpRequestId": "9cedddba-7465-423e-871d-447e6d426dd2"
        },
        "item": {
          "id": "39b46985-cef9-4305-a83f-5152cf1d4701",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bd77efb5-9d30-40d2-86b8-c17cd562e434",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 0
        }
      },
      {
        "id": "49eab1b4-98fe-4727-8702-9d83266a813d",
        "cursor": {
          "ref": "d00a76b5-f12b-466c-8078-93a06e14af9b",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9359a3db-b7b5-4c46-a4b4-cd5cc841941e"
        },
        "item": {
          "id": "49eab1b4-98fe-4727-8702-9d83266a813d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bac43684-b335-4d61-831a-b1b096b55051",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "df821745-72b6-4405-9be2-cfd5013055f8",
        "cursor": {
          "ref": "74986d20-c749-4bd3-a7b5-63e27a0cbd83",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ae2477ce-e3d2-4338-b8cc-b329dd84db67"
        },
        "item": {
          "id": "df821745-72b6-4405-9be2-cfd5013055f8",
          "name": "did_json"
        },
        "response": {
          "id": "9b904b4c-4101-4b83-bf10-e1b0eea5f956",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ef714b-1c78-401c-a101-c32cdddf8388",
        "cursor": {
          "ref": "31cf7a6d-fffb-4d0f-a5e1-7f0534b83634",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "72a608c2-badf-403f-a8d7-69c412969e85"
        },
        "item": {
          "id": "12ef714b-1c78-401c-a101-c32cdddf8388",
          "name": "did:invalid"
        },
        "response": {
          "id": "e95ce8b2-4036-43f6-9b1a-60ef39f99d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "12ef714b-1c78-401c-a101-c32cdddf8388",
        "cursor": {
          "ref": "31cf7a6d-fffb-4d0f-a5e1-7f0534b83634",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "72a608c2-badf-403f-a8d7-69c412969e85"
        },
        "item": {
          "id": "12ef714b-1c78-401c-a101-c32cdddf8388",
          "name": "did:invalid"
        },
        "response": {
          "id": "e95ce8b2-4036-43f6-9b1a-60ef39f99d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "25086f2e-1ecd-4156-a1c9-2e4f1281c70e",
        "cursor": {
          "ref": "dc7521ef-b3ca-4260-930a-e24eeb4eb6a9",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7b136768-2c82-46d1-b875-a982b913f6a5"
        },
        "item": {
          "id": "25086f2e-1ecd-4156-a1c9-2e4f1281c70e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6aca1a82-506b-4edb-9a9f-43c6915460b6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bd2f65-8a1e-4fb1-bd9d-e86599f2018b",
        "cursor": {
          "ref": "87625858-002a-4818-90b5-f069c5fcdc7e",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2fe1e676-f277-49b5-b42f-6db7d8e5c0b7"
        },
        "item": {
          "id": "73bd2f65-8a1e-4fb1-bd9d-e86599f2018b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f922b5a5-66c6-460a-9fdc-4ce1dbb1b800",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d925f60-2e9d-4271-bb8e-e395e5a563ee",
        "cursor": {
          "ref": "9621de37-bad1-482f-b3ad-968fb52557d1",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6c8ee908-6c8e-4ce3-a629-fbb06a052c27"
        },
        "item": {
          "id": "3d925f60-2e9d-4271-bb8e-e395e5a563ee",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "89f48caf-8e52-4865-8d9f-4630422e0ac0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc99d26-e866-45e6-811e-c201d49a5606",
        "cursor": {
          "ref": "973ab4a5-51f7-41b3-8843-4e169cb26f82",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "08f08490-cd6b-4b6c-adca-a159bb91d7fc"
        },
        "item": {
          "id": "ddc99d26-e866-45e6-811e-c201d49a5606",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b54740b4-6a2d-4d3a-91e3-1681796169ee",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc99d26-e866-45e6-811e-c201d49a5606",
        "cursor": {
          "ref": "973ab4a5-51f7-41b3-8843-4e169cb26f82",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "08f08490-cd6b-4b6c-adca-a159bb91d7fc"
        },
        "item": {
          "id": "ddc99d26-e866-45e6-811e-c201d49a5606",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b54740b4-6a2d-4d3a-91e3-1681796169ee",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693a3f4a-6f80-4ee0-ba40-0da913120314",
        "cursor": {
          "ref": "54ca8e62-ff30-4239-a7c8-eb0d4dda817d",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e65c9388-ef9a-40f9-aec1-2d5e560e7b1c"
        },
        "item": {
          "id": "693a3f4a-6f80-4ee0-ba40-0da913120314",
          "name": "identifiers"
        },
        "response": {
          "id": "214b9d1a-6be4-43fa-a18a-fd6a36afb24a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "b3a47a46-293a-4054-9372-34dc4acb707d",
        "cursor": {
          "ref": "ab87ba74-9f55-495b-aab1-2f748330ca12",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "06da2f58-42b9-42f8-8f9e-b46e48bbad5d"
        },
        "item": {
          "id": "b3a47a46-293a-4054-9372-34dc4acb707d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a78b9f8e-0ade-4952-8ba0-6d7c92e10e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a47a46-293a-4054-9372-34dc4acb707d",
        "cursor": {
          "ref": "ab87ba74-9f55-495b-aab1-2f748330ca12",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "06da2f58-42b9-42f8-8f9e-b46e48bbad5d"
        },
        "item": {
          "id": "b3a47a46-293a-4054-9372-34dc4acb707d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a78b9f8e-0ade-4952-8ba0-6d7c92e10e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e237b7ae-a59b-4dff-bae8-56a0da037275",
        "cursor": {
          "ref": "f190346c-c08a-49e2-bde6-b17300e380e8",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "99c8d523-944a-4871-8f63-6731afcabc52"
        },
        "item": {
          "id": "e237b7ae-a59b-4dff-bae8-56a0da037275",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f888d4e6-4dd1-48ba-9322-88b4d86abfda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849e8e1e-6a9f-4d59-9c3e-9eadd3534533",
        "cursor": {
          "ref": "5489433b-f665-48f5-98c5-20f08f95482e",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0ad1172b-650b-46e9-96c2-e501889fe765"
        },
        "item": {
          "id": "849e8e1e-6a9f-4d59-9c3e-9eadd3534533",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "abc8291f-8020-4cbe-b698-fe8d14e309fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b30eaf-eab3-4d52-9217-bc0476c79635",
        "cursor": {
          "ref": "e58dd625-917b-474d-8110-89af3b78b096",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "da7192f5-b101-4bdc-9fc7-fc01f3535175"
        },
        "item": {
          "id": "84b30eaf-eab3-4d52-9217-bc0476c79635",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0a1890ac-cc6c-48c4-9992-bbf3d0cfaa92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c222b703-ed6a-4b52-bbda-0d4fbe61980d",
        "cursor": {
          "ref": "564f144a-b7d4-4af9-be12-877c4f410432",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a9203d0e-d857-4a50-abe4-f395847dc73c"
        },
        "item": {
          "id": "c222b703-ed6a-4b52-bbda-0d4fbe61980d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3a4c506f-6f0c-49b5-b6ec-0180f7532a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f416aee1-6543-4ad9-b7a4-8a667f0bb7b3",
        "cursor": {
          "ref": "10b760ab-df56-4446-963b-47c5c15fea31",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "618e1c9a-39fc-43a3-a6ed-f6919d1e4cf4"
        },
        "item": {
          "id": "f416aee1-6543-4ad9-b7a4-8a667f0bb7b3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f47b60c5-ee46-4103-9784-c8c2bebca644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec65be7d-7817-453a-816f-62cb960f8321",
        "cursor": {
          "ref": "bd308199-2cd7-4d56-a392-882b6d1124d6",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1a34644a-370d-4a67-a7ca-a243eaa14a5d"
        },
        "item": {
          "id": "ec65be7d-7817-453a-816f-62cb960f8321",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3afc4351-a134-4551-a460-e795e9eaa5da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2d0f43-ad86-4aa8-a63e-7d9de1821c4d",
        "cursor": {
          "ref": "e1a7b718-64ed-4697-8a12-799d0ccffc7c",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9eb2cab0-904b-4ded-978c-eab30b729843"
        },
        "item": {
          "id": "6c2d0f43-ad86-4aa8-a63e-7d9de1821c4d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7ed4c7a3-3fe4-4c5c-b2ab-3067684bcfbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5c369e-9d1c-44a7-b33a-0bd6ae7078f2",
        "cursor": {
          "ref": "56d8971a-bdd8-40a4-b377-046446f22740",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a9364945-8536-47af-90c6-65a4d50f65d6"
        },
        "item": {
          "id": "5f5c369e-9d1c-44a7-b33a-0bd6ae7078f2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "afb05574-fbc3-4ade-886a-b962da028c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d19206d-b93e-4d48-8d2f-0540a36a0029",
        "cursor": {
          "ref": "45759e03-71e8-41ba-862b-2aa0dcc34bdd",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f8bd89ff-3d4b-48a8-a1bf-d39c97baabf2"
        },
        "item": {
          "id": "9d19206d-b93e-4d48-8d2f-0540a36a0029",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5628c074-0981-4fe1-9dab-b925eb3979ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b79853e-7ef8-4ce1-b203-a70950478578",
        "cursor": {
          "ref": "85131d58-4529-4266-8dd0-2e306e78b4b8",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6c91a9cb-61f9-48f3-b5e7-66c4226f56fc"
        },
        "item": {
          "id": "1b79853e-7ef8-4ce1-b203-a70950478578",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e5d471f2-9363-424d-987a-e275fb2fe323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527bb226-2d80-493e-8eb4-3b66b1554a2b",
        "cursor": {
          "ref": "a10fa4ad-998f-4498-97ea-838feaff79a3",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2d62d32a-0f0c-4b10-a7be-1b143e873730"
        },
        "item": {
          "id": "527bb226-2d80-493e-8eb4-3b66b1554a2b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f1477598-a823-4dd9-8d9f-fb3bd31ba261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d112abd7-5465-41f6-969e-7d3e50372bd1",
        "cursor": {
          "ref": "bfc88296-f639-4477-8503-8dcb13d0b430",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "02e6e935-df95-495c-a2b7-c1455336d7e6"
        },
        "item": {
          "id": "d112abd7-5465-41f6-969e-7d3e50372bd1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2f13cad2-35f7-4bbc-b6b9-c0432644ffc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d0ddab-23ea-4ab0-9900-6f358b3b84bb",
        "cursor": {
          "ref": "9842a3f1-904c-4ba6-9c0b-ea43d18bbd85",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ded62cd4-4da3-4b4f-a5fb-c9087ef02bc6"
        },
        "item": {
          "id": "31d0ddab-23ea-4ab0-9900-6f358b3b84bb",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "0d2ef0de-5a66-4f47-a4fb-84981dd29fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffbf647-1863-4f9a-90fd-baa1d067a703",
        "cursor": {
          "ref": "5b1480b9-3273-41e9-be31-3b80463cd25c",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9a22d477-bb73-44db-8881-361b239f797c"
        },
        "item": {
          "id": "4ffbf647-1863-4f9a-90fd-baa1d067a703",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "361df8b4-7728-4006-a5e0-7f897d27bea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9de66e2-8d84-4e6c-a8c3-9f05c66b4024",
        "cursor": {
          "ref": "90b21292-9a94-4ed5-b297-0cdc82294703",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3ebb5f35-cf90-479f-81f9-94e39254f75f"
        },
        "item": {
          "id": "d9de66e2-8d84-4e6c-a8c3-9f05c66b4024",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c7863a31-7c53-46f6-8c6d-ba3236584c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34663090-2a40-4fac-b208-579920aab6a2",
        "cursor": {
          "ref": "eeefd08e-8359-4386-aeea-2965c217a50d",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d56f2db6-c0d6-4365-9ddf-1dfe2c524ed3"
        },
        "item": {
          "id": "34663090-2a40-4fac-b208-579920aab6a2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1cc40a8a-d5f7-42c1-9781-a93a513aa35c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bca24b-c907-4e12-b416-ad8e096355b5",
        "cursor": {
          "ref": "1aa772f9-f48c-4aa8-912b-1f8cf1bab834",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4517ce8b-443d-4ba1-a998-e70244bacac4"
        },
        "item": {
          "id": "92bca24b-c907-4e12-b416-ad8e096355b5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3a3bf21d-7e1c-4b0f-928e-11cbbbd81b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed89e62-ae72-49b7-a05d-5e087f2b89c4",
        "cursor": {
          "ref": "29d4b3ed-e4d2-4bf4-95d4-3394eba183a3",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c13b152b-7348-4743-adb0-9da09731bc57"
        },
        "item": {
          "id": "aed89e62-ae72-49b7-a05d-5e087f2b89c4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fd07c215-3af0-4686-b55b-7483f9343c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79814307-741e-4849-b54f-96e1b8e25637",
        "cursor": {
          "ref": "d166155b-a93a-4c98-b800-de4ac12c8ef4",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6b80f329-e1cd-4fc1-a507-868e4f854529"
        },
        "item": {
          "id": "79814307-741e-4849-b54f-96e1b8e25637",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "11e46949-e32f-4fd7-9263-0b3b9ad32de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fe86a4-9a5b-4b2f-a2a0-c9ec2d1eba6e",
        "cursor": {
          "ref": "ecf12114-a01b-4516-b01f-e39f45acbd26",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a402cb3a-be1a-413f-bd62-0e48b61b5750"
        },
        "item": {
          "id": "04fe86a4-9a5b-4b2f-a2a0-c9ec2d1eba6e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "96bf4c66-8952-4697-904e-ec2e18515e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7dabb59-c55d-4acc-9c1b-947e197a71f5",
        "cursor": {
          "ref": "58ddd58f-4ace-45d4-ab33-ecf746e089cf",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b2d9930d-367a-44b1-bec7-ac93783e3375"
        },
        "item": {
          "id": "f7dabb59-c55d-4acc-9c1b-947e197a71f5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b1b1e582-3b09-43c8-b29e-9ad7fb43a283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "277e4f79-3c92-43e6-a09d-5c0ade028fb8",
        "cursor": {
          "ref": "2c43e351-0732-442c-bdaf-7f687606480b",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b0b48251-1f73-4a13-95bd-281f80634ef4"
        },
        "item": {
          "id": "277e4f79-3c92-43e6-a09d-5c0ade028fb8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2496cef2-6f3a-428b-9aaa-2805b1a4f538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898318db-8562-4f24-b114-8b129f9a6b59",
        "cursor": {
          "ref": "a6849cba-1b62-4137-9f6b-bb433efefbca",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e12e811a-52db-4dbd-9dd7-abed7841aab7"
        },
        "item": {
          "id": "898318db-8562-4f24-b114-8b129f9a6b59",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0e337eb4-1f11-4aa6-b3ff-5ee6deceee07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42852c5a-e948-4d65-a393-99c0056a50f8",
        "cursor": {
          "ref": "36a8ca77-c3ee-4ebb-8166-a1670d702e21",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "283fd476-50c5-4f45-bbec-be7a2dc31ec4"
        },
        "item": {
          "id": "42852c5a-e948-4d65-a393-99c0056a50f8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "95543a0e-28d8-43b3-a48e-bf91860be2c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e4a1c1-33d2-471c-893c-681e85687a4f",
        "cursor": {
          "ref": "64976ced-821c-4d33-a943-de06da592f04",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "69b56501-c82e-4a7d-b0d4-8f46ab2b7748"
        },
        "item": {
          "id": "43e4a1c1-33d2-471c-893c-681e85687a4f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c86152fe-bb22-4a5d-80ed-1591777925ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4517878f-8ba2-40ed-be53-b63e12c7a306",
        "cursor": {
          "ref": "f79a9da8-e102-45a0-aaa3-36bd88271e85",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "05dcbea2-99b3-432a-80fa-c1449f0f1bea"
        },
        "item": {
          "id": "4517878f-8ba2-40ed-be53-b63e12c7a306",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "91718706-afaf-4d0a-9d70-b8ffaafb2703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa346ea7-f350-4ad2-8e5a-bbd7be533725",
        "cursor": {
          "ref": "b1ba480b-64f9-48a7-bcb0-a6c5ea4a1594",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9b19c620-d347-4ef9-a137-0d7000551235"
        },
        "item": {
          "id": "aa346ea7-f350-4ad2-8e5a-bbd7be533725",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fa431058-5239-46c6-91fd-30d56ef28a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb76c88-75aa-41c8-a11b-cb9a8dfaa2cd",
        "cursor": {
          "ref": "8e44feff-12f7-485a-addb-1ddc3063f28d",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "22b656c5-38f9-4c0e-a5ba-29890369c421"
        },
        "item": {
          "id": "ccb76c88-75aa-41c8-a11b-cb9a8dfaa2cd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c07f08d3-569a-4b7f-99eb-875ff9f42cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeeb8418-6823-4ef8-84e8-4b4dd3c4ec5e",
        "cursor": {
          "ref": "bb9fa4bb-8338-4cd0-93f3-2ecaf5b0b4c1",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "55c0f88e-65eb-496e-b1b4-519010e67ded"
        },
        "item": {
          "id": "aeeb8418-6823-4ef8-84e8-4b4dd3c4ec5e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a60634e0-70aa-4d2e-9605-82a6e9440967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50fed3d6-ef10-4582-a667-a9f68f705772",
        "cursor": {
          "ref": "5f0c8780-f21c-4b05-8a5b-fbd58cf30356",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6c0298eb-6990-4c01-b555-c9f34dfce6fc"
        },
        "item": {
          "id": "50fed3d6-ef10-4582-a667-a9f68f705772",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e2655f89-dff2-43ad-bd7a-61231c7b483f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09eb11d2-020a-4006-9625-b72413ed9490",
        "cursor": {
          "ref": "0a992d08-ad4c-47dd-9992-e404b695e158",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2a545da0-d583-4ef3-81d2-167fcfc2e605"
        },
        "item": {
          "id": "09eb11d2-020a-4006-9625-b72413ed9490",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "47503617-d932-4c11-ac73-0a90a88e2a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e72666-69ae-4317-92c5-7a3efe51d46c",
        "cursor": {
          "ref": "b80a10af-d3f1-4975-aaa5-5881f682cf37",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1c07d21d-cfa7-4d75-ad24-5f2f51439776"
        },
        "item": {
          "id": "90e72666-69ae-4317-92c5-7a3efe51d46c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "765a808f-68a5-4a80-8eeb-4b8dc85bcb9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a25f0d-402d-475c-9dcb-74bf8cebe9fd",
        "cursor": {
          "ref": "2d36c3e6-a47f-44c4-8c7a-e8d8e64eb503",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2f3c2b58-5ebf-423f-8f01-f66098ae1fbb"
        },
        "item": {
          "id": "43a25f0d-402d-475c-9dcb-74bf8cebe9fd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fccf5d3b-da1f-4af4-95d4-d1033ed8e420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf74b396-f7eb-4c69-a9ab-44af128163c3",
        "cursor": {
          "ref": "25780388-c6a4-4368-ad75-94ae49a36532",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "64e500f9-835e-4881-b0d2-8249fb348ef6"
        },
        "item": {
          "id": "bf74b396-f7eb-4c69-a9ab-44af128163c3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c684bb7d-1cdb-40b8-9569-c99da6830b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9a592a-00d7-42a4-b6fe-85b7c625299a",
        "cursor": {
          "ref": "2978c842-a472-4885-87f3-a41dfb82c515",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9cd0c054-c7f6-410d-b053-e31f502b3979"
        },
        "item": {
          "id": "de9a592a-00d7-42a4-b6fe-85b7c625299a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "192850b1-e8a6-4979-b706-b533119ab49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371b6b18-b1cf-4fb8-9c06-43837a32e71b",
        "cursor": {
          "ref": "7fa05868-e136-4b32-b6d6-a1ec40061c9e",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d88c1702-3b44-48ba-a6ec-c99c6eb3bbed"
        },
        "item": {
          "id": "371b6b18-b1cf-4fb8-9c06-43837a32e71b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c62acc21-7c10-409b-bccd-f42d6b2b69d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7892db-d399-4e37-8f3a-7b7b4540bf0c",
        "cursor": {
          "ref": "5e98fd5f-fe53-4496-88a4-795c10b8dd07",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f5d5c7ea-8921-470e-9ff5-7c2876705637"
        },
        "item": {
          "id": "3b7892db-d399-4e37-8f3a-7b7b4540bf0c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "81309669-3dc4-4bca-895d-1ec4ed9c0290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "064679eb-6e0f-40c4-bca5-3ac81c23d936",
        "cursor": {
          "ref": "07da65d3-9620-48bf-94ac-51c6fffa579c",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "75983e6b-384c-4e0f-b921-a74ca9b36e09"
        },
        "item": {
          "id": "064679eb-6e0f-40c4-bca5-3ac81c23d936",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "576e8e65-f6a6-41b9-bdf6-bd14dc6670e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116554ca-790b-4c32-92f0-7b24d4b2abae",
        "cursor": {
          "ref": "bd97e76e-1d1a-468c-9055-a71a1dbb650c",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2cfc1cfa-8c04-44ef-95be-f8722ebb6b83"
        },
        "item": {
          "id": "116554ca-790b-4c32-92f0-7b24d4b2abae",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ea226f7e-dee9-4df0-86a6-6fdd37be16cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8d941f-b85c-41c6-8d85-13b003391bb7",
        "cursor": {
          "ref": "7a678f90-d612-47e7-9846-e1fdde597a9c",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "28168bd7-2c19-4e4c-a6e3-f24c461f8343"
        },
        "item": {
          "id": "da8d941f-b85c-41c6-8d85-13b003391bb7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "406855c1-fbc7-46b2-83e8-5f182506b33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fa77de-35aa-49ca-9588-13def1763437",
        "cursor": {
          "ref": "4d6906de-5dfd-4cae-9f77-00ab15145a24",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b30143d4-394a-4d71-8b49-de4c415ab0ff"
        },
        "item": {
          "id": "f9fa77de-35aa-49ca-9588-13def1763437",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "98c9f717-ebca-4aaa-9970-619e1caa68c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3ca4e3-0926-4f04-878d-d544ed634e16",
        "cursor": {
          "ref": "e7770042-d506-41bb-98ea-fe244fa41ff8",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3d2efb15-e48f-4f7c-8a03-b63f3409e82f"
        },
        "item": {
          "id": "7e3ca4e3-0926-4f04-878d-d544ed634e16",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "38210e84-173f-4553-bd55-31a4c7d4730e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222d8794-5ff8-4e1c-941b-d695755f8653",
        "cursor": {
          "ref": "907e4565-0535-4407-af17-40a9801ecba5",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ea97e712-0622-4c74-be4f-9314b4f64b2f"
        },
        "item": {
          "id": "222d8794-5ff8-4e1c-941b-d695755f8653",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a3c24089-247e-4acf-b05a-645df6826f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a285fe07-883a-4dae-b0a3-936586367a9f",
        "cursor": {
          "ref": "6c575b1f-b5d2-45c0-8c47-3da99327c1c7",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "67070ff5-31c6-44c6-a686-96006c14cb0b"
        },
        "item": {
          "id": "a285fe07-883a-4dae-b0a3-936586367a9f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "615834b5-2140-4819-bc4e-b3860f0e9cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "e3ba189c-43df-413b-b0ea-cb9d18273ab3",
        "cursor": {
          "ref": "c9c9af13-58f5-4e1f-8f1a-4b04c3fc185c",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "92a94532-2a66-49d4-b99d-aeaa268bb7e6"
        },
        "item": {
          "id": "e3ba189c-43df-413b-b0ea-cb9d18273ab3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "db75e0f7-18ba-49d1-a54f-3862ddf80f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d244fab7-d45f-4a0e-a25e-e9e0de1f2f27",
        "cursor": {
          "ref": "aaa9e56d-16d8-4531-a533-d4e2d284cdb3",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d58fafd6-67c9-4ac8-a280-6a58c72a88f7"
        },
        "item": {
          "id": "d244fab7-d45f-4a0e-a25e-e9e0de1f2f27",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2a47d82e-c204-4efa-9fba-743077fa790d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e972f6d3-be81-4257-b24e-30c7b025cff6",
        "cursor": {
          "ref": "59df8aad-6e6c-43f3-b2ad-69d2d189637b",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6869c5e4-d76d-4d4a-8595-e10a83419a02"
        },
        "item": {
          "id": "e972f6d3-be81-4257-b24e-30c7b025cff6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d1ddd4da-b974-4044-aa88-3e62358bbe5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c461edac-2ab7-4a5a-b3af-0bcf574a8ba0",
        "cursor": {
          "ref": "c631b121-89a7-471c-b316-d0cc1e4c62fd",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6ad9edab-b8fd-4d89-8bf6-09c184c821f1"
        },
        "item": {
          "id": "c461edac-2ab7-4a5a-b3af-0bcf574a8ba0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "09c6316a-3633-4af1-b04d-3b43b33c237d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e32fe7b-b87a-441d-b0b9-9782e80092bb",
        "cursor": {
          "ref": "b8b09a14-bea1-4c5b-8ace-8b748b9792b3",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8ebea4bd-0ca5-4fe5-ada6-cd80cb94d36c"
        },
        "item": {
          "id": "8e32fe7b-b87a-441d-b0b9-9782e80092bb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2eb7fe7e-14a0-42ad-997f-4c2d1f8e3779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb8f974-c967-466e-8f0a-7357718bac1c",
        "cursor": {
          "ref": "0764a30a-9bc3-4072-92d9-1422bfbde6e6",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "314b4cb9-513f-4ad5-b100-d17f41df4e4e"
        },
        "item": {
          "id": "4bb8f974-c967-466e-8f0a-7357718bac1c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d78f04d5-0eb2-4acc-80f5-e91bd0354375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c122d9f-aea5-4e3f-b516-529e3d0407b3",
        "cursor": {
          "ref": "f54e7c6e-36b7-4ce0-9b14-83a0a6e56501",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8d539d72-da2c-4fa2-9b76-59d40957601b"
        },
        "item": {
          "id": "5c122d9f-aea5-4e3f-b516-529e3d0407b3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "19d6cdff-41a6-458c-99c9-c4dd6b73988a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6f4c7c-3da8-4e77-aff9-0563b9300165",
        "cursor": {
          "ref": "5db191ae-9222-4859-aead-ef2496163227",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8571a632-915f-4a8d-99cd-e7732a332785"
        },
        "item": {
          "id": "7f6f4c7c-3da8-4e77-aff9-0563b9300165",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a97ff528-e31a-49f0-abfd-417bbcdc1bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b62194a-7fab-4e0f-8bfe-cd38fddf3ad8",
        "cursor": {
          "ref": "a239cd5c-36c7-41aa-a7a8-c0398fe5a83e",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b977973f-559b-4945-9fa3-08cc61ac067c"
        },
        "item": {
          "id": "5b62194a-7fab-4e0f-8bfe-cd38fddf3ad8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "46fcaff9-c42f-41b1-8a45-f2f36eb40d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cf4f56-aaef-42a3-9efb-ceb2d106ff71",
        "cursor": {
          "ref": "60a6702b-cd91-4f63-8f68-80100bc5d919",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e5353d72-43e2-47c8-93c1-a86135f1cc65"
        },
        "item": {
          "id": "21cf4f56-aaef-42a3-9efb-ceb2d106ff71",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "461b8039-5e7a-4100-a75e-3a22183c9489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b99f71-7601-4ad7-ba8b-6e4ddf74b322",
        "cursor": {
          "ref": "5ae07325-feed-41be-8ab6-d9c961118dcd",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d21f5191-cc06-444a-9540-edfb67e4c0ad"
        },
        "item": {
          "id": "96b99f71-7601-4ad7-ba8b-6e4ddf74b322",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "769f1f4f-9313-4ca7-ac14-ed0a663eee30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facfbca7-0e0e-4a92-8750-7ef79c9bec33",
        "cursor": {
          "ref": "a3abb413-06c3-4a0a-aa68-cd1c155fb452",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6fc57f30-3bd3-4c19-8f21-7d1dcfcd9eb7"
        },
        "item": {
          "id": "facfbca7-0e0e-4a92-8750-7ef79c9bec33",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c10dfc1d-c5f7-4219-9e6c-3ce142ea45d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112ffcb8-12b3-4181-9286-783fabe8ee60",
        "cursor": {
          "ref": "6a27a49b-d81d-4b5b-b195-b17819e16c71",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cb723618-18de-4d25-b002-1c9c1336dafe"
        },
        "item": {
          "id": "112ffcb8-12b3-4181-9286-783fabe8ee60",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e2d03485-7bc6-45be-b386-b2be76dde021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81e72fa-8afd-4f7d-9642-025543a50cc0",
        "cursor": {
          "ref": "9b32846c-399d-4de1-b431-602a895ac5f9",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4e0e814d-72f0-44de-b04c-80d795ffbec4"
        },
        "item": {
          "id": "d81e72fa-8afd-4f7d-9642-025543a50cc0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "47dc021b-9b06-48d0-a0ba-09fcb4a665eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2224f61-7c04-4a0d-85a7-bba4520c429c",
        "cursor": {
          "ref": "e443f024-a8c2-4df6-9885-528cc85ae04b",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "899a9dec-97ea-442a-8dce-24db062a8fde"
        },
        "item": {
          "id": "a2224f61-7c04-4a0d-85a7-bba4520c429c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1b26dd83-92a8-40dd-960b-eed0533bf174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080e3a21-4f6e-4f5f-ad69-9ec026fa7578",
        "cursor": {
          "ref": "8baebb8c-9952-4746-a142-e5708a191338",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c80a7703-77c4-4636-99fd-876f525aabb7"
        },
        "item": {
          "id": "080e3a21-4f6e-4f5f-ad69-9ec026fa7578",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "85b8376d-f002-46cc-8f1d-f61c9d1e60ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363aeab3-2906-4ebb-af4a-14610a8a1a76",
        "cursor": {
          "ref": "5f0808c8-147e-4bfc-98d0-6ee566998936",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "89092a6c-c9b0-4df8-a24e-d70518eb9cbe"
        },
        "item": {
          "id": "363aeab3-2906-4ebb-af4a-14610a8a1a76",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3a041db0-77b9-48b8-90ee-dee689acc109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a48ab75-f0e4-4eab-884c-aa5da36666a6",
        "cursor": {
          "ref": "335e5ad1-32a2-4ce3-954d-c4a86e1270d8",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "320b5c50-9219-46af-87e9-ba305a2f3267"
        },
        "item": {
          "id": "0a48ab75-f0e4-4eab-884c-aa5da36666a6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "551a5939-cd1b-4082-a467-903aa54131e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953d8ad5-acac-4155-b28c-21c8b8612d9d",
        "cursor": {
          "ref": "25d102c1-13e0-4a73-8c9a-a26be9db78fa",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bd40fd1d-25a0-4a4c-ba0a-b8fde7c03f05"
        },
        "item": {
          "id": "953d8ad5-acac-4155-b28c-21c8b8612d9d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "77b7960d-db26-48d6-bb11-dd3ac75b744f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44be52e1-2c26-4bb4-b325-cda1b651de4c",
        "cursor": {
          "ref": "e07638ff-c8ba-41f6-9497-25db6c485aae",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f7d326f6-126c-4c80-927f-56900f4b2cce"
        },
        "item": {
          "id": "44be52e1-2c26-4bb4-b325-cda1b651de4c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "793cb730-2a33-441c-9279-337f0bc45696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0a2a77-2a2f-48f1-9188-1917db9d216e",
        "cursor": {
          "ref": "9eba3457-b5da-49d9-868c-7f3c95e56a07",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4e615b05-e365-4d49-8cec-b8232ddf436b"
        },
        "item": {
          "id": "7b0a2a77-2a2f-48f1-9188-1917db9d216e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4639f573-0fc0-4794-adf5-889176bd66eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298acce2-47c7-43ff-bf82-4de9672fbf2e",
        "cursor": {
          "ref": "3f523b33-5002-4934-826e-a56d8842b20f",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7ef11b23-3144-43d1-a0c0-4b81a8172dd4"
        },
        "item": {
          "id": "298acce2-47c7-43ff-bf82-4de9672fbf2e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3d6de867-f8a2-4e13-91a0-fc1fbcc4d4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df74351-dbdc-4743-aee6-002e10608329",
        "cursor": {
          "ref": "35fc9bab-1e19-44e6-98d7-09b3e4547b59",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "09bd6c08-13ba-488e-b6c1-9ae7a6f6a31b"
        },
        "item": {
          "id": "7df74351-dbdc-4743-aee6-002e10608329",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e06abc44-6ca1-4bb4-8f3a-8a360ee0b961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e2c926-deaa-4021-a54d-742af9be6c92",
        "cursor": {
          "ref": "d141065f-d0f3-4089-bec5-5ea07099a371",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d428f75a-15a7-4f3f-a60f-b049b310e3d7"
        },
        "item": {
          "id": "82e2c926-deaa-4021-a54d-742af9be6c92",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "87061ec1-4c09-4249-92fc-915ce63f0d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70895ec3-a21f-4334-847c-921dd1ad64c2",
        "cursor": {
          "ref": "effa582c-7c43-43b7-a5df-2cf8adf9af56",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1a0029fa-30af-4eb5-a931-2d5f481927d9"
        },
        "item": {
          "id": "70895ec3-a21f-4334-847c-921dd1ad64c2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b4c6553e-724b-4bb7-9043-84f28ab11bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edcfef75-45b4-4322-91d2-14b8cd3e24d8",
        "cursor": {
          "ref": "a01a6697-6eff-4c9e-8557-26abdf11bf69",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "617b26e5-ff10-411f-9fa4-e111d2ee9180"
        },
        "item": {
          "id": "edcfef75-45b4-4322-91d2-14b8cd3e24d8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "680cba49-6e68-4b7a-84ed-1a70dfdca9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2058efc8-26bf-4301-b4ff-a794502a1cc8",
        "cursor": {
          "ref": "eb7fdbbe-73af-4976-9e9a-fa4283a26f57",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "01d46ed6-93d4-480c-bb29-5afc5dc581d8"
        },
        "item": {
          "id": "2058efc8-26bf-4301-b4ff-a794502a1cc8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c9e92369-247a-4eb6-8d95-14e36b4b5162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79390d3-e883-41df-8808-f0b238b04563",
        "cursor": {
          "ref": "20426d78-93d1-427f-a73b-3c4b96b3350f",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "99269b61-a820-4f37-996e-2589e6f7c432"
        },
        "item": {
          "id": "d79390d3-e883-41df-8808-f0b238b04563",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9d740e66-24ae-4501-acab-b6402b667bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b178126-277e-4ca4-a92e-f82437f067fc",
        "cursor": {
          "ref": "5cacd531-61e5-48eb-b6e8-410ad6ac0722",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "360f50a7-df41-4e7d-ae47-9b9036e0e513"
        },
        "item": {
          "id": "0b178126-277e-4ca4-a92e-f82437f067fc",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2e51cbcf-7e66-4a04-8fa9-9c194fda8541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8935b4bf-929f-45be-a946-3ec3d8e3a9f7",
        "cursor": {
          "ref": "12cc5970-ad52-4dcb-9a28-cfd5ca781c86",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e6e08212-866f-4a97-84cb-e7ee6bdca66d"
        },
        "item": {
          "id": "8935b4bf-929f-45be-a946-3ec3d8e3a9f7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1ddd0bfb-f0cb-4d50-8a25-6376a002d4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0b7c7c-fc3b-418c-9b7c-86dde92a5c98",
        "cursor": {
          "ref": "cfe822ae-1d9d-4136-8110-2faf01487af8",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4597fea4-f5af-436e-8999-af5fdaeecdf5"
        },
        "item": {
          "id": "aa0b7c7c-fc3b-418c-9b7c-86dde92a5c98",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "33d881ab-be5b-49d2-8482-fa06e381ee5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2b53db-91ee-4e42-8f20-038d8ed9b25a",
        "cursor": {
          "ref": "e962a793-8aec-4b05-873c-1aecf0b59e1d",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f6a0db18-a03a-4f6b-8840-4140057ee4bc"
        },
        "item": {
          "id": "4e2b53db-91ee-4e42-8f20-038d8ed9b25a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1590d5bf-12c4-4dc1-8c23-35f77d090483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50182f88-1275-442a-ba01-e0ed2c83be23",
        "cursor": {
          "ref": "622b4c58-db53-437d-8da4-24ac316e036b",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7489286b-a0d5-4155-94b6-4c4d36d2f368"
        },
        "item": {
          "id": "50182f88-1275-442a-ba01-e0ed2c83be23",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "438d5aa4-4632-4733-824b-67382eb949ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdeb5465-1d30-497b-b6b3-17efd016a174",
        "cursor": {
          "ref": "bd21b0ae-79bc-47f5-97ae-abb3486e551a",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6d10cb61-a60b-4696-be51-64ea4c893b03"
        },
        "item": {
          "id": "cdeb5465-1d30-497b-b6b3-17efd016a174",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "043c9836-98fa-475e-9771-f60fbe8e30c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8980a7-c23d-4401-a205-684887af531d",
        "cursor": {
          "ref": "3181386a-083d-4a23-9cee-6f826fb79163",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "37ef0017-7256-4eac-918f-759d2c10c4ef"
        },
        "item": {
          "id": "9a8980a7-c23d-4401-a205-684887af531d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2183f1cb-d3f3-41cd-98a2-b8c2e5d73f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c445d9a9-a6dd-40f6-98c4-57199fb19fa0",
        "cursor": {
          "ref": "3a9e3374-d2e1-4e3a-84af-8cb611fbac91",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6dc89d5b-d2cb-4f3f-82a6-c2efd774a7db"
        },
        "item": {
          "id": "c445d9a9-a6dd-40f6-98c4-57199fb19fa0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5ccdfd06-9939-49fa-9f78-58f0dbfe92af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d1ffff-4a6f-4c4c-8def-dde325d4547d",
        "cursor": {
          "ref": "7fe6f8eb-8691-4576-a6e7-2f7747986cfc",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4f68bfe2-551b-45d5-b53b-edfd019e4af4"
        },
        "item": {
          "id": "78d1ffff-4a6f-4c4c-8def-dde325d4547d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ae216329-3afb-4dcc-9919-313734174457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5e25fe-a7d3-4b89-84c4-a9ec6fce28bb",
        "cursor": {
          "ref": "c3f901be-d969-4d1e-b4f6-03a97efe6dbd",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5246dc87-d099-4296-b74c-e304a4404d59"
        },
        "item": {
          "id": "cb5e25fe-a7d3-4b89-84c4-a9ec6fce28bb",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "cd336edd-04e8-40e8-9332-947ac1a78795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec1f466-a231-4abe-b98a-b15fec1b2295",
        "cursor": {
          "ref": "c080f090-839e-4f9d-85f5-35ce4091d3bc",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b92b339c-2904-46a5-ba9b-ef249ac96f03"
        },
        "item": {
          "id": "aec1f466-a231-4abe-b98a-b15fec1b2295",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a9f3f18e-38f0-4674-a92c-08cb94930152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6366cc-d7a1-4037-a12e-08ed00b20947",
        "cursor": {
          "ref": "2ff11276-169f-4e2c-aa27-a96368190287",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "96d411c8-08b5-450f-9631-619814836e76"
        },
        "item": {
          "id": "1b6366cc-d7a1-4037-a12e-08ed00b20947",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c55d3e46-691a-4e53-a66d-807f2e7ccaff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9642bf67-342e-4d6f-9370-29eb91dc19ef",
        "cursor": {
          "ref": "04d0a855-f8b9-4d5c-8673-1642455124f4",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c7f47c1c-9697-4c1c-ac68-9e06a0edd579"
        },
        "item": {
          "id": "9642bf67-342e-4d6f-9370-29eb91dc19ef",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d46bef58-7e21-49c5-b9f5-a8c25b5c8e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3153423-fbb5-41f1-a959-0cd545789c3f",
        "cursor": {
          "ref": "5dff938f-d40c-4cd5-9142-2ea55071873d",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c56df5b5-f4ad-43f6-b8b5-f6ef398bdf5c"
        },
        "item": {
          "id": "b3153423-fbb5-41f1-a959-0cd545789c3f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b31a7ab5-515f-46ac-811d-8734a3ca5886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3849728-d698-4bd7-98b1-2003d6f6a88a",
        "cursor": {
          "ref": "115bcf38-7936-48b7-8dff-7b5dff6175a6",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "702bf69a-e3f2-4b01-a41f-98d298767044"
        },
        "item": {
          "id": "b3849728-d698-4bd7-98b1-2003d6f6a88a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2eaf5a2d-0d4d-456d-9839-11f14c80eca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff8691a-fedc-4570-b679-c4d15a4b24be",
        "cursor": {
          "ref": "e3a6568f-1a83-4835-a2ed-b0351cded88c",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8421948a-fe98-4255-bc17-b7fc8163cef9"
        },
        "item": {
          "id": "8ff8691a-fedc-4570-b679-c4d15a4b24be",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "34934a21-6b14-4a73-92d4-be20100c59bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53b83e1-eac3-471a-9144-3ea5e2df6664",
        "cursor": {
          "ref": "3d0428c2-0117-4864-8f50-f0d524196c10",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ce3922be-84fa-42e0-b19c-4a771225cb01"
        },
        "item": {
          "id": "a53b83e1-eac3-471a-9144-3ea5e2df6664",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "79d2c52e-fc88-44bd-a85b-0c182294ff49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ceb0d19-062a-4655-86da-b107eab32212",
        "cursor": {
          "ref": "0aff9536-e8f1-4d68-a789-c1dd752696f7",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "eb099688-eefa-4143-ac16-0cf48b2788be"
        },
        "item": {
          "id": "6ceb0d19-062a-4655-86da-b107eab32212",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a78e6088-e9f8-47af-838d-27b58a308c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626bf32c-570c-4294-acac-214f9bdf396c",
        "cursor": {
          "ref": "b0db5ed7-cf63-4b9a-a11e-981e0cccd25d",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3acb9e38-0463-44ba-ba3f-71cf4891dbc0"
        },
        "item": {
          "id": "626bf32c-570c-4294-acac-214f9bdf396c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2e43a7f0-9706-4d9a-a0ff-a4f26e7fc7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce21927-470d-4041-bd9b-9c48610b6196",
        "cursor": {
          "ref": "6b3aaf70-e885-43d7-a0b3-b6dde3eb1a45",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0e3728d6-5924-41f6-b1e7-8be0ce067cee"
        },
        "item": {
          "id": "fce21927-470d-4041-bd9b-9c48610b6196",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "58dfa142-ecb8-4b58-b9ed-a68e3385a06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2222916-4262-40ba-88b5-19984fc94491",
        "cursor": {
          "ref": "5c4f5043-1e91-47e5-adee-67bc766e0392",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "19651466-8888-43e4-8873-4bb1df9a7902"
        },
        "item": {
          "id": "b2222916-4262-40ba-88b5-19984fc94491",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "afbf05c0-771c-4b22-915b-8529ac835cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1992b1c-f8f7-40c7-a774-315267847e6d",
        "cursor": {
          "ref": "a30c5b78-b13a-4d14-8b4f-eda4da72bfa7",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "df8e1012-5f66-4dc1-aa7e-a41116e1b759"
        },
        "item": {
          "id": "b1992b1c-f8f7-40c7-a774-315267847e6d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "11127d3b-48c3-4266-abc6-d6bad3f1d47f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "cabfbc1d-d90e-4319-b999-9af93f6b1c4e",
        "cursor": {
          "ref": "f586eb13-6ed4-4867-bde0-3af57d3f4a9c",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7575fe11-11f7-4cfb-afe3-c13fcc8b7b02"
        },
        "item": {
          "id": "cabfbc1d-d90e-4319-b999-9af93f6b1c4e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "55c777af-9bdb-43e3-abd8-6ecf91a6086f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "397a6af4-03c4-4e2a-8532-7e7bb2b94589",
        "cursor": {
          "ref": "066dac3a-9b8e-4ac2-8075-efaf091e7c85",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6fdd66aa-2fd1-4f62-b4e3-d59527094d10"
        },
        "item": {
          "id": "397a6af4-03c4-4e2a-8532-7e7bb2b94589",
          "name": "credentials_issue"
        },
        "response": {
          "id": "346a6941-82c2-4616-be35-757285eed218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "421bb750-f6c6-499f-b05e-db06c2a2ab45",
        "cursor": {
          "ref": "76fb940b-6ab5-4e20-8650-49373f810ef7",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f755506e-de3e-46a0-9dac-44099b7da385"
        },
        "item": {
          "id": "421bb750-f6c6-499f-b05e-db06c2a2ab45",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3cafa33b-399d-46ab-8d9f-3e4a18ddeb7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "c2025ee7-242f-4045-8231-36599e42be38",
        "cursor": {
          "ref": "5ca36509-f70f-4ef6-8cc7-5b53024a1dc9",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c03655a5-a727-4894-b6ed-5450dc1e0cb6"
        },
        "item": {
          "id": "c2025ee7-242f-4045-8231-36599e42be38",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4003da58-51cf-4375-b4bf-a04a4b27d1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "3df397dd-73dc-4e98-a483-45c90c1d9662",
        "cursor": {
          "ref": "663b164e-5107-4909-a67b-6bfba362c5d2",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6a8569fc-154e-4a8a-ac11-2a354ec46256"
        },
        "item": {
          "id": "3df397dd-73dc-4e98-a483-45c90c1d9662",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e78d24f7-4874-4d0d-a8c5-34c3a34e6ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "aeb1ffa1-bf2d-4cb6-a811-5cf39e1d2295",
        "cursor": {
          "ref": "51b239ae-b4a3-4d87-a803-6c67ad5cf46d",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "900e8459-55c6-43ca-a7f6-387794e05f6a"
        },
        "item": {
          "id": "aeb1ffa1-bf2d-4cb6-a811-5cf39e1d2295",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "99d683f9-9b70-4b45-b4cf-58ed03db1413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "823b9f59-b763-4c82-87fe-a0b553eef302",
        "cursor": {
          "ref": "1e5c20d8-c6f7-46bd-9a88-57fac3766683",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "47823df1-5e57-44b7-bde9-9963a7a9ba97"
        },
        "item": {
          "id": "823b9f59-b763-4c82-87fe-a0b553eef302",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7611de96-957c-40f5-853c-aac14647d833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823b9f59-b763-4c82-87fe-a0b553eef302",
        "cursor": {
          "ref": "1e5c20d8-c6f7-46bd-9a88-57fac3766683",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "47823df1-5e57-44b7-bde9-9963a7a9ba97"
        },
        "item": {
          "id": "823b9f59-b763-4c82-87fe-a0b553eef302",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7611de96-957c-40f5-853c-aac14647d833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bad8ee-b39f-4bdf-a115-02bcc298ee2f",
        "cursor": {
          "ref": "f94f0267-eb71-4406-8de1-e7fce99711c9",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d8928abd-c881-4987-a0f7-0b3adb5965ba"
        },
        "item": {
          "id": "21bad8ee-b39f-4bdf-a115-02bcc298ee2f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "737db3cd-1d1b-45c9-8f90-c569be854f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1758fb-ea82-4dc6-a7a3-a400accbc1bc",
        "cursor": {
          "ref": "298eb9d0-8c60-43e0-a208-e33a7818b474",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8cff9536-c16e-47ff-a8d8-ce0958fa7ca2"
        },
        "item": {
          "id": "ec1758fb-ea82-4dc6-a7a3-a400accbc1bc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ec68a2d8-679d-496c-b7dd-f214f7082b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aeeb582-f001-4c67-ad07-b05f77421b17",
        "cursor": {
          "ref": "4e67ab8f-89cd-42ee-a8e2-7052415702db",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "47a4c1a5-aefa-4903-93eb-54224c077e9a"
        },
        "item": {
          "id": "7aeeb582-f001-4c67-ad07-b05f77421b17",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6d0e6784-2a0d-488e-9346-817bc2bceefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa85728-9a86-487c-b23c-6925b93a61f6",
        "cursor": {
          "ref": "88607094-6e86-4c68-bb91-77896fbf5e5c",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3ce8c71f-17c2-439a-a18b-ff83b7dca6f7"
        },
        "item": {
          "id": "9aa85728-9a86-487c-b23c-6925b93a61f6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "77454285-a603-464d-a70b-763130a01c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704498bd-9048-4328-a9c8-a89914bc7969",
        "cursor": {
          "ref": "a3b2eb73-89a8-465c-b09e-db2b03b593dd",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cc157398-2bc9-4dc4-83d3-819bcc9f0f7c"
        },
        "item": {
          "id": "704498bd-9048-4328-a9c8-a89914bc7969",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d47b07ca-063c-4968-84a6-18ff318a17b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2cf5e17-084c-430e-b7bb-0dc53023c272",
        "cursor": {
          "ref": "e97316c8-410a-4763-aa63-e68b9faf94f7",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2f8e63d1-c2b4-4bfb-9d99-745ed8d70d37"
        },
        "item": {
          "id": "a2cf5e17-084c-430e-b7bb-0dc53023c272",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7ca3ae81-9fac-4682-9513-a656226e5008",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9d597772-3771-4e06-84fb-b5cbf0b321cd",
        "cursor": {
          "ref": "e1f921e0-afd6-49e3-8789-d96ba394e921",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8f14d84a-bbfc-4167-a3f1-ca76ea67fc31"
        },
        "item": {
          "id": "9d597772-3771-4e06-84fb-b5cbf0b321cd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7ed3a543-e8b1-4f3f-bfda-4f7005ddd70f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9493962-4a78-4f24-89bc-ed0f24d79fd9",
        "cursor": {
          "ref": "4b4bb5d3-0467-4a04-b3ea-4d0cd1eafa47",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "330cb9fb-b98b-49ee-b56d-93159dc4293e"
        },
        "item": {
          "id": "d9493962-4a78-4f24-89bc-ed0f24d79fd9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bcb8b9fd-201a-4479-b963-6761b7fd5f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d392dee-d41a-439a-87d2-6e1bf9baef37",
        "cursor": {
          "ref": "0cfe11ef-2974-4837-be80-4e4803c230e4",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1d7ffef2-18be-4803-a31c-542eb6de7d7a"
        },
        "item": {
          "id": "1d392dee-d41a-439a-87d2-6e1bf9baef37",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5ffab185-bff2-49be-8cb5-abd66d6e1d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30e5eb7-746c-434c-9d8b-68f60a5dd87f",
        "cursor": {
          "ref": "2edb8b01-94a5-45be-a199-1a4ae4ccc3aa",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "55c9552e-c4ae-4d61-8936-0ce928beeaec"
        },
        "item": {
          "id": "a30e5eb7-746c-434c-9d8b-68f60a5dd87f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3f601a46-6c94-480a-9d8e-a887b24c97b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64179d24-1a48-415b-8d5f-17c3f1603ec9",
        "cursor": {
          "ref": "66145944-4fb8-41f3-b8f1-fb92a2bd787b",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4ae44b49-7920-4558-9276-584e7c3bfd0d"
        },
        "item": {
          "id": "64179d24-1a48-415b-8d5f-17c3f1603ec9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f6382aba-86e3-4d33-9ce9-f79f6a86b2d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c313c6ea-ea91-49b2-9708-f08b281ea59e",
        "cursor": {
          "ref": "785102ee-dfe4-489e-bfe7-8d6254da8ecf",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "90136e41-0e7b-4ab6-afbf-842e1be740be"
        },
        "item": {
          "id": "c313c6ea-ea91-49b2-9708-f08b281ea59e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dda630e6-13cc-44a1-9fcb-624482906710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f194cbc-edf8-4681-834b-9af321df512d",
        "cursor": {
          "ref": "84674557-3d6f-4800-9ce6-1990091542c9",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3b78db2c-821e-4866-9f27-23197254db75"
        },
        "item": {
          "id": "7f194cbc-edf8-4681-834b-9af321df512d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "471908e4-a135-4c89-a86c-7478ed888588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32423f08-de72-4a0e-834b-fb952d73f419",
        "cursor": {
          "ref": "8811dd1c-3e6e-4505-8efc-99dc912af7e9",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "dfe8e5db-364d-4584-8742-859e152bd5c3"
        },
        "item": {
          "id": "32423f08-de72-4a0e-834b-fb952d73f419",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "05f680bb-6584-453a-9997-6e2fa2ff295f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49180962-ff22-49de-9542-97408103898a",
        "cursor": {
          "ref": "2f79259f-1d5c-4fa2-9ce0-1d501b99dd6f",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2a8e4648-7411-4d16-bf0c-191c67c3c152"
        },
        "item": {
          "id": "49180962-ff22-49de-9542-97408103898a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7bc1d105-c6c9-47fb-9627-7d009aa52293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd472d5-96cc-46e7-a9d5-96e138daa795",
        "cursor": {
          "ref": "e78ab833-ef6b-4088-a32a-0801b911fb9e",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4adbe15b-c5be-4253-a7ea-ac8baa086bab"
        },
        "item": {
          "id": "fcd472d5-96cc-46e7-a9d5-96e138daa795",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b0571de7-383e-42f7-9a77-454e7fe6e381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e90ffe3-1e23-474c-b321-56ee55446544",
        "cursor": {
          "ref": "d1c7415d-f57d-46bd-a0b4-54f967ef024d",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6d21d7d9-eea1-4252-9801-dd4fa1057717"
        },
        "item": {
          "id": "6e90ffe3-1e23-474c-b321-56ee55446544",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "07d931d0-aaf4-4684-967e-f568b9ddc18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c72dac-fe21-46c2-84d4-719bcb3fd125",
        "cursor": {
          "ref": "da1c24e2-7f9e-495a-9701-1d6f73fddf74",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d261d2a7-2c17-4ede-a143-d3763b8d8070"
        },
        "item": {
          "id": "f1c72dac-fe21-46c2-84d4-719bcb3fd125",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fdc7b426-f1b5-434a-b4c1-edb1c93b1b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791420f4-7dcd-43e0-8d5e-8a6c55c82a9d",
        "cursor": {
          "ref": "f6b2536b-c2a6-40f3-9443-5ca674c1e155",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8b7aa205-b70b-4902-b187-c963485d7f08"
        },
        "item": {
          "id": "791420f4-7dcd-43e0-8d5e-8a6c55c82a9d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9cf54dae-18ba-4eee-9167-e242c6e1706e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8accca-f3c0-4403-9f75-d4073f3096b2",
        "cursor": {
          "ref": "4c351289-d2c2-4f5a-b8f9-068a47af9f16",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1f07d5ab-aea6-4047-a8c8-208bd272347d"
        },
        "item": {
          "id": "0b8accca-f3c0-4403-9f75-d4073f3096b2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "31f7f903-c31a-4f88-9f21-8b6cb71d917c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a095ba4-4f8e-431f-b2dd-a1b576ed8740",
        "cursor": {
          "ref": "c5d0e7b2-225d-44d7-bd7e-e0472b563152",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c2d839ea-e7d1-403f-b1c7-8a36359b7f16"
        },
        "item": {
          "id": "0a095ba4-4f8e-431f-b2dd-a1b576ed8740",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e02239ea-982c-4a10-8f4c-9409fe5bf116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7aefaa3-7fc3-4f7f-879b-7f99a316aee5",
        "cursor": {
          "ref": "ffd48ffc-01ca-47cf-9256-5e3d320386b0",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "24c7527b-a75a-432d-a202-e915414d36bc"
        },
        "item": {
          "id": "d7aefaa3-7fc3-4f7f-879b-7f99a316aee5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "526fab15-1d50-43db-a02c-4c4bdb3099e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05db0ed3-1baf-454d-a79b-c9b795bc5b3a",
        "cursor": {
          "ref": "64882aa2-0e78-47f3-8f35-db51418ce682",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b0aea9fc-617c-4dce-858d-4d242f0eb525"
        },
        "item": {
          "id": "05db0ed3-1baf-454d-a79b-c9b795bc5b3a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "247010a8-f0b8-40e9-b369-a0fdce0f2cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66b0ee1-4e51-4cf4-9403-22d99f2f4410",
        "cursor": {
          "ref": "4904f31e-486f-4d0e-8b1b-47ec7343b4c7",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5b174480-95ae-4594-8d0f-c7b6cd10909e"
        },
        "item": {
          "id": "c66b0ee1-4e51-4cf4-9403-22d99f2f4410",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cc5461f9-5a77-4d16-b43d-4d26e4fd22d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a218c1-9a02-45a3-a26f-12a13bd03faa",
        "cursor": {
          "ref": "4a5876c7-c7f4-4c5a-8f21-1a5768e12865",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "54d553cc-1f29-4b0a-8014-92f0a054dfbf"
        },
        "item": {
          "id": "50a218c1-9a02-45a3-a26f-12a13bd03faa",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bb9b94dd-877c-4842-bfc4-6884655dae3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0727d8-0c79-48ad-8445-b49ba04c90d8",
        "cursor": {
          "ref": "7f96d521-d4a8-4615-bbff-70b46da7029c",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e67b00a1-5ee4-403e-ba89-4cd4b414a5b9"
        },
        "item": {
          "id": "6e0727d8-0c79-48ad-8445-b49ba04c90d8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7dca3b57-26c3-412d-ad3b-02d05444fa33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114a0ee9-0f97-4a39-95e6-60018122f7d0",
        "cursor": {
          "ref": "29c81062-9924-4f4a-bf35-1c8a616088ee",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9b768399-6a40-4b55-8a11-44f1bee4f05c"
        },
        "item": {
          "id": "114a0ee9-0f97-4a39-95e6-60018122f7d0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c849e6ac-95a5-4e1d-acbe-b7b933d11eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37932710-f1bb-4802-87ad-20f5e10348a4",
        "cursor": {
          "ref": "168f3c4b-620f-4796-b281-8107938ee19a",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9294cd81-b0f0-4767-b29b-19708972651d"
        },
        "item": {
          "id": "37932710-f1bb-4802-87ad-20f5e10348a4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1ae5fdea-3e86-41b4-8db9-4f7019b21057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13a08b5-4003-4a9a-af2b-2eb32d16422d",
        "cursor": {
          "ref": "14e5a6fa-8973-416d-8527-6515d090eb9d",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d9ceb26a-062e-4f59-a45c-49cbb45c13d6"
        },
        "item": {
          "id": "c13a08b5-4003-4a9a-af2b-2eb32d16422d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cc11be0e-32f5-4719-ab4a-de3007efe2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f42124-3f96-4d1c-8e34-731b19f4c07d",
        "cursor": {
          "ref": "215e82bc-3cfb-4837-9dec-3042add117ee",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "deed98c7-d303-40ba-8a4e-d410b918ced2"
        },
        "item": {
          "id": "51f42124-3f96-4d1c-8e34-731b19f4c07d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0fe3c8b9-1439-40e1-a58e-3053d31c6862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464bccb6-8fe3-44f0-9dfa-5acc093f6b85",
        "cursor": {
          "ref": "596b50a4-d44c-4c25-91f6-6e948d256d29",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7a0f98fa-2610-4cf0-aa8a-56f8c3bafc92"
        },
        "item": {
          "id": "464bccb6-8fe3-44f0-9dfa-5acc093f6b85",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "09541d7e-1da5-49e9-821c-ab71c543cecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7eaf486-55df-4c12-9e6c-60f1b20edf34",
        "cursor": {
          "ref": "0e232725-8044-4215-9b7d-0689bc3e90cd",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "31911c83-43b5-40a3-998e-ca7aa08f0dba"
        },
        "item": {
          "id": "a7eaf486-55df-4c12-9e6c-60f1b20edf34",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "710d351a-665a-435f-97ea-12044af3913e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "e1a32a6b-4cf3-428f-a526-c59a10597d9b",
        "cursor": {
          "ref": "355e3f83-b298-49fd-847b-56fb486c3899",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b0b8a622-e8c1-4706-b5e1-30a9d3b38efb"
        },
        "item": {
          "id": "e1a32a6b-4cf3-428f-a526-c59a10597d9b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "dc16a0b9-ae40-43c3-9bad-1c6f47b048b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "018ec38c-a252-4e7e-8784-e54427ac97bf",
        "cursor": {
          "ref": "1cdaed6f-57be-4df9-ad39-704a9f367ed0",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a356d1d2-44c5-43f7-91e6-b74b876e5c4c"
        },
        "item": {
          "id": "018ec38c-a252-4e7e-8784-e54427ac97bf",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "94ab9891-6b6c-44cc-93ce-321143ad84b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018ec38c-a252-4e7e-8784-e54427ac97bf",
        "cursor": {
          "ref": "1cdaed6f-57be-4df9-ad39-704a9f367ed0",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a356d1d2-44c5-43f7-91e6-b74b876e5c4c"
        },
        "item": {
          "id": "018ec38c-a252-4e7e-8784-e54427ac97bf",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "94ab9891-6b6c-44cc-93ce-321143ad84b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbb8a8b-f015-4216-81b4-72a738a5d3a8",
        "cursor": {
          "ref": "b32702af-361f-483c-af73-879a0d3b8dcf",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b4d7438f-702a-4576-8234-bb1fee9be85a"
        },
        "item": {
          "id": "bfbb8a8b-f015-4216-81b4-72a738a5d3a8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cb7b523b-9663-4ad8-a48b-4bf1b4a631ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1002db1-e112-4eb4-99df-6258f6915f78",
        "cursor": {
          "ref": "ed757b75-b596-42a7-a634-c4ab9cf16167",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2b97f925-2086-4291-b551-f30cb0c2fbd2"
        },
        "item": {
          "id": "c1002db1-e112-4eb4-99df-6258f6915f78",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "367d88c2-9494-4d28-8aff-187d2707878a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a863335-384c-492d-92eb-58c30a00fb56",
        "cursor": {
          "ref": "ef7c0086-53fd-4575-ac80-c7afbbeff49d",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c0f449fa-5361-48fa-9a75-c8852f10336b"
        },
        "item": {
          "id": "6a863335-384c-492d-92eb-58c30a00fb56",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5b8233be-53fa-424e-af99-bd6a8a2167d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "543ccb28-1001-447c-9092-d42999e98d57",
        "cursor": {
          "ref": "38d385f5-9077-402f-936d-a7c080b5448e",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5a9fea5c-d7a1-44fa-8316-615ab38de418"
        },
        "item": {
          "id": "543ccb28-1001-447c-9092-d42999e98d57",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "979ca8ad-053f-4d9c-95d1-e00981cb6d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0358de28-2528-4a29-940a-52d7916444f4",
        "cursor": {
          "ref": "ff2fa9a4-9dd2-4e0f-a583-2e3ff582209f",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "68a73290-e2e3-4b67-895b-20c678be1fd6"
        },
        "item": {
          "id": "0358de28-2528-4a29-940a-52d7916444f4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3813c6b9-4c04-4829-b7c8-f918ffed880f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20b6445-73af-4a6b-be36-770be5f6f81e",
        "cursor": {
          "ref": "b31cc84e-1e13-4819-a882-b097dd05a88e",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "79bf6e31-76c6-4358-9ff3-497dcb080936"
        },
        "item": {
          "id": "a20b6445-73af-4a6b-be36-770be5f6f81e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4afc866e-077e-4858-8850-3b3ef5fe7d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae818bf-8922-4a16-932e-44f7c972a8ec",
        "cursor": {
          "ref": "a88b41d0-5a6d-47b3-ab89-e06a388b3a38",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f8dcb930-afd8-46cb-a8be-79156d16b152"
        },
        "item": {
          "id": "0ae818bf-8922-4a16-932e-44f7c972a8ec",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9df0460f-d291-4852-9ab1-03172f0a515b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe6b3a7-d441-4a64-89a2-84b13db008d3",
        "cursor": {
          "ref": "58a41d2f-33b1-4062-b7eb-1e05553bb5a3",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b81fc1e3-9015-4abe-b649-33442f84f367"
        },
        "item": {
          "id": "ffe6b3a7-d441-4a64-89a2-84b13db008d3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "643257df-916f-4d66-9707-b376173b611c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc953ba-59d2-4d0c-a534-0c1d57ee2908",
        "cursor": {
          "ref": "9ae1f6b6-d218-4693-b544-65a12d0d6241",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0b06e5a7-8d5f-4ea3-8b00-70da2b953205"
        },
        "item": {
          "id": "5bc953ba-59d2-4d0c-a534-0c1d57ee2908",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ff598547-6046-4adf-94c2-e0e3a2ed70f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1beb99-83d9-4827-9970-1716c7a289ff",
        "cursor": {
          "ref": "8ac11dca-88df-4a75-80ef-11d1caaeae38",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f8ff13b5-d48b-4e76-a768-495e9959e0a5"
        },
        "item": {
          "id": "6f1beb99-83d9-4827-9970-1716c7a289ff",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9e4ef77d-4868-45b5-bf7f-fdcb2585bfb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b953429b-e8a9-4b39-9f51-03a492feda13",
        "cursor": {
          "ref": "777b1f3b-876d-42d4-aebd-e85797124ca9",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f43dd4eb-65ec-464a-8c1e-bf285fb2514a"
        },
        "item": {
          "id": "b953429b-e8a9-4b39-9f51-03a492feda13",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "37652fa1-d94f-4387-9565-ee6bae7f53b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deed95d1-0f4a-4d3b-a4c9-cde0d1f23f1d",
        "cursor": {
          "ref": "68fd52b3-59fe-4f8e-aff9-70c9f2ab02a9",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "52b0abc2-a307-40f8-8768-e67456cc66a0"
        },
        "item": {
          "id": "deed95d1-0f4a-4d3b-a4c9-cde0d1f23f1d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c82b195c-4c8e-458e-b577-e8d267c445ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09929455-1db2-460e-aef2-7e8862fef0a7",
        "cursor": {
          "ref": "a16af4c2-34b3-477e-9b7d-53f3ebae9997",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cd3ce0a3-4926-41d5-a1f3-84b9b09240c4"
        },
        "item": {
          "id": "09929455-1db2-460e-aef2-7e8862fef0a7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1e94bfc5-b10e-456f-8a3b-ef473bd7cf90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26bc952a-4415-48fb-897c-0f2d54c3ce78",
        "cursor": {
          "ref": "24415b8d-1f49-4d2c-b9b0-de951a2d93df",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fa4fa6bd-def3-41ff-8d44-e2f265ad1a1a"
        },
        "item": {
          "id": "26bc952a-4415-48fb-897c-0f2d54c3ce78",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "85e030fe-cdb9-4a76-a355-6e2aadb9cd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72275d5c-bb57-4216-afdf-aae976bcb8f5",
        "cursor": {
          "ref": "f586129d-3a19-4213-b85a-4552f20b0c80",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4abd1d4d-49ec-458d-9539-d85b7018ec7c"
        },
        "item": {
          "id": "72275d5c-bb57-4216-afdf-aae976bcb8f5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "537d9e0a-5709-49b9-893f-96edd1b5152d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4331398d-4f93-454d-99d1-1d806ced435c",
        "cursor": {
          "ref": "9901d307-a6ca-4e2e-84cb-6027e46fbc4a",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6b767781-8aa1-4e6e-b24a-1de7363d7bb8"
        },
        "item": {
          "id": "4331398d-4f93-454d-99d1-1d806ced435c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7d88584c-a5f8-4dc7-92e7-45bdd8668b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e0fe17-4cf1-4b1e-90cc-1384ce2f4039",
        "cursor": {
          "ref": "dfefec22-aee3-465b-aac5-f5891fa181b7",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c8edd6d0-7911-4665-970b-17a1e5ea1960"
        },
        "item": {
          "id": "01e0fe17-4cf1-4b1e-90cc-1384ce2f4039",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "a09e9932-6664-44af-87b4-29a1f7f154ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0a673e-daaf-452b-ae98-f886a76bf037",
        "cursor": {
          "ref": "d67a4595-4c26-4ae9-9019-bf5d64462f05",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5eb8317c-f338-49a0-afab-7c591a10a2c9"
        },
        "item": {
          "id": "4c0a673e-daaf-452b-ae98-f886a76bf037",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "32bec47d-6f8e-403e-9b44-78a93240b4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1469908a-a5f4-48dc-a8f1-dda9be3a0982",
        "cursor": {
          "ref": "3e9b111a-7c0a-4789-9b30-fff128873820",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1c7cc3fc-467c-46bf-bfcb-1b6b0e7232c4"
        },
        "item": {
          "id": "1469908a-a5f4-48dc-a8f1-dda9be3a0982",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a430c0d9-b42d-4f8c-aec2-a54e3be29e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ea9e99-3f55-4169-8c7f-f8e81e20039d",
        "cursor": {
          "ref": "fc2294c4-63af-4f85-beac-3225f3027d72",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c8996bb7-2be6-4caf-829b-71eeb2e9229e"
        },
        "item": {
          "id": "19ea9e99-3f55-4169-8c7f-f8e81e20039d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "adabe33b-3db1-4829-a5f6-f81dabe7e800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6bf154-6bd8-4a3f-b2eb-3859190d2152",
        "cursor": {
          "ref": "31c04b2c-cf19-4294-961a-14b5f4e098f9",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "09b3b534-198e-4b43-9cca-f22eea5e149b"
        },
        "item": {
          "id": "dd6bf154-6bd8-4a3f-b2eb-3859190d2152",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2ea0cfd8-6606-4ea9-9f81-55e96b9de16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a397a28-3de1-4234-b096-8457ef2056d6",
        "cursor": {
          "ref": "85d8ff29-09bc-4318-a0aa-0462f425e9c2",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a68e5086-206e-4532-879b-2ec8056704c7"
        },
        "item": {
          "id": "8a397a28-3de1-4234-b096-8457ef2056d6",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1691d2df-eafe-44cb-9d48-7ec88f28bb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54fc277c-3347-4d09-9b44-5555a291e5ee",
        "cursor": {
          "ref": "eea32659-7d8a-44f2-a6f9-6196eec0f750",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8a10ea79-9f4e-491a-b75b-0516844714d8"
        },
        "item": {
          "id": "54fc277c-3347-4d09-9b44-5555a291e5ee",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a2af75b7-6214-4c9b-8818-1dc2648ee753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93982d85-9f49-4cca-98b6-fe2902e51a5b",
        "cursor": {
          "ref": "50ecd676-af37-4bea-9991-81afe01ce295",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "931f9f6e-4f5b-4aae-b4cb-2160541c4142"
        },
        "item": {
          "id": "93982d85-9f49-4cca-98b6-fe2902e51a5b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a4eada5a-cb37-4e8b-984b-0aa12c8862e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952136cc-8f01-431d-820e-92657c735c34",
        "cursor": {
          "ref": "8697c042-afe1-419c-b366-4a0800bbec00",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ac78cf0e-03e7-4d40-8403-5d3189ed845b"
        },
        "item": {
          "id": "952136cc-8f01-431d-820e-92657c735c34",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "20fa2e51-ba23-4c68-a80d-439f0e0df4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e98c27c-5428-4c12-b7c4-ef1527c3bb4a",
        "cursor": {
          "ref": "c41544c3-cfc0-4667-9daa-ef30c5c8f80f",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9eba0baf-b5e5-4e84-9e5f-ecba301f24e2"
        },
        "item": {
          "id": "8e98c27c-5428-4c12-b7c4-ef1527c3bb4a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3f3d07fd-8f7f-49f5-8eff-25a239d89087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed89e6bb-c578-4a68-bf75-5901d0b716cd",
        "cursor": {
          "ref": "d40acd74-8d78-48c5-88ef-9bb724ef400a",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c388bb61-60c9-46cf-a5d0-1391903610c9"
        },
        "item": {
          "id": "ed89e6bb-c578-4a68-bf75-5901d0b716cd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3963c94f-26f3-4b49-ad7b-b0aff712d8c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d133c96-f080-46a6-bd37-4db218bff2c4",
        "cursor": {
          "ref": "1b7c534b-fae1-4e62-b1fd-78731436bd4a",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "53d5349c-50fa-47c4-8e08-da97b7f17ff4"
        },
        "item": {
          "id": "9d133c96-f080-46a6-bd37-4db218bff2c4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c823129f-a3f0-43db-9155-5478437a7d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904c3760-d1d3-4de9-9df2-c009b26bbeb7",
        "cursor": {
          "ref": "589abb7f-ae17-456c-90ab-5bebdbc96f51",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a9c4eeb8-3eb9-4906-858f-12c57bb5ddbd"
        },
        "item": {
          "id": "904c3760-d1d3-4de9-9df2-c009b26bbeb7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4f8777f0-cff9-4d90-b391-1f44cf9cd145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fb6303-bd49-4602-a6d2-f0dd8ebcbecd",
        "cursor": {
          "ref": "c79f8fa6-a8dd-41e0-b822-7ae5e6990ce9",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4e129548-7b5b-489e-b27e-c912c32061be"
        },
        "item": {
          "id": "e6fb6303-bd49-4602-a6d2-f0dd8ebcbecd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b0f3fe98-e189-4290-ad2b-d86e3fd75525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c872b48e-5e17-45ab-bd12-e02b27d3177e",
        "cursor": {
          "ref": "91a34f1c-e891-4b82-8e79-df2d964d9eee",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b56c6a29-6bd7-4358-9f87-a4f190612bbb"
        },
        "item": {
          "id": "c872b48e-5e17-45ab-bd12-e02b27d3177e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6faa7f0e-87eb-4bc4-a5eb-2db9bd412908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8464b91e-2449-4b88-9e5c-b16f24c759c1",
        "cursor": {
          "ref": "9552e4a0-22ed-452d-902a-1377ce850c7e",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ba790d0c-f1ac-4545-92ea-9ebdff6987d7"
        },
        "item": {
          "id": "8464b91e-2449-4b88-9e5c-b16f24c759c1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0c5869d3-480f-4a1f-8109-b5fbac39b3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1856d6e-c2c0-4358-839b-520d2869722f",
        "cursor": {
          "ref": "3f51497b-de19-4770-9d12-e58475a9f1a8",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "77579155-dc2d-4b58-bbbb-c73d6b2e0118"
        },
        "item": {
          "id": "d1856d6e-c2c0-4358-839b-520d2869722f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "37e83578-88ce-44d2-96c0-1c33b57104ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2562d5d0-163a-4999-90a1-1c040c63aac8",
        "cursor": {
          "ref": "f99b9eaa-3c4b-4e49-bca7-ab19fb5db58d",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a80b3d28-f6e4-4168-9a90-1882766cc0f8"
        },
        "item": {
          "id": "2562d5d0-163a-4999-90a1-1c040c63aac8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1aecd369-2cc8-443a-ba6a-8d0e93acc291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32588074-25ab-46d6-ba1b-c8d7624da7fd",
        "cursor": {
          "ref": "ad4912dd-b15f-47ab-9c04-c52c278f327a",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "01b39e91-1133-49de-b790-242bce45ee91"
        },
        "item": {
          "id": "32588074-25ab-46d6-ba1b-c8d7624da7fd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e948f1b5-aac2-400c-b5fa-81733c279bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194d2431-da22-4de9-bee3-9794eae0d9a2",
        "cursor": {
          "ref": "8f19a64f-df0e-49bb-881d-c68f0f093d9d",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ee6cb590-66f4-44cf-8a79-01ad11450287"
        },
        "item": {
          "id": "194d2431-da22-4de9-bee3-9794eae0d9a2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2e681435-c229-41fd-ab37-d00ca8f73b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea77284-fade-4adc-bae3-f88c2a59ba17",
        "cursor": {
          "ref": "dda3e140-9793-48d5-9ff3-27228240d9bc",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "426e64f9-6e1a-490b-8def-6bfc4113dc8d"
        },
        "item": {
          "id": "6ea77284-fade-4adc-bae3-f88c2a59ba17",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e42019fa-3abf-43f1-afb1-a720eefda008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "283743c7-b9fd-4b61-b464-5fa08f2d10ff",
        "cursor": {
          "ref": "ea4ad4ae-cafb-4830-aece-d5f972ee2836",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4d75db93-8af5-4935-b8e5-c4f326425155"
        },
        "item": {
          "id": "283743c7-b9fd-4b61-b464-5fa08f2d10ff",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b4c4c345-af43-439d-8e2e-cdb3172d88f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f79f6fc-61fb-47c9-a879-cdfcb1bcf5ef",
        "cursor": {
          "ref": "8a970874-26a7-4d95-8be5-332b516c48e9",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7e263bcd-7658-4e30-8c2e-facc26f0ee0b"
        },
        "item": {
          "id": "5f79f6fc-61fb-47c9-a879-cdfcb1bcf5ef",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "88e530cb-4f70-452d-9d3c-1edcb8f02919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f93c90e-aeb0-4ddf-9d38-a37e190f859d",
        "cursor": {
          "ref": "3fadcaea-718c-42d4-89b9-5d1a5386246c",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6bcd1128-e8b1-4d1b-aaa4-886124ebf364"
        },
        "item": {
          "id": "7f93c90e-aeb0-4ddf-9d38-a37e190f859d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a50f22d9-50b9-4488-ac36-11b218b25c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e719ae58-0662-4dbc-bb01-63b18ba9ff4f",
        "cursor": {
          "ref": "238f447e-f440-407d-b95b-86ddf70e87ba",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9c8ed85e-b0b7-4a1f-b6f0-8631991946f8"
        },
        "item": {
          "id": "e719ae58-0662-4dbc-bb01-63b18ba9ff4f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7e4c6c7d-ed33-4d68-b94c-29d0eda5d9ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11fa4d89-ad6d-4f32-b617-5d1f13d40f2e",
        "cursor": {
          "ref": "041a3b20-66c6-477b-9c04-c8f0d217185e",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b5abc63d-9d09-429c-9028-c05806540902"
        },
        "item": {
          "id": "11fa4d89-ad6d-4f32-b617-5d1f13d40f2e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e8bf7eaa-2579-41d5-9d11-8bdf3e24c75d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba0650c-6410-4a86-a37a-63d214cf386c",
        "cursor": {
          "ref": "f5c54ae5-d8de-4f18-917d-2c575a269b45",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a34eb90c-a991-4e63-ae2f-687e362a5add"
        },
        "item": {
          "id": "eba0650c-6410-4a86-a37a-63d214cf386c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "30576f43-589e-4c41-a709-6576ac76184e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a415a4-e94c-4a07-bcbf-a4d784c56622",
        "cursor": {
          "ref": "680a5a9a-ab85-448b-bc58-4e3b45a1acae",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bc6ca1b3-3e52-4cf0-aa9f-376dce7f6d27"
        },
        "item": {
          "id": "90a415a4-e94c-4a07-bcbf-a4d784c56622",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "45647c6b-22a4-4122-b22f-20237f539487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3dc9108-957b-46d0-bd27-c46d56005f10",
        "cursor": {
          "ref": "5b6b19b2-57cb-45b2-9bfe-ebea9c771dc3",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7581ae3c-9337-49d1-9147-a61917342a50"
        },
        "item": {
          "id": "e3dc9108-957b-46d0-bd27-c46d56005f10",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "aed2a62d-6e6d-4ac4-82fd-2b822a09d133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a776e1f-464f-4e32-b0c3-3fa3b2184f75",
        "cursor": {
          "ref": "026b075b-57a1-4085-b30e-8ec288be5bc5",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "62a3509e-ee0c-42a8-982e-3cea035570af"
        },
        "item": {
          "id": "2a776e1f-464f-4e32-b0c3-3fa3b2184f75",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "86ec190e-3882-4715-9ded-27fd55421450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ed0ca0-4ac8-4625-8e80-f9babc87d709",
        "cursor": {
          "ref": "4f23fcd2-8a2e-4931-862e-b5f6635b922c",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "59f62ceb-49d7-4fe7-9b00-c4e08711cd74"
        },
        "item": {
          "id": "95ed0ca0-4ac8-4625-8e80-f9babc87d709",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "15dc78b8-8a12-416d-9de0-7f1137058ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acea991-993b-4889-8cdc-d4c60f7a509e",
        "cursor": {
          "ref": "06272300-b8b0-4d63-8a77-f4abff0e324d",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f6073637-23ae-42ff-aaf4-ca8ca5d6f720"
        },
        "item": {
          "id": "7acea991-993b-4889-8cdc-d4c60f7a509e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f8e58c68-9412-4f03-9532-12c30945b13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4850bfdb-51d7-4460-8531-018342b84ae9",
        "cursor": {
          "ref": "dd2ef0f9-ed3d-4f38-8011-180419ddc956",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "77a7031a-b682-4674-9aaf-99e728177cf1"
        },
        "item": {
          "id": "4850bfdb-51d7-4460-8531-018342b84ae9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5027b894-4f7c-41ef-acc3-13081a040b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9823514b-9baa-4b1c-92cd-d90cc004070f",
        "cursor": {
          "ref": "cc036b2f-2cc8-4031-aa5a-ad7ec1d43ea0",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "03ee2689-8f3b-470e-a9d2-a5ca563b2eee"
        },
        "item": {
          "id": "9823514b-9baa-4b1c-92cd-d90cc004070f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0102a8a6-e09d-4f21-a797-a21033935108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284b0207-ac65-4b3d-9c41-d0c1c6cf588c",
        "cursor": {
          "ref": "29c0ecec-81b2-49e4-b865-0288f04c386f",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d110048e-437e-42e9-bf5e-382567dd286c"
        },
        "item": {
          "id": "284b0207-ac65-4b3d-9c41-d0c1c6cf588c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "def2e774-c376-4520-af56-cd51c4bb2478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ebe426a-1014-48cc-a328-1055ec8e20df",
        "cursor": {
          "ref": "dd1619d9-bfde-4684-9be3-602f0a63092c",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "07050feb-15b4-4821-afe9-d052a7c8abc5"
        },
        "item": {
          "id": "9ebe426a-1014-48cc-a328-1055ec8e20df",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "98e94960-380c-4f69-af7c-f544260218a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe7653a-d40d-48c5-9f1c-31e2bea606b5",
        "cursor": {
          "ref": "da7da725-506e-47d5-b6ec-ce065e6bcee7",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9606f88e-54f5-40a4-b9ef-4a7303cc251d"
        },
        "item": {
          "id": "cbe7653a-d40d-48c5-9f1c-31e2bea606b5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "97afe4af-3543-434d-abca-49e9e7fa91cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41ab8b2-e426-4b4b-90d6-1f954ceea797",
        "cursor": {
          "ref": "86ccbf0d-e285-4874-ba5c-9f711185a185",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bd6d8aae-5f25-402b-8b2e-238fdfc67144"
        },
        "item": {
          "id": "d41ab8b2-e426-4b4b-90d6-1f954ceea797",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8633ad2b-8d7c-4f67-bf8a-a4275e87ad55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51f7d82-b9c0-4b3e-b096-93d8ffc22301",
        "cursor": {
          "ref": "7a1bedae-e7c4-45f9-b54d-ba3740afae23",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4d51923c-0d4f-4781-bbe8-8938b7547f5c"
        },
        "item": {
          "id": "e51f7d82-b9c0-4b3e-b096-93d8ffc22301",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ec2d28b1-0361-4568-8525-7431345d53a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1d1dab-84dd-4d20-847e-37be85ff12cb",
        "cursor": {
          "ref": "1f880031-5453-4d36-bdb5-0a17d0ab9b1f",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "50e4a959-71f1-4bae-a1fc-c5230b55dad8"
        },
        "item": {
          "id": "5b1d1dab-84dd-4d20-847e-37be85ff12cb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d2d512c8-6110-41c2-8984-2ee57a791b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c70997-19be-44a4-8a69-ef66b189c24d",
        "cursor": {
          "ref": "a59bed6b-f5db-4aae-9f1f-bd247446adb7",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6d599b85-ed36-4826-a1cd-79aef953dd9d"
        },
        "item": {
          "id": "b4c70997-19be-44a4-8a69-ef66b189c24d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "687dec86-11f2-453b-b9a9-a5218ac93556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51899d43-da06-4292-ab5c-37344e607c2e",
        "cursor": {
          "ref": "3c00ba4c-4847-44b2-9eb8-65249a26a9f8",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7bba7770-886d-46fd-beb5-9f1532c40e5a"
        },
        "item": {
          "id": "51899d43-da06-4292-ab5c-37344e607c2e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "82ac98a2-f4ab-4f8e-a08e-4201654713f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226bd54d-d438-4cf8-a80e-cb18356b054a",
        "cursor": {
          "ref": "eb1e54fa-a61d-478f-86c8-7486ac7fdfce",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "da0bfafe-b2c9-4341-b3a0-0700cc263a10"
        },
        "item": {
          "id": "226bd54d-d438-4cf8-a80e-cb18356b054a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9456e42f-b8ba-48e0-ae12-8768760acb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d902d20-820f-4bde-8629-89b77fe36715",
        "cursor": {
          "ref": "817d319b-ba77-4eab-b9fe-fcdabcac45d9",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "36fe1948-7d33-4650-86ef-25ea1c5e047b"
        },
        "item": {
          "id": "2d902d20-820f-4bde-8629-89b77fe36715",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1935029f-b0dd-4b21-96e3-7b31be458094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211f111c-a576-4e3b-aea0-cd8149603ef5",
        "cursor": {
          "ref": "9f3c1d75-ed85-4c64-a94e-1c6bfe0a2bba",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "85325e2d-8cc7-45eb-a9e3-18fcb7fd68b7"
        },
        "item": {
          "id": "211f111c-a576-4e3b-aea0-cd8149603ef5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "62ae6e05-5db8-4f30-ab97-8cf3001b6a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b4ddce-f959-4299-9776-519dfc9a8005",
        "cursor": {
          "ref": "da1cce35-e461-4ee9-84c3-750eb41d5cd8",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a61917b1-06fa-444f-ab56-a6bd412ebd0b"
        },
        "item": {
          "id": "29b4ddce-f959-4299-9776-519dfc9a8005",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4b3b8aa4-1493-4c23-85c5-beb337509473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14310cf-cad0-46af-ad01-d4d5a7bda505",
        "cursor": {
          "ref": "dca9922b-a27b-4f39-911c-710fe7fc9077",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "59b03abd-6866-4c32-97ee-d39ed153c96c"
        },
        "item": {
          "id": "d14310cf-cad0-46af-ad01-d4d5a7bda505",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c25015f0-7a78-410b-89da-85432a125dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b911247c-3c2f-4a38-b62a-0419c7453ee2",
        "cursor": {
          "ref": "76560269-8d32-4393-8251-c67931459990",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8675f9d9-590d-497c-85ab-3f71e8acd6fc"
        },
        "item": {
          "id": "b911247c-3c2f-4a38-b62a-0419c7453ee2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "090ba6bb-eaed-40d2-9138-373bd5df225c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0762cc7c-95b9-43ab-a33e-ed219fb985e2",
        "cursor": {
          "ref": "0348fe02-567a-4e34-b5cd-f38145357c2e",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5dbefebb-7a74-407a-88cb-23ddbf704880"
        },
        "item": {
          "id": "0762cc7c-95b9-43ab-a33e-ed219fb985e2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cc585632-d1c4-448e-b2c2-d95a787ef2cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a25d69-cb9b-46a2-8c40-234d0e5a3632",
        "cursor": {
          "ref": "b43f1e38-b388-4e30-bfd5-c40ccaa910cf",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0e950244-8776-4a4f-acce-a1058ede8210"
        },
        "item": {
          "id": "c0a25d69-cb9b-46a2-8c40-234d0e5a3632",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "38fcb4df-91ed-4345-8bbe-6c2117794c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2eb552-0130-430f-b2e1-3aa207b76827",
        "cursor": {
          "ref": "bb073c15-8496-40b8-8c79-f2f7fa98c1ca",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f539cb84-1f1c-45e1-93f3-fefd9c0c8845"
        },
        "item": {
          "id": "ec2eb552-0130-430f-b2e1-3aa207b76827",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "32221129-cac8-436d-b9ae-5a3f42a68616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1354a8af-bfd6-48b3-a0aa-83bd29b93953",
        "cursor": {
          "ref": "77b6155d-0e94-4bea-805d-bfd79bdf7920",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8459f077-58ac-4167-bcdd-01f07ba06a7b"
        },
        "item": {
          "id": "1354a8af-bfd6-48b3-a0aa-83bd29b93953",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6f51bf92-8f83-49b9-a7a4-74d1fb715b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274798da-f281-463f-828c-f0d7fa506c87",
        "cursor": {
          "ref": "ccd6be66-0b35-424a-b381-65ee7d05eae7",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ed8a0baa-1498-4ffc-8f13-6fbaeaf9d04a"
        },
        "item": {
          "id": "274798da-f281-463f-828c-f0d7fa506c87",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bd93e227-4b2a-44dd-9742-927b00a68fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c556923-f5ad-45cd-83ad-19b7ce95f9b1",
        "cursor": {
          "ref": "b24d73c3-c1ed-432c-85c6-381fce80245e",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7849dffd-c7d2-4eca-95f4-aa2a6add33d3"
        },
        "item": {
          "id": "4c556923-f5ad-45cd-83ad-19b7ce95f9b1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bad02fd8-d582-4b23-8b99-cdde2d9c539d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc0e987-12fc-45f1-91af-e292d5b9c328",
        "cursor": {
          "ref": "53cee7a7-ef4c-4f9d-b2d0-47d68077af60",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d2124795-d054-4b42-ac7e-9c4309444742"
        },
        "item": {
          "id": "2fc0e987-12fc-45f1-91af-e292d5b9c328",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e187e62d-4cca-40cd-be1e-9262f2a724a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762b0ef1-4e9f-4e0d-be0c-7864353c32f3",
        "cursor": {
          "ref": "17377ac2-cacd-470f-89c8-696b05d955c1",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3b45d450-6bbd-455e-9200-4cd2faaf0ca0"
        },
        "item": {
          "id": "762b0ef1-4e9f-4e0d-be0c-7864353c32f3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7194149d-bb1d-41f7-a421-33395c63a5ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202c27d1-c857-4fc4-bb36-c0aded09a2ac",
        "cursor": {
          "ref": "0ff78c39-e09c-4c06-8e0d-db2f9e2c9aba",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "08e134ec-223a-4807-b531-ace9cb7fb31c"
        },
        "item": {
          "id": "202c27d1-c857-4fc4-bb36-c0aded09a2ac",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ec4321a9-eaf6-4913-8a48-ed846ff55c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7b6e4a-cc99-4740-98be-898535e1502b",
        "cursor": {
          "ref": "52bce711-7478-456e-9ba8-14e89e5546f9",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dedeaf07-725d-4fc0-ae00-c4d7bb66ecd5"
        },
        "item": {
          "id": "dc7b6e4a-cc99-4740-98be-898535e1502b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bdf740ad-7c5b-4949-a2fc-b9fe5f3fc364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1373eb90-f700-421d-8186-a3cf800ee645",
        "cursor": {
          "ref": "912849bc-3ff9-4196-9a3e-81d77607d70a",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "11999c87-7595-4bce-9aa5-c9578cdc688a"
        },
        "item": {
          "id": "1373eb90-f700-421d-8186-a3cf800ee645",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e7dab77d-58c9-4f44-8e72-01f29767d72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c5fda4-56c1-4f86-bc7b-4deb94824c43",
        "cursor": {
          "ref": "130da263-ea5b-4586-ae3c-365f6323edb1",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "382fb147-0796-4e72-8279-301e21e47ef5"
        },
        "item": {
          "id": "13c5fda4-56c1-4f86-bc7b-4deb94824c43",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "83e0cf64-b946-4680-8263-27525dcad1d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227b0a2c-e558-457b-ad4a-e8d83a2e4cb1",
        "cursor": {
          "ref": "5c8b6aed-b2ab-428a-b241-bfc3d208626b",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "89181f68-defa-48de-a03b-f61e090485b5"
        },
        "item": {
          "id": "227b0a2c-e558-457b-ad4a-e8d83a2e4cb1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "32df7b91-da6f-4a8f-a014-1f1a1d15c5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41505787-c17d-4744-915b-31af6707d1d5",
        "cursor": {
          "ref": "b251f911-6e1f-47dc-a39d-40acba21e3b8",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d5726d32-9d4d-4596-a269-46d3453d6c95"
        },
        "item": {
          "id": "41505787-c17d-4744-915b-31af6707d1d5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1bf1ee40-4e28-42bb-b37e-7a8ce83b6cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70802d16-db25-4e9a-9423-7bffd7d24e91",
        "cursor": {
          "ref": "0ae84b0d-6f5c-4e07-880a-06c002485410",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a2f32794-3272-4bb0-ad71-37821fec1aaf"
        },
        "item": {
          "id": "70802d16-db25-4e9a-9423-7bffd7d24e91",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "85a122b8-089a-487d-9e92-090000d57efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59330be2-0f7f-4307-a862-d5c044be97ec",
        "cursor": {
          "ref": "fca845d5-f440-4feb-bb7b-d3bf7aecf7c2",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ad3a5c6f-7b21-431c-9afc-263e175cc0b8"
        },
        "item": {
          "id": "59330be2-0f7f-4307-a862-d5c044be97ec",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4ec62e6b-1a3e-48f9-92f2-1e35f9787563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419412d6-3279-46ae-8360-2eacc012db30",
        "cursor": {
          "ref": "33f643b3-f855-48cd-80fd-66f10f7eb28a",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "67d4c4bb-2757-4c92-a179-85e01649d537"
        },
        "item": {
          "id": "419412d6-3279-46ae-8360-2eacc012db30",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5007f137-7ab2-40f0-a72f-39c4c9d1308b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32f1392-f885-4638-a973-16e247296ac5",
        "cursor": {
          "ref": "938f1d4f-4626-4759-81d4-4cb33488b98b",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "56fd788d-b6cf-4780-bb0e-4b1d4c6dc3fa"
        },
        "item": {
          "id": "d32f1392-f885-4638-a973-16e247296ac5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2576dc19-3e60-474c-a774-49e100bc0b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d91ebf-1933-43e7-942c-f066ea151b62",
        "cursor": {
          "ref": "4efe14e0-d867-4fd8-b44d-3453918b871e",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b45643ee-5f26-4a08-99d6-19539ce9cacb"
        },
        "item": {
          "id": "26d91ebf-1933-43e7-942c-f066ea151b62",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d2fd3f12-16b4-455a-b28a-0c46b679a4ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8390867-c304-41ed-8914-ba90a30d77b2",
        "cursor": {
          "ref": "1ab84d32-6579-442b-8f19-8bb7fa7ef7ed",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f49157b1-8367-4d3a-b2d3-7c048e32bfd2"
        },
        "item": {
          "id": "c8390867-c304-41ed-8914-ba90a30d77b2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "48762d76-bfee-4442-94f4-ad48a5b61f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ecb97b-85e7-4082-a7a6-c43a3a2f3337",
        "cursor": {
          "ref": "5d4097ee-45bc-4f0e-904a-57bd47412029",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7ff2d809-f617-47a3-8356-537596577442"
        },
        "item": {
          "id": "68ecb97b-85e7-4082-a7a6-c43a3a2f3337",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "cf7c3946-7c2e-4b23-bda2-01100ee71d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4902d773-034e-4dcc-9b08-45ed22bc69d7",
        "cursor": {
          "ref": "91e49904-c7cc-4056-be3b-506681e1a209",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0792e46e-7428-4fc3-a249-e509c9607413"
        },
        "item": {
          "id": "4902d773-034e-4dcc-9b08-45ed22bc69d7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "cc8dd493-607c-4621-b563-3ef09c9d9fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe81dd4-83b2-46a6-bf04-e01c2536185c",
        "cursor": {
          "ref": "75bc92f3-981a-4a14-86a4-43375ccff181",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b2afd735-b0d1-4524-8ca7-ada27775923d"
        },
        "item": {
          "id": "9fe81dd4-83b2-46a6-bf04-e01c2536185c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "79e60879-0e9d-401d-96b3-1b87d34d3a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74774c48-d34e-4ea4-9680-fc1dc554f8da",
        "cursor": {
          "ref": "3032661c-949b-47e5-975e-f4c6ac3e68af",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f54b028e-9e98-4e24-9388-9c1816091f79"
        },
        "item": {
          "id": "74774c48-d34e-4ea4-9680-fc1dc554f8da",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "43e1e0d1-188b-431b-988d-265c5d87e1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471b7a1e-2a51-46e9-8fd1-9d001b525806",
        "cursor": {
          "ref": "a2ccff12-0b3d-4b3a-a539-ee35537a3bc8",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2e91740d-1a89-4eac-82cc-b443bd0c971f"
        },
        "item": {
          "id": "471b7a1e-2a51-46e9-8fd1-9d001b525806",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "699c6c38-a7d3-4c27-888a-c5c7e7e68fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8385fda-a04f-4702-bb96-bcf3299f32e6",
        "cursor": {
          "ref": "5df4a13c-ffe9-495c-a269-de5a816c0bdc",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "effa69aa-9d30-4232-8319-21be8f8ee712"
        },
        "item": {
          "id": "a8385fda-a04f-4702-bb96-bcf3299f32e6",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "534c3522-9c19-487a-8b80-05f470405689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0ad0b7-0b64-4932-a572-2357d3b15736",
        "cursor": {
          "ref": "6fcf4e24-e071-4105-8d94-23db4a79ea64",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3ba7d3f5-c827-4b72-9300-b47a983dea35"
        },
        "item": {
          "id": "6e0ad0b7-0b64-4932-a572-2357d3b15736",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2ce6b778-f519-4c83-94b2-1602011d3168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48e9b35-f221-4bc6-ad29-1233b8161f4c",
        "cursor": {
          "ref": "2dc86132-49ae-40f7-ac4a-2a17f7263160",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3d4c9265-35df-4ecf-b37d-2f5fab51a081"
        },
        "item": {
          "id": "f48e9b35-f221-4bc6-ad29-1233b8161f4c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "067d2075-b652-4586-af87-bcd48a3f5d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a776f56-5ca8-40ae-a6ff-5ee63768f4f8",
        "cursor": {
          "ref": "d7caf35d-c50d-41ed-a3b6-1b6e6edb0ce1",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "67800576-62be-468f-ac5a-d10675315210"
        },
        "item": {
          "id": "3a776f56-5ca8-40ae-a6ff-5ee63768f4f8",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c22834d4-a43e-48c6-901b-4ae074b1a407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950e5329-2502-45ee-b477-07d781e24c29",
        "cursor": {
          "ref": "aaf5d45d-dab6-4fb4-bb9e-abc7b894654b",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d40ef498-ad6c-4c88-8d31-456468cb949d"
        },
        "item": {
          "id": "950e5329-2502-45ee-b477-07d781e24c29",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "441d80b5-9354-48d9-861a-322fdd479fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82608529-9051-4d19-8056-25e5c1eb5ef4",
        "cursor": {
          "ref": "fd9f9b1d-0370-46bd-a099-f3feb192c035",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "822fd57a-dfd2-4f06-9312-3ff3f6fa0284"
        },
        "item": {
          "id": "82608529-9051-4d19-8056-25e5c1eb5ef4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d929715b-ac9c-464d-ab49-ce56601611e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8329d3-dcc1-4398-8ec4-3e947eaaac3a",
        "cursor": {
          "ref": "205f53b9-6d3f-4ba3-8bc2-56a10933f2f1",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1be5558b-3829-4c2c-84fd-06cac3566b0f"
        },
        "item": {
          "id": "5d8329d3-dcc1-4398-8ec4-3e947eaaac3a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c9ec4df1-1e25-438a-aeb7-b1908d364655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac296166-e7cb-4a68-9ca3-647766c34f74",
        "cursor": {
          "ref": "da0317ff-6c88-4208-a841-da9954906601",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f26c1920-5026-4df8-b84b-4ac72b54d836"
        },
        "item": {
          "id": "ac296166-e7cb-4a68-9ca3-647766c34f74",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e30777c6-6704-48f0-8b93-eb4ccb66b20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82190ea1-bf56-4705-b5e0-8ecab8fabfe3",
        "cursor": {
          "ref": "94ac0960-e62f-4c47-ac76-6e4d957952d1",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0382c4c8-6bab-4999-9266-b84ede8c9f3c"
        },
        "item": {
          "id": "82190ea1-bf56-4705-b5e0-8ecab8fabfe3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "22bacad0-9f8a-4453-821a-4a51d4bebe9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58923420-0d72-47b8-a6ff-e229b518f009",
        "cursor": {
          "ref": "a004efe3-a52f-4b0d-b4d6-fa3140c8087a",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4e5d78f1-3100-4925-b51a-7259ae61bd13"
        },
        "item": {
          "id": "58923420-0d72-47b8-a6ff-e229b518f009",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6314d39a-cced-4dfb-8e81-92b2704e72b8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73603fc-b385-4762-80a2-776981b66f5b",
        "cursor": {
          "ref": "61f8b17b-267d-4ddd-ba2c-8da24a647d6c",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7323a1bd-0a2e-450d-bd51-02e43cfd7d75"
        },
        "item": {
          "id": "b73603fc-b385-4762-80a2-776981b66f5b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9687042b-7ea0-4c87-9795-befe759b7d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "7e70fe18-f9c1-4534-9924-1f4bc6d30bae",
        "cursor": {
          "ref": "444cf736-6b90-458a-8f70-ce654b4653a4",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3a7cc386-10fc-4dc0-a052-c2abd393a9d4"
        },
        "item": {
          "id": "7e70fe18-f9c1-4534-9924-1f4bc6d30bae",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f7b3cf9c-2371-4e43-a9f3-00378adf842a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "aad0c088-d670-4d6c-80e7-d48bfdbae502",
        "cursor": {
          "ref": "e78ac661-e3fa-4b40-8c7b-0184fb727355",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "516637fa-81be-4d0c-8f74-75f7c27f18cc"
        },
        "item": {
          "id": "aad0c088-d670-4d6c-80e7-d48bfdbae502",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "46759b42-05fd-4582-8155-a195f5633086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "260f86b4-8414-498d-9a99-acb72a20eec4",
        "cursor": {
          "ref": "dbc79a79-f956-40a6-a9ee-63b2328082fc",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a8822f00-2b18-4eea-a9c6-4cb351da0683"
        },
        "item": {
          "id": "260f86b4-8414-498d-9a99-acb72a20eec4",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "260f86b4-8414-498d-9a99-acb72a20eec4",
        "cursor": {
          "ref": "dbc79a79-f956-40a6-a9ee-63b2328082fc",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a8822f00-2b18-4eea-a9c6-4cb351da0683"
        },
        "item": {
          "id": "260f86b4-8414-498d-9a99-acb72a20eec4",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "260f86b4-8414-498d-9a99-acb72a20eec4",
        "cursor": {
          "ref": "dbc79a79-f956-40a6-a9ee-63b2328082fc",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a8822f00-2b18-4eea-a9c6-4cb351da0683"
        },
        "item": {
          "id": "260f86b4-8414-498d-9a99-acb72a20eec4",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5599ae10-c886-451c-8f7a-f79ee35c1884",
        "cursor": {
          "ref": "c02b56d5-40e1-4588-b5f5-170ab5d874f6",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "be2ea248-7d2e-4477-b5f1-c68383d5d499"
        },
        "item": {
          "id": "5599ae10-c886-451c-8f7a-f79ee35c1884",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "294f274a-a828-4ad5-b21f-ec09d2893953",
        "cursor": {
          "ref": "9d978ac3-706f-4bb3-8f22-1b4d594eb738",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c5d70531-7327-483e-a5c5-328b25595064"
        },
        "item": {
          "id": "294f274a-a828-4ad5-b21f-ec09d2893953",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "294f274a-a828-4ad5-b21f-ec09d2893953",
        "cursor": {
          "ref": "9d978ac3-706f-4bb3-8f22-1b4d594eb738",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c5d70531-7327-483e-a5c5-328b25595064"
        },
        "item": {
          "id": "294f274a-a828-4ad5-b21f-ec09d2893953",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5d392720-d420-43d9-a590-4de13637e903",
        "cursor": {
          "ref": "21a5f9e5-5892-4888-b9f7-86cb913dce81",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d039db6e-8ae4-4eda-bda4-d2081cc26641"
        },
        "item": {
          "id": "5d392720-d420-43d9-a590-4de13637e903",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "ae556eee-9dfd-4ee4-91e8-c339dd88f79f",
        "cursor": {
          "ref": "497f58a2-1bbc-4720-b41a-551901865be2",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fa27f94e-8fb6-42e7-b77c-0b7a6cfa80b7"
        },
        "item": {
          "id": "ae556eee-9dfd-4ee4-91e8-c339dd88f79f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ae556eee-9dfd-4ee4-91e8-c339dd88f79f",
        "cursor": {
          "ref": "497f58a2-1bbc-4720-b41a-551901865be2",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fa27f94e-8fb6-42e7-b77c-0b7a6cfa80b7"
        },
        "item": {
          "id": "ae556eee-9dfd-4ee4-91e8-c339dd88f79f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "96f3f2a5-59cd-4718-aebe-4233ae5cea35",
        "cursor": {
          "ref": "b33f3752-0996-49fb-9d9a-d9fe13a3c936",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e012d24a-6d32-49e2-95a2-b6009dc8cd2a"
        },
        "item": {
          "id": "96f3f2a5-59cd-4718-aebe-4233ae5cea35",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}