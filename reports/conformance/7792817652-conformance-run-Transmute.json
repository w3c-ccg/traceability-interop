{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fefdd7ab-af33-4b83-8236-f8dfd9f0c1bb",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a7fba86c-aad8-4f5a-a9c7-a39e89021dfb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1ea34e04-a4e4-4050-ab81-199535cb59c3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a7918908-47cc-49a9-9ed8-8c6c3e892366"
                }
              }
            ]
          },
          {
            "id": "cbfb3c41-92aa-4a5a-aeb0-17da06c2a139",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c703916-7c24-41e4-84c1-91bd950023e8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2bb57218-310d-40a5-bb2a-3d085e47aebb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bb54b0bf-0b1a-4898-a9e5-b78e5b7ac672",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c8259d85-8fb9-45ca-a51a-1021af481765",
            "name": "Positive Testing",
            "item": [
              {
                "id": "84cecf0f-7b92-4209-82e9-ae49c36d2e4f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07022a9c-0190-4db6-90d2-712c79ec3ce0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89dffe81-2bb7-4d1c-b5b6-8351854af485"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd19dad4-01a6-4252-8cab-77455b354b93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e9f75fe6-f1f9-450a-a682-5a3e3b8d4c6d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "451adf36-247f-470b-8d9f-1883a81b7654",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "80f41358-1fc7-4de5-8014-aa74790721e4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56782c30-fb5e-494b-85c8-489629610965",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6b14cf7d-048c-4ab0-b9b9-7c460334ca4b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90e1ae4a-9b7c-424e-bb80-9f184683eb5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2458ca66-0f05-4f46-9d8c-02d3f9ffabc1"
            }
          }
        ]
      },
      {
        "id": "a284016a-0b30-42dc-93a0-bb0877e5976b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9b20d4af-fc38-4f13-96db-15e9838d7300",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0cc4742e-d6dd-476f-ab7a-58b4d7f40935",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "54384349-1d69-4c0b-8869-f606b67e5bce",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af98e75-876d-4ed5-88ab-11ee46747b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30c14484-e7f8-43b5-86ac-49f95e0837c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9043fbe-7e1b-4c98-b6a5-df51051c6edd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d2291a-a560-40da-b517-6cbf00d6fcf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97ad70c0-8595-4b3b-b5a5-710e6a4b9516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e723f665-d1d2-4141-a506-d167540edf4c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b417911e-c156-4fac-8709-241d0bfd6264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa3ba389-7198-4979-9b0e-1e4bb0daee0e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a3eed039-80ac-459a-9a3b-eaeba98a601b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4b8b32ff-301c-4aed-8a1e-e07bbeaaf168",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a98f22-f323-408a-be4a-afdd79135722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d297c5b-0712-4487-9e1d-9cb9822dbd13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09af88b6-2617-45e7-9262-5326b9bc2c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a7007c-8590-49e8-b50d-193e42c77f35"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3677cf3e-4ce8-4667-8df2-fa83ae5993cc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6cda2c77-71b2-42c8-9a8a-3936fd2a20b9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "463a42b1-2134-4dd0-8c11-939897b91c3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0e2e2495-a9c9-49a8-b4e0-25b6facf6474"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe3eb356-4def-41a1-a40f-63a79ca58411",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4f1c74f9-d666-46b5-9d2d-bbe580464e84"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20fe0459-fd17-46c4-b170-26b42c428103",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ad68a54-2041-4101-930d-04b9b3f57615"
            }
          }
        ]
      },
      {
        "id": "6cd3f0fc-aefb-449c-b160-4fe8409d8614",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8f7a4e8a-7031-409b-ac7f-3b079bd95b47",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f5fe4ae9-8373-4f0e-9586-3ca3524b9bac",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "817512fa-7874-416f-bc16-deb7a6a6cdf3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d819c112-f299-44fa-9b25-186463509a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde3dab1-71d8-46c7-b0e9-a6e0c8bb530b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac44608c-7e82-4b0c-91d8-2e4b80d77d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f02f807-fc90-4652-a45e-c744b24b8eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430bedd9-bf28-4f79-a67b-de4e64deafaf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fda3ef-c895-4040-ab22-8e5828c09450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3efd5aa-3443-41ad-88b3-3291acaaa1b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d12b857-879f-4714-af76-ff1b6e3aa34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "001708e3-0c77-47e6-8d39-f75f56e3898e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9c977d-002f-4731-b4b4-f612792e4977",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb75e74-20b4-436a-a169-937aee898e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23393944-cfa4-4dae-a204-276af5ddfa66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41b6c93-33c6-4f49-a93d-2876cfa4fb3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2aee0329-cd60-4ddd-af51-8e245b50022c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4efec5-a8ad-4a17-ab91-c60756c64829",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1011a49f-0780-4b0b-9b7c-ee1a1df6ff60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc42e317-6ad9-47a0-9dc6-8149e8bfce87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b083f030-a0fb-4268-922b-390ab3a791fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62b7435f-6561-479f-be56-a67ef7e4f11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9cf531e-ab96-4891-8656-a44e065f8567",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7c70ca-f1a9-4cb4-902c-8a7bb5793479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e01f6b5-508c-4aa3-8bd6-5e248eb58d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd678a8-ba91-43e8-9379-d823a368367b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccdc2434-9064-4065-8d23-b28c5c6f0a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e25a24-82d6-4e41-b134-0299782924bd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254ae4b5-7f0b-4c74-80d0-42633e72583f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ce5c48-fddd-4f39-a880-390c02809e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d589707-d1fc-4359-8bb6-0d49a0820ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f241c6a7-1e2b-4109-9d9a-39ffd9ba96f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa8fd5f-baf8-4f5a-b691-ba6f072a3fd0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c058de3c-b208-4d44-890c-f889004e4276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8958184-feb4-44c8-b51d-5875b04e7281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5310f3-45d7-4b56-8782-5228ca3c5e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdb12f79-b2be-483a-bd12-e05fc4debe95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488644f9-485d-4054-830f-2e2625f04693",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a8a8fa-4e2d-4a9a-801b-dee2e12c6ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c2e3c1e-a6b3-43f6-8292-273d905938ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae07390-1fac-48ee-b9d3-a26908a2e157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b895d1ec-c7a5-4944-937e-6b2e039c628f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db807a8-b6a1-43bc-a601-46758a673a81",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527623d0-a83f-4bc3-8394-595ae0cabf37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391015e9-495b-490f-905d-d1148882089a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31a4d17-101a-4907-8d3e-bd2c097ba5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36ed18e1-3f20-417a-9ea2-62d73d16292e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13aff413-e3c3-4504-9673-12a600d8968a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69e6677-f5a0-4132-aac6-2d22e33ae257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617ba431-38ef-4109-ac97-73226291fbb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0954f0b8-f1f3-4d51-beb6-3d4e6c97d646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed9e8d0b-cc91-4506-8d7d-4c889bbe59d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5717689-17cb-474b-b986-1ab7808d388b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a0dcdd-6022-4afa-83c2-58c0984d4129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ebc8437-1950-4c04-820a-6ceb983f40e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cdcdd6-ec43-46ab-ae64-cc58c835c20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bd443e7-b425-46b3-9490-0939316a1eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de033b2e-6052-4c9c-9689-1fc318566c44",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa68e60d-4e42-480d-8305-8c779955f33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c356964b-4b9a-418e-a617-14b63e84c9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accb8550-90fc-4fb7-ad37-76d8d50e2a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3744b04-3687-4fa8-844c-0593246a2710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a3ff85-1191-4873-892d-f9ce885cc003",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebeb0c7-f4fc-4018-a6bc-7b2dd91181e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "324084aa-e168-46a6-96da-faddb97a31b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b445d09c-0943-40e9-b07f-1ea9be053ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e6511a4-d380-4f8d-92e0-614f8333849b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9196938f-2738-4c42-9bf1-f354de9252d0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79d664b-f158-4855-917f-41104c1fb0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1618ec08-3ebb-4319-aff3-330770f63110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f184ac2-cb11-4378-8feb-855a20c54235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76a6447c-39f5-48f3-b2ce-3aa55dd88248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6ab6c7-3adb-4894-9377-9a88f7a16878",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372ed367-c92a-4222-9c42-12e20e5da6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b695d9-b38f-429a-a357-fe31ce189895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e58eaed-bc01-4e70-b173-819cf9bf3451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6e3b4ac-a046-4362-9e74-8de38fafdf6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0cd97c5-ee1e-49d9-bee7-37e7faec0eb5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb971d5-b0cf-46bd-a328-63709baba413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8c4448-dd6c-4b06-805e-bcc49abe3ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b116c1-a2c6-4fa0-b7e6-0ce305df5c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52cbc14e-e1a2-4505-b3de-0f32304cadc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b6927c-6923-4e89-8355-d7ede34fd6bf",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d798acf-7d1c-4d93-b402-db7897635f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3017d0c3-580f-4915-89ff-36e81b15dad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9494ec64-5280-42c0-86f3-04f025e2a549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78a9201b-1c0c-40df-adb7-9a66f5670f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0798fac4-423a-4626-80d3-ed69cb055e6d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3e80ab-3073-4ed2-b84a-ef4e06f0b81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e504ad9-7ad0-4f03-8bc0-74b75443e8fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274e8fae-f96d-49ab-a547-debca3eb80d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f7f788d-e075-4eee-a589-bc0dcf31c446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bf266a-2688-49f1-9fde-a08ae01ccdda",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc0c17e-2bb6-49c6-9df6-225a51c75fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc8ac51c-6d37-4cb7-986d-65fbdea6ad75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382c6e96-ef18-4613-a936-2f9235dc1303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a6b9d0-6967-4f16-9af3-6e445d204e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc4dceb-a523-4f14-a0ce-d0f1243d5166",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89359654-bd3c-40e5-86dc-0cb15c471051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be732df6-cf73-4ba3-bbbf-a133cf66726c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b66ff0a-9d80-4552-9294-70545e20279d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8abd3396-dd06-4ef8-9fd6-60d3d52a96d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef74be13-6ce8-404b-954e-d2a5dd64a698",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7713956-e36e-42ce-9a15-d8ef9a0e00f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720af5a0-9123-4e10-a672-94bcc39b153e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7a74d6-152c-4488-994a-8d4699b37aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c703019-8df0-4a84-a2b2-9d8a24bf1424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e76d52b-6e31-4261-8912-5588c577d0d3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dacae56-e9f8-49a3-8573-338863b400e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e1c401-dca6-4066-b6e3-e9ed863a8b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957f7800-8845-4838-918a-5a190fc2ce7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6281f21d-14db-48ee-869d-5c0fff36eacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efb3764-9f9b-490a-9ee8-c97148f974c5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4308e92c-fc86-43e3-b2e2-325745b55350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6658b687-5c58-43ef-a09d-c92fe4161c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eace7ce-4f3e-4e11-8c77-cab460c0f28a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72b81a4d-683f-41e1-9fe6-91473b5cba02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dca1c1-15cb-4ab7-b37c-3dfe721d7cd8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049c2288-57f3-4ce0-803b-da1c057fe745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95426e28-22c5-41aa-9ff7-aa8f2d0354e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c82de3-6957-42c8-b0c9-710c12a3e302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f519cfe8-21db-4483-8a3c-b23f075e0538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf7bd64-ccbc-46b8-a2ca-f22c5579e3ac",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5eb824b-a6ef-48a3-8677-0444654f3ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c2d29e-4b92-44ae-9319-a95b641aabc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d4e7b2-86a2-4e27-ae3f-c287596bd3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e239740-5ec0-4cec-9d65-df9607234e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c33946f-dd05-4eea-aa71-40798be5eab6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfd32b5-3656-4664-89b2-e899249314cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed218f0a-0a69-41e8-87be-3e0256e9b9cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521b1c07-6fbe-43d4-939e-6678beed37e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "683ed2a5-41ab-4691-ac5a-02c85a750eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05b716c-430e-4d38-aec2-5403aa24767d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cf2531-709c-47f7-88a7-c58fb5405451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a900ca-75e8-4fb1-84f4-4e2e8dc26df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3771d0f1-d686-424e-b667-52719912eb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7670a8c-1295-46aa-9209-6bd040c87b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e16f744-c9cf-451e-af21-1e965dd7e72c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179ae5b6-e604-47fa-8926-07109c7b92c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e08ebc5-c888-4b82-a0d3-c954917876a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529d2ee2-06e7-46c9-8766-3ebf25258b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7884be9f-a94e-45f2-b92b-0c250107abac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98238c52-b45f-4425-994a-054a3ea8a9f3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a970b1a8-e41b-44b2-a124-3d1c27fdd4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc553661-e21c-43af-8358-1ef0cfbf2875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce23ce6-98f2-40ac-89e7-a8f2bc2f3143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4561c44e-1de1-4d0a-894f-8d27480b6c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5c154c-6bf6-4e9a-92ad-f0604babc4de",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fa08e9-af48-4a1e-9a7f-03016432a1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7669c621-1152-46e7-be09-57d0ce35584e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa3cf12-b80c-4398-b383-b4776512c515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a46be82a-c9e2-4aa4-bc93-c09e2b75d58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a6fbdc-3869-422a-b79b-092245098be9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5f1e2c-3684-4fd1-8f41-ebb7fc138314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a8864f-9b2a-4910-956a-6b7718ad5b55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d03dae-0c4f-460e-81ba-dce3bb5afb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0e9145-407c-4086-a6a0-b04858789fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eeac302-2fc2-4b1f-ac21-3dcfcb011ced",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa5d828-dc6a-42ac-9107-d26836a3fe08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a6d14b-c20a-4c42-8a0a-d0ce24b2a7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42df38d7-f1fb-4fa0-be85-2cd36c4acf98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1140712e-f2ed-4eb7-baa9-40149516d8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b84d266-25e4-4f78-9397-42257200295c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07925bb-f3a5-4131-8baa-08a5227ddfd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada039e0-e352-4160-8fdc-d03704ccbc1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c811754e-d1e3-43c7-8226-a673cf0ac441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db7c7d50-03ca-4933-84fa-417b3578552a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66091f4f-39b2-4f72-a736-cc98ac289505",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74743b9f-a5a0-4fad-9450-cfd064b1ed0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3aaa207-7194-4766-8e18-db48373f8f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfee5c1-b11b-4cf0-9096-0edf412ec2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "874c8be2-fab4-40e0-9e32-a597186f10a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1615689-e54e-4c41-bc98-1d18426984fb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6194143-514e-4085-94b8-da260a245ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0bbd3f-2f20-4386-bb05-0fa886596fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b786b347-8cfc-4842-bbb3-e3034e2cc189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "88562a98-c40a-49c9-809a-535775b9c79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facb5d9a-d5cf-48f8-ab8b-ce9488bbb5ab",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a541433-9676-4a8a-bd5a-b3c71479f54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c619637d-e3e2-4c91-bfe5-0c0d6cc511a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3eb2381-e935-46bb-8534-5aa58a68764d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d3d30ef-0dcf-4e3a-b6f1-a4b3627fcd48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228efee2-579e-47ca-af7a-71be8e195609",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f7018d-2268-4e76-bf76-f99612814c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e986fa-d90a-4a0b-a700-a3017ffc0fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b720a3a8-d9c9-4732-a3c8-182a25cd15d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38a83366-4ff5-48b0-9314-12033ecb305b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842f4065-aab4-4bd3-b9d7-0417ee1087f6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed10921-ffd8-49ba-a12b-d7871057fe0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1f017a-d263-4009-8c2c-1b724cbb738e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5491bc79-0418-4a90-b1e1-91d333983b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f461dfd-b231-4c3c-8d39-e7675a6a044f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5293114d-c29a-472f-8277-4c666cfe7b4d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c493c2-9b83-4855-a438-3dfaed9d8e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "382396f5-9685-43c9-8c6c-295b01b49ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f031f435-84f5-47e9-8f36-294aebab19fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7585abd5-8412-442f-8378-8de3f38fb6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d80895a-3a83-471f-8899-1f78d433536e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c767bd69-40b4-486a-a6a0-95b8d6778557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b0630f-f844-462e-bb01-a51e32e0cacf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660dc628-f993-4b5e-b255-dfbcc57541f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e836d438-6c5d-44a0-bb2b-4742641a2f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a3464c-4c4d-456a-8fd6-e6bde80bb83f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0715f30-a668-455b-b6f7-59b2c02b9445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ca0ca3-e006-4c3f-9106-b0efb37ba819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77287313-e6c2-43a5-945f-482810246ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c5308f-f012-41a0-9f5a-561764d726e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf41fd07-ae19-4f97-a161-11743c5fee4c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558cf5b3-7b85-412e-b030-e8fe16578515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31aa561-d9ec-4e20-8923-c4d281d46e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336dd3a7-45ae-470a-a27e-3a75ab500248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6274c8d2-5e7c-403f-81df-de97fed3d8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e658c0-2dd7-4dc8-89dc-033c87367f9f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0880cfbe-8e4a-45b1-a2ff-34a7276d3db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2907fc87-b137-4ccb-8f1c-8a54feb323b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a83065-62b2-471d-a0d6-2bbc8e6322bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e8b02a1-1029-415e-87c1-943198bdab2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380942c8-3d29-4ac1-9322-4c790817ffa4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66153182-7703-4a6c-9a69-29b08210bd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61740be8-9b65-4a2f-b0c0-ec67423524e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e650eb-065e-4741-a7a4-a1808496d818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "51f95da6-b38d-4a4e-90eb-486c322299e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c742f180-d823-4962-b193-3eb33ac963b8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57901864-e337-403c-9974-95b049fc133f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea94589f-99b9-4f5d-aa9c-68a3c6d2f769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b67de5-3109-4729-bd1e-d83f297275ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "135a4920-3d38-4294-b58e-a6dcb6903435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eab2c96-824d-4461-b93e-22abc76eac86",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44040621-4866-40f2-9b9f-694ec643b42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7874514-55c1-49b7-a64e-32eaf13300aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78cab100-3031-434c-91f2-37ce7e59e7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebedc74c-e7c5-4212-ace0-18ea106f05ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4642024-f650-4a1b-8269-021932e99026",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fccc98b-9f4f-4cff-982b-514425375cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5975275f-c449-4eff-895f-4ed66040db06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3097ac92-24b3-46bc-a542-026c8e4225e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01192ae0-5c64-4b3f-9259-33eecbdcd308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82fc711-2dff-4914-bd2a-dd946f3f37d7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6227698d-fac9-4509-bbe3-a1525be359ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d9e385-3449-4ee3-93a1-0e0ee4322d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2928de40-aa13-4bb2-b8f6-f11795271937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e779c5f6-bca2-4180-9a3d-1f897c885ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355b133c-5fcc-4825-8124-90b2c6ddb7c0",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897c7c93-5241-4c0a-bea1-398413423a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53fe6319-22e0-4e22-99aa-2288cd128980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf7ea7d-a428-4a90-8b0a-6cfffcedbab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ed773c-7807-47f5-a2cf-43fe8e382f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72ccfca-0c7f-4b5f-b09d-d6175f659651",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c550d905-50be-41d6-86e4-adf90d4d71b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8189139-1a2c-46a8-b7a0-26cc34728078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d18f914-1d77-4826-bbc9-3a6bf8569e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b343046-e2c3-43ad-9b2d-fbb2f0f1a65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f560b7bd-fb4c-4abd-81a8-3f8a7f2b8da2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8af9527-55f1-48f7-89ae-926837f73c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be851f78-44b7-4088-b14d-12e8f0db5617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a4e76c-c4d3-4cbb-a479-d7592ea2132e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a867e0-ee7a-44b0-95f7-065072338e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c47fa04-4058-4c66-8d49-ccda51c9d770",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189b4124-f644-46ab-b457-cdb1e3b3f777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24cb11a-1a92-41cd-9d65-24097f314c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2523ca0-21ae-4f72-aa25-940080270236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0aaaa8-e660-48db-be8c-34753fee9a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365a390f-60b1-47c2-add9-354cf5828e5f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c16e2c-198b-4059-9f57-2dd29f502f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6327da82-1ced-4498-ac89-3072d3772691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6627e2-c59b-46c2-a8ee-0bab42053320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfdf5649-b319-485e-9d19-47580726e26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273b14e3-d331-4674-9932-d10f76577a1b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3998f061-3389-4ce5-81dd-eb0eab56de3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833beacd-fe73-41c6-aa06-acf92cf14f0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd679d7-07a2-4bd7-8748-8f23f451e616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88b82eb6-a266-4372-b041-08ff4ddd6f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487d457b-495c-4796-8d64-e834e672bf0a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8dbc60-78f7-41a3-818b-31be002ebf6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d6df4cb-5116-4270-aa43-8d5ea75c8d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97776d49-fdf4-498f-9a3a-024708e3019d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ced0be05-d87e-4109-9068-aed6c19e3182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497af808-b6f0-4bb2-a65c-d81c03a5708a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b316f4-e25d-464b-a7c0-9069c35498c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5cc84f-979a-4b03-9e5c-67baf3e1fd0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79ad443-547f-4602-8ac4-f6677bf18f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "73ec580b-102a-4e92-b6b8-0fadf6c5ae54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc515102-f56f-47cc-a7b3-17fa3f6280c4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03098c3-fdfd-42fd-abe9-636689ddce3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7601c374-0553-45e0-bec0-1a1d5dc2f653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a35224-7253-476d-a956-aff361ac782b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c81b819-dccc-4d50-ad20-eca954972f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a1f685-b8b9-4e6f-b78a-891e29f07eaf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bf1b74-5c9c-4f56-b87a-f7798b6167bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf80df3-4122-4b5a-a928-202ed877d310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb88571-46f7-472a-afa3-9820dda600a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "359ea9ab-b349-4c63-86e4-f1eb64ab6af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ee4180-83d7-4938-a5ab-f3d2040f86a1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac664b3-5536-4d28-b466-9a2649d8fd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff904f6d-fd8a-45b4-9929-77b06d1d1b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d96e080-f42b-420e-af78-675c590a9592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f3a171-ce2f-490d-8aaa-0dc3ffacf33b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7bc810-d36f-4569-9f43-8363cf41dd29",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2f3511-ea9d-4c49-be5c-71eec79605e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57adce56-8352-42db-be0e-409156be2293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3e04cb-22bd-45f6-86dc-0b1cccda4277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c813e94-f6e5-4ca6-af20-70992198bfd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31e586a-53c2-4ea6-9ff6-6bfcec104861",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20cc2b8-ff46-4705-9bdc-3a2fba2d0093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53891219-c0f8-4dd7-bfbc-a3d18ee69d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda05d4b-6ddf-4116-b62b-fc1ac58da5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "327b77ba-71bf-446d-bdd9-553fc736ed1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34eec88d-89bf-43cb-8657-63f578491568",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d440f3-66e6-4300-bbac-4abd2f2e20de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9303431c-f9a9-4f2e-9276-712141a57490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465226cc-c1be-4dab-980f-4c5198e19fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7f49fa-ec0e-42f6-8250-badcea8f5206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40441def-3203-4b7c-944b-34ea769d4e6f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04855cc0-e4a7-4487-9499-da72740c1270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e416973-a6bb-4786-be95-d29dff0b486f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a184070-36da-4a44-9a69-7658d04422fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f679ac0c-8192-4c5f-b32f-6822ae05793c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a27a882-efb3-44a4-8a90-69e0093f73de",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e295f060-e6e8-407c-9d19-e69e5f6ba8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f567400-8173-450f-8e4e-059582124b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ef4e96-90a6-437b-a190-ef39b58ca9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d240b51-c599-45d1-8d66-428ee4b71200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee50da7b-ddd6-4083-bc8a-aa19d9430da8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55204dbf-3d4c-4c90-b926-fd92898a740a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df375fde-f1f2-4517-927c-9ae9c0ea040f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e500b7d8-d66b-4139-84e6-bc11873059fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4077c0dd-3219-4776-9720-ffac9fd16fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a596094f-0591-49b4-b96a-3c333a9431a1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ff06da-24ad-45ce-9332-d3f8c577cbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252ea0df-a2c9-4213-b1ba-0cd3139eca77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be8233c-fb1e-4286-a13b-26937d8a9038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2722331f-ea9a-4f0e-930f-a6890ffee9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487c09d8-f642-446a-805e-fff5c7646cef",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb475b4-fe8a-4a66-b2f4-aa5f22a5b264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96413b30-f07b-461c-b71b-20b9cabfe556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e904de77-01df-49e9-819b-49769edcb1c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8eeb5b31-c1e9-4351-98d3-3fc876f009a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25584169-3fb7-43c1-ba1c-4abac6a210ed",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4724b172-8e79-4c1b-8014-47a6901e0289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc1e148-a55a-44dc-9a3c-ada1c1408508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e1b938-bc91-431e-8eee-66c0418bde05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "29b472c7-f6b5-4399-b1d7-bfaa3a9498ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba1398a-3f8e-491a-aad6-b7270222b0b2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f89426-611b-4cea-bc45-c22e3c91ce70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54bfb15-5266-4b36-96ff-cd930b5a0c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d1cd5d-fa35-433d-a92b-1b9604f81695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "26729485-33aa-4288-9d36-f27d6cd3ce95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02676259-6f99-4f88-8199-0346bdbd6516",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a553dc-cc6a-474f-95e7-4505b4b4286c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2615e18e-c1df-4deb-9b22-7107ef1f6926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d8eb53-77f6-414a-a625-0c6b30e01196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "528083f6-007c-49d5-a1a9-db6bbc09cf53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef643946-f219-4293-930b-d4dfc92ea030",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb78abcf-74f7-472a-bab6-ed0c14c671fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf03f838-e716-4735-81f0-3975197b9d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48618025-a3f5-4fee-9352-facc9ec48558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5d4562-c0ef-4ee0-bb78-3764c8a0c7d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad2ba4a-0734-4d80-a0ae-f99674844441",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c07a60e-88d8-4565-8af2-23270d5f286c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49edcd25-9a18-4ea1-80c6-53de6e3bc5b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ec2949-8a20-4a00-9a9f-0110c65ac393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af32332a-1dc5-44fa-9924-c52d24ef8c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae28d73-ee77-43d6-b0df-62c32dac9fc4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b6ef98-2373-4912-bf86-a97d4e2e3f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3726ef54-c18a-410b-a758-a1111c3fb836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706a8118-43c4-4fb6-90d9-bdcda94f47ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8aea809d-6930-42fd-a0bf-bb0be66e940e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d588179e-79f5-443d-95ac-ebd6f05dddde",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa730b3b-ad55-4a34-a94b-98857d874d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b3fb37-b6e8-4bc8-abb1-c5d91b3c1c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ba3b64-0e1a-4fe9-9df7-61e3fea39550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c90ee3e5-ed5a-4455-b4c8-51d85928f23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8622a686-1d64-4c5e-93bf-9f03fd0042e5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7b928e-f5ce-4634-a96d-19db60c19241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2755fa21-a8d7-4ade-890e-c3e46cfcd87b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4422f7-b260-4b60-a820-5665c9d276b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10db5a46-fba8-4b86-a326-90d54404f7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a7f92a-e225-4338-a432-c1be4d8f658f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbc1602-0efe-4c16-ace4-90976effc7b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d964a01f-d87e-4277-9b2a-945e72327ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0d66f3-0a58-4cd7-8521-dec0b40174fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "837a3e6a-e1d3-464b-bdf3-18f58660295d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f60355-51cc-405e-8d21-5fca679d233d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf25b69-d7f5-425c-937e-8ad16d8e700e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b0c002-e07a-4100-93e0-cd324e4c0cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba8de0c-ded2-42ae-9962-86b66bb1c665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f492b3a-253f-4a64-bddf-493031538053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02cd067-203b-4f29-8833-86bd65b91e66",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa9d3fc-6523-4cee-9a39-06d6db0a27e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c99286f-b27e-4935-a835-62e6388e7355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4ceed7-4f64-45b0-be04-b656a0d0d3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe904423-be5a-4603-8366-0696cbc2011f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7475ce39-b738-4a8a-bd07-863522809300",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a9555f-481d-47dd-b426-f0861dce60c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8d8b9d-0e93-413c-a97c-0d3c0e8253b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2792051-b38c-4173-a7f7-b72f281cffaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9966c52d-d384-40d0-a890-4dd4e10e9412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98deb146-a3ec-4544-ac76-23dd79da709c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bb50bc-4d65-4496-a648-43010c1884ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09abde81-d66c-4990-8b6c-fc1b9c903e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892af489-e44c-4992-a3a3-83b984788287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ebf07e-ab63-4af1-8165-e8b5db35f09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780d5c14-076a-44e5-9140-8525e1daa7ab",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a342ab0-5916-4e66-ad93-83a3edf70bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bceacd-0ba2-4733-adfe-53a425180061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c307b5-f767-4668-beb3-d679861d4b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d2fb59-818b-42ca-8411-340e296732a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e68c675-846d-4b2d-92b3-9bd9132be12e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73864dd5-4fde-4c26-91ed-2d53ee2e7d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35ea759-9c34-4d7c-8bf1-a64105b67359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298932d9-ba87-4097-bf24-ea76fa977377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db194e8b-d8da-4da3-91cb-fd93096091c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8204e15-a770-456a-a5df-4ac4e261b19f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8457a341-e4ce-48b4-9292-21613e83838b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26aff238-0ce0-49ba-922c-5b820bfd1ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8f105e-f47e-4191-bef0-a9667c7cf102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3156b75b-409d-48e2-897d-b193684613fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ae9829-5ebb-4113-9c42-fd5a204a8cb9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "906b15ab-94b6-4a63-8e0c-b208de6a62e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d974dee-39b6-44b7-b28a-04e110b1fcc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bac220-62ff-4bcc-835e-134b48f02a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc37ee20-1bf9-433f-b9fe-70979b099a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ae6530-465e-424b-95ce-48fbe9be62df",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b4136f-ced7-4466-b3d6-256ab88b289c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8d4df23-0d0b-4a1b-9388-b9b1a6705a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586ba125-07d2-4d7f-b4ab-f76356c8b693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3020b1a7-d44e-4572-a7d2-5e72d1bb93b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e344ec-0aef-48a8-8a07-b1b011827f6f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f53d8eb-d9ac-40e7-84a8-56f025391c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416b91a4-0f8e-4fff-84b4-bd5d5af324e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc497268-62bc-4410-9c6f-48ce90e434f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4548dcbe-030b-4bbe-b81c-8155c89bda34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada950fc-e8d2-45ad-838c-81785df03c91",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1035ecf-3476-401d-9452-f5f06699e7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de233df3-874d-416a-8b00-f82688058d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2e7683-94df-4257-b5cb-0932a8e688a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c98213f5-ede6-44d0-833a-1a0195cbfb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f00ecc4-c2f6-4df3-9f84-26298ad42970",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a70cb4-c741-44ee-8255-e88f4dc2ed88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300d98a0-fac1-4e18-913e-159bd9638e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ef24b3-49c1-46eb-b585-ec549370c929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec60d2a-e8b2-4b61-b287-a566ed3f03e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7ce3d7-4387-416e-a19a-20ca5394e96a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07f90b7-93d3-4909-b998-11d675231f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b6bd37-9c55-4622-bd14-c556ad4a7af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66de2d35-c524-4f38-9a42-0a9b2024b243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d013c4cf-e726-4b5a-b422-8dda27dea9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df3ea0c-68e3-41fe-b89c-3b4b3530d0fa",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab575e3-b263-4e09-bc49-2e2bfdf4095f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164da04e-9908-49c3-8943-22ead9046e10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe80f139-8571-4d5d-91eb-952966788ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba82e4e-b534-45a2-810b-9981b5d24aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea50cbb-830e-4213-8722-d4bf03c717b8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c4c70e-dcbb-4d6d-af06-0875a158b38b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd3a22b-ae3d-4c1d-8534-c69ea007e882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a540ad69-fd81-4370-9923-574d2a5823ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "82e298dd-7906-4f07-8484-14706446db90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a0c1be-28a6-4eab-a96b-25e6ca603a8f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc1c69f-6317-449d-8dee-b47b627cafc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "efda003f-3260-44c7-be2b-df34d9e0a2aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b1ff29-ccbc-4c9e-83b7-ceff59b8edd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae6b09c-2759-43a7-b04e-ca820c113dda"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b2022172-1ea0-42b1-aca6-83564c403c08",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "01178058-4079-4ff6-8b57-90f58a70ac8e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8319fae-3f79-4892-aa20-13d1f4eaad48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9325938-fa0e-4990-ba72-5d9e5c831b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292363e7-a953-44f3-a74e-c4e3d0c7c242",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be0c9acf-a106-4a6b-b403-633479d98e22"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54cce34b-b1d2-4c6b-940e-15b534f55acb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3722e568-53ff-4d8c-a48f-be7662cbd852"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "108269b7-f496-4306-88de-9799e398caee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f205aa82-a0a4-46a2-814e-bd8d9c1ab15e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ab81aaf5-4ef8-4d5b-94e5-65800a2de260",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6dcb2a81-49ad-4357-864e-43214fabd96c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "88dd0879-b36a-4703-a939-9babd25a74a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a37871e-4284-40ae-a2bf-68ba72d61da0"
                }
              }
            ]
          },
          {
            "id": "78902ed2-2b0b-4125-b222-e1b7fde15e6a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ae032e72-1597-40b0-ab92-011e64f9c9f5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5edee01d-4ae1-4f03-8bd6-428e39d1c8ad",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac177c2-3cdb-48c6-8f83-6a72acfe0fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b57762af-5cd4-4d6f-ad20-84fd9448d58a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9945040-8384-4af6-ae26-1ebb9ebdd2da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34252e11-27c7-4c29-8558-9b493719edd7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b6436934-16c9-4659-be39-6560102735d9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "abaded32-af2f-41e8-95f3-50183c994e01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e4f7389-020f-4fe9-b3c3-dcc18a011b4a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f612aac5-410e-4cf0-9ef6-c167f71b5f83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c2531f1c-53c7-4989-a50e-c478635597af"
                    }
                  }
                ]
              },
              {
                "id": "a911fdbf-6e2b-47a1-8bc4-94f54a6622f9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fad6b4b-52b8-4874-8453-130c47ac9d3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "23ef3175-a06b-438e-9961-6d4eb7b2a14d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcc76799-58b7-41cf-86de-e5b6e60dc763",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "51bf86a0-2b99-41ec-9b5d-fbdf688a00db"
                    }
                  }
                ]
              },
              {
                "id": "2dbc7aee-172c-4ebb-b092-e68a8a13ec41",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8161238-0db3-432e-826c-4caa94b1b56a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d631291-4acc-4b5b-8a56-b3d1cb6ae927"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35968f4f-2d5b-42d3-bb2d-7e336a930d84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ce6dd8fd-d76b-4daa-b432-280921d952de"
                    }
                  }
                ]
              },
              {
                "id": "018d41ce-8f02-4118-b0e0-99f8a5a24e99",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "193ddbb5-bc98-4cc5-add5-00f402b4f3df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83a4ce04-9524-43ad-9b82-f3a9c34f7b15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28f47ba1-7072-48f1-9c73-20672ed86735",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7d1f1ce4-7164-4752-a74a-394aa181a968"
                    }
                  }
                ]
              },
              {
                "id": "43faa005-2401-43d1-bd62-a69f0c60f8f5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7042729d-4575-4ea0-92c2-fa8c632eb739",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb7420a8-3014-431b-b21b-67544f179a83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c583c529-5733-445b-827a-d20b8abf7723",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8ae8857d-040a-4cc2-87c4-f7a38aebcb26"
                    }
                  }
                ]
              },
              {
                "id": "3ae057e9-429c-4122-b4b5-7dd33fb33d75",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12b7d011-1ab4-4d90-82fb-2b31fdc03642",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75fa0d5b-7ad8-420b-b70c-b73378be971f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a1f96d7-89f5-46eb-a5bf-8d66d537ee49",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b7d26f1d-63d0-4d9b-aedd-d512afc4d53d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8b41d1a-5337-4486-b1d2-b04c52a6a835",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6b57d907-eae8-4269-aa88-c2c4acea49e5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "68eb5989-a0ee-4436-9534-1c62beb18a24",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57711197-4f76-4597-804e-d91ecac99f27"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b906eb8-053d-48cf-a8f5-c32dd9839375",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "54c023f3-28b5-4090-b676-647a3a1165bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52ef2675-ca4c-4c91-b4b2-5ceb562910c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb5696c2-8747-46cb-86b4-b9031ab7e856"
            }
          }
        ]
      },
      {
        "id": "957ffe45-5c8c-4be4-9c4b-ff8b460dcb46",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ae5e5801-4aa1-4155-aa54-5e94091e5ae4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8952e8d-8e2a-43f8-a1b4-f75d14292939",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d2757899-9f91-4f81-a231-3797e6780de4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7762a99c-474d-47a4-bca6-f21dda995ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f0be43-2f29-423f-b0bb-0d9396f9e52d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c2aa4d-17d2-476e-87fe-284c56aa151e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "19ce0578-d86d-4baa-9b6c-55e6e4245f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0037be-5dba-4160-84bc-5269370c1506",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc92308-c24a-45ac-9ffd-619240f01b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cfd74c-e5f0-4fc0-8cc1-19cf67ad8854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b26318a-6c54-4939-bdd3-7a16e7ab570c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10a1a665-74c9-41d0-9e59-cd892f869db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b34f91-484d-4726-a1f5-b1259e5b5248",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8058cef5-28d2-49ac-bfef-52372b83debc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edb8be3-c02e-4148-ac88-71f08689d84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9991f1a6-d8a6-446e-95cf-8ea165d9b332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d1e52b9-31c0-48c7-90c7-9b034a76e0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a73e07-4cec-4f84-8189-15cdc560243e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3153c04f-b5d9-462f-9ca0-75d72d84349b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03de8576-bf29-4bb3-90fc-7f94ac14262b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af9b19c-063c-4199-8154-41329b4f8ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "572d540b-e65a-4de4-be9c-025ccde63e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b5ea51-8bd5-46ae-9ead-a98bea40e0ef",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf329a2-453c-48ea-bd91-af15e5fad029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79cd644e-2a5f-4100-842d-cfddeface381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b7a87c-da54-4419-b2c5-6a40d744f3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7245a98c-a443-4b49-a5bb-f580edb8b1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745737d5-e857-4f41-85d6-e5627e15c68b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f6847b-eff2-45f5-9ec9-ffc5a2809026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3f3718-0943-4e71-b698-69b88671a2e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b730782-7b22-4ccd-a6ab-92dee1f30d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3450961d-d7ef-4492-a7a8-c8120d3ad160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbdea79-65fc-485c-adf2-6cd9da0f6e63",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f24910-840f-4422-b4b9-22379b461570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc899efc-1038-4b22-ad42-9332357ba75e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca7c328-bd24-4c24-9564-5eb6460dec93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "059abb4d-9230-403f-b36a-7ec8d3cd8875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e2b366-aba5-4a25-b372-202163763574",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03d6fd6-37d1-4673-b8e1-7acf838e4ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a75428f-021a-4175-b982-bca29f7dbc60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d880e9-6e93-4aae-a826-9efb004b8c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "abd16e20-b1a9-48ad-a861-a6853f74a35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e9058e-4c1b-46d3-897e-5ab66c6db2a3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b2a9f5-0db0-40ea-b5bd-ff8b5830ebe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "990fae6b-b1b9-4ac9-8917-035e437d1d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc8b0cc-43b4-4750-8240-a635543bdd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f545229-7947-4c21-b2ad-64490711d319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef629037-219b-4bc7-b548-403e267ad867",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fff63c3-8119-4a6d-bc39-218de8329fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79339824-2c05-4446-ba0a-cb42342af762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97348129-af55-44f5-a1dc-251c0daecd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "709d4551-0594-4f44-88eb-6d0b0e89ef7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35eee765-bf02-43ad-b0a4-12f211ddafc7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c1ec0a-98b9-42b2-9f12-aa6ab307e9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f3b7bc-76c6-4865-9e86-3634ac8401db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa4c66e-6d22-4934-af33-6252e795a71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "703a9e6c-03ea-498a-aab9-81a94877d77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58206b05-4fcc-4fe2-8cb6-46bfff11a701",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7c7d1d-283d-465b-8744-36ac681928fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038ff876-a573-4c10-8e47-b2ad70d52c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373bfe08-57e9-4f85-86e2-fbf0e4b7f87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3337a3db-e164-4f5d-aa59-f6cac05b4b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70034b95-8d99-4871-af3c-f920e1d00cc4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ef5006-e035-4956-a2e8-fd1a2330bce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e9dae5-5212-46a3-b5ac-021a67741454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07273bb4-cef1-4205-be44-b75b05f7b8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "616c6d8e-84f7-4966-970f-4098004eaa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b55a634-9854-4889-a9aa-509dbabaf152",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14367b01-cec6-47a0-b174-acf96a8531a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3752277-dd49-4244-9c2d-8f712e988144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb665dac-155c-4da4-a004-1cf03a822278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5affbe9b-8ac4-48b8-971a-4ebaa0a41eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3747be-0b99-4a77-8ade-3506fb9b7e32",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac9f3be-4add-4bc6-b004-a21c74dfca44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62be5113-9f02-4969-9cf5-cc35552aaaa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a770db-9012-4291-8c55-217fe80b4c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9628da34-c19f-496c-8e73-227dcf34602e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593a173a-d143-40dd-a395-fd6d0617dbde",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056b5f25-f292-476e-a89f-0bf8f9c3cdb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7633536f-2f90-44c0-98d3-8caa7b5e6440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bed07cb-01b0-4b67-aea8-d9ddcad1d52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "71554ca7-c868-4b02-8769-12bf7ece3add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2995bd2f-6df5-4726-8095-18974e750fb9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e20d99f-9747-4af8-b35d-f2da78872106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06fbc09d-13e6-4b40-99f9-8d706f6802d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa21f833-63bc-46ea-8eac-6b48c26e0b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc825c66-0a2c-4e02-a789-6c2f39c509e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5c71a7-57a8-48ac-8b83-3ca241e3f5a0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a771111-c2a4-4438-8505-1b10f42f0a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3321373f-0d45-4399-9be3-48e171452109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b1e167-284f-4f8b-96b2-a7c1226df0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c02ce288-4dea-4550-9f9d-e79fa359e033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b04dcab-e79a-4ed5-a52f-1d426d08e363",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e91a7d5-3373-4496-a473-8d8db8f283b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5387cfd-f219-42e5-96f3-613bde05f434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978d36a1-f415-44ea-94f4-88938645ebc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "984e046e-e1fc-47f6-8da8-33a422cb3de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24d7d74-3788-4570-8961-9095a75278ca",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8544f1-acb4-4b38-9294-21214f6ea71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2abe0193-b8a1-4668-b203-5a3f705a84a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00829c5-6547-4711-aee3-bfb3543910f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f73d6f3-a68e-4e2e-bddf-7ae975cc6893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f331d3a-57c7-4772-b13d-235add1df80b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238281d3-c95a-4279-abba-0e1199ab04c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "415095c7-f6c9-42e5-a683-4f4b8847ade0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a442427a-2d4a-4607-bf97-216ca8acfd50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d1045fd-9cca-44f9-806b-d1f07807a218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fd65c5-1fc4-4c8f-b48d-58e49a41e045",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac1543b-8df2-4636-a89f-4b15f8418939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb4f3bc-b1bb-4305-9160-a20b69f87c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8d5fc8-2bb9-4221-8a5b-28b05bf0b22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9241d05-d75e-4a62-9e72-92f7794bee14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ce1a54-19a8-4484-ae38-70a5a71f32d5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f16c38c-fad8-4906-8b5a-e33857a6258d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c128bef1-c91b-471d-8c92-576a8547dd1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452dfc5b-ce45-4248-be48-f2859d8631bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24716c66-7141-4515-bd89-33cd2d3ae572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb09f00-fc4c-4b11-a106-5fd95f9ee72d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924fc766-b0a1-413f-a108-5f9a55bed451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821d995f-4037-45d0-920a-50baaabae787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbbea76-08f3-4f24-b034-7589307630bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efcbc37c-b956-4418-9b18-bc6b26f052c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b989fd4-89df-4694-bc31-76748e36c0f7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93ca795-f241-4250-90be-6e3a6e5b1a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc9dae0-8a99-4754-98f1-1e7684a9df25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df1e06c-31f4-4ccc-afcc-83f757c950c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a491a9d5-7ed3-4fa3-b227-e379af6f0215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea13678-5ee2-4ccb-870f-4dcf012e7b74",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184238ee-76e4-4c28-a4c7-ced305d499ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7656d4bd-f54d-407b-b3c4-877fb1551a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2b3888-cb18-4b8e-b8a1-08c8a0e8dafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "344c0b33-ee8a-4024-9850-c67f7e998335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3692156-3df7-4616-b06a-9b4cb2585346",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d9c3b9-5c85-4c72-b740-560c41ffc268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb44954f-e241-4a99-b2db-13d5eab77ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5c6694-5cfb-45b0-bc23-7351c678ca2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "660ed2d6-ae57-42a6-a915-cf8ded41f997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3001961d-8a79-4bbc-8d2b-edbd92884384",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3903ea4-5423-45ea-b0e3-866d7e3ec74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad6ab75-a3de-45e1-9c32-8e4d36e9bc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b281f6-54b4-4b50-bd85-b44284a1afc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faa95fdc-ce55-4dda-ba99-6c49438d6563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc8c457-6235-4391-8e8e-88b7bf951a43",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454052b9-724e-4572-8096-5ff1586ea340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ed17ad-0d80-4d54-850a-73871c3a8c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4361f570-9109-4c59-9341-3bab0c4f790b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "728c7d0d-9cf3-4349-9bcc-38c71dfce6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a9985d-c038-42ac-9997-53c2483efa32",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce80a4eb-a00c-4623-b06f-b97ab7a49ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2024da34-0bbc-4a5f-829d-f680a27c3fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e420a2e5-d7b3-4248-861f-93283cc2a957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c9251cd-4584-4bcc-b162-b4b31ac3f409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bece47ca-9d2d-4af2-9c11-4854678e89a9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "729a26a3-cc27-49a5-b38f-8e91efd2a368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfed3af3-5a66-4f82-a4b7-3515bf80674b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64338e8f-49df-4041-8ee4-f2f82e713192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e1a04d4-5812-46c1-bca2-18ab95f11803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713f6667-2c02-473f-b11c-676da289793e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8a67e2-9b41-45ed-ba33-fa3023b4e590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa407a9-b300-45cb-86c5-feae5b7971a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27c7211-08f3-4419-888a-d88bb05c616b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6227eb46-5abc-4dd4-b54d-720bf0621f2f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6f8f2843-321e-44c8-a08a-3502706e051e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c7ca116-de82-40b8-a004-948e194dbbd8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ab0b0b-8e9b-4802-9442-5c0bdc27f9f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fdaf84f4-8b88-43e8-8d41-cb8a9e0c33a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "575150a6-f35c-4827-ab45-ecb0bb39b390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2fdecca-0fc1-4a64-8187-02ff47132406"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "178f4597-78b3-47ca-bd31-70af2ab838da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79eedb9e-6596-4d17-bc13-0ed83cdcf1a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae67b53c-d4fd-4677-ae10-be63baf60b34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc2cb391-8b81-405c-8707-de4b23ae279c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3b79ab7-db35-4d77-b6ee-db3994faf55f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c870b2a6-f6c1-42d5-ba03-ebb646be10ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87661f50-de8b-488e-ade1-46d6444d3d83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c828253d-a1c6-4484-aef3-f900d02e667a"
            }
          }
        ]
      },
      {
        "id": "ff6ecdb9-9b50-491c-8a4e-94e8fd6c3605",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "d6fa1488-252d-4f97-9129-935788d6ed38",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c9d6b0f-cfee-4bd7-a4fb-81351d79a6f4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc432a5e-c922-4126-a53f-f8396f5573c5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42cff00e-3a14-4931-a8a7-89c6d181ab18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57298a4-61e7-4053-bfbd-cc742bd7cead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a3b3d9-f1b3-4682-873c-fa85dbd1b82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c20f6638-369d-4b34-ae4e-0d26adfbae93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4eeecc-13d9-4c18-b7d3-57e4b27c81d7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6199aed-d335-4828-b21b-6ee717600211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc85bc8-cc29-4930-8fa0-1524ef9f191e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad387d91-7e02-462a-88df-52d86b924be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f00e0f38-dfed-4633-8232-817dca66b075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7206914-77e2-44d4-afc7-97f99455ee05",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c9b232-2ab0-475c-a9f3-93ab0514b7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49fc71f1-e3dd-4aa9-af4e-699fa4eb26b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19b2052-d23e-48e3-91db-74aa14ca7795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83206873-c5ea-4cbe-884e-4b4e45335c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed1f93e-a267-423d-948b-b8aa733ea3de",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc5a8be-9752-4bfa-8980-2f2f860663f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a63cb2-a45f-453a-8252-a161ad000e4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2101ab30-7e1f-4327-b53b-0d39df7185d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a7c0be-7115-4a9b-9810-e59a60630feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7af4b2-05be-4621-ac95-799709d249c8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bfb938-524f-411d-8f03-43ae0c188a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d979215b-67d6-4bf4-85bb-c2e7ffcb19f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0fc326-fe15-4bd0-be78-09d251b8cb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68353459-af8f-40e2-a73b-d0f508ccda34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb859e77-966f-44bb-a716-91d1a016df8a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882e5ee2-284b-4961-9b87-e7db3e64bba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc39d32a-8209-4044-a26d-7ac3a104b01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b84117-4a8b-4bae-9fa7-11aa38bc1db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31db3a0d-2e1a-4a36-bc9b-f126ddc7d461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1036e2d5-caf2-4883-b04f-7d75b88df808",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d8c12f-67e6-4541-b81b-e6947f40db94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51767427-6090-4e8b-85db-7b6d7b5f5c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b35892-bbc1-49d5-9250-aacc4bb8319b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cff59954-ac44-41f2-beb4-9eb82abb0025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1080daf-00ab-4201-bea5-0109e742313c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27c38d4-89ee-4bfa-ac03-0b608f532017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03099287-57f9-4b33-a76f-eaf8d25082f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb2b4aa-4c97-46a0-8fee-4fac1ee55fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aebcdda3-8a48-4cb6-aa3f-0048af7bb1dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916a3fc4-676f-4948-ac5b-019a9dfb5feb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba515957-ceba-41e5-b669-36c7b933897c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ce19b8-6067-4f01-9b8b-31a7495f8bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f10a00-ce6d-4ba9-8836-3e871b4352ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "341bf2b8-16ba-40f3-b653-46e809687cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1739690-9292-4078-861e-edb261c16ee6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6948e9e3-c497-42a8-9073-8f001b849e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33893c38-9b5a-4ed1-aaa6-58e2dff08b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e743642-e12c-4090-a1f0-ed37c1986fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d2574f2-6a0a-48ee-920b-dfc8386d6072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f93c1c5-fcc7-466e-827f-7a20fedaffe7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce59c9e4-4494-427a-b3a6-28876a47a84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081bb5dd-2f54-4286-8fda-01a5b8a47d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179fe2d5-4781-4336-ae50-e2c781566da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb0fb17-39e3-483d-ac44-e6cfab40e7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7d7ead-fe52-4430-a6e9-309ff97223bf",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9041e292-1589-4182-ab9c-ef1901c1ffc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008127ee-d68a-4853-9d6b-47ab3e95144a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16554310-aa6d-47ee-ab3e-3f8edae6f34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ea5f331d-70e6-4e34-af46-cb97b4ad749e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e40959a-8a2d-44ce-9629-b3d8fa7370dc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231a33ef-d0c5-48ce-9b51-975dea8b4be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563a2b1a-bd90-4341-b4d7-59539c5828d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19aa1f01-348f-4354-acca-2237586a84ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "320e5ff1-09c1-4cb0-8fdd-a4f77e9d07a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066f3e1c-38b3-444f-bbb7-f85208cbb7f3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9c29cf-0193-4b37-a455-51a60927d112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57698b9c-2d4c-42be-9aa4-d0997c516f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae52fa0-5f76-486d-a4e5-46dfdcd95037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "591d1741-96b1-4787-91ad-ec53737a798b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7001ba5-933f-4afd-ab13-b2ca5914533d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09aa855a-77e8-4e2f-9043-2f0d9aade3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f100dfe-3ccf-4769-a2fe-7a03d765f7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9703085-552f-4f79-89d2-f2a15d9a0ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6dc328-bbdd-4e1b-8a73-0232e6dc8af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c31e54-aec7-4348-8e1c-d12594f19fba",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b80e98-5742-4215-ad0b-7193ac178eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f66a398c-dd79-4043-aeb7-83d26ae683e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f588511-5dac-48c5-ab29-2a84bb4a9624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "53b4b38f-1062-4b87-8eeb-824d4984cfb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb4b504-fd78-44e1-93a2-fbfec8f5353c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181beb81-8ef8-443c-b1cd-9e890b5d9c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1dc5521-6d2f-4eee-8c47-ae94319c0d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bd6837-397f-421b-b5c8-8ce31634cf7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "13918c82-37cf-458a-86cd-5ec94aa355cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc59cc4d-4ab8-4df1-9f13-51813422a3bd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e60fed-c10d-43b4-aefc-64ae615392e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8ea6a2-2946-4b3f-b3c8-48eb0e24d7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87bd5da-62ec-43e7-b34b-919a5741641b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "855f3a55-1801-4653-8374-84d287370916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebae051-efe6-474e-a690-f8acaa7ab7b8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d009c46e-3556-4e46-b02e-bf0bb22f676d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5997d1e5-850d-4203-96d9-bac7cc28b852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27277d89-220e-4080-a10b-4686573a5106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ce77df-940c-4321-af5f-a828f8378b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91cc035-5c07-4c75-9345-3adcdc5d8548",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ced5d2-004b-471f-95b4-30b876edfad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cd9c7b-2722-453a-a597-78a891f7c4b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bc7fd3-c2f5-424c-9489-4a0cc2a53361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79e3a9e7-4dea-4de9-8de5-6593eee1523e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aba5546-cd85-415a-9c49-8e81fb6563ad",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a9e9c0-9856-4644-aefb-1306c86085c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef47f19a-dca3-4767-b7c4-8db4e2599a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d65c600-073b-4a77-8c49-895af4719db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee348235-60fd-4261-b6e1-dbb5dad38a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4d0e63-3c04-45f6-9798-ad7952eb5058",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a86f63-72cb-4e86-ad99-4996720c427f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dea4098-8d2d-4fcb-98f1-6c412d9c45af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82aa54e-3b72-403f-8263-74de3f551e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53af155f-21c6-4af8-9693-38f4335ebec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c10c1d7-ce8f-4045-9b25-3887a0a1559b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef1c035-85fa-42f3-9f4d-cddb78b96dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eef5d7de-1086-479d-9661-92f908e7d3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5181b704-3fb0-480e-b11f-23d603db15ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb85e739-e669-4dc6-9d40-57da21379d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea60fa0-3d9d-47f3-87e7-5492342ff5db",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10c46ad-7c32-4df5-b4fa-b09d891d8cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d87056c-c3f2-42e8-b57d-e9848dd38b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f661fe-6adf-48e8-840a-629bb49ab68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7356db3b-916a-4173-8896-168fb230d4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f399b0-5937-4564-8408-f3f6a2d56997",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b057e3f0-9111-459b-93a1-5a2e7ed9b650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0309c491-6f64-465c-a2be-e7644b7e1dc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5eb6c8-062a-4735-9cfb-7932fc8c132b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c27906d2-2d15-4f71-b094-d48a64d5fe64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a833a8db-2627-4418-a811-21828b0c5937",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef21870-e7cd-4349-b18b-b4712d97dd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d8bada-4608-42f7-9d72-cfe8b23b0db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7dc557a-4f2a-487f-a8b7-d15051e2f998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "094edc44-75e8-4735-9c5f-ef7f0f46d41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb9c1d6-a4de-456f-9c5b-0f2bad2588fc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e7ee72-3e4b-4216-b7d5-e6f7c1fcfbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788aefb7-23df-4322-a565-492110715ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1efdcd62-e90a-4201-a273-8d7631f5737a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70e67c72-2ad2-4c20-8c88-2f0947f24c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b20979-26c1-4087-95e0-0f610c9fd714",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1e1342-7d4b-468f-83f8-425a08c4e5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd547b6-d4e8-43cd-b66a-f55dcc54cf8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0662d540-e441-418a-bfeb-fbfe9a201546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9007def1-9177-4b16-b81c-5de4b61209ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b23f2d-e628-4470-b89f-fc10b74a29f6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da92c708-6dd7-4658-88e5-0ba142aaafcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002e591c-fa93-4b0c-b323-e234e4626785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8ad7f7-eebc-4ed1-81c7-ee04d8757824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2550af6d-430a-400e-9e2c-c58ff28d108d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc58bf7-bc12-4dfd-9f6b-2f0e33facabf",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09bd320b-4311-4613-8875-2f465a42ec3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb771a5b-9ce5-4b73-81b0-3c719389d44a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea0b315-26d5-400d-a77f-5c12f9e9b882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac14266-f291-43fa-99b1-8071d0e9d56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14cd6aa0-efeb-4aaa-857e-b78f0de2ff9e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fc9d28-0a92-44e9-99ae-01c5f5ff9261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f743e9-0e32-49d3-b353-130e9452b750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4d7aed-094a-4801-b361-e4f990624d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce2b38d-cdfe-46d6-83d5-3e13a8776c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a86acb6-476b-41e2-89d2-267c44f2e2ae",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d55878-0945-4ab2-83c3-b8e24be5882e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fae022a-13b7-4199-ba3c-4d5c376a7c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80251bff-687f-4edf-a12a-30f38aef0e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a579c7ca-7285-4843-9b10-89a3ad0a5f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70181c9-6007-49c4-bf1b-9e02bfa51ece",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc8b7a2-ba4c-4649-a741-73ae345dd44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08e0dde-3aba-488c-a2ed-75c525163492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f0dd10-4d35-486c-81d2-53e66fcdbee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c766b100-eb5c-45d3-a1f3-b47e3e969b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9385d35-4e23-4523-9d0b-e20d44e40ed5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44e0eba-687a-4066-94ec-971042ac8ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5332c1-b319-4ee6-be97-fa1faa14805c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1e44e7-be49-4a98-87c9-0aedf72ead60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21336ae2-313e-44fa-8fc3-f49ddf454fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "298be361-c2da-4e9a-9b25-4dfbcfe07655",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0182edf-fe0f-4281-8290-0ff48f97f2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea506da-1357-4a54-99f8-e9f14b94b616"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ed38a5-c6b5-4122-885c-2817fc06b65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b309f4b-6b79-489b-afca-f39ce56378a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b282d064-7b77-4f35-a79f-63276cdacb24",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82434364-bb8a-4b0d-94ae-db50ea06da71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba25c62a-9b1d-43a3-b011-81eebfe388fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da708f3a-7440-40fc-bf6e-b2142b7279db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e49a871e-8352-446a-a242-7aea93ca7c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81786f81-f603-48cf-93c3-7da2508793fc",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8310ee43-48e8-482f-b4fb-e787dbfcccf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a52371-4df0-4309-b159-bce825010cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74596268-d2a9-45e8-b8bc-0369f71fd7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91b8975c-050b-4a33-94dd-889f180e4608"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b61b270-20b1-4b83-984b-a0668e6a89c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "870a1b8c-d8a5-4ca7-87d1-f40bc36f15a0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e25239-f6b1-4c0e-b615-b2b044e2b61d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b2282a-dda2-4e7f-8b6f-3cf8e8fe1e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f8952d-7996-49f1-bb41-5edfc713ca97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d6f105c-35bb-4bdd-a10e-82a0a34f2027"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d30e7ff-9e97-49c9-bbc1-0823d557b242",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2383fe5-0993-4051-a7f9-832402250964"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "55d13675-edbe-4e0a-8adb-05acc09cd16e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edb8077a-bbe5-4e3f-8081-f8b7cc2c742a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7a25e1f-b092-4ecc-8149-5eeabd1f39d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b7550cee-7b3b-40a7-af39-5f3cf8e2826c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b372ad89-6f2b-4b62-af1b-d0412ab673d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13109ab2-83db-4733-8b80-5e70b67ed01f"
            }
          }
        ]
      },
      {
        "id": "6269e13d-0df3-4249-9a3c-534c96f75884",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9cedb931-5d4b-40b3-9635-43f6f4aacbf4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b761da3f-561e-47b5-b043-882968ebbfb5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5b2dca48-1d14-4b44-a049-e74b4232c3a5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25172f28-b1e0-4930-9411-cb27dff57662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ecda91-7b07-4429-bdd6-94af6172d8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a669137-1bd6-46f0-9304-5e51ebfef217",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1811b4-5a84-4c86-8764-8243e3360d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a9fc1b-965a-4156-99f6-a1cc7b261443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0354b6d6-0609-4b26-afb2-36030a165707",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cc4db9-6c53-4925-a98f-31975b8b502f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8bc11d-2a48-438d-ac29-13c65a9692eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785898cc-995e-4555-9f75-8d0cf5baefd3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749ce068-3e3b-467a-a7c4-e7664049964d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862712a5-f218-4e8c-8f5f-fb9dc07ec09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf70c92-aa48-4784-a222-7d5101d15636",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6500ba-fed2-4f20-829c-3023a291f21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e5082a-02d7-4318-8603-e18083e1d02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0c40a4-58fb-4443-b874-5242da19c6bf",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90e2cd9-ba92-492c-8acf-a5ca5dd54c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e57671f-d60c-4a75-8410-097f54401a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6808be89-59f9-4a35-8361-cb9953aa142a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f2d3a8-50ff-4f99-9d81-aa73d6330bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dca236a-c4dd-44e6-8fcd-53f5d2c5fa52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cded870-c8f0-4844-9e7b-f3e7b84103c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5dd002-9d88-49ae-8607-fa3b3de2e870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4057147-1590-4982-acbd-8a39764e0e15",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654dc3d4-952d-4228-ba5f-c9099d15130f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7180b3fb-61b4-4f5e-8ff7-e528fd64e38f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6787c684-b3ae-4481-b971-0bf04150dadd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7043c08f-06a2-4095-9b72-9552768ed318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e34e1de-1fa3-4e31-b71e-cc995558fd02",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee4ba89-825a-40b6-a18d-698ead11a47a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ec69668-5610-4e3d-b0a7-d36d014fc061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27fd2b8-f5bd-493a-8d5e-04d0674f832f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db52ac3-af2c-423d-8212-f85faace6647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4c8ad0-06dd-475b-a905-ea2628ac9a3e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885caf88-25fc-4670-a8ba-1269c2575d51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99f1e098-7630-4a8b-8779-2daf6c657a0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2fd299-7c66-4ba2-8136-29aafa52d89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb21a99-4a16-4193-a912-843021a94f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0681ba5-1afa-4cda-84d1-b1dc43feeec7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b7ec67-2532-46e5-a634-df4dd8c5fb6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21cc5325-9256-4a28-903c-05f760f4bf9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21abdbe5-3b2d-43a3-8f20-7997a0edd9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567cc707-754e-43e4-8abf-50c1c0cfdc15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203fe878-8494-4554-8a2d-b8718d501dbe",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff84ac7-fd29-4906-bf5f-00e099f8f60b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc73d13f-faa3-452a-bbb1-f6fe85ebd36b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cf5ab2-2750-441e-a66a-71b04e6b4b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a6e184-edcd-4e6f-994e-c10175a198e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a203630-1f88-4c60-8c4f-86f6690faf32",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4195861-6bd2-4619-8b84-5e4ddb939977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "771519f9-2043-417c-943c-17f1ed652793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86bddbe-1843-4370-a2c1-7514f191d684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5407beaa-a9e3-4b9d-a878-bf338dab281a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efffa9e3-b603-4faa-926b-866a84a2f087",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ed992f-0337-4f0f-bbd9-c00cdafb1f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c68cb38-9ed3-4108-b2bc-a3f4311391e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a8e28a-d8c6-4dd3-aa38-54726317d41f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da682f1-9f00-4892-8c49-692bcc695824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056d9561-2a36-4515-b215-29fa20ce93a2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1223d9f-18b4-4398-884a-71a290b295f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44964c07-955a-4796-a63f-f1c0503c4d12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1fd55ec-ad0c-41ba-b8e2-855f232f1ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ede59f9-feda-4b6a-ace8-610cfc122ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34d000e-63d9-40a9-8b13-f2ba2b9cb45f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3183333-a649-47b3-b06c-3e0cf346161f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fca99e1-057f-4d7b-91bc-b1c5834ec0b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aaace1c-065e-40e9-a66c-d2dc0f040901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c720dc-fd9b-47bf-b03d-5b01dc62bc0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a18105d-7240-4350-b165-8166e6138b2b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49815ce9-256f-4640-bd0e-bc608fb32147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "601dce57-8e36-4c14-bfa9-aa7db5725d16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e642693-596a-4ba6-b7d4-25895c9e5586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d64ef9-eb10-4b0b-a712-dbc8f6594abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8428ab3f-8f71-4d64-9fc7-5d93cde005f3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8336ec3a-3ba5-4ad1-962b-8adf4d365df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5d229e-871a-4da1-9d01-90909bdf6b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "722d83c1-eaaf-42b1-9fbb-58ffaccec8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f5b189-0724-4b74-94f5-37ac4505c16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8a9430-c028-4e12-9151-0a427980d5ac",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37053ec9-8be7-4d51-a3da-4d3288fc7637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2db7fc7-c25a-4bbd-a764-00b0ca8930af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca63fa4-19d2-4f66-bd3c-f12ad00a3938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1527ab86-ecf5-4fc3-b20b-fe3f8ff5ebb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd7e9eb-6181-45f9-be30-eb57d47b741c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71cf750-3d2d-44f1-9ad0-b9b4acd7707d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc758fbc-f8f9-4155-b258-dc3fca7f8e36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2f9e22-2290-4a3f-90b1-31157476b3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10761de8-c5be-42e1-ab1d-d18759fcb058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8978fc6c-6c0a-4dbf-b538-7dec9456bc3b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a171ace-2e44-47a3-96b0-f06fd6d5d589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2326115a-cf29-4bf3-b9f5-f9da9267b649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7083158f-0722-4ca5-aa4b-5b36433e811e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eef6fdf-fdbb-4c90-a7c4-5290d1aaae11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d368d058-b534-4ca5-bb30-f3a53197360b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6571aad-0602-40c8-b5dc-f068a13561bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649f89be-9290-4d56-b994-0d872fe6d1d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5306a2-9bb4-4c11-91fe-f63571f1ff51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d396385f-e305-4d15-be98-2985bff3d56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7be8a0f-a935-48b0-bac3-4440ec5de17d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea239c7-c2f1-4153-a604-10aa19145181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0815b861-ef64-4400-aeb5-d98374e6a0ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d91c25-f087-4222-97b5-1f7d64b39d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04aee26-c50f-40f7-8246-75da48595f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc077ce-24e6-48e4-a98a-514198474c3d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9af1ef9-46dd-4c3e-bcac-ed84e95a4df2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e0569ed-8982-4881-bda9-5e9da671f3f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f5d8fc-ddd6-459e-a3f3-598b5b4fe897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4511726e-7399-4063-bb04-639c0b3b7d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62371392-1c87-4208-8a4e-a6bd90d8dbda",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5630c699-1df4-400a-86f8-efdb2b65528c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e846ad02-dc6a-4a12-8393-167a973282af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6665e78-9f0d-498f-9da7-eefbdcc59f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dfa1d74-fdbb-4276-821c-7b9f92db829e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73aba34-d5ed-4795-9662-d71172031349",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4056aff7-f04f-40f3-aab8-cbce0f2e8bc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bab5ceae-0ec1-43f6-b5e3-6a2bd3af4667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c4ef0c-2dbf-4974-a8f8-5eca942bf507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff7d1e41-92f6-4521-81f5-f79a68e69cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b450f1-b93a-4ed0-b9cd-119f7f50a964",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e9faa7d-ef19-4a3a-b4e1-bf4155fc9e3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0bf0e84-7b94-4b44-b149-6715060f68ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50917b0f-7a96-4982-8c5a-8b94af8f01ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7525cac-554f-4e0b-8963-14d90cfb5f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02df1a30-4739-4d8c-b793-11c9affb1c88",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5cf728-50f6-49e2-8ea2-50330838ffc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a9f914-00dc-4b39-b671-57de06cb40e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10707dea-5fe5-4467-a0a5-1d79dc4d5ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24e5639b-0c40-4102-8d4b-2d88aab56545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a558740b-4003-46f9-a419-dd1136fd67c8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14960f96-f1bf-449b-9a6f-f82f91291e56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb3dd82-9a88-4154-8633-d67ae669b69c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd98db03-1964-4261-86f3-2c7542b8c8da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0006906-ebf9-4ff7-b76a-c8834096ef7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da590a5a-2b18-420f-ba7a-c6abb1914a1c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed88098a-a6b8-4056-99f9-761f5b898149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1a39f40-610a-4155-8872-132c9eb76a40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8cde8e-e94f-4652-a37d-1512dc151c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c936c7-8926-4e42-94ce-a1db619ce853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284b8b82-56e5-472e-8953-e2a90f826c5c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1eb8da-8347-46d6-b287-c9339f4ab5e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf7798da-be28-40e6-b6f5-a34d80b1f417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "033fd7e5-3470-4320-8691-7a6245a0454a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83f8c02-ed3e-495d-bc90-253b98d7cf0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec05a9a6-ce8d-4912-ac2b-b6074dfdbfee",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439c1e83-bd22-4d44-acf0-67f7c7bf5af3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0809a88f-3d7c-4092-8c00-252779d2e850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e5db36-8b80-4e1d-b766-ea6dc2d0bd88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93c1c85-2eb8-417f-887e-36cb545f3117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bd8ca3-3041-4d11-88fc-a4b3fca58b2e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c24f81c-8b6d-4c3b-8534-53ab1a87ac51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c09332ba-521a-4445-b66e-6715fc49b88e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d23fcc8-519d-422d-865b-237f4668ae4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7120fa5d-5d5f-4de2-a2b3-20d7c73977bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8773ed-01fb-4a5b-81de-020c0b5f93b3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6563f1b2-6971-47e5-b889-226086d633a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d385b5c-21b2-4c76-90ec-e054da804a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19ce165-d0ea-47f5-aa9b-419b8d81c768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a576339-1d88-4b01-813e-a606b2755564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912da498-b8ef-41a5-a608-5f82c67de808",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5701786-2b17-492f-a595-e231a5188174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd14e94-53b7-45ba-9e54-446521fc7942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c31c125-cc9a-4c09-953a-8636c3288a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b0e3c05-0ce3-4535-8979-6ae531e505eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451af292-cff8-429f-a898-c7d734184599",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87b281a-7656-4c6c-b59d-24404f43badf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f0fbc8-5844-474d-8b36-3248681c0634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0f0c9d-544d-46b7-a7a7-f41ec89c2902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "861953b3-0168-4b34-9f84-6d8e57c8e0c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2288651e-0d50-41ad-8c97-cca8ac9f8ab3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8575818-3a07-4a05-bd98-262e1c67eb55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae29ccb-f182-4830-955d-61ae02b26b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94280e1e-0c66-4540-aebb-c251555b32d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f866d8-3a46-486e-95bb-c91525af36eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501bd063-7c71-489b-88c9-79ac59ee73ba",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec539a2c-b1ba-48ca-8823-ac9e937aaaa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef86f6c-bea3-4b41-ab22-2077d2be5c46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf20d919-ae1f-4754-8cea-bb84a1f55aa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99675389-df90-4327-b6ad-5c70f37c054d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736709db-3478-4b9a-acc0-28308cd8bd1c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54fc028-c4e2-4ece-88d5-f9ce0525ea74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab98abc-0cd3-4a23-b19f-bab795809a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec27d56-c7d4-4820-8a65-7dc4556c121e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162fd05e-8f75-4699-b402-3cdaed33a59f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198a5262-6491-4649-9b81-6223ae01f836",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de93d42-f428-4367-a24b-b87ba8058838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a1fe3e-dcfe-4b00-9079-3343efececa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8a1de2-1b44-4a51-990e-08c366deb6c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fffd05b3-8eda-422a-a58c-bc5ce71a05d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad613e3-4272-4358-a174-6f7d65a9215b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5fe6a3-7b8e-4e91-afba-eb14cbe9be6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4535620-f039-47ff-a74b-afff00e877c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f94fa59-6ea8-4ab6-a202-18342b074297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bddbeeb-9b3b-472f-bd0f-6e819966bd47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43aaaee4-0bb5-4f75-8e0e-bf6c43d7792b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9077c95c-4075-45ca-a46a-1d9eed45cfd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d5f8e7-d218-486f-9eff-cbc620f4ec2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a492c840-7159-4fa4-993c-662461e624b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac59dfbd-f487-4f6b-bb72-67d9c048a380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5864ba3-284c-4757-bd4f-a213eda309b0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f7d9ac-02df-4884-b48a-66cb2d29be76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c432f5-3fd7-42f5-8e33-a3c7228eb100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71faa30-d3f1-4091-bfb2-b8bb47f24587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ca7183-a7f2-4c22-a611-578ce68aca84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17a9a3a-cecf-4e0c-ba92-c4afceb99f30",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86780546-fa1f-4fa6-8d6c-554f72f26c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe961736-98d7-4761-b7cd-3984ccce08fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad1165b-3170-4989-9f67-a5444d6f10f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e6c4274-4cc7-4c2b-b62e-a00eaafe15d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f2eda8-bda8-40bd-b2c7-ba6953faee4b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cf19a7-5cab-4ea6-9dec-ba9b56e543b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998aef88-3683-41b3-8c62-7c72cfa76c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfaab14-6f55-414f-ad52-f12e572de5d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42509011-6411-4614-a5de-cc207972e63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bb2d1e-22b2-4020-8494-3105ea7c7a22",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71437dc5-a133-41d2-a2f0-c6b509c41ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a510f443-3cf0-4f37-b1e2-3604a830d922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fa6d46-83ea-4174-8f63-42f1328c7ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335551a5-89a7-4d3f-a231-b08b5c689766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563a8560-9113-4a51-99f0-b8def8fbe4d7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84019c1-1da2-4c5a-aee1-a6815bbdc725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1cfb69-476e-4d2e-8920-90e625cf6ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5659e762-e2c9-4de2-9de5-35301b797523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143e36a7-d717-4ac0-a6f7-d30679759656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8328d91-a486-48fc-b6cd-390c55798019",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc57bac5-18f8-42a9-84e9-7484b823f9e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d56bd2-c052-4faf-aa93-6c192d8c995f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab16ed10-dacd-424f-91da-9d34a814620f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70c67f9-4d48-4559-b8b0-1abc938e8f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42dbcb27-b3d8-4768-ab52-e450ddc04dc8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867d6887-1362-4b9e-9121-543e14eb171e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2edb3679-ab81-4d48-bd01-43352779703a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e84e51e-ec17-4852-9693-cef56f85132b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd999ac9-560e-4182-8875-6a72741ffbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65182d8c-a287-42f3-96c4-e5f2ed2c3c6f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847305da-c557-46f4-b7b3-3043731020eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3a8fbd-6609-4f16-843b-4af6210a2d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c408113c-c2f1-4d8a-96e8-1c95f42ab665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16790364-fb69-495e-a3d5-4513615f3995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94462831-d8a7-4e44-bf0b-4bcb93e10354",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f716845-d31c-4b2f-8e8d-b78ff888936a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1cc1ef-7bab-4bea-b807-94725c4d2eae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c8b1f1-b1d6-46a0-be1b-17ceca7f35f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da45237d-189d-4c25-af6f-853c8fa41a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf95add-d433-4823-a249-e27246363cda",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088e9fae-5bea-4d4a-a1c1-94fc1df37885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3e6798-4dc9-4f1d-a8b1-7af4d528924d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c285c809-3a62-4877-aed5-d1f0da97c0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "234b9d68-8cc9-496f-918d-28f617c4bb3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6e284f-db78-488a-94e4-5150ec447bc4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a4ea4a-60b5-439f-8e29-9ba6593c975d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8a03e9a-7d3c-43ae-afe7-6059a970209d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b92ef3d-d113-4737-b67c-78573f5e1e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5afc347b-af39-494a-b2ea-82fa70b5f856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a26a445-6d8f-47b7-aa76-7eb368965e99",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a4d1ee-3c4f-44ca-aa7b-9e051beb4e65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6167ce4-faba-4bba-859f-02584ddbc9bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3d8697-4098-4e99-b56c-2618b1dd46db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d2956b-8c02-4f2a-abe7-0b3dcc3ecc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b23a140-994b-4b67-b2c3-fc32979dd273",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1109f43c-dd30-4fc2-8097-245b016b6fd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "126c459a-648e-4c09-b8f7-d09b18d516a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f65b790-c016-45fb-ac0b-1b8c71d34ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be6cc56-989f-4172-a422-ee22f6f83c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bc92b2-930b-46e6-960b-1d31b82a8dd7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e3da5d-d3b4-4bbe-8616-29f4b5682171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abfb3425-9d40-4339-be9a-8cf4b46479db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d728f56-aded-418d-a3be-57db7ea1d1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a24098-7379-421b-b0dc-5cde11bbedd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ab1012-dbe6-4c59-867f-347a692474df",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b377e1e-b47f-4cad-b3a2-bc0848fc1f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bda311ab-1dc1-4038-8ea2-68685ba28b57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b6134d-9f6f-4fc4-8e83-ee4a1a529b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3c4a5b-7ce9-4188-81aa-f9a32b3677ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084d6633-1269-4d20-9dae-1989fcfe698f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7113ca55-fd37-461e-90cb-18bc8a205deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7992f400-b818-470c-a5d8-6fb1b5c2e79a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f29a705-49d8-4243-a45d-a75d2b007fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952f661c-7809-45f5-9a34-d04f00b3cd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9ead17-4a82-48f8-8f69-9b543cf06fdc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1c25b3-bb9c-4f1a-a0c9-e6f05cb45610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407755e5-e509-45f3-b291-7949ed24503d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c27a32-1908-4851-a030-c415d8f7b0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ec9bb7-6ba4-4bb8-85a0-a6ede406b382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1e39f8-8769-4d03-b51f-36b295bf742d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9352a07d-7184-4557-b731-4a60c6d48bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c63f25-8e8a-4b4b-a7d5-3fc7cb087d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba8cb82-1308-4624-ac1e-850c073ed018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba6a739-be72-4792-a1cc-18a5615fa74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a717e0-3a8b-4f74-b638-9ec8c46f302c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee1c71a-0b6a-4626-aa89-3cf7388f15c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af3fb90-7c7f-49ac-893d-a1e0ba989722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56e90a8-8caa-42a2-8548-d55a024c3021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130ba7a2-fa4a-4128-b1d6-b8d5fe58e8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a46bc50-2542-457b-8dbb-b714e8e45501",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faef04ed-fcbb-4b0b-a7fb-fd526c929739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634db49c-37b4-4e55-bd25-a174114e06a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2c4e09-e91e-440e-b786-80bebd2e8bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e31986-12ee-400a-bac9-e065f0fd87b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d056e775-1666-4ccd-b49a-aa628b48e349",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f1b8e7-943c-4c71-896a-68100c44934f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1575cac8-a743-479a-b4bf-1826bd46557f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d78be4a-667c-4a13-a40a-aff94a3f01ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50dea7dd-c7e6-4e95-a6cb-940d20a77777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c337cc-3208-4b52-a0dd-fece5ce1ad41",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cfb5c1-d232-414f-9ceb-7dd15f72fd77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8796ba5-cfda-4a60-b0f0-44ac9eebb46d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0eb5efe-b2d7-45b8-bacf-87e44236dc43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08be6c4-03bd-44b5-b649-f35d2d0da845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71abcaac-6049-4ae9-8ce9-d48921cc6849",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b7eb58-bb6b-41fb-9862-45dcf4f83821",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fe29266-5afb-4f36-8c1f-ac60fa15f948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723154f8-8f2b-4b39-8151-7956fa0f9704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34ebc00-7b01-424c-84da-6a79c9daa643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0233e535-0e49-4209-a4f8-136265ad3280",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d63a5a-706b-4c8f-a1be-c7704edf7e84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ad625b6-eb43-4a0c-8334-06b07ad9e715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5ab46b-45f6-4fb6-88be-1169548ef9fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b185a3a-b492-47e7-bcd9-091cc8f66985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef2b0f2-65d2-4f5e-9a50-705b4b092d47",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3f5fcf-91d6-4246-8772-f91595ec8d05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "130468c5-978b-4a0e-842b-c320e2819cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0647b275-aec0-4471-bfef-ebd9495dcfc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0060229e-a813-4fdc-b560-e4de621f0fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21494365-5f05-433c-974c-d70744692c81",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad84a99-9713-4dbb-9f78-f1c560ff04d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ba385a4-9381-4b8a-8b04-83596e650d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7220d37d-8b40-4ec7-b422-68522201b5f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf499fe-9f62-43db-a61a-8c1fa47af34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7127ee95-f035-447a-9fa7-b02304b2453c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab62822-f982-45c1-baf5-40a310ff70f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a5a6daf-e004-4ce4-a85a-2fa812d641d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffee0994-a058-4e7c-a85a-68c1292a60b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec94655-a221-4f19-ad4d-dd61e71047b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490ecb53-0431-4703-ba1c-509037c535f5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57bd14f-613f-4ca3-8e3e-d2b0f44ff080",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76c27650-743d-4d64-8c20-9bfc2ff60960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd59c849-9e83-46bc-ba4a-90f5934c16dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e0259c0-631d-4e17-9984-49b209d4437d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac088d0-37dc-42f2-bdb4-e5296dc01a8e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643ea4c2-d416-4ec4-b5ff-21e1c9bfbec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b125a25d-576a-4df5-82f1-d3fd7935265e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbb392a-eb5d-45f0-8c60-c89a5d12e821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149f7819-8f67-4915-aa60-656a3263be29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24a537f-80e0-4ef3-960b-6398db6cdaf5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410373b4-ea00-4147-8a41-951af9487abe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e830fea0-7fc1-424b-9ad6-b8d16085b4d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f0e55e-c453-42e9-8364-4bf4b2cab6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc42434-25a3-4bba-814d-32ca52742b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdd3fcb-d7ea-48c5-975f-02c9b9363a69",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a59e70-746a-47bf-9edd-c8d920f0f2af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b72f0cfe-7bf7-484c-83f3-2ed1e3440b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9acb08d1-fead-4ef5-91a8-5a51dccc5133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b9de876-ea1c-4265-96ca-452a0b465eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35bc115-39a9-4247-8862-4a97c85d8000",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc217ba-bb88-4241-b379-bd97b9c547e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85e0f009-2f79-4ff2-9f7c-5fd9412cae28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05452e01-204e-4a00-acd6-5ba096531914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4626571a-1253-4a7c-9583-c5fc7bd913a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ff7df0-053c-48a0-a039-7d25f4cb636d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870aceb7-d855-47bb-880e-083b50491faf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81511020-95c7-4055-aa2f-e2c5b8ce4057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b2276a-0837-4c98-a937-dca75882cbcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4201611-f9b3-463c-8ea9-f6917dfb4164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516f5cdc-598d-4d17-a98b-7ddd9d4ec81d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5090cb97-b784-4c50-8cff-ab6432b0f1a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4eb74ef-6d29-4ab6-8851-5be64e200cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e2a0060-9f76-4b5e-9e5e-7a21236fe199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6106b7f9-caed-452f-af0e-770a63324a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d090d411-7668-4028-bc0a-610d744b2d90",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52e5d96-830f-46e6-9bc0-fa0d6a335cfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8fc6052-b673-4dfe-b43c-078ac35d5668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abca8d77-b9ce-4bf6-a74c-1d5acecbfec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca78a12-841a-43cf-9e60-88b21c1dccee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d951a7-a25b-4a4e-9e45-3ec3673ffc17",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f01b39-4c31-4106-bcce-17594f092ae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4ef0c47-4bdd-4bd3-a8d8-e919a48d0839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d2f961-ca91-4d0b-8edf-7ade9654db42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fef598b-7341-4fa3-8151-305ceeef0363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b3919b-dbaf-4b25-88bc-4aedf67c12dd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d6b866-09ef-43ca-a802-ed64cb905aec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0856901f-063d-4f85-a7f9-5d01617934aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1268a96-313e-4921-ac2e-9b2511ecea5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d23cb633-e0c4-4dde-ac9c-76ad303a064f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818ed335-eb00-4d95-9330-72cd15eb25bd",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f1595c-8a92-4a94-a1f6-f23d8103d56f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "024f8e32-1c89-4d5b-9def-62d8e6e581cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56ead75-5a0c-4a11-a537-b64fb95c3ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3890e2ea-45ce-434b-83fb-7488fe24c96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e8028f-3652-4cf5-b6ed-f77a833558a6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a38b1e-21cd-4f4a-81be-1dbba01e7e21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7bc6339-64df-455c-85bd-b840b23dd920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "072a2659-2376-4a8f-9590-6ce3a1df675c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f2426c8-c9a3-4c8a-958c-f38c22e1bbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2cc43ee-e473-47e0-8268-a6dcfef71104",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbb4739-9d86-44f4-ab92-a836fe75c92f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0ce7097-e1dd-40bc-9d9d-4e964826bb45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b3db0f-8e7e-473f-9d0d-b7d84f9adca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d1ced26-d8f0-4173-b9c1-432173a03375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1e1913-0883-4638-a047-62f0dc947aa3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab6f649-3672-4f7e-9daa-9ed0e9e9217c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451ba527-0aa8-4ea1-b78d-1e727c98aa5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b600fa3-f8f4-4424-915c-fcd21919bb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf93a27-92c3-4990-ac89-0cede2b018c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb684c20-fa56-4125-a0d2-b0f84b89da35",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92293ff7-906a-40c3-8c7c-ef6d7c95ad2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c096816b-c303-452e-90e0-d7dcc7075553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e9967d-f551-4a66-a50b-f713e947c31d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef86476-6310-4fe5-93a1-0c137b0fa707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c2b044-d16f-4120-ab82-7d0a0fac46af",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50032d8b-b004-48ad-8c22-2c98961f2c87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aed4f512-5591-4287-87ad-368b0a812df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0968d9ff-d602-4d6b-ad65-c312ba38af28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56184c12-5f66-4a16-bc54-61f8a3680bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba055915-d1d5-456c-8311-1971e899384a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed66df6-8da0-490e-8dcb-efbf8d898c0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a36157c-5914-4be2-9983-69f83f349e1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "061a8f13-d493-4fd0-b986-6ab44eba7e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee187193-90ab-4df3-aab9-0efac9ec0abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe27e035-cdc0-4b76-a6f2-862c5958b9f3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed197a9f-5b90-44cb-830a-ce3b4539682a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2deaf329-60eb-4b13-90ba-192dab4c5ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0a055c-6092-4e79-aa0d-5ec830ce9022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a69ab6-7c21-4fd5-b1b8-2342e5146b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37b9ae8-ba2b-493c-a877-d64853e18058",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1262b4bd-191d-46a2-aa0b-6177813702f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fa4fdce-5d11-4d3b-a188-23114d4f763b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db7e984-2cfa-42b9-a141-7674bae6b267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba55bb0c-a38a-4458-8498-9509bed94647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a118780-0f29-408d-ac5e-670b4a6dad75",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89136d8d-c297-4dc4-a25d-2703790b3154",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d48f2a6-34d2-46ad-88f9-326320714b32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c12981-e2b7-4ac0-ac13-2f452a0d623a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71cc81ea-689b-425c-89e8-fd773ec6fbc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36a6f30-93c5-4a9f-bd05-9d192c699449",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9052b771-2804-414e-9840-2d4703b033f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71e6e891-42d6-4f43-b0f6-ca30cdeea6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b2ab12-2372-4001-9ef9-b834f1abc286",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b7dcba-f702-4854-bdd1-a8d07fb0dc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6f05b5-44cd-48f1-8716-f178b4cfaf6d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567c0241-9c3e-4bb0-91c4-4100cc4c815c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeb9c2dd-7a71-43b4-8fda-7bdaf0746247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6707a530-f22d-4c27-9253-4edc9b96415a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0d30d12-37cd-4116-a9aa-b788f0bbd01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f293e9-083a-44df-9db5-015c77ac20ea",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d20660-40a6-4a66-ab34-4b22ff3fb357",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b583dcd-5b2e-477a-854d-b7679135f7ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedb1be1-2a72-47b2-801c-78e14ddc4776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3502ee24-7153-4a8f-9fbe-9390e0784ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1448dde-bdef-4db7-87ef-b31392864757",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430360c7-ed9e-44ec-b30d-8566b80ac4dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30a25940-4011-4651-9780-5c54de42c12d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac7b6a5-7e62-42bc-bccf-87e9da8fad56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d302eed9-4bc8-4d7a-8597-025df5d1cdcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c56ef1-6d35-4a07-b5bc-cfcc6484d3b7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d77e53-c2f7-4990-9f09-7581c57b7a43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f93a3249-17c9-4648-b741-0be770210579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29530af9-a937-4b82-96b7-9e2d47dcb6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506571e9-450d-4286-9cb2-40c30349d194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041ea13b-fb7d-4026-b96f-b43cfd2d80e1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366afe08-c2b6-413e-bea8-4103c51beff0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0134b4e6-88a0-41af-a3d1-ae39aa941c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccccf0d-4657-4f0b-8848-2add12266512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c52fd7-a2f5-48ea-8bda-bdb77c66e4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeef6097-ab9c-4dba-bbe7-e650f4bc31f0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5ea951-8b99-4327-b274-9806e5fe2ab8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9965cc44-9ca3-49a7-88d8-d427fd55b3f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "469850c5-31d0-49ab-99a5-9fc1e11d496c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04193051-df07-4260-8252-1a2fdc92edd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06fb51e-2caf-4172-ab2d-a9f00dab9c90",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9421325-ef75-4cf2-82f6-d88802d5c1b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c9eaeb7-b0c6-4f17-9a2e-ea7178cc4c1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "930ac453-730d-41a9-91d4-c9319f07e0eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12207bd3-3931-4eb4-8201-92572a067349"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99e6db59-64da-40f8-af93-a3f5bce8736b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45c9111f-bd2e-43fe-a168-fae513753e90"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbc66234-ee2b-416a-aef2-07989af0d236",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df454440-2acc-4021-94b6-4b8c8189b998"
                    }
                  }
                ]
              },
              {
                "id": "b025ba9a-ae0f-4df5-beb6-a1a5fb58348c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "339c88fc-1f0a-4c96-98bf-df2ce9cac5ce",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a527e40-b4aa-40e9-8155-0adb08098982",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6473c09f-861d-4e54-8793-71c53b0344c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8079bc-23a5-4d72-845a-bb9166bff8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6b75d68-17a3-4045-89a3-579d5fc43d9e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "602cf5d4-f3ab-405e-a724-ac3cd72326ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74bf043c-136d-46e2-9afb-33e6666040dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01c62959-dc10-402a-ae39-30f94d9ee991",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ab6728f-d78d-4204-952b-d2216b3ba611"
                    }
                  }
                ]
              },
              {
                "id": "5c0fad1a-b347-4635-8487-d9e6d9ae0463",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3ee01663-aae1-4176-8dcb-47a9cb44b1bc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb4a676-5617-4c4f-9581-a642c8702feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d2d523cb-b76a-4c41-a847-725928cd561a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5218e4b-ea06-4852-93fa-28ae19ee5014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa866226-0a5e-4a08-a727-b681150c6e41"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3995b9e5-d207-4136-b088-913b28527d2c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0385385e-8c4b-4c2d-af2f-088c455e428a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1e5093e-507e-42cb-86a6-73309b2e234f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e4814caa-0f07-4d28-a4b8-040045839dc7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c04395ff-20ae-444e-9efa-379a008fb275",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00657f17-b609-482f-9fb7-aac9ca903788"
                    }
                  }
                ]
              },
              {
                "id": "deb48a26-6851-4af9-b6bb-982ee8499b31",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "156a2d88-5eed-4ca4-a796-b9d1a2f869e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "24d00db7-761b-4db4-bce9-999df314fa74"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b76b414-07c2-4d80-8ae3-8d191484085c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28819e87-e203-445c-8864-129b7d0dae68"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8b84391-6fea-43ee-aa59-76ef159eaf40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e7afc667-c490-44a1-96e1-401d903f1e23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9996fe1c-e295-4ef1-8adb-f1aed5307c7e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3195ae8-f0d3-419a-8f49-f12f7712f2c3"
            }
          }
        ]
      },
      {
        "id": "56fb4de1-2ba4-4351-9ab5-42a7c3913920",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7cecab39-f9bb-4d1a-bfb9-9f0add651fae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2906badc-5b38-42a7-b755-9b7ea30b2a61",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f96a4df8-52fe-4e1f-8461-1547fb96facb",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bd434c-a24f-463d-bd04-fa33e53a4811",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3efac0b2-1fb0-4e61-94bc-e9870001b4f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8355d6-d52f-470b-81a8-a4138ad0f586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9b89adb-a977-487a-a1e6-4c0e7a9ae511"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "093f63e0-8948-439b-90d9-9d6426b5b298",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35cf1c5a-5b2b-4648-afbe-546af242847c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7877b7ba-0ea1-4762-8873-8f71e6232b24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52dcc0ba-002f-4493-814c-81a3f440da7c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5a67f4a-d51b-4bfa-bb34-f698cd939b12",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "80c9d387-904d-4234-bb67-6b861e8ced7e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "082fa6f2-ffb9-4c09-8f62-4f46d64441f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "082b52cb-8ab3-4929-b058-7e8e5057b1a0"
            }
          }
        ]
      },
      {
        "id": "9acff7c0-be8f-46ea-a855-47e5c8b20534",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ad743020-21b6-49e9-9bdd-55b3da9cb2d1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ac5c728f-c3a1-420a-8868-54f3e108de78",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "15e9fb6c-49e8-46e5-ba43-9c60c52ce827",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ac2ea2-b411-4478-a161-5afe44bfe271",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12d2474c-3152-47eb-a2a4-02524f2cbbf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab3acf0-3266-44d2-99b2-1577a08fce7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61b678a6-0c7b-4211-bce6-9bcff8c967b6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5ee5982-5d8a-4dc7-b160-080683ecca32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0cba2c8d-256e-4928-b843-785ca367e6d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ae88548-8995-4f09-bd28-e89228dc192c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "726c9afa-c279-4a41-badc-2ac5b851996b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da747eb6-c5aa-4e77-aeb7-4d3af34114a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e28900a6-de6a-4d07-81a4-64d438935b65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0c3cd17d-b59a-4469-aee4-79e4312602ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7026c592-a675-43fb-92ba-d41a8c383aa1"
            }
          }
        ]
      },
      {
        "id": "e4ae446f-085e-43d2-8784-69747429f774",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5dcef712-5167-4162-bc14-f421567bf863",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcdf7143-e8b7-4773-9953-0dc2ecadc157",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "922bfe5d-fc6d-49b8-90b1-34a23d0d9f28",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea1012e-b12f-4c22-8dac-fb6713d85aa3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99188094-1b04-4706-9ad6-e8cd7c8ef0c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ba647a-d5bb-4ee1-bf2a-2157541a1ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fae9cdf-8567-4c38-a430-fb92c63bf1bf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46e24698-b2e9-402e-9c9d-27024f4a4172",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da9f94cf-c806-4a61-9981-869db9a49eed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7f21488-7049-4a6d-a892-fe256810414d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56a4eb9d-10d6-43da-b1e2-3365ba6c4b2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47ac76ae-822e-4bf2-bece-86283e0cb29c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7a0dc607-4c20-4608-97c9-d1fa2d792eaa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3843e89b-f36e-439b-bef1-262802198e00",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d882d914-e10b-4031-8e6d-dac67f771395"
            }
          }
        ]
      },
      {
        "id": "d53e53d0-b3e7-4e75-b60d-ae3991b41a29",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28cfe895-3cb8-411e-9732-6614ca011be4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fde212ae-5d78-419b-b75f-d6539b38b4ac",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "aa0acfe3-9f20-4d68-91d1-b12416a9252e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c461c3c9-d3e7-4588-9b9a-84cce75b84bd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "964bc136-96ab-429e-ac9f-8a4783ee3aed",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.31028368794315,
      "responseMin": 10,
      "responseMax": 1147,
      "responseSd": 61.65361229019883,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707179624951,
      "completed": 1707179672134
    },
    "executions": [
      {
        "id": "a7fba86c-aad8-4f5a-a9c7-a39e89021dfb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "12cb4bff-1644-4951-b0a4-138f8bb5f6e6",
          "httpRequestId": "0519faa5-48d5-4431-8f7a-dff5000c15e5"
        },
        "item": {
          "id": "a7fba86c-aad8-4f5a-a9c7-a39e89021dfb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a6464086-e356-4fe2-af3b-7e872b178e87",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "cbfb3c41-92aa-4a5a-aeb0-17da06c2a139",
        "cursor": {
          "ref": "48ad5947-369b-4a3a-80df-cc145e4bbfec",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ae434705-7298-45d9-b25f-9bf694a9281f"
        },
        "item": {
          "id": "cbfb3c41-92aa-4a5a-aeb0-17da06c2a139",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "67400ec7-e995-4191-aa25-2e48a490dcf7",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "84cecf0f-7b92-4209-82e9-ae49c36d2e4f",
        "cursor": {
          "ref": "01e7e19e-c985-44df-81f0-e4b4307771b0",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5cc66022-704f-4583-a1e1-e2e29a130ab2"
        },
        "item": {
          "id": "84cecf0f-7b92-4209-82e9-ae49c36d2e4f",
          "name": "did_json"
        },
        "response": {
          "id": "01325f97-b1b9-41d3-b41c-b5052106c9ed",
          "status": "OK",
          "code": 200,
          "responseTime": 910,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54384349-1d69-4c0b-8869-f606b67e5bce",
        "cursor": {
          "ref": "b91b7db7-95a8-430c-b41e-48a4a8fd8e39",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0a3ef64e-5867-4dc4-a658-02983367db09"
        },
        "item": {
          "id": "54384349-1d69-4c0b-8869-f606b67e5bce",
          "name": "did:invalid"
        },
        "response": {
          "id": "87834e22-a2f9-400c-9522-1c76aae92b91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54384349-1d69-4c0b-8869-f606b67e5bce",
        "cursor": {
          "ref": "b91b7db7-95a8-430c-b41e-48a4a8fd8e39",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0a3ef64e-5867-4dc4-a658-02983367db09"
        },
        "item": {
          "id": "54384349-1d69-4c0b-8869-f606b67e5bce",
          "name": "did:invalid"
        },
        "response": {
          "id": "87834e22-a2f9-400c-9522-1c76aae92b91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9043fbe-7e1b-4c98-b6a5-df51051c6edd",
        "cursor": {
          "ref": "94be2d78-2fb8-4680-8c0f-1aa3298d821f",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "90dbff09-d0b9-41a1-ae83-ece34f0a84a8"
        },
        "item": {
          "id": "b9043fbe-7e1b-4c98-b6a5-df51051c6edd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0ba7b071-3270-469c-b6dd-fab1e182f025",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9043fbe-7e1b-4c98-b6a5-df51051c6edd",
        "cursor": {
          "ref": "94be2d78-2fb8-4680-8c0f-1aa3298d821f",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "90dbff09-d0b9-41a1-ae83-ece34f0a84a8"
        },
        "item": {
          "id": "b9043fbe-7e1b-4c98-b6a5-df51051c6edd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0ba7b071-3270-469c-b6dd-fab1e182f025",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e723f665-d1d2-4141-a506-d167540edf4c",
        "cursor": {
          "ref": "4688f359-ac48-4a6c-a18d-bcdbb566569c",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "db73661a-2c03-44dc-ba61-ca393cd2873b"
        },
        "item": {
          "id": "e723f665-d1d2-4141-a506-d167540edf4c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "eac0e5fb-7b3a-4f5f-82eb-5a41fd954d27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e723f665-d1d2-4141-a506-d167540edf4c",
        "cursor": {
          "ref": "4688f359-ac48-4a6c-a18d-bcdbb566569c",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "db73661a-2c03-44dc-ba61-ca393cd2873b"
        },
        "item": {
          "id": "e723f665-d1d2-4141-a506-d167540edf4c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "eac0e5fb-7b3a-4f5f-82eb-5a41fd954d27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8b32ff-301c-4aed-8a1e-e07bbeaaf168",
        "cursor": {
          "ref": "4b3c7bd2-793e-4017-adbb-bf768563c8a8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "aa38ea4e-40ba-457e-8f11-f9c983765065"
        },
        "item": {
          "id": "4b8b32ff-301c-4aed-8a1e-e07bbeaaf168",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8262abd4-2c9c-456f-a872-713719faf528",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8b32ff-301c-4aed-8a1e-e07bbeaaf168",
        "cursor": {
          "ref": "4b3c7bd2-793e-4017-adbb-bf768563c8a8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "aa38ea4e-40ba-457e-8f11-f9c983765065"
        },
        "item": {
          "id": "4b8b32ff-301c-4aed-8a1e-e07bbeaaf168",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8262abd4-2c9c-456f-a872-713719faf528",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cda2c77-71b2-42c8-9a8a-3936fd2a20b9",
        "cursor": {
          "ref": "87f2455a-ed97-4083-9854-64e1db73daa6",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f0421436-246c-4211-a2a7-2cb36c88b9e6"
        },
        "item": {
          "id": "6cda2c77-71b2-42c8-9a8a-3936fd2a20b9",
          "name": "identifiers"
        },
        "response": {
          "id": "a7d3342f-54f7-4a9d-b7de-a61a4559f9b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6cda2c77-71b2-42c8-9a8a-3936fd2a20b9",
        "cursor": {
          "ref": "87f2455a-ed97-4083-9854-64e1db73daa6",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f0421436-246c-4211-a2a7-2cb36c88b9e6"
        },
        "item": {
          "id": "6cda2c77-71b2-42c8-9a8a-3936fd2a20b9",
          "name": "identifiers"
        },
        "response": {
          "id": "a7d3342f-54f7-4a9d-b7de-a61a4559f9b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "817512fa-7874-416f-bc16-deb7a6a6cdf3",
        "cursor": {
          "ref": "dfba2bf3-509c-423b-842a-bb088ad2dd0b",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c5481b07-4754-490a-9412-ce67f64729e7"
        },
        "item": {
          "id": "817512fa-7874-416f-bc16-deb7a6a6cdf3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cf36c8ad-fb4c-44c8-b596-d24c558562bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817512fa-7874-416f-bc16-deb7a6a6cdf3",
        "cursor": {
          "ref": "dfba2bf3-509c-423b-842a-bb088ad2dd0b",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c5481b07-4754-490a-9412-ce67f64729e7"
        },
        "item": {
          "id": "817512fa-7874-416f-bc16-deb7a6a6cdf3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cf36c8ad-fb4c-44c8-b596-d24c558562bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430bedd9-bf28-4f79-a67b-de4e64deafaf",
        "cursor": {
          "ref": "dcd8908c-b440-4e8e-a08c-5e8395ad50a4",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "84114906-61d2-4559-ae6f-d4d0f5b5a5b4"
        },
        "item": {
          "id": "430bedd9-bf28-4f79-a67b-de4e64deafaf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "07e8e592-51f3-48c6-9883-a220c8af3670",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430bedd9-bf28-4f79-a67b-de4e64deafaf",
        "cursor": {
          "ref": "dcd8908c-b440-4e8e-a08c-5e8395ad50a4",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "84114906-61d2-4559-ae6f-d4d0f5b5a5b4"
        },
        "item": {
          "id": "430bedd9-bf28-4f79-a67b-de4e64deafaf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "07e8e592-51f3-48c6-9883-a220c8af3670",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9c977d-002f-4731-b4b4-f612792e4977",
        "cursor": {
          "ref": "28601929-e89f-45c3-bc7c-f82a25682512",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "07cd7b87-1482-4bde-a4c0-9fa45eff6c28"
        },
        "item": {
          "id": "6a9c977d-002f-4731-b4b4-f612792e4977",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "432309f1-34ef-4608-8af9-477420ef7b87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9c977d-002f-4731-b4b4-f612792e4977",
        "cursor": {
          "ref": "28601929-e89f-45c3-bc7c-f82a25682512",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "07cd7b87-1482-4bde-a4c0-9fa45eff6c28"
        },
        "item": {
          "id": "6a9c977d-002f-4731-b4b4-f612792e4977",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "432309f1-34ef-4608-8af9-477420ef7b87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4efec5-a8ad-4a17-ab91-c60756c64829",
        "cursor": {
          "ref": "888fe834-d6a9-4e62-a8e4-4304863e5f9d",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7248e828-e52e-4476-a730-159a16bf728e"
        },
        "item": {
          "id": "7b4efec5-a8ad-4a17-ab91-c60756c64829",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "93a9223c-14be-46ec-a5a8-5bd7e6bedb75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4efec5-a8ad-4a17-ab91-c60756c64829",
        "cursor": {
          "ref": "888fe834-d6a9-4e62-a8e4-4304863e5f9d",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7248e828-e52e-4476-a730-159a16bf728e"
        },
        "item": {
          "id": "7b4efec5-a8ad-4a17-ab91-c60756c64829",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "93a9223c-14be-46ec-a5a8-5bd7e6bedb75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cf531e-ab96-4891-8656-a44e065f8567",
        "cursor": {
          "ref": "555313ff-9091-4bda-9562-660d9ba674f2",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dade2cad-aeb5-4a70-b025-1b0b551a27ed"
        },
        "item": {
          "id": "b9cf531e-ab96-4891-8656-a44e065f8567",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f12be1e0-5cf0-4fd6-9e10-4f8938a10ecd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cf531e-ab96-4891-8656-a44e065f8567",
        "cursor": {
          "ref": "555313ff-9091-4bda-9562-660d9ba674f2",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dade2cad-aeb5-4a70-b025-1b0b551a27ed"
        },
        "item": {
          "id": "b9cf531e-ab96-4891-8656-a44e065f8567",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f12be1e0-5cf0-4fd6-9e10-4f8938a10ecd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e25a24-82d6-4e41-b134-0299782924bd",
        "cursor": {
          "ref": "a9aa11ca-eac3-46b8-89ff-417033c71fe1",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7771ab46-b6b9-46e6-86c2-633db1bd7d29"
        },
        "item": {
          "id": "65e25a24-82d6-4e41-b134-0299782924bd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "95f0803b-9919-4187-a80a-4e6421703383",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e25a24-82d6-4e41-b134-0299782924bd",
        "cursor": {
          "ref": "a9aa11ca-eac3-46b8-89ff-417033c71fe1",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7771ab46-b6b9-46e6-86c2-633db1bd7d29"
        },
        "item": {
          "id": "65e25a24-82d6-4e41-b134-0299782924bd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "95f0803b-9919-4187-a80a-4e6421703383",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa8fd5f-baf8-4f5a-b691-ba6f072a3fd0",
        "cursor": {
          "ref": "7efe4a04-fa16-4f99-8858-42933535841b",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c6d4ef0a-ed42-4c5c-acce-a52c6895989b"
        },
        "item": {
          "id": "5fa8fd5f-baf8-4f5a-b691-ba6f072a3fd0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f04d9beb-2158-452c-a39c-7863b217083d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa8fd5f-baf8-4f5a-b691-ba6f072a3fd0",
        "cursor": {
          "ref": "7efe4a04-fa16-4f99-8858-42933535841b",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c6d4ef0a-ed42-4c5c-acce-a52c6895989b"
        },
        "item": {
          "id": "5fa8fd5f-baf8-4f5a-b691-ba6f072a3fd0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f04d9beb-2158-452c-a39c-7863b217083d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488644f9-485d-4054-830f-2e2625f04693",
        "cursor": {
          "ref": "358049de-ed4a-4e5e-b371-6d238eb020a4",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "88a7536b-608c-4c52-a6e7-5fbc000ff42a"
        },
        "item": {
          "id": "488644f9-485d-4054-830f-2e2625f04693",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7b274a16-7eb2-4edf-861e-d2a1cc4056dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488644f9-485d-4054-830f-2e2625f04693",
        "cursor": {
          "ref": "358049de-ed4a-4e5e-b371-6d238eb020a4",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "88a7536b-608c-4c52-a6e7-5fbc000ff42a"
        },
        "item": {
          "id": "488644f9-485d-4054-830f-2e2625f04693",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7b274a16-7eb2-4edf-861e-d2a1cc4056dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db807a8-b6a1-43bc-a601-46758a673a81",
        "cursor": {
          "ref": "5779774a-21ef-446e-bb9e-e455949cb31d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a985adeb-3684-48e7-a2ce-f0d46b9f08ea"
        },
        "item": {
          "id": "8db807a8-b6a1-43bc-a601-46758a673a81",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6fb1bdea-56df-4f35-a5f6-bfaad2ce7c2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db807a8-b6a1-43bc-a601-46758a673a81",
        "cursor": {
          "ref": "5779774a-21ef-446e-bb9e-e455949cb31d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a985adeb-3684-48e7-a2ce-f0d46b9f08ea"
        },
        "item": {
          "id": "8db807a8-b6a1-43bc-a601-46758a673a81",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6fb1bdea-56df-4f35-a5f6-bfaad2ce7c2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13aff413-e3c3-4504-9673-12a600d8968a",
        "cursor": {
          "ref": "c4b2dc27-9393-45e6-abbf-36f594b17dd0",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7f20d4a5-6c88-4609-b4e7-db693c794546"
        },
        "item": {
          "id": "13aff413-e3c3-4504-9673-12a600d8968a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4dce0307-16b3-444e-bbb7-6d63aa376d24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13aff413-e3c3-4504-9673-12a600d8968a",
        "cursor": {
          "ref": "c4b2dc27-9393-45e6-abbf-36f594b17dd0",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7f20d4a5-6c88-4609-b4e7-db693c794546"
        },
        "item": {
          "id": "13aff413-e3c3-4504-9673-12a600d8968a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4dce0307-16b3-444e-bbb7-6d63aa376d24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5717689-17cb-474b-b986-1ab7808d388b",
        "cursor": {
          "ref": "9b63c49e-5968-4a4d-a1d7-2eacdee7d51b",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "902152b9-02da-458d-ada2-19e15066b082"
        },
        "item": {
          "id": "f5717689-17cb-474b-b986-1ab7808d388b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "53dbb4b9-efd9-4013-b64b-e8ac3245d3f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5717689-17cb-474b-b986-1ab7808d388b",
        "cursor": {
          "ref": "9b63c49e-5968-4a4d-a1d7-2eacdee7d51b",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "902152b9-02da-458d-ada2-19e15066b082"
        },
        "item": {
          "id": "f5717689-17cb-474b-b986-1ab7808d388b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "53dbb4b9-efd9-4013-b64b-e8ac3245d3f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de033b2e-6052-4c9c-9689-1fc318566c44",
        "cursor": {
          "ref": "a2812d10-5daa-4590-b559-f0eff600408a",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "12378c31-8d73-4549-8384-6dc9209bb17b"
        },
        "item": {
          "id": "de033b2e-6052-4c9c-9689-1fc318566c44",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b9ea1918-d691-4956-918a-32c42fab0bec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de033b2e-6052-4c9c-9689-1fc318566c44",
        "cursor": {
          "ref": "a2812d10-5daa-4590-b559-f0eff600408a",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "12378c31-8d73-4549-8384-6dc9209bb17b"
        },
        "item": {
          "id": "de033b2e-6052-4c9c-9689-1fc318566c44",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b9ea1918-d691-4956-918a-32c42fab0bec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a3ff85-1191-4873-892d-f9ce885cc003",
        "cursor": {
          "ref": "b163f039-ac57-4b12-b5d9-dd187becc8f4",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dbb1cbd0-e395-412a-920c-bfbabb856b18"
        },
        "item": {
          "id": "e1a3ff85-1191-4873-892d-f9ce885cc003",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "828ed5bb-c824-4d93-a2dc-8ae4bce9b8d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a3ff85-1191-4873-892d-f9ce885cc003",
        "cursor": {
          "ref": "b163f039-ac57-4b12-b5d9-dd187becc8f4",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dbb1cbd0-e395-412a-920c-bfbabb856b18"
        },
        "item": {
          "id": "e1a3ff85-1191-4873-892d-f9ce885cc003",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "828ed5bb-c824-4d93-a2dc-8ae4bce9b8d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9196938f-2738-4c42-9bf1-f354de9252d0",
        "cursor": {
          "ref": "99c770b6-8694-466e-9074-075bedc9f599",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "df0c7837-aaf0-4bc2-a486-ab6a7886e5da"
        },
        "item": {
          "id": "9196938f-2738-4c42-9bf1-f354de9252d0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6876c7d1-e1c2-4025-b91f-6722728930dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9196938f-2738-4c42-9bf1-f354de9252d0",
        "cursor": {
          "ref": "99c770b6-8694-466e-9074-075bedc9f599",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "df0c7837-aaf0-4bc2-a486-ab6a7886e5da"
        },
        "item": {
          "id": "9196938f-2738-4c42-9bf1-f354de9252d0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6876c7d1-e1c2-4025-b91f-6722728930dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6ab6c7-3adb-4894-9377-9a88f7a16878",
        "cursor": {
          "ref": "17d5e074-8bc1-4cdc-9156-ccedd851b1ee",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0bbab189-6a45-437f-82bd-2c5872f64c16"
        },
        "item": {
          "id": "2f6ab6c7-3adb-4894-9377-9a88f7a16878",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "04b457df-f727-4edc-b4a8-15a61ee0ef5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6ab6c7-3adb-4894-9377-9a88f7a16878",
        "cursor": {
          "ref": "17d5e074-8bc1-4cdc-9156-ccedd851b1ee",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0bbab189-6a45-437f-82bd-2c5872f64c16"
        },
        "item": {
          "id": "2f6ab6c7-3adb-4894-9377-9a88f7a16878",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "04b457df-f727-4edc-b4a8-15a61ee0ef5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0cd97c5-ee1e-49d9-bee7-37e7faec0eb5",
        "cursor": {
          "ref": "cca07694-2323-427b-a04e-798302c248b2",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "02db3168-78b3-48d0-b97b-61b220f9dedd"
        },
        "item": {
          "id": "b0cd97c5-ee1e-49d9-bee7-37e7faec0eb5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "627d0301-7d42-4253-aa72-1f09a65b1106",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0cd97c5-ee1e-49d9-bee7-37e7faec0eb5",
        "cursor": {
          "ref": "cca07694-2323-427b-a04e-798302c248b2",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "02db3168-78b3-48d0-b97b-61b220f9dedd"
        },
        "item": {
          "id": "b0cd97c5-ee1e-49d9-bee7-37e7faec0eb5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "627d0301-7d42-4253-aa72-1f09a65b1106",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b6927c-6923-4e89-8355-d7ede34fd6bf",
        "cursor": {
          "ref": "58ba4776-61c2-4f66-ba30-a53abe6c1c52",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0886edf8-acdc-4fe7-bb63-c5df53467f9f"
        },
        "item": {
          "id": "47b6927c-6923-4e89-8355-d7ede34fd6bf",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "37c964a4-029b-48b3-893e-d80a286087ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b6927c-6923-4e89-8355-d7ede34fd6bf",
        "cursor": {
          "ref": "58ba4776-61c2-4f66-ba30-a53abe6c1c52",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0886edf8-acdc-4fe7-bb63-c5df53467f9f"
        },
        "item": {
          "id": "47b6927c-6923-4e89-8355-d7ede34fd6bf",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "37c964a4-029b-48b3-893e-d80a286087ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0798fac4-423a-4626-80d3-ed69cb055e6d",
        "cursor": {
          "ref": "5e6c8235-219c-4e54-8143-be632119af50",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fb4f4404-6671-4e0c-a060-9d5a9f59f363"
        },
        "item": {
          "id": "0798fac4-423a-4626-80d3-ed69cb055e6d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a064bef2-b113-42ea-a958-b40be92034c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0798fac4-423a-4626-80d3-ed69cb055e6d",
        "cursor": {
          "ref": "5e6c8235-219c-4e54-8143-be632119af50",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fb4f4404-6671-4e0c-a060-9d5a9f59f363"
        },
        "item": {
          "id": "0798fac4-423a-4626-80d3-ed69cb055e6d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a064bef2-b113-42ea-a958-b40be92034c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bf266a-2688-49f1-9fde-a08ae01ccdda",
        "cursor": {
          "ref": "3528a456-6251-4c5e-b1c6-7e906810476c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "35cc3d40-31a1-405f-a976-ad42b6a9a93f"
        },
        "item": {
          "id": "58bf266a-2688-49f1-9fde-a08ae01ccdda",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f327a62a-d2af-4f42-adb1-418705cbae44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bf266a-2688-49f1-9fde-a08ae01ccdda",
        "cursor": {
          "ref": "3528a456-6251-4c5e-b1c6-7e906810476c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "35cc3d40-31a1-405f-a976-ad42b6a9a93f"
        },
        "item": {
          "id": "58bf266a-2688-49f1-9fde-a08ae01ccdda",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f327a62a-d2af-4f42-adb1-418705cbae44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc4dceb-a523-4f14-a0ce-d0f1243d5166",
        "cursor": {
          "ref": "6f120475-d49f-454d-87c1-d327e6228e9e",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f39ff259-2d6d-432c-a322-66a9a81b5d0f"
        },
        "item": {
          "id": "1cc4dceb-a523-4f14-a0ce-d0f1243d5166",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3641d2d5-d17e-44f8-902d-fedf3cf9c57b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc4dceb-a523-4f14-a0ce-d0f1243d5166",
        "cursor": {
          "ref": "6f120475-d49f-454d-87c1-d327e6228e9e",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f39ff259-2d6d-432c-a322-66a9a81b5d0f"
        },
        "item": {
          "id": "1cc4dceb-a523-4f14-a0ce-d0f1243d5166",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3641d2d5-d17e-44f8-902d-fedf3cf9c57b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef74be13-6ce8-404b-954e-d2a5dd64a698",
        "cursor": {
          "ref": "b89ac410-f8b4-4579-9903-0a03b1a5308f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c40e7286-7bf8-4977-9849-125e03588252"
        },
        "item": {
          "id": "ef74be13-6ce8-404b-954e-d2a5dd64a698",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d1e20347-734c-400a-b17a-7c96b89a1280",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef74be13-6ce8-404b-954e-d2a5dd64a698",
        "cursor": {
          "ref": "b89ac410-f8b4-4579-9903-0a03b1a5308f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c40e7286-7bf8-4977-9849-125e03588252"
        },
        "item": {
          "id": "ef74be13-6ce8-404b-954e-d2a5dd64a698",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d1e20347-734c-400a-b17a-7c96b89a1280",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e76d52b-6e31-4261-8912-5588c577d0d3",
        "cursor": {
          "ref": "3277a3eb-b9fe-448d-a11b-8b3fc754c2f8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b84ccac3-a30b-4816-a2c0-685a1be85b8e"
        },
        "item": {
          "id": "0e76d52b-6e31-4261-8912-5588c577d0d3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "dc16e256-194a-4db7-9fc1-14df306bcfdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e76d52b-6e31-4261-8912-5588c577d0d3",
        "cursor": {
          "ref": "3277a3eb-b9fe-448d-a11b-8b3fc754c2f8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b84ccac3-a30b-4816-a2c0-685a1be85b8e"
        },
        "item": {
          "id": "0e76d52b-6e31-4261-8912-5588c577d0d3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "dc16e256-194a-4db7-9fc1-14df306bcfdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efb3764-9f9b-490a-9ee8-c97148f974c5",
        "cursor": {
          "ref": "dd30882b-729f-41db-a776-016c3beb92d4",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4e77731f-4f75-4333-9f7d-b907e9a699a2"
        },
        "item": {
          "id": "7efb3764-9f9b-490a-9ee8-c97148f974c5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "62c1679b-f416-4051-b3c2-ab14d7c6dda0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efb3764-9f9b-490a-9ee8-c97148f974c5",
        "cursor": {
          "ref": "dd30882b-729f-41db-a776-016c3beb92d4",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4e77731f-4f75-4333-9f7d-b907e9a699a2"
        },
        "item": {
          "id": "7efb3764-9f9b-490a-9ee8-c97148f974c5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "62c1679b-f416-4051-b3c2-ab14d7c6dda0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1dca1c1-15cb-4ab7-b37c-3dfe721d7cd8",
        "cursor": {
          "ref": "5dfa734f-0751-4934-808d-5a07562b1a67",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7d2031a8-db20-42b0-9242-f22b6b97d840"
        },
        "item": {
          "id": "b1dca1c1-15cb-4ab7-b37c-3dfe721d7cd8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c99cd5d9-65cb-4314-a26e-f8f1219d97ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1dca1c1-15cb-4ab7-b37c-3dfe721d7cd8",
        "cursor": {
          "ref": "5dfa734f-0751-4934-808d-5a07562b1a67",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7d2031a8-db20-42b0-9242-f22b6b97d840"
        },
        "item": {
          "id": "b1dca1c1-15cb-4ab7-b37c-3dfe721d7cd8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c99cd5d9-65cb-4314-a26e-f8f1219d97ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf7bd64-ccbc-46b8-a2ca-f22c5579e3ac",
        "cursor": {
          "ref": "cb1090d7-526c-408e-b8b1-546249b8f9c1",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "57555edf-e313-42cc-9c09-644befea67f4"
        },
        "item": {
          "id": "4bf7bd64-ccbc-46b8-a2ca-f22c5579e3ac",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "668110d5-fcac-405e-8ef9-0087fdbae47a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf7bd64-ccbc-46b8-a2ca-f22c5579e3ac",
        "cursor": {
          "ref": "cb1090d7-526c-408e-b8b1-546249b8f9c1",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "57555edf-e313-42cc-9c09-644befea67f4"
        },
        "item": {
          "id": "4bf7bd64-ccbc-46b8-a2ca-f22c5579e3ac",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "668110d5-fcac-405e-8ef9-0087fdbae47a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c33946f-dd05-4eea-aa71-40798be5eab6",
        "cursor": {
          "ref": "986c3edd-d79f-497d-9c8c-3225ef7f4c6d",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6b20d54d-ce52-4200-9030-4c92a0dd463e"
        },
        "item": {
          "id": "9c33946f-dd05-4eea-aa71-40798be5eab6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "905041d4-ba04-40f9-8745-80c0a45e9fa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c33946f-dd05-4eea-aa71-40798be5eab6",
        "cursor": {
          "ref": "986c3edd-d79f-497d-9c8c-3225ef7f4c6d",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6b20d54d-ce52-4200-9030-4c92a0dd463e"
        },
        "item": {
          "id": "9c33946f-dd05-4eea-aa71-40798be5eab6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "905041d4-ba04-40f9-8745-80c0a45e9fa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05b716c-430e-4d38-aec2-5403aa24767d",
        "cursor": {
          "ref": "05e0bdb4-26b3-4e7b-934a-27979da14af9",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "34fe48ac-485b-4278-91d1-ca59c338f2a2"
        },
        "item": {
          "id": "b05b716c-430e-4d38-aec2-5403aa24767d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8a509ad1-3bfc-46e7-ae50-8a97f9cd03a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05b716c-430e-4d38-aec2-5403aa24767d",
        "cursor": {
          "ref": "05e0bdb4-26b3-4e7b-934a-27979da14af9",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "34fe48ac-485b-4278-91d1-ca59c338f2a2"
        },
        "item": {
          "id": "b05b716c-430e-4d38-aec2-5403aa24767d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8a509ad1-3bfc-46e7-ae50-8a97f9cd03a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e16f744-c9cf-451e-af21-1e965dd7e72c",
        "cursor": {
          "ref": "ef0a4f05-d70b-459e-9166-122fa0047333",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a7024c41-3b22-44cf-ac67-09a46e2e6005"
        },
        "item": {
          "id": "8e16f744-c9cf-451e-af21-1e965dd7e72c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cece8a39-20c6-4434-a9d4-a60b1e55c33e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e16f744-c9cf-451e-af21-1e965dd7e72c",
        "cursor": {
          "ref": "ef0a4f05-d70b-459e-9166-122fa0047333",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a7024c41-3b22-44cf-ac67-09a46e2e6005"
        },
        "item": {
          "id": "8e16f744-c9cf-451e-af21-1e965dd7e72c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cece8a39-20c6-4434-a9d4-a60b1e55c33e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98238c52-b45f-4425-994a-054a3ea8a9f3",
        "cursor": {
          "ref": "8ef42fe9-9888-41ce-a8ce-4d33f8bda021",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5fe779ae-d664-41a4-a72a-73178705617c"
        },
        "item": {
          "id": "98238c52-b45f-4425-994a-054a3ea8a9f3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b825cb71-9289-43c2-b7fe-302562835593",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98238c52-b45f-4425-994a-054a3ea8a9f3",
        "cursor": {
          "ref": "8ef42fe9-9888-41ce-a8ce-4d33f8bda021",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5fe779ae-d664-41a4-a72a-73178705617c"
        },
        "item": {
          "id": "98238c52-b45f-4425-994a-054a3ea8a9f3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b825cb71-9289-43c2-b7fe-302562835593",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5c154c-6bf6-4e9a-92ad-f0604babc4de",
        "cursor": {
          "ref": "bc71a509-df65-4d29-ae73-415a1c4827ea",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2d369f6c-8e12-48d3-9601-7fed72506f3f"
        },
        "item": {
          "id": "2f5c154c-6bf6-4e9a-92ad-f0604babc4de",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e573cf4f-cc23-484d-9cc6-a79170660681",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5c154c-6bf6-4e9a-92ad-f0604babc4de",
        "cursor": {
          "ref": "bc71a509-df65-4d29-ae73-415a1c4827ea",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2d369f6c-8e12-48d3-9601-7fed72506f3f"
        },
        "item": {
          "id": "2f5c154c-6bf6-4e9a-92ad-f0604babc4de",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e573cf4f-cc23-484d-9cc6-a79170660681",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a6fbdc-3869-422a-b79b-092245098be9",
        "cursor": {
          "ref": "791d1205-4d52-4953-acb5-bde32006ebba",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9cee02d0-2a41-42c2-bd01-612dadc509aa"
        },
        "item": {
          "id": "39a6fbdc-3869-422a-b79b-092245098be9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d146d581-9902-4668-84ff-55fae721ac28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a6fbdc-3869-422a-b79b-092245098be9",
        "cursor": {
          "ref": "791d1205-4d52-4953-acb5-bde32006ebba",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9cee02d0-2a41-42c2-bd01-612dadc509aa"
        },
        "item": {
          "id": "39a6fbdc-3869-422a-b79b-092245098be9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d146d581-9902-4668-84ff-55fae721ac28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eeac302-2fc2-4b1f-ac21-3dcfcb011ced",
        "cursor": {
          "ref": "f80762bc-b891-4623-9a65-66e8cadb54b7",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "305e9e48-bc9f-4da9-9a3c-86acf55f5cc6"
        },
        "item": {
          "id": "5eeac302-2fc2-4b1f-ac21-3dcfcb011ced",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ff19ed62-990b-4efa-a257-fd0c0a295794",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eeac302-2fc2-4b1f-ac21-3dcfcb011ced",
        "cursor": {
          "ref": "f80762bc-b891-4623-9a65-66e8cadb54b7",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "305e9e48-bc9f-4da9-9a3c-86acf55f5cc6"
        },
        "item": {
          "id": "5eeac302-2fc2-4b1f-ac21-3dcfcb011ced",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ff19ed62-990b-4efa-a257-fd0c0a295794",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b84d266-25e4-4f78-9397-42257200295c",
        "cursor": {
          "ref": "e3c82ac8-a0b2-4195-93b8-04f47c3896a4",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0d0e6dd5-2cd3-4135-a8d1-a1726264fbc1"
        },
        "item": {
          "id": "2b84d266-25e4-4f78-9397-42257200295c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "36f38133-3dcf-4b3c-abde-44daf2089396",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b84d266-25e4-4f78-9397-42257200295c",
        "cursor": {
          "ref": "e3c82ac8-a0b2-4195-93b8-04f47c3896a4",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0d0e6dd5-2cd3-4135-a8d1-a1726264fbc1"
        },
        "item": {
          "id": "2b84d266-25e4-4f78-9397-42257200295c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "36f38133-3dcf-4b3c-abde-44daf2089396",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66091f4f-39b2-4f72-a736-cc98ac289505",
        "cursor": {
          "ref": "dea5b3b9-ad9a-4a1e-b81e-d46a1beb169a",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "419efa6e-2653-457c-9713-8659e6d46aee"
        },
        "item": {
          "id": "66091f4f-39b2-4f72-a736-cc98ac289505",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d31b460e-ac7f-454e-be11-2583a14f7cbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66091f4f-39b2-4f72-a736-cc98ac289505",
        "cursor": {
          "ref": "dea5b3b9-ad9a-4a1e-b81e-d46a1beb169a",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "419efa6e-2653-457c-9713-8659e6d46aee"
        },
        "item": {
          "id": "66091f4f-39b2-4f72-a736-cc98ac289505",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d31b460e-ac7f-454e-be11-2583a14f7cbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1615689-e54e-4c41-bc98-1d18426984fb",
        "cursor": {
          "ref": "6bda8729-2082-4ea8-a7a2-3a3ef7135681",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "adb32152-f408-4145-9292-768ecc05b00d"
        },
        "item": {
          "id": "a1615689-e54e-4c41-bc98-1d18426984fb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b0adb7a9-eea0-44df-8c8a-dc632f7b334d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1615689-e54e-4c41-bc98-1d18426984fb",
        "cursor": {
          "ref": "6bda8729-2082-4ea8-a7a2-3a3ef7135681",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "adb32152-f408-4145-9292-768ecc05b00d"
        },
        "item": {
          "id": "a1615689-e54e-4c41-bc98-1d18426984fb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b0adb7a9-eea0-44df-8c8a-dc632f7b334d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facb5d9a-d5cf-48f8-ab8b-ce9488bbb5ab",
        "cursor": {
          "ref": "f64206cd-2c44-4451-9585-d5da596fe5f2",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6a14a6ea-a175-4035-85a6-47644b57eab6"
        },
        "item": {
          "id": "facb5d9a-d5cf-48f8-ab8b-ce9488bbb5ab",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8a3bd7e9-30fa-42c6-ba90-1ecfe75ccd42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facb5d9a-d5cf-48f8-ab8b-ce9488bbb5ab",
        "cursor": {
          "ref": "f64206cd-2c44-4451-9585-d5da596fe5f2",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6a14a6ea-a175-4035-85a6-47644b57eab6"
        },
        "item": {
          "id": "facb5d9a-d5cf-48f8-ab8b-ce9488bbb5ab",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8a3bd7e9-30fa-42c6-ba90-1ecfe75ccd42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228efee2-579e-47ca-af7a-71be8e195609",
        "cursor": {
          "ref": "c4f21eac-cfff-477b-95fa-f5de0c7a9ba9",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d72fe005-2b43-422b-9f28-3b009a9b2667"
        },
        "item": {
          "id": "228efee2-579e-47ca-af7a-71be8e195609",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6fc0793f-5dd6-458a-9dd6-d1aa4e03033d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228efee2-579e-47ca-af7a-71be8e195609",
        "cursor": {
          "ref": "c4f21eac-cfff-477b-95fa-f5de0c7a9ba9",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d72fe005-2b43-422b-9f28-3b009a9b2667"
        },
        "item": {
          "id": "228efee2-579e-47ca-af7a-71be8e195609",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6fc0793f-5dd6-458a-9dd6-d1aa4e03033d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842f4065-aab4-4bd3-b9d7-0417ee1087f6",
        "cursor": {
          "ref": "4a084721-9e0c-4ab1-8855-513b1198f217",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7a70a03e-6e84-450d-b98c-0d2f4b85cff8"
        },
        "item": {
          "id": "842f4065-aab4-4bd3-b9d7-0417ee1087f6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8fb91860-5cec-43a0-8ac1-1cf62952873c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842f4065-aab4-4bd3-b9d7-0417ee1087f6",
        "cursor": {
          "ref": "4a084721-9e0c-4ab1-8855-513b1198f217",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7a70a03e-6e84-450d-b98c-0d2f4b85cff8"
        },
        "item": {
          "id": "842f4065-aab4-4bd3-b9d7-0417ee1087f6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8fb91860-5cec-43a0-8ac1-1cf62952873c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5293114d-c29a-472f-8277-4c666cfe7b4d",
        "cursor": {
          "ref": "e8f350b1-f8d3-4ac5-8ffb-942a8da3747c",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "28b988f0-a74d-4a7c-a1ac-5fef21f92197"
        },
        "item": {
          "id": "5293114d-c29a-472f-8277-4c666cfe7b4d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e842b0b0-bb0e-4bcb-a214-7a2738c9bb01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5293114d-c29a-472f-8277-4c666cfe7b4d",
        "cursor": {
          "ref": "e8f350b1-f8d3-4ac5-8ffb-942a8da3747c",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "28b988f0-a74d-4a7c-a1ac-5fef21f92197"
        },
        "item": {
          "id": "5293114d-c29a-472f-8277-4c666cfe7b4d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e842b0b0-bb0e-4bcb-a214-7a2738c9bb01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d80895a-3a83-471f-8899-1f78d433536e",
        "cursor": {
          "ref": "641a6456-c29b-4d01-ae38-a18c92ab3ccf",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "245089af-fd32-487a-875d-618dd0580029"
        },
        "item": {
          "id": "6d80895a-3a83-471f-8899-1f78d433536e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "42c6c892-7dd1-4b3b-9d16-01b97b5f6928",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d80895a-3a83-471f-8899-1f78d433536e",
        "cursor": {
          "ref": "641a6456-c29b-4d01-ae38-a18c92ab3ccf",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "245089af-fd32-487a-875d-618dd0580029"
        },
        "item": {
          "id": "6d80895a-3a83-471f-8899-1f78d433536e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "42c6c892-7dd1-4b3b-9d16-01b97b5f6928",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a3464c-4c4d-456a-8fd6-e6bde80bb83f",
        "cursor": {
          "ref": "ad844a3d-b2f1-4cb6-a03c-dd57b792b6f4",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "490ed9d9-ab20-48c9-9a9c-4ea681365cab"
        },
        "item": {
          "id": "f7a3464c-4c4d-456a-8fd6-e6bde80bb83f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d5c8c263-e3cb-417e-b031-c741efe0d03c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a3464c-4c4d-456a-8fd6-e6bde80bb83f",
        "cursor": {
          "ref": "ad844a3d-b2f1-4cb6-a03c-dd57b792b6f4",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "490ed9d9-ab20-48c9-9a9c-4ea681365cab"
        },
        "item": {
          "id": "f7a3464c-4c4d-456a-8fd6-e6bde80bb83f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d5c8c263-e3cb-417e-b031-c741efe0d03c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf41fd07-ae19-4f97-a161-11743c5fee4c",
        "cursor": {
          "ref": "601f3568-b295-47b2-adfe-77611feeda56",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "df1a2d97-8798-440a-b933-8d24b046e27a"
        },
        "item": {
          "id": "cf41fd07-ae19-4f97-a161-11743c5fee4c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4443956e-5278-42da-9267-f7aea89f5753",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf41fd07-ae19-4f97-a161-11743c5fee4c",
        "cursor": {
          "ref": "601f3568-b295-47b2-adfe-77611feeda56",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "df1a2d97-8798-440a-b933-8d24b046e27a"
        },
        "item": {
          "id": "cf41fd07-ae19-4f97-a161-11743c5fee4c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4443956e-5278-42da-9267-f7aea89f5753",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e658c0-2dd7-4dc8-89dc-033c87367f9f",
        "cursor": {
          "ref": "877c5cd6-cb78-45dd-a492-457a11bd8034",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1f7ffa0c-425b-4681-bc33-3b1c8e919253"
        },
        "item": {
          "id": "b7e658c0-2dd7-4dc8-89dc-033c87367f9f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a23a943b-34d9-46d6-9df6-7519d5b89c27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e658c0-2dd7-4dc8-89dc-033c87367f9f",
        "cursor": {
          "ref": "877c5cd6-cb78-45dd-a492-457a11bd8034",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1f7ffa0c-425b-4681-bc33-3b1c8e919253"
        },
        "item": {
          "id": "b7e658c0-2dd7-4dc8-89dc-033c87367f9f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a23a943b-34d9-46d6-9df6-7519d5b89c27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380942c8-3d29-4ac1-9322-4c790817ffa4",
        "cursor": {
          "ref": "7fc20f7c-4898-412c-ad5a-07c14dcbd3c5",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e78a7f6d-1497-4d3a-9773-4e28cbc74e53"
        },
        "item": {
          "id": "380942c8-3d29-4ac1-9322-4c790817ffa4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6af67212-aae3-45b6-b260-d0cf34c74d2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380942c8-3d29-4ac1-9322-4c790817ffa4",
        "cursor": {
          "ref": "7fc20f7c-4898-412c-ad5a-07c14dcbd3c5",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e78a7f6d-1497-4d3a-9773-4e28cbc74e53"
        },
        "item": {
          "id": "380942c8-3d29-4ac1-9322-4c790817ffa4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6af67212-aae3-45b6-b260-d0cf34c74d2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c742f180-d823-4962-b193-3eb33ac963b8",
        "cursor": {
          "ref": "0b829e07-936e-4f10-adf3-5f234aa4ba30",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9e4a6029-dad4-4506-b5ec-33a820c0bd77"
        },
        "item": {
          "id": "c742f180-d823-4962-b193-3eb33ac963b8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "31a65893-ef56-4f14-9630-fac9db76531e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c742f180-d823-4962-b193-3eb33ac963b8",
        "cursor": {
          "ref": "0b829e07-936e-4f10-adf3-5f234aa4ba30",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9e4a6029-dad4-4506-b5ec-33a820c0bd77"
        },
        "item": {
          "id": "c742f180-d823-4962-b193-3eb33ac963b8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "31a65893-ef56-4f14-9630-fac9db76531e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eab2c96-824d-4461-b93e-22abc76eac86",
        "cursor": {
          "ref": "f85d3fbc-d12b-4d04-9c89-bb84bd47e6d4",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9d9fc8d1-edec-4b35-9e5c-203dc2549664"
        },
        "item": {
          "id": "1eab2c96-824d-4461-b93e-22abc76eac86",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "678e7753-0b8e-4a24-b986-3488967b50c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eab2c96-824d-4461-b93e-22abc76eac86",
        "cursor": {
          "ref": "f85d3fbc-d12b-4d04-9c89-bb84bd47e6d4",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9d9fc8d1-edec-4b35-9e5c-203dc2549664"
        },
        "item": {
          "id": "1eab2c96-824d-4461-b93e-22abc76eac86",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "678e7753-0b8e-4a24-b986-3488967b50c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4642024-f650-4a1b-8269-021932e99026",
        "cursor": {
          "ref": "59456e61-4103-49ee-ad2f-b0f84a40b587",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fc8e6434-8544-4236-91f5-aad1f7e64405"
        },
        "item": {
          "id": "e4642024-f650-4a1b-8269-021932e99026",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "93dc5a5a-25e0-45cc-8173-6bd06c0a1e10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4642024-f650-4a1b-8269-021932e99026",
        "cursor": {
          "ref": "59456e61-4103-49ee-ad2f-b0f84a40b587",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fc8e6434-8544-4236-91f5-aad1f7e64405"
        },
        "item": {
          "id": "e4642024-f650-4a1b-8269-021932e99026",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "93dc5a5a-25e0-45cc-8173-6bd06c0a1e10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82fc711-2dff-4914-bd2a-dd946f3f37d7",
        "cursor": {
          "ref": "c8712524-6d3f-45bc-9a1d-a5b6a6fd96ba",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5a0f63c6-c3e4-4b90-b107-15f9002c5b76"
        },
        "item": {
          "id": "d82fc711-2dff-4914-bd2a-dd946f3f37d7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "39125a36-676d-45b4-884f-407d74ce0eef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82fc711-2dff-4914-bd2a-dd946f3f37d7",
        "cursor": {
          "ref": "c8712524-6d3f-45bc-9a1d-a5b6a6fd96ba",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5a0f63c6-c3e4-4b90-b107-15f9002c5b76"
        },
        "item": {
          "id": "d82fc711-2dff-4914-bd2a-dd946f3f37d7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "39125a36-676d-45b4-884f-407d74ce0eef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355b133c-5fcc-4825-8124-90b2c6ddb7c0",
        "cursor": {
          "ref": "942d9c98-747b-4090-87e0-3823db1c2ea7",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "eca3ce0d-b5e8-4913-8181-90edc9590eb0"
        },
        "item": {
          "id": "355b133c-5fcc-4825-8124-90b2c6ddb7c0",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d084860b-7c27-4b5d-83ae-00dc948f9440",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355b133c-5fcc-4825-8124-90b2c6ddb7c0",
        "cursor": {
          "ref": "942d9c98-747b-4090-87e0-3823db1c2ea7",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "eca3ce0d-b5e8-4913-8181-90edc9590eb0"
        },
        "item": {
          "id": "355b133c-5fcc-4825-8124-90b2c6ddb7c0",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d084860b-7c27-4b5d-83ae-00dc948f9440",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72ccfca-0c7f-4b5f-b09d-d6175f659651",
        "cursor": {
          "ref": "2fffd531-6e41-4d88-a5d3-6d1abc2885ea",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "79c315b0-8c78-4364-b8e0-c81c2f1e18ea"
        },
        "item": {
          "id": "f72ccfca-0c7f-4b5f-b09d-d6175f659651",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5c12a858-9799-40c6-b6aa-6c749a3a7dfe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72ccfca-0c7f-4b5f-b09d-d6175f659651",
        "cursor": {
          "ref": "2fffd531-6e41-4d88-a5d3-6d1abc2885ea",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "79c315b0-8c78-4364-b8e0-c81c2f1e18ea"
        },
        "item": {
          "id": "f72ccfca-0c7f-4b5f-b09d-d6175f659651",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5c12a858-9799-40c6-b6aa-6c749a3a7dfe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f560b7bd-fb4c-4abd-81a8-3f8a7f2b8da2",
        "cursor": {
          "ref": "ec768f60-f02a-46bb-a2be-f708a516e6cc",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1b2279a6-2d5a-4477-9f72-c28025b0fe64"
        },
        "item": {
          "id": "f560b7bd-fb4c-4abd-81a8-3f8a7f2b8da2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "96f1c850-c216-48f1-a66a-2efb36889699",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f560b7bd-fb4c-4abd-81a8-3f8a7f2b8da2",
        "cursor": {
          "ref": "ec768f60-f02a-46bb-a2be-f708a516e6cc",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1b2279a6-2d5a-4477-9f72-c28025b0fe64"
        },
        "item": {
          "id": "f560b7bd-fb4c-4abd-81a8-3f8a7f2b8da2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "96f1c850-c216-48f1-a66a-2efb36889699",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c47fa04-4058-4c66-8d49-ccda51c9d770",
        "cursor": {
          "ref": "4726abe7-e967-4737-90bb-7f2bd3e9f5c0",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8a71856c-5918-4b2f-b31b-b978a324bd89"
        },
        "item": {
          "id": "4c47fa04-4058-4c66-8d49-ccda51c9d770",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e25bc8e4-833c-41e2-b7e7-3e2f74776334",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c47fa04-4058-4c66-8d49-ccda51c9d770",
        "cursor": {
          "ref": "4726abe7-e967-4737-90bb-7f2bd3e9f5c0",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8a71856c-5918-4b2f-b31b-b978a324bd89"
        },
        "item": {
          "id": "4c47fa04-4058-4c66-8d49-ccda51c9d770",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e25bc8e4-833c-41e2-b7e7-3e2f74776334",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365a390f-60b1-47c2-add9-354cf5828e5f",
        "cursor": {
          "ref": "ba22ecc4-25d0-4852-b200-af1c94e1c256",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ca0a3af6-6ddd-4d10-adf4-3efda0f16880"
        },
        "item": {
          "id": "365a390f-60b1-47c2-add9-354cf5828e5f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b597d974-7589-48d7-b1c1-3ecd6eeb52bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365a390f-60b1-47c2-add9-354cf5828e5f",
        "cursor": {
          "ref": "ba22ecc4-25d0-4852-b200-af1c94e1c256",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ca0a3af6-6ddd-4d10-adf4-3efda0f16880"
        },
        "item": {
          "id": "365a390f-60b1-47c2-add9-354cf5828e5f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b597d974-7589-48d7-b1c1-3ecd6eeb52bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273b14e3-d331-4674-9932-d10f76577a1b",
        "cursor": {
          "ref": "152ab864-3fbb-436c-bebb-4a37aeb7f2e7",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c679990c-0b29-42d7-91ac-e472fb393942"
        },
        "item": {
          "id": "273b14e3-d331-4674-9932-d10f76577a1b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2cfd93a5-60a6-494e-9f6b-71c7368570dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273b14e3-d331-4674-9932-d10f76577a1b",
        "cursor": {
          "ref": "152ab864-3fbb-436c-bebb-4a37aeb7f2e7",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c679990c-0b29-42d7-91ac-e472fb393942"
        },
        "item": {
          "id": "273b14e3-d331-4674-9932-d10f76577a1b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2cfd93a5-60a6-494e-9f6b-71c7368570dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487d457b-495c-4796-8d64-e834e672bf0a",
        "cursor": {
          "ref": "270bf51b-b3f4-4cb3-9ee2-28c1bd749339",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5b93e43c-4101-4f11-b29a-d9e0f3cd8581"
        },
        "item": {
          "id": "487d457b-495c-4796-8d64-e834e672bf0a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9bac3b65-7c8a-4692-8942-eba792d68d19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487d457b-495c-4796-8d64-e834e672bf0a",
        "cursor": {
          "ref": "270bf51b-b3f4-4cb3-9ee2-28c1bd749339",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5b93e43c-4101-4f11-b29a-d9e0f3cd8581"
        },
        "item": {
          "id": "487d457b-495c-4796-8d64-e834e672bf0a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9bac3b65-7c8a-4692-8942-eba792d68d19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497af808-b6f0-4bb2-a65c-d81c03a5708a",
        "cursor": {
          "ref": "6d463a29-9caf-4570-a193-d026fb9b5071",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "74a83bba-99f5-441b-a112-7336d24b8cbe"
        },
        "item": {
          "id": "497af808-b6f0-4bb2-a65c-d81c03a5708a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "40f414e1-f97a-4871-97dc-2e542f0ce7c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "497af808-b6f0-4bb2-a65c-d81c03a5708a",
        "cursor": {
          "ref": "6d463a29-9caf-4570-a193-d026fb9b5071",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "74a83bba-99f5-441b-a112-7336d24b8cbe"
        },
        "item": {
          "id": "497af808-b6f0-4bb2-a65c-d81c03a5708a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "40f414e1-f97a-4871-97dc-2e542f0ce7c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc515102-f56f-47cc-a7b3-17fa3f6280c4",
        "cursor": {
          "ref": "9eae57cb-cfd1-4f12-ad80-a403e69ac990",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7d3d70f6-5d23-4701-8ac8-316ba3fc7dea"
        },
        "item": {
          "id": "fc515102-f56f-47cc-a7b3-17fa3f6280c4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "97f87280-ed0c-4bfa-a9d6-e3564ec19947",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc515102-f56f-47cc-a7b3-17fa3f6280c4",
        "cursor": {
          "ref": "9eae57cb-cfd1-4f12-ad80-a403e69ac990",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7d3d70f6-5d23-4701-8ac8-316ba3fc7dea"
        },
        "item": {
          "id": "fc515102-f56f-47cc-a7b3-17fa3f6280c4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "97f87280-ed0c-4bfa-a9d6-e3564ec19947",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a1f685-b8b9-4e6f-b78a-891e29f07eaf",
        "cursor": {
          "ref": "289d3a4f-736c-41f8-ad44-f20ecad00a3f",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e56286a8-9c54-4377-802e-ead075bc9b0c"
        },
        "item": {
          "id": "07a1f685-b8b9-4e6f-b78a-891e29f07eaf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "531dbe35-7f2a-4c2b-a828-fc41f254810c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a1f685-b8b9-4e6f-b78a-891e29f07eaf",
        "cursor": {
          "ref": "289d3a4f-736c-41f8-ad44-f20ecad00a3f",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e56286a8-9c54-4377-802e-ead075bc9b0c"
        },
        "item": {
          "id": "07a1f685-b8b9-4e6f-b78a-891e29f07eaf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "531dbe35-7f2a-4c2b-a828-fc41f254810c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ee4180-83d7-4938-a5ab-f3d2040f86a1",
        "cursor": {
          "ref": "97e96ee6-0930-4b77-8675-76d6ee4b44cd",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2bb4b3d2-98cf-4b04-9bcc-975cbcbe523f"
        },
        "item": {
          "id": "74ee4180-83d7-4938-a5ab-f3d2040f86a1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "88bb0aae-f0e8-4a8f-ac34-db7d2ee32228",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ee4180-83d7-4938-a5ab-f3d2040f86a1",
        "cursor": {
          "ref": "97e96ee6-0930-4b77-8675-76d6ee4b44cd",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2bb4b3d2-98cf-4b04-9bcc-975cbcbe523f"
        },
        "item": {
          "id": "74ee4180-83d7-4938-a5ab-f3d2040f86a1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "88bb0aae-f0e8-4a8f-ac34-db7d2ee32228",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7bc810-d36f-4569-9f43-8363cf41dd29",
        "cursor": {
          "ref": "932127d9-9652-45ef-a43e-ac50f02eebd5",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "73523ac5-c992-47d3-91a6-3a7ad0648831"
        },
        "item": {
          "id": "ec7bc810-d36f-4569-9f43-8363cf41dd29",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "40cfa2a4-c87a-45b3-9cdf-6f12c325c5d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7bc810-d36f-4569-9f43-8363cf41dd29",
        "cursor": {
          "ref": "932127d9-9652-45ef-a43e-ac50f02eebd5",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "73523ac5-c992-47d3-91a6-3a7ad0648831"
        },
        "item": {
          "id": "ec7bc810-d36f-4569-9f43-8363cf41dd29",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "40cfa2a4-c87a-45b3-9cdf-6f12c325c5d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31e586a-53c2-4ea6-9ff6-6bfcec104861",
        "cursor": {
          "ref": "3d17de1c-cb3f-4bb0-99e3-ee61b45903e0",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1165dcae-ec47-4228-b832-cb77e5e8d68b"
        },
        "item": {
          "id": "e31e586a-53c2-4ea6-9ff6-6bfcec104861",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bebd4a8a-7436-4a20-a83e-f933f328d59d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31e586a-53c2-4ea6-9ff6-6bfcec104861",
        "cursor": {
          "ref": "3d17de1c-cb3f-4bb0-99e3-ee61b45903e0",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1165dcae-ec47-4228-b832-cb77e5e8d68b"
        },
        "item": {
          "id": "e31e586a-53c2-4ea6-9ff6-6bfcec104861",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bebd4a8a-7436-4a20-a83e-f933f328d59d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34eec88d-89bf-43cb-8657-63f578491568",
        "cursor": {
          "ref": "f0e2d058-1af7-42ac-95cb-8a4b563f628e",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "115f7b64-38b0-4023-b91a-19bfcd0b9cf0"
        },
        "item": {
          "id": "34eec88d-89bf-43cb-8657-63f578491568",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c834466d-0d7f-473b-ac05-0763d404461e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34eec88d-89bf-43cb-8657-63f578491568",
        "cursor": {
          "ref": "f0e2d058-1af7-42ac-95cb-8a4b563f628e",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "115f7b64-38b0-4023-b91a-19bfcd0b9cf0"
        },
        "item": {
          "id": "34eec88d-89bf-43cb-8657-63f578491568",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c834466d-0d7f-473b-ac05-0763d404461e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40441def-3203-4b7c-944b-34ea769d4e6f",
        "cursor": {
          "ref": "89f1f8f3-f3e5-46a5-b9be-f98d4088a81a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0078503d-4817-401e-bfce-fbcc09c25e52"
        },
        "item": {
          "id": "40441def-3203-4b7c-944b-34ea769d4e6f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4aecc246-b0da-4ea8-8040-a854d5cec00b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40441def-3203-4b7c-944b-34ea769d4e6f",
        "cursor": {
          "ref": "89f1f8f3-f3e5-46a5-b9be-f98d4088a81a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0078503d-4817-401e-bfce-fbcc09c25e52"
        },
        "item": {
          "id": "40441def-3203-4b7c-944b-34ea769d4e6f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4aecc246-b0da-4ea8-8040-a854d5cec00b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a27a882-efb3-44a4-8a90-69e0093f73de",
        "cursor": {
          "ref": "1bce49c5-9b6c-4fe1-966f-c609d7ac06d3",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "19b7a817-45b2-40e3-a59b-25344650a8df"
        },
        "item": {
          "id": "6a27a882-efb3-44a4-8a90-69e0093f73de",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9b8f2830-92cc-4828-bbc3-0ba1e5c55ebf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a27a882-efb3-44a4-8a90-69e0093f73de",
        "cursor": {
          "ref": "1bce49c5-9b6c-4fe1-966f-c609d7ac06d3",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "19b7a817-45b2-40e3-a59b-25344650a8df"
        },
        "item": {
          "id": "6a27a882-efb3-44a4-8a90-69e0093f73de",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9b8f2830-92cc-4828-bbc3-0ba1e5c55ebf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee50da7b-ddd6-4083-bc8a-aa19d9430da8",
        "cursor": {
          "ref": "fe66c9eb-b220-4166-a558-10991afaaf51",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "68d93abe-36cb-45e4-87a3-78ba0ac7a6a7"
        },
        "item": {
          "id": "ee50da7b-ddd6-4083-bc8a-aa19d9430da8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5d633667-49e5-4837-a3e7-ae9a58200edc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee50da7b-ddd6-4083-bc8a-aa19d9430da8",
        "cursor": {
          "ref": "fe66c9eb-b220-4166-a558-10991afaaf51",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "68d93abe-36cb-45e4-87a3-78ba0ac7a6a7"
        },
        "item": {
          "id": "ee50da7b-ddd6-4083-bc8a-aa19d9430da8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5d633667-49e5-4837-a3e7-ae9a58200edc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a596094f-0591-49b4-b96a-3c333a9431a1",
        "cursor": {
          "ref": "a1c829a2-7810-46a3-b2bb-3116d8523575",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bc91a5e9-fe72-4f46-81df-eca437050b93"
        },
        "item": {
          "id": "a596094f-0591-49b4-b96a-3c333a9431a1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0e8fb98b-e7bd-4413-8001-b94daff659ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a596094f-0591-49b4-b96a-3c333a9431a1",
        "cursor": {
          "ref": "a1c829a2-7810-46a3-b2bb-3116d8523575",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bc91a5e9-fe72-4f46-81df-eca437050b93"
        },
        "item": {
          "id": "a596094f-0591-49b4-b96a-3c333a9431a1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0e8fb98b-e7bd-4413-8001-b94daff659ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487c09d8-f642-446a-805e-fff5c7646cef",
        "cursor": {
          "ref": "a2d582a9-0b4e-48b5-907f-5e07371aba97",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0f77e90c-7ae5-4935-bd17-2cc49fb8d991"
        },
        "item": {
          "id": "487c09d8-f642-446a-805e-fff5c7646cef",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "dcb3d8c3-8af5-47e0-acad-742f3a712a85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487c09d8-f642-446a-805e-fff5c7646cef",
        "cursor": {
          "ref": "a2d582a9-0b4e-48b5-907f-5e07371aba97",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0f77e90c-7ae5-4935-bd17-2cc49fb8d991"
        },
        "item": {
          "id": "487c09d8-f642-446a-805e-fff5c7646cef",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "dcb3d8c3-8af5-47e0-acad-742f3a712a85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25584169-3fb7-43c1-ba1c-4abac6a210ed",
        "cursor": {
          "ref": "a72eb41e-89fa-4fb8-8781-71e7fade96e2",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fea3ab30-49b1-43de-90c6-4b33e83cb279"
        },
        "item": {
          "id": "25584169-3fb7-43c1-ba1c-4abac6a210ed",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "74e7ff12-bbb3-4f7e-8157-63149e66b35d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25584169-3fb7-43c1-ba1c-4abac6a210ed",
        "cursor": {
          "ref": "a72eb41e-89fa-4fb8-8781-71e7fade96e2",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fea3ab30-49b1-43de-90c6-4b33e83cb279"
        },
        "item": {
          "id": "25584169-3fb7-43c1-ba1c-4abac6a210ed",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "74e7ff12-bbb3-4f7e-8157-63149e66b35d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba1398a-3f8e-491a-aad6-b7270222b0b2",
        "cursor": {
          "ref": "31d3d12b-4e7d-414b-905f-3e1de514984d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c2589465-5416-4272-b830-787cd69e7efe"
        },
        "item": {
          "id": "0ba1398a-3f8e-491a-aad6-b7270222b0b2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "85fc7428-a8dd-4f22-b29d-e2680991b537",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba1398a-3f8e-491a-aad6-b7270222b0b2",
        "cursor": {
          "ref": "31d3d12b-4e7d-414b-905f-3e1de514984d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c2589465-5416-4272-b830-787cd69e7efe"
        },
        "item": {
          "id": "0ba1398a-3f8e-491a-aad6-b7270222b0b2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "85fc7428-a8dd-4f22-b29d-e2680991b537",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02676259-6f99-4f88-8199-0346bdbd6516",
        "cursor": {
          "ref": "ac4ce996-5a6b-49c1-9666-78d6cc0226cc",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2975716c-46cf-4f3d-87cc-befce6f04954"
        },
        "item": {
          "id": "02676259-6f99-4f88-8199-0346bdbd6516",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "47de896b-410d-4a43-939c-c9dc8d094d3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02676259-6f99-4f88-8199-0346bdbd6516",
        "cursor": {
          "ref": "ac4ce996-5a6b-49c1-9666-78d6cc0226cc",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2975716c-46cf-4f3d-87cc-befce6f04954"
        },
        "item": {
          "id": "02676259-6f99-4f88-8199-0346bdbd6516",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "47de896b-410d-4a43-939c-c9dc8d094d3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef643946-f219-4293-930b-d4dfc92ea030",
        "cursor": {
          "ref": "3fe09d08-9243-4891-8267-449c33838313",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bcb4a423-314b-4de5-a79a-5c5b4981eea2"
        },
        "item": {
          "id": "ef643946-f219-4293-930b-d4dfc92ea030",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "512cf40a-eb3e-466a-a868-c7d509bf4f28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef643946-f219-4293-930b-d4dfc92ea030",
        "cursor": {
          "ref": "3fe09d08-9243-4891-8267-449c33838313",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bcb4a423-314b-4de5-a79a-5c5b4981eea2"
        },
        "item": {
          "id": "ef643946-f219-4293-930b-d4dfc92ea030",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "512cf40a-eb3e-466a-a868-c7d509bf4f28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad2ba4a-0734-4d80-a0ae-f99674844441",
        "cursor": {
          "ref": "97832055-ab72-4442-8f89-cf7a835860ca",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "835a6821-c4d7-4325-aea9-be72ddcb5ed7"
        },
        "item": {
          "id": "0ad2ba4a-0734-4d80-a0ae-f99674844441",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "78fd9799-63d0-4776-9b68-75c3effe1582",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad2ba4a-0734-4d80-a0ae-f99674844441",
        "cursor": {
          "ref": "97832055-ab72-4442-8f89-cf7a835860ca",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "835a6821-c4d7-4325-aea9-be72ddcb5ed7"
        },
        "item": {
          "id": "0ad2ba4a-0734-4d80-a0ae-f99674844441",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "78fd9799-63d0-4776-9b68-75c3effe1582",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae28d73-ee77-43d6-b0df-62c32dac9fc4",
        "cursor": {
          "ref": "c632133a-e616-427a-85f9-277d32fbf63f",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1c2e878d-38ba-466b-8733-068f226ae2e1"
        },
        "item": {
          "id": "5ae28d73-ee77-43d6-b0df-62c32dac9fc4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d4bcebc2-0c67-4d9d-8a8a-8fd079874bf8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae28d73-ee77-43d6-b0df-62c32dac9fc4",
        "cursor": {
          "ref": "c632133a-e616-427a-85f9-277d32fbf63f",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1c2e878d-38ba-466b-8733-068f226ae2e1"
        },
        "item": {
          "id": "5ae28d73-ee77-43d6-b0df-62c32dac9fc4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d4bcebc2-0c67-4d9d-8a8a-8fd079874bf8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d588179e-79f5-443d-95ac-ebd6f05dddde",
        "cursor": {
          "ref": "06bf1007-383a-4ffb-ba8c-e9158ba432bc",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "edd56f66-59cb-468b-8ad0-157b84fdb2af"
        },
        "item": {
          "id": "d588179e-79f5-443d-95ac-ebd6f05dddde",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "735a16d3-a407-494d-a31b-ef5be6b39cba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d588179e-79f5-443d-95ac-ebd6f05dddde",
        "cursor": {
          "ref": "06bf1007-383a-4ffb-ba8c-e9158ba432bc",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "edd56f66-59cb-468b-8ad0-157b84fdb2af"
        },
        "item": {
          "id": "d588179e-79f5-443d-95ac-ebd6f05dddde",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "735a16d3-a407-494d-a31b-ef5be6b39cba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8622a686-1d64-4c5e-93bf-9f03fd0042e5",
        "cursor": {
          "ref": "929b2519-832e-44d7-a9b2-01bc56751618",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "50fed52f-06ec-4e04-83f5-7c56900cc455"
        },
        "item": {
          "id": "8622a686-1d64-4c5e-93bf-9f03fd0042e5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3f093e14-341d-4778-8204-3f89bb2da926",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8622a686-1d64-4c5e-93bf-9f03fd0042e5",
        "cursor": {
          "ref": "929b2519-832e-44d7-a9b2-01bc56751618",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "50fed52f-06ec-4e04-83f5-7c56900cc455"
        },
        "item": {
          "id": "8622a686-1d64-4c5e-93bf-9f03fd0042e5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3f093e14-341d-4778-8204-3f89bb2da926",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a7f92a-e225-4338-a432-c1be4d8f658f",
        "cursor": {
          "ref": "629b6b31-9d32-434e-820c-2a810e808bac",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7b7b70c2-5dc7-4723-956c-d4ffbc3caefb"
        },
        "item": {
          "id": "05a7f92a-e225-4338-a432-c1be4d8f658f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "68cddb37-b8c2-4694-8bd4-6b4e57ee056d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a7f92a-e225-4338-a432-c1be4d8f658f",
        "cursor": {
          "ref": "629b6b31-9d32-434e-820c-2a810e808bac",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7b7b70c2-5dc7-4723-956c-d4ffbc3caefb"
        },
        "item": {
          "id": "05a7f92a-e225-4338-a432-c1be4d8f658f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "68cddb37-b8c2-4694-8bd4-6b4e57ee056d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f60355-51cc-405e-8d21-5fca679d233d",
        "cursor": {
          "ref": "8de0f78d-f999-4dca-95ef-61cefd4dad8b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7d3e0602-a79a-41a8-be23-6e1e9096605d"
        },
        "item": {
          "id": "78f60355-51cc-405e-8d21-5fca679d233d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3dd74673-af79-4fce-b9ed-e73180249228",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f60355-51cc-405e-8d21-5fca679d233d",
        "cursor": {
          "ref": "8de0f78d-f999-4dca-95ef-61cefd4dad8b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7d3e0602-a79a-41a8-be23-6e1e9096605d"
        },
        "item": {
          "id": "78f60355-51cc-405e-8d21-5fca679d233d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3dd74673-af79-4fce-b9ed-e73180249228",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02cd067-203b-4f29-8833-86bd65b91e66",
        "cursor": {
          "ref": "fbfabdd7-189f-4987-b4d9-6b95787cac1a",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "479561a5-ae76-4fb7-a89c-02245830cc5e"
        },
        "item": {
          "id": "b02cd067-203b-4f29-8833-86bd65b91e66",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c1e365a1-830f-4a14-bb57-f7a056db5983",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02cd067-203b-4f29-8833-86bd65b91e66",
        "cursor": {
          "ref": "fbfabdd7-189f-4987-b4d9-6b95787cac1a",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "479561a5-ae76-4fb7-a89c-02245830cc5e"
        },
        "item": {
          "id": "b02cd067-203b-4f29-8833-86bd65b91e66",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c1e365a1-830f-4a14-bb57-f7a056db5983",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7475ce39-b738-4a8a-bd07-863522809300",
        "cursor": {
          "ref": "37f5c340-0712-4d5f-9326-60700d797951",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "73786ad8-7cb5-4773-ba94-ced3b66385fd"
        },
        "item": {
          "id": "7475ce39-b738-4a8a-bd07-863522809300",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "50a6c12d-9d21-46d0-9d76-2668d8dd1231",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7475ce39-b738-4a8a-bd07-863522809300",
        "cursor": {
          "ref": "37f5c340-0712-4d5f-9326-60700d797951",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "73786ad8-7cb5-4773-ba94-ced3b66385fd"
        },
        "item": {
          "id": "7475ce39-b738-4a8a-bd07-863522809300",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "50a6c12d-9d21-46d0-9d76-2668d8dd1231",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98deb146-a3ec-4544-ac76-23dd79da709c",
        "cursor": {
          "ref": "9bb4caa1-7394-415f-8f3f-b31d9caf6b4c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "664b27fb-1cb7-4d72-82f8-3d8b50275bc1"
        },
        "item": {
          "id": "98deb146-a3ec-4544-ac76-23dd79da709c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "397dedaa-3a00-4cf0-a896-87881e5a1a45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98deb146-a3ec-4544-ac76-23dd79da709c",
        "cursor": {
          "ref": "9bb4caa1-7394-415f-8f3f-b31d9caf6b4c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "664b27fb-1cb7-4d72-82f8-3d8b50275bc1"
        },
        "item": {
          "id": "98deb146-a3ec-4544-ac76-23dd79da709c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "397dedaa-3a00-4cf0-a896-87881e5a1a45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780d5c14-076a-44e5-9140-8525e1daa7ab",
        "cursor": {
          "ref": "70bf9e4a-8d4c-4283-95b3-e5f0d8d9be51",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f3adeba8-37b9-4348-9cef-871674666189"
        },
        "item": {
          "id": "780d5c14-076a-44e5-9140-8525e1daa7ab",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1d781955-0291-4e6a-80a8-02219c274107",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780d5c14-076a-44e5-9140-8525e1daa7ab",
        "cursor": {
          "ref": "70bf9e4a-8d4c-4283-95b3-e5f0d8d9be51",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f3adeba8-37b9-4348-9cef-871674666189"
        },
        "item": {
          "id": "780d5c14-076a-44e5-9140-8525e1daa7ab",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1d781955-0291-4e6a-80a8-02219c274107",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e68c675-846d-4b2d-92b3-9bd9132be12e",
        "cursor": {
          "ref": "f1cf63a0-0519-44bc-a431-242343af59b6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "253506c3-3744-43b7-be98-c716c62af9b1"
        },
        "item": {
          "id": "1e68c675-846d-4b2d-92b3-9bd9132be12e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c65399ee-fd7d-4a06-b5af-8c2a4691e5f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e68c675-846d-4b2d-92b3-9bd9132be12e",
        "cursor": {
          "ref": "f1cf63a0-0519-44bc-a431-242343af59b6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "253506c3-3744-43b7-be98-c716c62af9b1"
        },
        "item": {
          "id": "1e68c675-846d-4b2d-92b3-9bd9132be12e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c65399ee-fd7d-4a06-b5af-8c2a4691e5f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8204e15-a770-456a-a5df-4ac4e261b19f",
        "cursor": {
          "ref": "035f57cb-c883-46f6-9e5d-30a57017d22f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "668564f3-e40a-43e5-944b-dbd40241c33b"
        },
        "item": {
          "id": "f8204e15-a770-456a-a5df-4ac4e261b19f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "74263675-d4e0-4be8-9350-edf451b8a572",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8204e15-a770-456a-a5df-4ac4e261b19f",
        "cursor": {
          "ref": "035f57cb-c883-46f6-9e5d-30a57017d22f",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "668564f3-e40a-43e5-944b-dbd40241c33b"
        },
        "item": {
          "id": "f8204e15-a770-456a-a5df-4ac4e261b19f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "74263675-d4e0-4be8-9350-edf451b8a572",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ae9829-5ebb-4113-9c42-fd5a204a8cb9",
        "cursor": {
          "ref": "dd547c1d-b026-4b9f-bb96-9090324fee6e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c7625534-9ddc-45ed-b96a-961e454428ad"
        },
        "item": {
          "id": "e5ae9829-5ebb-4113-9c42-fd5a204a8cb9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b12f748c-4f86-4851-8e4f-3e5d83adaca4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ae9829-5ebb-4113-9c42-fd5a204a8cb9",
        "cursor": {
          "ref": "dd547c1d-b026-4b9f-bb96-9090324fee6e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c7625534-9ddc-45ed-b96a-961e454428ad"
        },
        "item": {
          "id": "e5ae9829-5ebb-4113-9c42-fd5a204a8cb9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b12f748c-4f86-4851-8e4f-3e5d83adaca4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ae6530-465e-424b-95ce-48fbe9be62df",
        "cursor": {
          "ref": "8a76a1ac-7423-45d9-9d55-8094ddd28bb8",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0c62bb8a-8a97-4c1f-b0bf-b2dd10f12c9b"
        },
        "item": {
          "id": "31ae6530-465e-424b-95ce-48fbe9be62df",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b92141ac-674e-4eda-9112-fdb6c6d8ab56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ae6530-465e-424b-95ce-48fbe9be62df",
        "cursor": {
          "ref": "8a76a1ac-7423-45d9-9d55-8094ddd28bb8",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0c62bb8a-8a97-4c1f-b0bf-b2dd10f12c9b"
        },
        "item": {
          "id": "31ae6530-465e-424b-95ce-48fbe9be62df",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b92141ac-674e-4eda-9112-fdb6c6d8ab56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e344ec-0aef-48a8-8a07-b1b011827f6f",
        "cursor": {
          "ref": "4602ce33-c26b-4e40-809c-ca0bdce428c5",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e933faa5-0537-482a-b723-230dd64dd970"
        },
        "item": {
          "id": "d5e344ec-0aef-48a8-8a07-b1b011827f6f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "58b7ae70-8d0c-4550-9e0b-d2d2e395ec39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e344ec-0aef-48a8-8a07-b1b011827f6f",
        "cursor": {
          "ref": "4602ce33-c26b-4e40-809c-ca0bdce428c5",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e933faa5-0537-482a-b723-230dd64dd970"
        },
        "item": {
          "id": "d5e344ec-0aef-48a8-8a07-b1b011827f6f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "58b7ae70-8d0c-4550-9e0b-d2d2e395ec39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada950fc-e8d2-45ad-838c-81785df03c91",
        "cursor": {
          "ref": "09f279a3-8dd9-4240-8a66-043ecb815ca6",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "81367afc-08ba-45e5-995f-271a025b8a5f"
        },
        "item": {
          "id": "ada950fc-e8d2-45ad-838c-81785df03c91",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9fc58b08-229d-4be6-b462-85c6dde2113d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada950fc-e8d2-45ad-838c-81785df03c91",
        "cursor": {
          "ref": "09f279a3-8dd9-4240-8a66-043ecb815ca6",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "81367afc-08ba-45e5-995f-271a025b8a5f"
        },
        "item": {
          "id": "ada950fc-e8d2-45ad-838c-81785df03c91",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9fc58b08-229d-4be6-b462-85c6dde2113d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f00ecc4-c2f6-4df3-9f84-26298ad42970",
        "cursor": {
          "ref": "03cdedca-23ca-4517-877f-be10d6bf047b",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "63be2b85-fbcf-4ff4-a856-fd6533ec5b04"
        },
        "item": {
          "id": "9f00ecc4-c2f6-4df3-9f84-26298ad42970",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e46c9d5c-bb76-4036-b505-b566763c96af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f00ecc4-c2f6-4df3-9f84-26298ad42970",
        "cursor": {
          "ref": "03cdedca-23ca-4517-877f-be10d6bf047b",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "63be2b85-fbcf-4ff4-a856-fd6533ec5b04"
        },
        "item": {
          "id": "9f00ecc4-c2f6-4df3-9f84-26298ad42970",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e46c9d5c-bb76-4036-b505-b566763c96af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7ce3d7-4387-416e-a19a-20ca5394e96a",
        "cursor": {
          "ref": "fcae0098-9f36-4f42-86a1-5dc93b7783df",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bbc4967b-e003-4a49-b6b1-41a7c2e34cdd"
        },
        "item": {
          "id": "fa7ce3d7-4387-416e-a19a-20ca5394e96a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b7456676-6167-40a7-a9cb-5fb498fd5739",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7ce3d7-4387-416e-a19a-20ca5394e96a",
        "cursor": {
          "ref": "fcae0098-9f36-4f42-86a1-5dc93b7783df",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bbc4967b-e003-4a49-b6b1-41a7c2e34cdd"
        },
        "item": {
          "id": "fa7ce3d7-4387-416e-a19a-20ca5394e96a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b7456676-6167-40a7-a9cb-5fb498fd5739",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df3ea0c-68e3-41fe-b89c-3b4b3530d0fa",
        "cursor": {
          "ref": "f4fe1bfb-5459-44bf-961d-95c2f4dd4dd5",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "dc9727eb-a060-4a69-a666-686009bb1478"
        },
        "item": {
          "id": "8df3ea0c-68e3-41fe-b89c-3b4b3530d0fa",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "da2c7a58-d0e5-4a42-8787-32623aea333e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df3ea0c-68e3-41fe-b89c-3b4b3530d0fa",
        "cursor": {
          "ref": "f4fe1bfb-5459-44bf-961d-95c2f4dd4dd5",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "dc9727eb-a060-4a69-a666-686009bb1478"
        },
        "item": {
          "id": "8df3ea0c-68e3-41fe-b89c-3b4b3530d0fa",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "da2c7a58-d0e5-4a42-8787-32623aea333e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea50cbb-830e-4213-8722-d4bf03c717b8",
        "cursor": {
          "ref": "f254a1d5-ebe9-41e9-856c-74b663a0ca47",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ad6f68bb-d4f6-45e1-8449-2cae74e5766f"
        },
        "item": {
          "id": "4ea50cbb-830e-4213-8722-d4bf03c717b8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "556d935f-5208-4a06-96bc-33a43f8397e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea50cbb-830e-4213-8722-d4bf03c717b8",
        "cursor": {
          "ref": "f254a1d5-ebe9-41e9-856c-74b663a0ca47",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ad6f68bb-d4f6-45e1-8449-2cae74e5766f"
        },
        "item": {
          "id": "4ea50cbb-830e-4213-8722-d4bf03c717b8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "556d935f-5208-4a06-96bc-33a43f8397e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a0c1be-28a6-4eab-a96b-25e6ca603a8f",
        "cursor": {
          "ref": "a04459ca-f08d-4826-873f-96fe25079f77",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b7a1c490-1ade-48e1-abb2-79dc1da434b3"
        },
        "item": {
          "id": "33a0c1be-28a6-4eab-a96b-25e6ca603a8f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d96c89b2-bf5d-49d3-a167-47dc1038bcab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a0c1be-28a6-4eab-a96b-25e6ca603a8f",
        "cursor": {
          "ref": "a04459ca-f08d-4826-873f-96fe25079f77",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b7a1c490-1ade-48e1-abb2-79dc1da434b3"
        },
        "item": {
          "id": "33a0c1be-28a6-4eab-a96b-25e6ca603a8f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d96c89b2-bf5d-49d3-a167-47dc1038bcab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01178058-4079-4ff6-8b57-90f58a70ac8e",
        "cursor": {
          "ref": "5a054df2-60d1-46f4-84b1-f5eea868f495",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "693cf42b-4f40-40c7-a74f-b7f4eeaaed68"
        },
        "item": {
          "id": "01178058-4079-4ff6-8b57-90f58a70ac8e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "57b616bb-0bd0-4de7-bea6-7ca53b815c6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01178058-4079-4ff6-8b57-90f58a70ac8e",
        "cursor": {
          "ref": "5a054df2-60d1-46f4-84b1-f5eea868f495",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "693cf42b-4f40-40c7-a74f-b7f4eeaaed68"
        },
        "item": {
          "id": "01178058-4079-4ff6-8b57-90f58a70ac8e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "57b616bb-0bd0-4de7-bea6-7ca53b815c6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edee01d-4ae1-4f03-8bd6-428e39d1c8ad",
        "cursor": {
          "ref": "947be1b5-75b7-484f-b01d-4b15b901d9cd",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0c76d3f8-cf9c-4c04-bad1-469f1cbd0cd2"
        },
        "item": {
          "id": "5edee01d-4ae1-4f03-8bd6-428e39d1c8ad",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "95492457-e164-46ae-9410-e3778fc55639",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "5edee01d-4ae1-4f03-8bd6-428e39d1c8ad",
        "cursor": {
          "ref": "947be1b5-75b7-484f-b01d-4b15b901d9cd",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "0c76d3f8-cf9c-4c04-bad1-469f1cbd0cd2"
        },
        "item": {
          "id": "5edee01d-4ae1-4f03-8bd6-428e39d1c8ad",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "95492457-e164-46ae-9410-e3778fc55639",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b6436934-16c9-4659-be39-6560102735d9",
        "cursor": {
          "ref": "274f8277-ac07-4e9b-b55d-d90b3812c0c4",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bf3cf685-67d6-4fdf-9228-5be1d77c16a4"
        },
        "item": {
          "id": "b6436934-16c9-4659-be39-6560102735d9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f108f402-3607-40e9-878b-afbabd7b0ae2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "b6436934-16c9-4659-be39-6560102735d9",
        "cursor": {
          "ref": "274f8277-ac07-4e9b-b55d-d90b3812c0c4",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bf3cf685-67d6-4fdf-9228-5be1d77c16a4"
        },
        "item": {
          "id": "b6436934-16c9-4659-be39-6560102735d9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f108f402-3607-40e9-878b-afbabd7b0ae2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "a911fdbf-6e2b-47a1-8bc4-94f54a6622f9",
        "cursor": {
          "ref": "7eae0e07-45c3-479f-b657-3d634bb55b98",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "dac08442-f984-4f84-8992-0081dfdfa35c"
        },
        "item": {
          "id": "a911fdbf-6e2b-47a1-8bc4-94f54a6622f9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c9962cb3-4e17-4c2b-885d-81c1455cdcf8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "a911fdbf-6e2b-47a1-8bc4-94f54a6622f9",
        "cursor": {
          "ref": "7eae0e07-45c3-479f-b657-3d634bb55b98",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "dac08442-f984-4f84-8992-0081dfdfa35c"
        },
        "item": {
          "id": "a911fdbf-6e2b-47a1-8bc4-94f54a6622f9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c9962cb3-4e17-4c2b-885d-81c1455cdcf8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "2dbc7aee-172c-4ebb-b092-e68a8a13ec41",
        "cursor": {
          "ref": "f0503b94-066e-4059-8fdd-cb459c0a9f16",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "619dfaaf-c051-4819-9e4c-319e803c4617"
        },
        "item": {
          "id": "2dbc7aee-172c-4ebb-b092-e68a8a13ec41",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4aa0c55c-1f01-456a-9b3b-5d481835e940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "2dbc7aee-172c-4ebb-b092-e68a8a13ec41",
        "cursor": {
          "ref": "f0503b94-066e-4059-8fdd-cb459c0a9f16",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "619dfaaf-c051-4819-9e4c-319e803c4617"
        },
        "item": {
          "id": "2dbc7aee-172c-4ebb-b092-e68a8a13ec41",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4aa0c55c-1f01-456a-9b3b-5d481835e940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "018d41ce-8f02-4118-b0e0-99f8a5a24e99",
        "cursor": {
          "ref": "dfd112da-9256-4074-ae7c-16962c6449ed",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bb0731d8-8e14-43dd-8291-2e288aaf6c99"
        },
        "item": {
          "id": "018d41ce-8f02-4118-b0e0-99f8a5a24e99",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "599d6b5d-fd0e-44da-b04e-16cba9b91e33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "018d41ce-8f02-4118-b0e0-99f8a5a24e99",
        "cursor": {
          "ref": "dfd112da-9256-4074-ae7c-16962c6449ed",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bb0731d8-8e14-43dd-8291-2e288aaf6c99"
        },
        "item": {
          "id": "018d41ce-8f02-4118-b0e0-99f8a5a24e99",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "599d6b5d-fd0e-44da-b04e-16cba9b91e33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "43faa005-2401-43d1-bd62-a69f0c60f8f5",
        "cursor": {
          "ref": "351ca2ac-f8a0-4bf8-82ea-53e0113a5a57",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a08afb17-bb43-4dc7-b798-acb799ab0d22"
        },
        "item": {
          "id": "43faa005-2401-43d1-bd62-a69f0c60f8f5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "eb72afc4-105d-41b6-a138-ac6f3cbc0081",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "43faa005-2401-43d1-bd62-a69f0c60f8f5",
        "cursor": {
          "ref": "351ca2ac-f8a0-4bf8-82ea-53e0113a5a57",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a08afb17-bb43-4dc7-b798-acb799ab0d22"
        },
        "item": {
          "id": "43faa005-2401-43d1-bd62-a69f0c60f8f5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "eb72afc4-105d-41b6-a138-ac6f3cbc0081",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "3ae057e9-429c-4122-b4b5-7dd33fb33d75",
        "cursor": {
          "ref": "f4efac17-d064-441d-ac16-cb17f9927af1",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "dae06f20-2b62-4834-9769-628025ca597c"
        },
        "item": {
          "id": "3ae057e9-429c-4122-b4b5-7dd33fb33d75",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "55de6058-01df-4892-ab43-4ebf4735506a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "3ae057e9-429c-4122-b4b5-7dd33fb33d75",
        "cursor": {
          "ref": "f4efac17-d064-441d-ac16-cb17f9927af1",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "dae06f20-2b62-4834-9769-628025ca597c"
        },
        "item": {
          "id": "3ae057e9-429c-4122-b4b5-7dd33fb33d75",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "55de6058-01df-4892-ab43-4ebf4735506a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "d2757899-9f91-4f81-a231-3797e6780de4",
        "cursor": {
          "ref": "cdc54dfb-508b-43df-8737-d1c3794d35cb",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4febdbb7-306e-4fbc-ad2e-b3eb97fde1ae"
        },
        "item": {
          "id": "d2757899-9f91-4f81-a231-3797e6780de4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f77af4c7-f192-4eda-9665-1dbc26e2bf4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2757899-9f91-4f81-a231-3797e6780de4",
        "cursor": {
          "ref": "cdc54dfb-508b-43df-8737-d1c3794d35cb",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4febdbb7-306e-4fbc-ad2e-b3eb97fde1ae"
        },
        "item": {
          "id": "d2757899-9f91-4f81-a231-3797e6780de4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f77af4c7-f192-4eda-9665-1dbc26e2bf4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0037be-5dba-4160-84bc-5269370c1506",
        "cursor": {
          "ref": "d80b9c1d-4a4e-4f7b-94fe-27a083446af0",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ada9e68c-a225-4bd5-8edd-52fb03024155"
        },
        "item": {
          "id": "ff0037be-5dba-4160-84bc-5269370c1506",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "34f9d987-d462-4b54-83c1-8db941c9f8e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0037be-5dba-4160-84bc-5269370c1506",
        "cursor": {
          "ref": "d80b9c1d-4a4e-4f7b-94fe-27a083446af0",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ada9e68c-a225-4bd5-8edd-52fb03024155"
        },
        "item": {
          "id": "ff0037be-5dba-4160-84bc-5269370c1506",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "34f9d987-d462-4b54-83c1-8db941c9f8e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b34f91-484d-4726-a1f5-b1259e5b5248",
        "cursor": {
          "ref": "a84ecb0a-3856-4994-b4f1-f8320e58209c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3724d0af-229e-43a3-806e-caeb3dcd43db"
        },
        "item": {
          "id": "e9b34f91-484d-4726-a1f5-b1259e5b5248",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "67467417-3393-49ed-baf1-3281759853de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b34f91-484d-4726-a1f5-b1259e5b5248",
        "cursor": {
          "ref": "a84ecb0a-3856-4994-b4f1-f8320e58209c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3724d0af-229e-43a3-806e-caeb3dcd43db"
        },
        "item": {
          "id": "e9b34f91-484d-4726-a1f5-b1259e5b5248",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "67467417-3393-49ed-baf1-3281759853de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a73e07-4cec-4f84-8189-15cdc560243e",
        "cursor": {
          "ref": "72933d70-522b-494e-ab04-e6c4370ca0c3",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "18cf4e61-81fd-4986-bc41-d9627d61d821"
        },
        "item": {
          "id": "86a73e07-4cec-4f84-8189-15cdc560243e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "245fe013-d8c5-4dda-bfc9-c00b8eda8221",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a73e07-4cec-4f84-8189-15cdc560243e",
        "cursor": {
          "ref": "72933d70-522b-494e-ab04-e6c4370ca0c3",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "18cf4e61-81fd-4986-bc41-d9627d61d821"
        },
        "item": {
          "id": "86a73e07-4cec-4f84-8189-15cdc560243e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "245fe013-d8c5-4dda-bfc9-c00b8eda8221",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b5ea51-8bd5-46ae-9ead-a98bea40e0ef",
        "cursor": {
          "ref": "fe6fd7f6-f0fd-4d89-8735-6d79dc2bcb1c",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d1d2e301-fd34-4d1d-ab9b-6ea59562a63e"
        },
        "item": {
          "id": "48b5ea51-8bd5-46ae-9ead-a98bea40e0ef",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2f8fe05c-f325-409e-81d6-47de5d9c4e51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b5ea51-8bd5-46ae-9ead-a98bea40e0ef",
        "cursor": {
          "ref": "fe6fd7f6-f0fd-4d89-8735-6d79dc2bcb1c",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d1d2e301-fd34-4d1d-ab9b-6ea59562a63e"
        },
        "item": {
          "id": "48b5ea51-8bd5-46ae-9ead-a98bea40e0ef",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2f8fe05c-f325-409e-81d6-47de5d9c4e51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745737d5-e857-4f41-85d6-e5627e15c68b",
        "cursor": {
          "ref": "8b0ce1ed-ee58-48cc-9449-d1c36df44f83",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d2647a75-3de4-49e1-ba6a-71c57bd603fa"
        },
        "item": {
          "id": "745737d5-e857-4f41-85d6-e5627e15c68b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "667a4a50-b695-4e19-a016-ca88d1cdddc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745737d5-e857-4f41-85d6-e5627e15c68b",
        "cursor": {
          "ref": "8b0ce1ed-ee58-48cc-9449-d1c36df44f83",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d2647a75-3de4-49e1-ba6a-71c57bd603fa"
        },
        "item": {
          "id": "745737d5-e857-4f41-85d6-e5627e15c68b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "667a4a50-b695-4e19-a016-ca88d1cdddc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbdea79-65fc-485c-adf2-6cd9da0f6e63",
        "cursor": {
          "ref": "7aee5114-48a8-4be2-a3a1-542eb0c012db",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "10de85a1-3446-438b-922a-ca4bfd21bee7"
        },
        "item": {
          "id": "cbbdea79-65fc-485c-adf2-6cd9da0f6e63",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "08991b87-3abb-4589-99dc-17e9f4bc63a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbdea79-65fc-485c-adf2-6cd9da0f6e63",
        "cursor": {
          "ref": "7aee5114-48a8-4be2-a3a1-542eb0c012db",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "10de85a1-3446-438b-922a-ca4bfd21bee7"
        },
        "item": {
          "id": "cbbdea79-65fc-485c-adf2-6cd9da0f6e63",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "08991b87-3abb-4589-99dc-17e9f4bc63a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e2b366-aba5-4a25-b372-202163763574",
        "cursor": {
          "ref": "0d8f240c-ae87-45e0-aeac-5e2578cce82e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "652661f6-d85d-4ba5-b68d-95ac4398ad85"
        },
        "item": {
          "id": "89e2b366-aba5-4a25-b372-202163763574",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "aa0e1614-d449-490f-ae2e-a9528504a4f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e2b366-aba5-4a25-b372-202163763574",
        "cursor": {
          "ref": "0d8f240c-ae87-45e0-aeac-5e2578cce82e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "652661f6-d85d-4ba5-b68d-95ac4398ad85"
        },
        "item": {
          "id": "89e2b366-aba5-4a25-b372-202163763574",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "aa0e1614-d449-490f-ae2e-a9528504a4f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e9058e-4c1b-46d3-897e-5ab66c6db2a3",
        "cursor": {
          "ref": "a7249718-7e80-4658-acf9-1146d1dd8b7b",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8bdcd667-4e09-45a8-9356-e5e65b36cc0d"
        },
        "item": {
          "id": "b7e9058e-4c1b-46d3-897e-5ab66c6db2a3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "25ee37ad-0d67-4ed2-8cea-a62233271a94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e9058e-4c1b-46d3-897e-5ab66c6db2a3",
        "cursor": {
          "ref": "a7249718-7e80-4658-acf9-1146d1dd8b7b",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8bdcd667-4e09-45a8-9356-e5e65b36cc0d"
        },
        "item": {
          "id": "b7e9058e-4c1b-46d3-897e-5ab66c6db2a3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "25ee37ad-0d67-4ed2-8cea-a62233271a94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef629037-219b-4bc7-b548-403e267ad867",
        "cursor": {
          "ref": "17baafc6-e79e-4999-a3f7-cf70f0cc6b18",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f57b589e-7a5d-4c38-9575-13c3c7eb0484"
        },
        "item": {
          "id": "ef629037-219b-4bc7-b548-403e267ad867",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f901e73e-5b02-411b-919b-0ce0c3c13963",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef629037-219b-4bc7-b548-403e267ad867",
        "cursor": {
          "ref": "17baafc6-e79e-4999-a3f7-cf70f0cc6b18",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f57b589e-7a5d-4c38-9575-13c3c7eb0484"
        },
        "item": {
          "id": "ef629037-219b-4bc7-b548-403e267ad867",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f901e73e-5b02-411b-919b-0ce0c3c13963",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35eee765-bf02-43ad-b0a4-12f211ddafc7",
        "cursor": {
          "ref": "8135e6eb-2171-4f4e-a648-c2e79238f1ae",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f043bd5a-5d20-4561-8c88-63fe3f93aa45"
        },
        "item": {
          "id": "35eee765-bf02-43ad-b0a4-12f211ddafc7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "70a06162-f1ec-42c0-aafe-33c006684056",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35eee765-bf02-43ad-b0a4-12f211ddafc7",
        "cursor": {
          "ref": "8135e6eb-2171-4f4e-a648-c2e79238f1ae",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f043bd5a-5d20-4561-8c88-63fe3f93aa45"
        },
        "item": {
          "id": "35eee765-bf02-43ad-b0a4-12f211ddafc7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "70a06162-f1ec-42c0-aafe-33c006684056",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58206b05-4fcc-4fe2-8cb6-46bfff11a701",
        "cursor": {
          "ref": "c39fce27-0faf-4027-bb0f-198c24ad5bc0",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3f76368a-977e-4264-85ab-e42a635902e7"
        },
        "item": {
          "id": "58206b05-4fcc-4fe2-8cb6-46bfff11a701",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "92ff6138-b791-41fb-9856-8cf034bcfbd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58206b05-4fcc-4fe2-8cb6-46bfff11a701",
        "cursor": {
          "ref": "c39fce27-0faf-4027-bb0f-198c24ad5bc0",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3f76368a-977e-4264-85ab-e42a635902e7"
        },
        "item": {
          "id": "58206b05-4fcc-4fe2-8cb6-46bfff11a701",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "92ff6138-b791-41fb-9856-8cf034bcfbd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70034b95-8d99-4871-af3c-f920e1d00cc4",
        "cursor": {
          "ref": "82f97ef6-4513-4b17-8404-de5c6c153f18",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7564584c-9f93-4460-a080-69b8f0c4ee6a"
        },
        "item": {
          "id": "70034b95-8d99-4871-af3c-f920e1d00cc4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1f9b209b-e748-4a75-ad72-4967a7e1d6cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70034b95-8d99-4871-af3c-f920e1d00cc4",
        "cursor": {
          "ref": "82f97ef6-4513-4b17-8404-de5c6c153f18",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7564584c-9f93-4460-a080-69b8f0c4ee6a"
        },
        "item": {
          "id": "70034b95-8d99-4871-af3c-f920e1d00cc4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1f9b209b-e748-4a75-ad72-4967a7e1d6cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b55a634-9854-4889-a9aa-509dbabaf152",
        "cursor": {
          "ref": "37098040-6401-4987-9f1b-ae8c25d3ff0a",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "369236ed-0669-4ebb-819e-6c3fbe3c73f8"
        },
        "item": {
          "id": "5b55a634-9854-4889-a9aa-509dbabaf152",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cd58d8e3-c8ca-45ae-955e-e861989420ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b55a634-9854-4889-a9aa-509dbabaf152",
        "cursor": {
          "ref": "37098040-6401-4987-9f1b-ae8c25d3ff0a",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "369236ed-0669-4ebb-819e-6c3fbe3c73f8"
        },
        "item": {
          "id": "5b55a634-9854-4889-a9aa-509dbabaf152",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cd58d8e3-c8ca-45ae-955e-e861989420ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3747be-0b99-4a77-8ade-3506fb9b7e32",
        "cursor": {
          "ref": "4ae98bba-d91f-4db9-b66e-7cb35212b157",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "39a81cc2-4d84-4b50-86c0-0770049afa8d"
        },
        "item": {
          "id": "fb3747be-0b99-4a77-8ade-3506fb9b7e32",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ceca5f1d-d146-42af-bcdf-6f52b6407e03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3747be-0b99-4a77-8ade-3506fb9b7e32",
        "cursor": {
          "ref": "4ae98bba-d91f-4db9-b66e-7cb35212b157",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "39a81cc2-4d84-4b50-86c0-0770049afa8d"
        },
        "item": {
          "id": "fb3747be-0b99-4a77-8ade-3506fb9b7e32",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ceca5f1d-d146-42af-bcdf-6f52b6407e03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593a173a-d143-40dd-a395-fd6d0617dbde",
        "cursor": {
          "ref": "f23477b1-a7d8-4aa6-ab2d-a8bdea54dba6",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "efe02537-2ada-4ad0-a79d-77a740555e94"
        },
        "item": {
          "id": "593a173a-d143-40dd-a395-fd6d0617dbde",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "54ae5eaa-ee8d-4c8c-b1a0-3b810d7ed652",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593a173a-d143-40dd-a395-fd6d0617dbde",
        "cursor": {
          "ref": "f23477b1-a7d8-4aa6-ab2d-a8bdea54dba6",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "efe02537-2ada-4ad0-a79d-77a740555e94"
        },
        "item": {
          "id": "593a173a-d143-40dd-a395-fd6d0617dbde",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "54ae5eaa-ee8d-4c8c-b1a0-3b810d7ed652",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2995bd2f-6df5-4726-8095-18974e750fb9",
        "cursor": {
          "ref": "e9da627c-3bf8-4d3c-a16b-eb681b59d63d",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "294da0a2-98d8-4aa8-b184-97b2ac64eade"
        },
        "item": {
          "id": "2995bd2f-6df5-4726-8095-18974e750fb9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fe4b5877-f461-402f-be18-19808737a03a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2995bd2f-6df5-4726-8095-18974e750fb9",
        "cursor": {
          "ref": "e9da627c-3bf8-4d3c-a16b-eb681b59d63d",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "294da0a2-98d8-4aa8-b184-97b2ac64eade"
        },
        "item": {
          "id": "2995bd2f-6df5-4726-8095-18974e750fb9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fe4b5877-f461-402f-be18-19808737a03a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5c71a7-57a8-48ac-8b83-3ca241e3f5a0",
        "cursor": {
          "ref": "82d6e78a-b809-4d0b-ac7f-c853986ac1db",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "56d8c0ea-9b51-477a-b81d-0f3a77ec5f35"
        },
        "item": {
          "id": "3b5c71a7-57a8-48ac-8b83-3ca241e3f5a0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "95a58f22-b28b-47c2-8b7b-c1407d31dea1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5c71a7-57a8-48ac-8b83-3ca241e3f5a0",
        "cursor": {
          "ref": "82d6e78a-b809-4d0b-ac7f-c853986ac1db",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "56d8c0ea-9b51-477a-b81d-0f3a77ec5f35"
        },
        "item": {
          "id": "3b5c71a7-57a8-48ac-8b83-3ca241e3f5a0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "95a58f22-b28b-47c2-8b7b-c1407d31dea1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b04dcab-e79a-4ed5-a52f-1d426d08e363",
        "cursor": {
          "ref": "cc6da69d-a962-45cc-a8a1-7feac263d881",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6659127c-a417-4319-b2d0-3ec3ff3ccb16"
        },
        "item": {
          "id": "7b04dcab-e79a-4ed5-a52f-1d426d08e363",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "99243a53-c8cc-47e3-b8ee-822b8701ab62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b04dcab-e79a-4ed5-a52f-1d426d08e363",
        "cursor": {
          "ref": "cc6da69d-a962-45cc-a8a1-7feac263d881",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6659127c-a417-4319-b2d0-3ec3ff3ccb16"
        },
        "item": {
          "id": "7b04dcab-e79a-4ed5-a52f-1d426d08e363",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "99243a53-c8cc-47e3-b8ee-822b8701ab62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24d7d74-3788-4570-8961-9095a75278ca",
        "cursor": {
          "ref": "36936061-1478-411f-b40a-96bbb11c3b64",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0b277a78-f19e-406c-93ea-b4ab489804f5"
        },
        "item": {
          "id": "d24d7d74-3788-4570-8961-9095a75278ca",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "98300c1b-376c-4e2d-ac1a-7e344f8e2d86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24d7d74-3788-4570-8961-9095a75278ca",
        "cursor": {
          "ref": "36936061-1478-411f-b40a-96bbb11c3b64",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0b277a78-f19e-406c-93ea-b4ab489804f5"
        },
        "item": {
          "id": "d24d7d74-3788-4570-8961-9095a75278ca",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "98300c1b-376c-4e2d-ac1a-7e344f8e2d86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f331d3a-57c7-4772-b13d-235add1df80b",
        "cursor": {
          "ref": "7192e0d5-f24e-4caf-87d2-bf2573693420",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f3c995df-7def-4df3-b87d-df171bda9a26"
        },
        "item": {
          "id": "6f331d3a-57c7-4772-b13d-235add1df80b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "46753c18-29f5-4989-9dd9-29a99bcf8807",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f331d3a-57c7-4772-b13d-235add1df80b",
        "cursor": {
          "ref": "7192e0d5-f24e-4caf-87d2-bf2573693420",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f3c995df-7def-4df3-b87d-df171bda9a26"
        },
        "item": {
          "id": "6f331d3a-57c7-4772-b13d-235add1df80b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "46753c18-29f5-4989-9dd9-29a99bcf8807",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fd65c5-1fc4-4c8f-b48d-58e49a41e045",
        "cursor": {
          "ref": "8f5a03c7-f0a7-4686-88c3-89e8a66a85b9",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4fc20e2c-2e3b-491a-856e-16c67fd16f43"
        },
        "item": {
          "id": "37fd65c5-1fc4-4c8f-b48d-58e49a41e045",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a84829f6-2649-4f25-9ebd-31a562cab55a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37fd65c5-1fc4-4c8f-b48d-58e49a41e045",
        "cursor": {
          "ref": "8f5a03c7-f0a7-4686-88c3-89e8a66a85b9",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4fc20e2c-2e3b-491a-856e-16c67fd16f43"
        },
        "item": {
          "id": "37fd65c5-1fc4-4c8f-b48d-58e49a41e045",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a84829f6-2649-4f25-9ebd-31a562cab55a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ce1a54-19a8-4484-ae38-70a5a71f32d5",
        "cursor": {
          "ref": "f2e852c5-2b75-4159-90bc-b79cbd09ac47",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "42ebfe3a-8da7-4652-a736-b44a3c7fd0e1"
        },
        "item": {
          "id": "41ce1a54-19a8-4484-ae38-70a5a71f32d5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8a394080-06c8-4498-bbd1-e4614b51b234",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ce1a54-19a8-4484-ae38-70a5a71f32d5",
        "cursor": {
          "ref": "f2e852c5-2b75-4159-90bc-b79cbd09ac47",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "42ebfe3a-8da7-4652-a736-b44a3c7fd0e1"
        },
        "item": {
          "id": "41ce1a54-19a8-4484-ae38-70a5a71f32d5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8a394080-06c8-4498-bbd1-e4614b51b234",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb09f00-fc4c-4b11-a106-5fd95f9ee72d",
        "cursor": {
          "ref": "07db9da1-a69b-40ac-a7cf-aa221f31305b",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0528f676-1b2d-4ea5-811f-4c6b6a328f2a"
        },
        "item": {
          "id": "4bb09f00-fc4c-4b11-a106-5fd95f9ee72d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c8319506-2cee-46ae-adfb-606f8d96cbae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb09f00-fc4c-4b11-a106-5fd95f9ee72d",
        "cursor": {
          "ref": "07db9da1-a69b-40ac-a7cf-aa221f31305b",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0528f676-1b2d-4ea5-811f-4c6b6a328f2a"
        },
        "item": {
          "id": "4bb09f00-fc4c-4b11-a106-5fd95f9ee72d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c8319506-2cee-46ae-adfb-606f8d96cbae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b989fd4-89df-4694-bc31-76748e36c0f7",
        "cursor": {
          "ref": "2d9ecc2f-ff72-4bda-847d-72081896ff53",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7dbd7359-c4c8-42cd-95c1-4854bad43a25"
        },
        "item": {
          "id": "1b989fd4-89df-4694-bc31-76748e36c0f7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c5ab4e1c-0395-4f2f-921b-a23abf9e956c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b989fd4-89df-4694-bc31-76748e36c0f7",
        "cursor": {
          "ref": "2d9ecc2f-ff72-4bda-847d-72081896ff53",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7dbd7359-c4c8-42cd-95c1-4854bad43a25"
        },
        "item": {
          "id": "1b989fd4-89df-4694-bc31-76748e36c0f7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c5ab4e1c-0395-4f2f-921b-a23abf9e956c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea13678-5ee2-4ccb-870f-4dcf012e7b74",
        "cursor": {
          "ref": "0ca03d39-4a64-4050-9437-647ebd64bfde",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "84e6c275-42ff-412a-a742-7259058d3c1a"
        },
        "item": {
          "id": "aea13678-5ee2-4ccb-870f-4dcf012e7b74",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1e89d1cc-5864-4f26-adc9-7908c1dc3191",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea13678-5ee2-4ccb-870f-4dcf012e7b74",
        "cursor": {
          "ref": "0ca03d39-4a64-4050-9437-647ebd64bfde",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "84e6c275-42ff-412a-a742-7259058d3c1a"
        },
        "item": {
          "id": "aea13678-5ee2-4ccb-870f-4dcf012e7b74",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1e89d1cc-5864-4f26-adc9-7908c1dc3191",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3692156-3df7-4616-b06a-9b4cb2585346",
        "cursor": {
          "ref": "dcae9e89-3be6-4722-a439-dd5c0f40b415",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7cb3b968-2ed5-4777-8d5a-d1913e86b9fe"
        },
        "item": {
          "id": "a3692156-3df7-4616-b06a-9b4cb2585346",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "175cee7e-3eb0-418e-ae93-5f8f9be27358",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3692156-3df7-4616-b06a-9b4cb2585346",
        "cursor": {
          "ref": "dcae9e89-3be6-4722-a439-dd5c0f40b415",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7cb3b968-2ed5-4777-8d5a-d1913e86b9fe"
        },
        "item": {
          "id": "a3692156-3df7-4616-b06a-9b4cb2585346",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "175cee7e-3eb0-418e-ae93-5f8f9be27358",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3001961d-8a79-4bbc-8d2b-edbd92884384",
        "cursor": {
          "ref": "0d978115-549b-4374-b860-60ffea4025a0",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "56146da2-3fb8-4098-81ab-2b82e135f0c5"
        },
        "item": {
          "id": "3001961d-8a79-4bbc-8d2b-edbd92884384",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fcb7aef7-182a-4f2a-b826-71c4f8be21f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3001961d-8a79-4bbc-8d2b-edbd92884384",
        "cursor": {
          "ref": "0d978115-549b-4374-b860-60ffea4025a0",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "56146da2-3fb8-4098-81ab-2b82e135f0c5"
        },
        "item": {
          "id": "3001961d-8a79-4bbc-8d2b-edbd92884384",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fcb7aef7-182a-4f2a-b826-71c4f8be21f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc8c457-6235-4391-8e8e-88b7bf951a43",
        "cursor": {
          "ref": "87f2c9fa-de25-4ba8-8836-56a9bde2a008",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b01bafa1-4069-4bcd-a7c6-1204346ab2ce"
        },
        "item": {
          "id": "2cc8c457-6235-4391-8e8e-88b7bf951a43",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b8a49b25-579e-43f5-94f8-a3bc81eedc19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc8c457-6235-4391-8e8e-88b7bf951a43",
        "cursor": {
          "ref": "87f2c9fa-de25-4ba8-8836-56a9bde2a008",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b01bafa1-4069-4bcd-a7c6-1204346ab2ce"
        },
        "item": {
          "id": "2cc8c457-6235-4391-8e8e-88b7bf951a43",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b8a49b25-579e-43f5-94f8-a3bc81eedc19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a9985d-c038-42ac-9997-53c2483efa32",
        "cursor": {
          "ref": "4381784e-0b3e-4905-9002-e7c147d44885",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "aa30fa25-b178-4dde-aef2-405fa0019481"
        },
        "item": {
          "id": "a1a9985d-c038-42ac-9997-53c2483efa32",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b4040b68-697c-4145-9c65-1c040ce4451a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a9985d-c038-42ac-9997-53c2483efa32",
        "cursor": {
          "ref": "4381784e-0b3e-4905-9002-e7c147d44885",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "aa30fa25-b178-4dde-aef2-405fa0019481"
        },
        "item": {
          "id": "a1a9985d-c038-42ac-9997-53c2483efa32",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b4040b68-697c-4145-9c65-1c040ce4451a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bece47ca-9d2d-4af2-9c11-4854678e89a9",
        "cursor": {
          "ref": "dc106dda-b951-4874-9cb1-48efbc498543",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "08d289a6-ef18-46b8-bcfc-b7da3adadc8e"
        },
        "item": {
          "id": "bece47ca-9d2d-4af2-9c11-4854678e89a9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "16dde047-9ff4-4f0b-aa30-7b1e1c3d25b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bece47ca-9d2d-4af2-9c11-4854678e89a9",
        "cursor": {
          "ref": "dc106dda-b951-4874-9cb1-48efbc498543",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "08d289a6-ef18-46b8-bcfc-b7da3adadc8e"
        },
        "item": {
          "id": "bece47ca-9d2d-4af2-9c11-4854678e89a9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "16dde047-9ff4-4f0b-aa30-7b1e1c3d25b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713f6667-2c02-473f-b11c-676da289793e",
        "cursor": {
          "ref": "51a6e930-a5af-432e-82a3-a1b8e9031248",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f6811474-9aed-49da-8983-968d907d2877"
        },
        "item": {
          "id": "713f6667-2c02-473f-b11c-676da289793e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "fa67d114-6d2c-4d0f-aedd-9da2a281bf53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713f6667-2c02-473f-b11c-676da289793e",
        "cursor": {
          "ref": "51a6e930-a5af-432e-82a3-a1b8e9031248",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f6811474-9aed-49da-8983-968d907d2877"
        },
        "item": {
          "id": "713f6667-2c02-473f-b11c-676da289793e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "fa67d114-6d2c-4d0f-aedd-9da2a281bf53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7ca116-de82-40b8-a004-948e194dbbd8",
        "cursor": {
          "ref": "bee7b950-fc36-43a1-8610-8d92c85548b0",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6ed25350-a6b0-4382-988b-69821c5d4c36"
        },
        "item": {
          "id": "3c7ca116-de82-40b8-a004-948e194dbbd8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c5dff08a-8631-417f-9f81-edce3eeede16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7ca116-de82-40b8-a004-948e194dbbd8",
        "cursor": {
          "ref": "bee7b950-fc36-43a1-8610-8d92c85548b0",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6ed25350-a6b0-4382-988b-69821c5d4c36"
        },
        "item": {
          "id": "3c7ca116-de82-40b8-a004-948e194dbbd8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c5dff08a-8631-417f-9f81-edce3eeede16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc432a5e-c922-4126-a53f-f8396f5573c5",
        "cursor": {
          "ref": "e2baa74c-8f7c-4bdd-b5c3-db1179e89f91",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "03e7af30-90d0-4293-ba50-9e821bc7f948"
        },
        "item": {
          "id": "dc432a5e-c922-4126-a53f-f8396f5573c5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e87672cc-ab60-46ff-b83c-055124dd4722",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc432a5e-c922-4126-a53f-f8396f5573c5",
        "cursor": {
          "ref": "e2baa74c-8f7c-4bdd-b5c3-db1179e89f91",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "03e7af30-90d0-4293-ba50-9e821bc7f948"
        },
        "item": {
          "id": "dc432a5e-c922-4126-a53f-f8396f5573c5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e87672cc-ab60-46ff-b83c-055124dd4722",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4eeecc-13d9-4c18-b7d3-57e4b27c81d7",
        "cursor": {
          "ref": "22f6665d-cd93-4fbb-bc42-8aff73f85d26",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8852326d-752b-4090-a923-e9634285cf4b"
        },
        "item": {
          "id": "8b4eeecc-13d9-4c18-b7d3-57e4b27c81d7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "252f9454-246a-427d-94e1-0cf13082adb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4eeecc-13d9-4c18-b7d3-57e4b27c81d7",
        "cursor": {
          "ref": "22f6665d-cd93-4fbb-bc42-8aff73f85d26",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8852326d-752b-4090-a923-e9634285cf4b"
        },
        "item": {
          "id": "8b4eeecc-13d9-4c18-b7d3-57e4b27c81d7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "252f9454-246a-427d-94e1-0cf13082adb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7206914-77e2-44d4-afc7-97f99455ee05",
        "cursor": {
          "ref": "a39a253e-f384-46f2-a1d4-b45bd9bf2349",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9309f74b-5094-40ab-8513-4800ee49544e"
        },
        "item": {
          "id": "e7206914-77e2-44d4-afc7-97f99455ee05",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "336674b9-6a3f-4ad9-85af-974dd799eabc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7206914-77e2-44d4-afc7-97f99455ee05",
        "cursor": {
          "ref": "a39a253e-f384-46f2-a1d4-b45bd9bf2349",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9309f74b-5094-40ab-8513-4800ee49544e"
        },
        "item": {
          "id": "e7206914-77e2-44d4-afc7-97f99455ee05",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "336674b9-6a3f-4ad9-85af-974dd799eabc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed1f93e-a267-423d-948b-b8aa733ea3de",
        "cursor": {
          "ref": "3b91964a-d412-4385-b941-55cd519a1ae3",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6bbce207-a02a-4347-9faa-ff8eed4f2ef9"
        },
        "item": {
          "id": "eed1f93e-a267-423d-948b-b8aa733ea3de",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6c3d22bc-446b-4769-b5a0-04ef0521769c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed1f93e-a267-423d-948b-b8aa733ea3de",
        "cursor": {
          "ref": "3b91964a-d412-4385-b941-55cd519a1ae3",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6bbce207-a02a-4347-9faa-ff8eed4f2ef9"
        },
        "item": {
          "id": "eed1f93e-a267-423d-948b-b8aa733ea3de",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6c3d22bc-446b-4769-b5a0-04ef0521769c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7af4b2-05be-4621-ac95-799709d249c8",
        "cursor": {
          "ref": "bb77e8d0-4c10-4cbe-9c63-80ede666d7d3",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "16b1dbc5-ee65-44ca-b1d1-f7a78a7bba95"
        },
        "item": {
          "id": "5e7af4b2-05be-4621-ac95-799709d249c8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fee7932b-8737-4bee-a53e-931b7c5f7b94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7af4b2-05be-4621-ac95-799709d249c8",
        "cursor": {
          "ref": "bb77e8d0-4c10-4cbe-9c63-80ede666d7d3",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "16b1dbc5-ee65-44ca-b1d1-f7a78a7bba95"
        },
        "item": {
          "id": "5e7af4b2-05be-4621-ac95-799709d249c8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fee7932b-8737-4bee-a53e-931b7c5f7b94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb859e77-966f-44bb-a716-91d1a016df8a",
        "cursor": {
          "ref": "c20b6cba-81ec-4947-860c-87aea81033ce",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "22dc42da-a254-4122-9647-a7ee10d1aecd"
        },
        "item": {
          "id": "eb859e77-966f-44bb-a716-91d1a016df8a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d4df55fc-e06b-4940-bda2-240ff0b25418",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb859e77-966f-44bb-a716-91d1a016df8a",
        "cursor": {
          "ref": "c20b6cba-81ec-4947-860c-87aea81033ce",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "22dc42da-a254-4122-9647-a7ee10d1aecd"
        },
        "item": {
          "id": "eb859e77-966f-44bb-a716-91d1a016df8a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d4df55fc-e06b-4940-bda2-240ff0b25418",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1036e2d5-caf2-4883-b04f-7d75b88df808",
        "cursor": {
          "ref": "943377d1-2f1d-4492-b0d4-58276230d7b8",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0bca1087-23fd-4596-a3d8-51e204f4f947"
        },
        "item": {
          "id": "1036e2d5-caf2-4883-b04f-7d75b88df808",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "db6175e7-9968-457f-98ea-a0bda316678a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1036e2d5-caf2-4883-b04f-7d75b88df808",
        "cursor": {
          "ref": "943377d1-2f1d-4492-b0d4-58276230d7b8",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0bca1087-23fd-4596-a3d8-51e204f4f947"
        },
        "item": {
          "id": "1036e2d5-caf2-4883-b04f-7d75b88df808",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "db6175e7-9968-457f-98ea-a0bda316678a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1080daf-00ab-4201-bea5-0109e742313c",
        "cursor": {
          "ref": "5b2414cc-686a-4aad-95ee-44620781b7de",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a67ebdba-37fe-4188-b9e0-27af4faf19b9"
        },
        "item": {
          "id": "c1080daf-00ab-4201-bea5-0109e742313c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a52eae09-4afc-4b71-b9c5-e95edc5739fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1080daf-00ab-4201-bea5-0109e742313c",
        "cursor": {
          "ref": "5b2414cc-686a-4aad-95ee-44620781b7de",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a67ebdba-37fe-4188-b9e0-27af4faf19b9"
        },
        "item": {
          "id": "c1080daf-00ab-4201-bea5-0109e742313c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a52eae09-4afc-4b71-b9c5-e95edc5739fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916a3fc4-676f-4948-ac5b-019a9dfb5feb",
        "cursor": {
          "ref": "ace232ac-0c79-45e7-a857-019d9fa341f5",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7cddf679-4b7d-4930-a6ea-0a07425d487f"
        },
        "item": {
          "id": "916a3fc4-676f-4948-ac5b-019a9dfb5feb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9616ee35-ee32-4e4c-9ecc-4b4305f09459",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916a3fc4-676f-4948-ac5b-019a9dfb5feb",
        "cursor": {
          "ref": "ace232ac-0c79-45e7-a857-019d9fa341f5",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7cddf679-4b7d-4930-a6ea-0a07425d487f"
        },
        "item": {
          "id": "916a3fc4-676f-4948-ac5b-019a9dfb5feb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9616ee35-ee32-4e4c-9ecc-4b4305f09459",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1739690-9292-4078-861e-edb261c16ee6",
        "cursor": {
          "ref": "39b4acde-54ba-4649-bac7-3c0f8b8d6712",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6ec873a4-56b6-46a5-879c-de650e409497"
        },
        "item": {
          "id": "e1739690-9292-4078-861e-edb261c16ee6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "af3fd802-0f5a-43a7-9a1e-c183329c681a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1739690-9292-4078-861e-edb261c16ee6",
        "cursor": {
          "ref": "39b4acde-54ba-4649-bac7-3c0f8b8d6712",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6ec873a4-56b6-46a5-879c-de650e409497"
        },
        "item": {
          "id": "e1739690-9292-4078-861e-edb261c16ee6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "af3fd802-0f5a-43a7-9a1e-c183329c681a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f93c1c5-fcc7-466e-827f-7a20fedaffe7",
        "cursor": {
          "ref": "4d89ac71-5fd7-425a-9976-c26cdffa1a01",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "cf09c1d6-a662-4fb3-a034-fd734d98dbad"
        },
        "item": {
          "id": "2f93c1c5-fcc7-466e-827f-7a20fedaffe7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6a1f8c27-bc95-40f3-b76a-b188281a7eb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f93c1c5-fcc7-466e-827f-7a20fedaffe7",
        "cursor": {
          "ref": "4d89ac71-5fd7-425a-9976-c26cdffa1a01",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "cf09c1d6-a662-4fb3-a034-fd734d98dbad"
        },
        "item": {
          "id": "2f93c1c5-fcc7-466e-827f-7a20fedaffe7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6a1f8c27-bc95-40f3-b76a-b188281a7eb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7d7ead-fe52-4430-a6e9-309ff97223bf",
        "cursor": {
          "ref": "df11a967-c0ed-4919-92df-570b972e4b18",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6cacbbf6-2179-448f-8ec8-d2972e20ffe7"
        },
        "item": {
          "id": "ee7d7ead-fe52-4430-a6e9-309ff97223bf",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b755fd53-5bc2-44ee-9fcd-197ea7135be7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7d7ead-fe52-4430-a6e9-309ff97223bf",
        "cursor": {
          "ref": "df11a967-c0ed-4919-92df-570b972e4b18",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6cacbbf6-2179-448f-8ec8-d2972e20ffe7"
        },
        "item": {
          "id": "ee7d7ead-fe52-4430-a6e9-309ff97223bf",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b755fd53-5bc2-44ee-9fcd-197ea7135be7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e40959a-8a2d-44ce-9629-b3d8fa7370dc",
        "cursor": {
          "ref": "92997adf-7b31-47e9-83f4-4df292214778",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e31c847b-cde8-4b76-900b-e3f35573345d"
        },
        "item": {
          "id": "8e40959a-8a2d-44ce-9629-b3d8fa7370dc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c56e222f-dfb7-4aa3-ae78-981f6db19ba9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e40959a-8a2d-44ce-9629-b3d8fa7370dc",
        "cursor": {
          "ref": "92997adf-7b31-47e9-83f4-4df292214778",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e31c847b-cde8-4b76-900b-e3f35573345d"
        },
        "item": {
          "id": "8e40959a-8a2d-44ce-9629-b3d8fa7370dc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c56e222f-dfb7-4aa3-ae78-981f6db19ba9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066f3e1c-38b3-444f-bbb7-f85208cbb7f3",
        "cursor": {
          "ref": "6e388a6a-83ff-4912-8918-66df1fae0597",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "60e6d530-a4e4-444a-9e62-40768952fe5c"
        },
        "item": {
          "id": "066f3e1c-38b3-444f-bbb7-f85208cbb7f3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "557a6faf-91de-441a-9f3e-9b9476be3a59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066f3e1c-38b3-444f-bbb7-f85208cbb7f3",
        "cursor": {
          "ref": "6e388a6a-83ff-4912-8918-66df1fae0597",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "60e6d530-a4e4-444a-9e62-40768952fe5c"
        },
        "item": {
          "id": "066f3e1c-38b3-444f-bbb7-f85208cbb7f3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "557a6faf-91de-441a-9f3e-9b9476be3a59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7001ba5-933f-4afd-ab13-b2ca5914533d",
        "cursor": {
          "ref": "98c0d596-f661-42f8-8c49-68ad967d3df1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3efe310d-7383-4454-a1b9-06d4ab0e99e4"
        },
        "item": {
          "id": "c7001ba5-933f-4afd-ab13-b2ca5914533d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "edd1065a-b1b5-473b-a6e8-a9c6a8b072d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7001ba5-933f-4afd-ab13-b2ca5914533d",
        "cursor": {
          "ref": "98c0d596-f661-42f8-8c49-68ad967d3df1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3efe310d-7383-4454-a1b9-06d4ab0e99e4"
        },
        "item": {
          "id": "c7001ba5-933f-4afd-ab13-b2ca5914533d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "edd1065a-b1b5-473b-a6e8-a9c6a8b072d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c31e54-aec7-4348-8e1c-d12594f19fba",
        "cursor": {
          "ref": "54a19c84-9c03-47c1-82bc-21c980d757be",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f9aa9125-cc40-4aa8-84d7-06b7ea660080"
        },
        "item": {
          "id": "88c31e54-aec7-4348-8e1c-d12594f19fba",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "036d2ced-f32c-4ee0-9510-8ee05b942cd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c31e54-aec7-4348-8e1c-d12594f19fba",
        "cursor": {
          "ref": "54a19c84-9c03-47c1-82bc-21c980d757be",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f9aa9125-cc40-4aa8-84d7-06b7ea660080"
        },
        "item": {
          "id": "88c31e54-aec7-4348-8e1c-d12594f19fba",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "036d2ced-f32c-4ee0-9510-8ee05b942cd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb4b504-fd78-44e1-93a2-fbfec8f5353c",
        "cursor": {
          "ref": "033c7583-bc21-4224-9d5c-f2073ee78221",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5f9a9345-6513-4f33-a60e-e4dfc3780e7b"
        },
        "item": {
          "id": "1eb4b504-fd78-44e1-93a2-fbfec8f5353c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "40f13984-62a8-4974-a847-46fbaf06f714",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb4b504-fd78-44e1-93a2-fbfec8f5353c",
        "cursor": {
          "ref": "033c7583-bc21-4224-9d5c-f2073ee78221",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5f9a9345-6513-4f33-a60e-e4dfc3780e7b"
        },
        "item": {
          "id": "1eb4b504-fd78-44e1-93a2-fbfec8f5353c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "40f13984-62a8-4974-a847-46fbaf06f714",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc59cc4d-4ab8-4df1-9f13-51813422a3bd",
        "cursor": {
          "ref": "6a1b783e-a8e7-46a6-95d9-6ef28e6265fd",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1712d7a1-3cff-49dc-bdc5-d71e1d0bfb89"
        },
        "item": {
          "id": "bc59cc4d-4ab8-4df1-9f13-51813422a3bd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f3264dff-74a7-4f4b-8d6e-3005890f4d72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc59cc4d-4ab8-4df1-9f13-51813422a3bd",
        "cursor": {
          "ref": "6a1b783e-a8e7-46a6-95d9-6ef28e6265fd",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1712d7a1-3cff-49dc-bdc5-d71e1d0bfb89"
        },
        "item": {
          "id": "bc59cc4d-4ab8-4df1-9f13-51813422a3bd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f3264dff-74a7-4f4b-8d6e-3005890f4d72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebae051-efe6-474e-a690-f8acaa7ab7b8",
        "cursor": {
          "ref": "9c7ed9b8-4b76-435f-86d6-1a2bf712cf32",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7ab48e60-9d10-4fba-bcd5-6c4135da2b2f"
        },
        "item": {
          "id": "0ebae051-efe6-474e-a690-f8acaa7ab7b8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b60bc19e-eec2-4f9a-a950-d9b67eb65abf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebae051-efe6-474e-a690-f8acaa7ab7b8",
        "cursor": {
          "ref": "9c7ed9b8-4b76-435f-86d6-1a2bf712cf32",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7ab48e60-9d10-4fba-bcd5-6c4135da2b2f"
        },
        "item": {
          "id": "0ebae051-efe6-474e-a690-f8acaa7ab7b8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b60bc19e-eec2-4f9a-a950-d9b67eb65abf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91cc035-5c07-4c75-9345-3adcdc5d8548",
        "cursor": {
          "ref": "196ba763-7b95-43a6-a071-25e67200335f",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8021d433-4042-4d8a-af1f-1f49c229effc"
        },
        "item": {
          "id": "c91cc035-5c07-4c75-9345-3adcdc5d8548",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f909581f-1b83-4f1f-997c-8693bb872fa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91cc035-5c07-4c75-9345-3adcdc5d8548",
        "cursor": {
          "ref": "196ba763-7b95-43a6-a071-25e67200335f",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8021d433-4042-4d8a-af1f-1f49c229effc"
        },
        "item": {
          "id": "c91cc035-5c07-4c75-9345-3adcdc5d8548",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f909581f-1b83-4f1f-997c-8693bb872fa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aba5546-cd85-415a-9c49-8e81fb6563ad",
        "cursor": {
          "ref": "56d1df72-d835-4010-a57c-a06e1df9d0e0",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cde2abfd-efb1-4337-85bd-9f151a7b510a"
        },
        "item": {
          "id": "0aba5546-cd85-415a-9c49-8e81fb6563ad",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a41d2964-a96a-40b4-b3e1-c4aadd36906b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aba5546-cd85-415a-9c49-8e81fb6563ad",
        "cursor": {
          "ref": "56d1df72-d835-4010-a57c-a06e1df9d0e0",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cde2abfd-efb1-4337-85bd-9f151a7b510a"
        },
        "item": {
          "id": "0aba5546-cd85-415a-9c49-8e81fb6563ad",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a41d2964-a96a-40b4-b3e1-c4aadd36906b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4d0e63-3c04-45f6-9798-ad7952eb5058",
        "cursor": {
          "ref": "8dd74b17-cdea-4217-bdd3-fdc98212323c",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "37de3c95-e710-405f-b2cc-c8cde4203fa6"
        },
        "item": {
          "id": "bf4d0e63-3c04-45f6-9798-ad7952eb5058",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "697779da-b72b-467f-9df8-e195465722cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 1147,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4d0e63-3c04-45f6-9798-ad7952eb5058",
        "cursor": {
          "ref": "8dd74b17-cdea-4217-bdd3-fdc98212323c",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "37de3c95-e710-405f-b2cc-c8cde4203fa6"
        },
        "item": {
          "id": "bf4d0e63-3c04-45f6-9798-ad7952eb5058",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "697779da-b72b-467f-9df8-e195465722cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 1147,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c10c1d7-ce8f-4045-9b25-3887a0a1559b",
        "cursor": {
          "ref": "929504a7-9cbf-4c1b-967f-0674cbf5a3a1",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "328aa964-e0f4-4cfc-a202-ba890f3d32a1"
        },
        "item": {
          "id": "9c10c1d7-ce8f-4045-9b25-3887a0a1559b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "70d46a3e-da84-47ce-8438-43be3d1c6eb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c10c1d7-ce8f-4045-9b25-3887a0a1559b",
        "cursor": {
          "ref": "929504a7-9cbf-4c1b-967f-0674cbf5a3a1",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "328aa964-e0f4-4cfc-a202-ba890f3d32a1"
        },
        "item": {
          "id": "9c10c1d7-ce8f-4045-9b25-3887a0a1559b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "70d46a3e-da84-47ce-8438-43be3d1c6eb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea60fa0-3d9d-47f3-87e7-5492342ff5db",
        "cursor": {
          "ref": "99bad404-5f9e-4b8d-967f-27c3cfb57bce",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bc808cde-c4ff-4fe1-a6fa-b33a570dc838"
        },
        "item": {
          "id": "5ea60fa0-3d9d-47f3-87e7-5492342ff5db",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "992ee834-c710-4186-8466-47b8b3ef494a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea60fa0-3d9d-47f3-87e7-5492342ff5db",
        "cursor": {
          "ref": "99bad404-5f9e-4b8d-967f-27c3cfb57bce",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bc808cde-c4ff-4fe1-a6fa-b33a570dc838"
        },
        "item": {
          "id": "5ea60fa0-3d9d-47f3-87e7-5492342ff5db",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "992ee834-c710-4186-8466-47b8b3ef494a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f399b0-5937-4564-8408-f3f6a2d56997",
        "cursor": {
          "ref": "995013b7-9cd8-4d87-8f2c-24e51ff73c8f",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "26297142-6677-41ab-b6af-af82368cb9b1"
        },
        "item": {
          "id": "f9f399b0-5937-4564-8408-f3f6a2d56997",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "006ee529-c6e3-46c1-8303-fbeecb9c7450",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f399b0-5937-4564-8408-f3f6a2d56997",
        "cursor": {
          "ref": "995013b7-9cd8-4d87-8f2c-24e51ff73c8f",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "26297142-6677-41ab-b6af-af82368cb9b1"
        },
        "item": {
          "id": "f9f399b0-5937-4564-8408-f3f6a2d56997",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "006ee529-c6e3-46c1-8303-fbeecb9c7450",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a833a8db-2627-4418-a811-21828b0c5937",
        "cursor": {
          "ref": "1050dd02-f2b9-4527-9157-e3d53d114293",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1555c35d-5a19-44e3-a492-b8adb6d38b2c"
        },
        "item": {
          "id": "a833a8db-2627-4418-a811-21828b0c5937",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1b856257-36cb-4d89-b4cd-3c5cd16b6e8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a833a8db-2627-4418-a811-21828b0c5937",
        "cursor": {
          "ref": "1050dd02-f2b9-4527-9157-e3d53d114293",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1555c35d-5a19-44e3-a492-b8adb6d38b2c"
        },
        "item": {
          "id": "a833a8db-2627-4418-a811-21828b0c5937",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1b856257-36cb-4d89-b4cd-3c5cd16b6e8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb9c1d6-a4de-456f-9c5b-0f2bad2588fc",
        "cursor": {
          "ref": "4c4ef982-18f1-42f6-a367-457d14ed4b3c",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fa2952b6-d728-472f-9c50-2660795865b6"
        },
        "item": {
          "id": "ebb9c1d6-a4de-456f-9c5b-0f2bad2588fc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1194d267-d61f-4a2d-9d55-fe3635c91628",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb9c1d6-a4de-456f-9c5b-0f2bad2588fc",
        "cursor": {
          "ref": "4c4ef982-18f1-42f6-a367-457d14ed4b3c",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fa2952b6-d728-472f-9c50-2660795865b6"
        },
        "item": {
          "id": "ebb9c1d6-a4de-456f-9c5b-0f2bad2588fc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1194d267-d61f-4a2d-9d55-fe3635c91628",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b20979-26c1-4087-95e0-0f610c9fd714",
        "cursor": {
          "ref": "74c7b6db-415d-4cab-a175-ccb718e32a9b",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "372bbf2d-31ff-460e-90a8-aa624debab11"
        },
        "item": {
          "id": "b0b20979-26c1-4087-95e0-0f610c9fd714",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0d1fd260-7397-4ce0-880e-b378334db848",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b20979-26c1-4087-95e0-0f610c9fd714",
        "cursor": {
          "ref": "74c7b6db-415d-4cab-a175-ccb718e32a9b",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "372bbf2d-31ff-460e-90a8-aa624debab11"
        },
        "item": {
          "id": "b0b20979-26c1-4087-95e0-0f610c9fd714",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0d1fd260-7397-4ce0-880e-b378334db848",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b23f2d-e628-4470-b89f-fc10b74a29f6",
        "cursor": {
          "ref": "9548a979-1a41-4605-bbae-9553f14bc506",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4116a88d-e4fb-4e9b-83d2-95931eae2e96"
        },
        "item": {
          "id": "e8b23f2d-e628-4470-b89f-fc10b74a29f6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a47231f3-75a3-4a93-9c73-7da1314d941e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b23f2d-e628-4470-b89f-fc10b74a29f6",
        "cursor": {
          "ref": "9548a979-1a41-4605-bbae-9553f14bc506",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4116a88d-e4fb-4e9b-83d2-95931eae2e96"
        },
        "item": {
          "id": "e8b23f2d-e628-4470-b89f-fc10b74a29f6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a47231f3-75a3-4a93-9c73-7da1314d941e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc58bf7-bc12-4dfd-9f6b-2f0e33facabf",
        "cursor": {
          "ref": "42f2a60c-c657-4ba4-9c2e-0ffda5f6aae5",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1e77a406-ab0d-4a8e-aaca-9ab035975e80"
        },
        "item": {
          "id": "3bc58bf7-bc12-4dfd-9f6b-2f0e33facabf",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ecd55f50-354f-48ca-926d-5f195b1b7904",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc58bf7-bc12-4dfd-9f6b-2f0e33facabf",
        "cursor": {
          "ref": "42f2a60c-c657-4ba4-9c2e-0ffda5f6aae5",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1e77a406-ab0d-4a8e-aaca-9ab035975e80"
        },
        "item": {
          "id": "3bc58bf7-bc12-4dfd-9f6b-2f0e33facabf",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ecd55f50-354f-48ca-926d-5f195b1b7904",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14cd6aa0-efeb-4aaa-857e-b78f0de2ff9e",
        "cursor": {
          "ref": "9b799b5a-8d11-4ce3-b0ca-3099c317f0be",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e7222e56-b42f-40db-824c-26b36a32ebde"
        },
        "item": {
          "id": "14cd6aa0-efeb-4aaa-857e-b78f0de2ff9e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a2c6db0d-c6b9-4faf-8ba8-3b296f42dccb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14cd6aa0-efeb-4aaa-857e-b78f0de2ff9e",
        "cursor": {
          "ref": "9b799b5a-8d11-4ce3-b0ca-3099c317f0be",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e7222e56-b42f-40db-824c-26b36a32ebde"
        },
        "item": {
          "id": "14cd6aa0-efeb-4aaa-857e-b78f0de2ff9e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a2c6db0d-c6b9-4faf-8ba8-3b296f42dccb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a86acb6-476b-41e2-89d2-267c44f2e2ae",
        "cursor": {
          "ref": "93bece00-b10e-41bf-b436-a561f69d8295",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "de100ab5-2e7a-4ce4-b47c-a147d54f28e3"
        },
        "item": {
          "id": "3a86acb6-476b-41e2-89d2-267c44f2e2ae",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c64e51eb-92c4-4bb3-8c9f-980c0f068b40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a86acb6-476b-41e2-89d2-267c44f2e2ae",
        "cursor": {
          "ref": "93bece00-b10e-41bf-b436-a561f69d8295",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "de100ab5-2e7a-4ce4-b47c-a147d54f28e3"
        },
        "item": {
          "id": "3a86acb6-476b-41e2-89d2-267c44f2e2ae",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c64e51eb-92c4-4bb3-8c9f-980c0f068b40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70181c9-6007-49c4-bf1b-9e02bfa51ece",
        "cursor": {
          "ref": "d9d91eb1-0119-4d28-a631-3356398b7e62",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d337731b-19d5-4410-b1ad-5bd58f6c2b91"
        },
        "item": {
          "id": "a70181c9-6007-49c4-bf1b-9e02bfa51ece",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3c59c08e-b119-43ab-8d57-c82a4eab4f6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70181c9-6007-49c4-bf1b-9e02bfa51ece",
        "cursor": {
          "ref": "d9d91eb1-0119-4d28-a631-3356398b7e62",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d337731b-19d5-4410-b1ad-5bd58f6c2b91"
        },
        "item": {
          "id": "a70181c9-6007-49c4-bf1b-9e02bfa51ece",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3c59c08e-b119-43ab-8d57-c82a4eab4f6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9385d35-4e23-4523-9d0b-e20d44e40ed5",
        "cursor": {
          "ref": "9adcbc7f-91f1-490c-9e39-92f3037c75a2",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "dfd7b2ca-8974-47f0-95aa-bce838d706dc"
        },
        "item": {
          "id": "d9385d35-4e23-4523-9d0b-e20d44e40ed5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0d7d6460-1ce3-4a99-82e3-25a944a07f51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9385d35-4e23-4523-9d0b-e20d44e40ed5",
        "cursor": {
          "ref": "9adcbc7f-91f1-490c-9e39-92f3037c75a2",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "dfd7b2ca-8974-47f0-95aa-bce838d706dc"
        },
        "item": {
          "id": "d9385d35-4e23-4523-9d0b-e20d44e40ed5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0d7d6460-1ce3-4a99-82e3-25a944a07f51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298be361-c2da-4e9a-9b25-4dfbcfe07655",
        "cursor": {
          "ref": "bce83b92-e4de-42c8-bc23-ddee133ebcb5",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0387c89d-7e34-421e-9abb-e6ea21b837b9"
        },
        "item": {
          "id": "298be361-c2da-4e9a-9b25-4dfbcfe07655",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2fceb451-daed-4e5f-9cc7-b9f11fada193",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "298be361-c2da-4e9a-9b25-4dfbcfe07655",
        "cursor": {
          "ref": "bce83b92-e4de-42c8-bc23-ddee133ebcb5",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0387c89d-7e34-421e-9abb-e6ea21b837b9"
        },
        "item": {
          "id": "298be361-c2da-4e9a-9b25-4dfbcfe07655",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2fceb451-daed-4e5f-9cc7-b9f11fada193",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b282d064-7b77-4f35-a79f-63276cdacb24",
        "cursor": {
          "ref": "3aa3c399-a081-4a48-89af-6c057c58c98e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5bd0933c-7837-46cd-82e2-01a49255b9e9"
        },
        "item": {
          "id": "b282d064-7b77-4f35-a79f-63276cdacb24",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "470125d5-65f3-4ae7-884d-5fbdce4ceaf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b282d064-7b77-4f35-a79f-63276cdacb24",
        "cursor": {
          "ref": "3aa3c399-a081-4a48-89af-6c057c58c98e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5bd0933c-7837-46cd-82e2-01a49255b9e9"
        },
        "item": {
          "id": "b282d064-7b77-4f35-a79f-63276cdacb24",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "470125d5-65f3-4ae7-884d-5fbdce4ceaf9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81786f81-f603-48cf-93c3-7da2508793fc",
        "cursor": {
          "ref": "859f8ee1-fd26-45a5-b7ca-02e22f58338a",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "736ba99e-ecd4-4717-a97f-3da452f4a59b"
        },
        "item": {
          "id": "81786f81-f603-48cf-93c3-7da2508793fc",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "34b07e59-3521-43cc-bfa7-74eb49f77fc8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81786f81-f603-48cf-93c3-7da2508793fc",
        "cursor": {
          "ref": "859f8ee1-fd26-45a5-b7ca-02e22f58338a",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "736ba99e-ecd4-4717-a97f-3da452f4a59b"
        },
        "item": {
          "id": "81786f81-f603-48cf-93c3-7da2508793fc",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "34b07e59-3521-43cc-bfa7-74eb49f77fc8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870a1b8c-d8a5-4ca7-87d1-f40bc36f15a0",
        "cursor": {
          "ref": "e3e682ce-60cf-4089-bc5d-a56496d6da00",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "438b6ecc-643a-4770-be30-87c23b437560"
        },
        "item": {
          "id": "870a1b8c-d8a5-4ca7-87d1-f40bc36f15a0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c6300d31-a5ae-4dad-9d56-3eaa62de59fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870a1b8c-d8a5-4ca7-87d1-f40bc36f15a0",
        "cursor": {
          "ref": "e3e682ce-60cf-4089-bc5d-a56496d6da00",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "438b6ecc-643a-4770-be30-87c23b437560"
        },
        "item": {
          "id": "870a1b8c-d8a5-4ca7-87d1-f40bc36f15a0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c6300d31-a5ae-4dad-9d56-3eaa62de59fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2dca48-1d14-4b44-a049-e74b4232c3a5",
        "cursor": {
          "ref": "b9024f70-2c05-4c4c-80cd-e9b83181c720",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1fa451b6-c423-4b08-a846-391084dd3842"
        },
        "item": {
          "id": "5b2dca48-1d14-4b44-a049-e74b4232c3a5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "eab41760-aba8-4589-b7dc-6cc2dc17d08c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 281,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2dca48-1d14-4b44-a049-e74b4232c3a5",
        "cursor": {
          "ref": "b9024f70-2c05-4c4c-80cd-e9b83181c720",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1fa451b6-c423-4b08-a846-391084dd3842"
        },
        "item": {
          "id": "5b2dca48-1d14-4b44-a049-e74b4232c3a5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "eab41760-aba8-4589-b7dc-6cc2dc17d08c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 281,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a669137-1bd6-46f0-9304-5e51ebfef217",
        "cursor": {
          "ref": "20d3df1a-a344-4962-ba4e-94db8994e959",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d2ab2ff5-a5e8-41fd-a1c5-ec18339d4f91"
        },
        "item": {
          "id": "7a669137-1bd6-46f0-9304-5e51ebfef217",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2a10e23c-c1fa-414d-a8db-baee5e7e09af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a669137-1bd6-46f0-9304-5e51ebfef217",
        "cursor": {
          "ref": "20d3df1a-a344-4962-ba4e-94db8994e959",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d2ab2ff5-a5e8-41fd-a1c5-ec18339d4f91"
        },
        "item": {
          "id": "7a669137-1bd6-46f0-9304-5e51ebfef217",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2a10e23c-c1fa-414d-a8db-baee5e7e09af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0354b6d6-0609-4b26-afb2-36030a165707",
        "cursor": {
          "ref": "c68c86e4-d53f-407b-822b-8338fa442989",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0fd669cc-8de7-48ea-ae81-88b6d0bf59e1"
        },
        "item": {
          "id": "0354b6d6-0609-4b26-afb2-36030a165707",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9ff4781b-d5a7-43f7-8bb0-6a3ba8d1674a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0354b6d6-0609-4b26-afb2-36030a165707",
        "cursor": {
          "ref": "c68c86e4-d53f-407b-822b-8338fa442989",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0fd669cc-8de7-48ea-ae81-88b6d0bf59e1"
        },
        "item": {
          "id": "0354b6d6-0609-4b26-afb2-36030a165707",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9ff4781b-d5a7-43f7-8bb0-6a3ba8d1674a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "785898cc-995e-4555-9f75-8d0cf5baefd3",
        "cursor": {
          "ref": "ccdd6cb5-fc25-4467-9618-c4f06af6e337",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f1aaf379-b459-42df-a0f6-bde70aff4131"
        },
        "item": {
          "id": "785898cc-995e-4555-9f75-8d0cf5baefd3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8747a986-4eea-4fe5-ae22-06265c2a8fa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "785898cc-995e-4555-9f75-8d0cf5baefd3",
        "cursor": {
          "ref": "ccdd6cb5-fc25-4467-9618-c4f06af6e337",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f1aaf379-b459-42df-a0f6-bde70aff4131"
        },
        "item": {
          "id": "785898cc-995e-4555-9f75-8d0cf5baefd3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8747a986-4eea-4fe5-ae22-06265c2a8fa1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf70c92-aa48-4784-a222-7d5101d15636",
        "cursor": {
          "ref": "c90ecc87-e9af-4c05-a8f4-d796e9f2cccd",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "48f82641-70e9-4061-b77b-19b75c04ef8a"
        },
        "item": {
          "id": "caf70c92-aa48-4784-a222-7d5101d15636",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a9bd3aa4-e73a-4d22-9791-2bf9b2dfe5f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf70c92-aa48-4784-a222-7d5101d15636",
        "cursor": {
          "ref": "c90ecc87-e9af-4c05-a8f4-d796e9f2cccd",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "48f82641-70e9-4061-b77b-19b75c04ef8a"
        },
        "item": {
          "id": "caf70c92-aa48-4784-a222-7d5101d15636",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a9bd3aa4-e73a-4d22-9791-2bf9b2dfe5f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0c40a4-58fb-4443-b874-5242da19c6bf",
        "cursor": {
          "ref": "1ccb9996-1b20-44ca-98c3-e4daade3d1ad",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e14a723e-ca91-44b8-996c-5df2211927a9"
        },
        "item": {
          "id": "5e0c40a4-58fb-4443-b874-5242da19c6bf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ed1bed6d-6fa6-442d-a5c7-4a6e89ed4d17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0c40a4-58fb-4443-b874-5242da19c6bf",
        "cursor": {
          "ref": "1ccb9996-1b20-44ca-98c3-e4daade3d1ad",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e14a723e-ca91-44b8-996c-5df2211927a9"
        },
        "item": {
          "id": "5e0c40a4-58fb-4443-b874-5242da19c6bf",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ed1bed6d-6fa6-442d-a5c7-4a6e89ed4d17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6808be89-59f9-4a35-8361-cb9953aa142a",
        "cursor": {
          "ref": "965c5b24-3aee-4070-82e0-016f541bff9f",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3b093f01-c7c6-43f9-ad41-8b30176337ee"
        },
        "item": {
          "id": "6808be89-59f9-4a35-8361-cb9953aa142a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7c9af636-3190-429d-b1a8-9d74172f4203",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6808be89-59f9-4a35-8361-cb9953aa142a",
        "cursor": {
          "ref": "965c5b24-3aee-4070-82e0-016f541bff9f",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3b093f01-c7c6-43f9-ad41-8b30176337ee"
        },
        "item": {
          "id": "6808be89-59f9-4a35-8361-cb9953aa142a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7c9af636-3190-429d-b1a8-9d74172f4203",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4057147-1590-4982-acbd-8a39764e0e15",
        "cursor": {
          "ref": "aee1b028-feea-40b9-8bf2-67ea3dbdbd45",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "223eda35-df6b-4afb-9560-5059593fe132"
        },
        "item": {
          "id": "f4057147-1590-4982-acbd-8a39764e0e15",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "683aeb59-8203-4587-9aa2-b671faaa686b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4057147-1590-4982-acbd-8a39764e0e15",
        "cursor": {
          "ref": "aee1b028-feea-40b9-8bf2-67ea3dbdbd45",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "223eda35-df6b-4afb-9560-5059593fe132"
        },
        "item": {
          "id": "f4057147-1590-4982-acbd-8a39764e0e15",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "683aeb59-8203-4587-9aa2-b671faaa686b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e34e1de-1fa3-4e31-b71e-cc995558fd02",
        "cursor": {
          "ref": "676be28a-4f15-4437-ad35-04a914dda193",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f25dabb5-16e0-46cc-afe7-d9a8bb77c6f0"
        },
        "item": {
          "id": "4e34e1de-1fa3-4e31-b71e-cc995558fd02",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "03cc183b-f612-4aee-b2d1-12f2c5b5c10a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e34e1de-1fa3-4e31-b71e-cc995558fd02",
        "cursor": {
          "ref": "676be28a-4f15-4437-ad35-04a914dda193",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f25dabb5-16e0-46cc-afe7-d9a8bb77c6f0"
        },
        "item": {
          "id": "4e34e1de-1fa3-4e31-b71e-cc995558fd02",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "03cc183b-f612-4aee-b2d1-12f2c5b5c10a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4c8ad0-06dd-475b-a905-ea2628ac9a3e",
        "cursor": {
          "ref": "2a8a2670-e125-42bd-a226-5dbd3d7449db",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9038080c-e511-4a2d-8438-d1e3a7358823"
        },
        "item": {
          "id": "4f4c8ad0-06dd-475b-a905-ea2628ac9a3e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5826e88e-1c70-4544-b77b-f598560f6c02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4c8ad0-06dd-475b-a905-ea2628ac9a3e",
        "cursor": {
          "ref": "2a8a2670-e125-42bd-a226-5dbd3d7449db",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9038080c-e511-4a2d-8438-d1e3a7358823"
        },
        "item": {
          "id": "4f4c8ad0-06dd-475b-a905-ea2628ac9a3e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5826e88e-1c70-4544-b77b-f598560f6c02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0681ba5-1afa-4cda-84d1-b1dc43feeec7",
        "cursor": {
          "ref": "b1139d43-7781-4342-9bed-251f22c561d1",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "23695302-5084-4bed-9943-761b74a004a7"
        },
        "item": {
          "id": "f0681ba5-1afa-4cda-84d1-b1dc43feeec7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fd4b5070-e25f-497a-9921-40ea58350c50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0681ba5-1afa-4cda-84d1-b1dc43feeec7",
        "cursor": {
          "ref": "b1139d43-7781-4342-9bed-251f22c561d1",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "23695302-5084-4bed-9943-761b74a004a7"
        },
        "item": {
          "id": "f0681ba5-1afa-4cda-84d1-b1dc43feeec7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "fd4b5070-e25f-497a-9921-40ea58350c50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203fe878-8494-4554-8a2d-b8718d501dbe",
        "cursor": {
          "ref": "30c37957-c0fa-430c-b996-867cf23bb1c3",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "25172bec-cc94-4f53-9be7-917a21500c72"
        },
        "item": {
          "id": "203fe878-8494-4554-8a2d-b8718d501dbe",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9d410686-0a56-44db-8388-af6fd0a1f578",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203fe878-8494-4554-8a2d-b8718d501dbe",
        "cursor": {
          "ref": "30c37957-c0fa-430c-b996-867cf23bb1c3",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "25172bec-cc94-4f53-9be7-917a21500c72"
        },
        "item": {
          "id": "203fe878-8494-4554-8a2d-b8718d501dbe",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9d410686-0a56-44db-8388-af6fd0a1f578",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a203630-1f88-4c60-8c4f-86f6690faf32",
        "cursor": {
          "ref": "c6190883-c25e-4263-b520-c994664971b8",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e0aa2798-2137-4cc0-b2bd-46cb8d763d20"
        },
        "item": {
          "id": "2a203630-1f88-4c60-8c4f-86f6690faf32",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f5ffe7c1-0122-4ed2-b45e-9d11edca0665",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a203630-1f88-4c60-8c4f-86f6690faf32",
        "cursor": {
          "ref": "c6190883-c25e-4263-b520-c994664971b8",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e0aa2798-2137-4cc0-b2bd-46cb8d763d20"
        },
        "item": {
          "id": "2a203630-1f88-4c60-8c4f-86f6690faf32",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f5ffe7c1-0122-4ed2-b45e-9d11edca0665",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efffa9e3-b603-4faa-926b-866a84a2f087",
        "cursor": {
          "ref": "5f9f73c6-60d2-4768-a14a-4656dc4c2708",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5debfe83-9713-4afd-8c39-616fef3fe2cb"
        },
        "item": {
          "id": "efffa9e3-b603-4faa-926b-866a84a2f087",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e1e8944c-8ec7-4889-a44a-50dd0bf4872e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efffa9e3-b603-4faa-926b-866a84a2f087",
        "cursor": {
          "ref": "5f9f73c6-60d2-4768-a14a-4656dc4c2708",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5debfe83-9713-4afd-8c39-616fef3fe2cb"
        },
        "item": {
          "id": "efffa9e3-b603-4faa-926b-866a84a2f087",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e1e8944c-8ec7-4889-a44a-50dd0bf4872e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056d9561-2a36-4515-b215-29fa20ce93a2",
        "cursor": {
          "ref": "74ac91a0-3c61-43cf-8a05-83c300c0bb10",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6dcf359d-50a7-49a8-a3ba-de56c229d6a3"
        },
        "item": {
          "id": "056d9561-2a36-4515-b215-29fa20ce93a2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2c182e4b-0ed2-413c-b4ec-b5bd8e338dc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056d9561-2a36-4515-b215-29fa20ce93a2",
        "cursor": {
          "ref": "74ac91a0-3c61-43cf-8a05-83c300c0bb10",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6dcf359d-50a7-49a8-a3ba-de56c229d6a3"
        },
        "item": {
          "id": "056d9561-2a36-4515-b215-29fa20ce93a2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2c182e4b-0ed2-413c-b4ec-b5bd8e338dc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34d000e-63d9-40a9-8b13-f2ba2b9cb45f",
        "cursor": {
          "ref": "8880a647-daaf-4557-9f85-bdc13ca5c0c7",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bd7b06c9-e956-41fa-8ece-04f360b9d307"
        },
        "item": {
          "id": "b34d000e-63d9-40a9-8b13-f2ba2b9cb45f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e6ba5692-4b1b-42d0-b115-0b3e5a1a3ca4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34d000e-63d9-40a9-8b13-f2ba2b9cb45f",
        "cursor": {
          "ref": "8880a647-daaf-4557-9f85-bdc13ca5c0c7",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bd7b06c9-e956-41fa-8ece-04f360b9d307"
        },
        "item": {
          "id": "b34d000e-63d9-40a9-8b13-f2ba2b9cb45f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e6ba5692-4b1b-42d0-b115-0b3e5a1a3ca4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a18105d-7240-4350-b165-8166e6138b2b",
        "cursor": {
          "ref": "5d26c18a-8045-435d-8469-1ba8dbc23e11",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "76f0d5b1-7e0b-4206-87b3-25470eb18429"
        },
        "item": {
          "id": "6a18105d-7240-4350-b165-8166e6138b2b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "55d6402f-8ef5-4ea8-b8c1-5820aec8393c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a18105d-7240-4350-b165-8166e6138b2b",
        "cursor": {
          "ref": "5d26c18a-8045-435d-8469-1ba8dbc23e11",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "76f0d5b1-7e0b-4206-87b3-25470eb18429"
        },
        "item": {
          "id": "6a18105d-7240-4350-b165-8166e6138b2b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "55d6402f-8ef5-4ea8-b8c1-5820aec8393c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8428ab3f-8f71-4d64-9fc7-5d93cde005f3",
        "cursor": {
          "ref": "e6b5157a-086b-49a0-af75-b7d723af8aa9",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d5940b21-f361-4f49-8b51-72c5d61a91b4"
        },
        "item": {
          "id": "8428ab3f-8f71-4d64-9fc7-5d93cde005f3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4150c0e1-f00a-4016-aa5e-ac6b7110f418",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8428ab3f-8f71-4d64-9fc7-5d93cde005f3",
        "cursor": {
          "ref": "e6b5157a-086b-49a0-af75-b7d723af8aa9",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d5940b21-f361-4f49-8b51-72c5d61a91b4"
        },
        "item": {
          "id": "8428ab3f-8f71-4d64-9fc7-5d93cde005f3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4150c0e1-f00a-4016-aa5e-ac6b7110f418",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8a9430-c028-4e12-9151-0a427980d5ac",
        "cursor": {
          "ref": "096b2040-00a1-4a0e-adf9-8870474ccae7",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c3c6c653-09d2-4c5f-a7cf-9cebbe28a394"
        },
        "item": {
          "id": "df8a9430-c028-4e12-9151-0a427980d5ac",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "959b7dad-3624-4603-99a1-b47a165a61a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8a9430-c028-4e12-9151-0a427980d5ac",
        "cursor": {
          "ref": "096b2040-00a1-4a0e-adf9-8870474ccae7",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c3c6c653-09d2-4c5f-a7cf-9cebbe28a394"
        },
        "item": {
          "id": "df8a9430-c028-4e12-9151-0a427980d5ac",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "959b7dad-3624-4603-99a1-b47a165a61a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd7e9eb-6181-45f9-be30-eb57d47b741c",
        "cursor": {
          "ref": "0d1396d5-128e-4345-b0c6-f55d1afb21c5",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1eb369a3-0199-4b5f-8986-edacebcd4cf0"
        },
        "item": {
          "id": "cfd7e9eb-6181-45f9-be30-eb57d47b741c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "acd86885-090c-4952-ae4a-0185bdd2cb8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd7e9eb-6181-45f9-be30-eb57d47b741c",
        "cursor": {
          "ref": "0d1396d5-128e-4345-b0c6-f55d1afb21c5",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1eb369a3-0199-4b5f-8986-edacebcd4cf0"
        },
        "item": {
          "id": "cfd7e9eb-6181-45f9-be30-eb57d47b741c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "acd86885-090c-4952-ae4a-0185bdd2cb8e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8978fc6c-6c0a-4dbf-b538-7dec9456bc3b",
        "cursor": {
          "ref": "55060c29-9c5f-4a98-a43b-090d19ddef67",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0d97c870-8567-46e7-b81d-0dee6028aefc"
        },
        "item": {
          "id": "8978fc6c-6c0a-4dbf-b538-7dec9456bc3b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4585857d-500b-4cae-91ca-9b743c053cdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8978fc6c-6c0a-4dbf-b538-7dec9456bc3b",
        "cursor": {
          "ref": "55060c29-9c5f-4a98-a43b-090d19ddef67",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0d97c870-8567-46e7-b81d-0dee6028aefc"
        },
        "item": {
          "id": "8978fc6c-6c0a-4dbf-b538-7dec9456bc3b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4585857d-500b-4cae-91ca-9b743c053cdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d368d058-b534-4ca5-bb30-f3a53197360b",
        "cursor": {
          "ref": "e6336cec-8b28-4cf0-ba70-40b555bf80fd",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6b7d25cd-a8d6-4c68-b459-b67f36bc112b"
        },
        "item": {
          "id": "d368d058-b534-4ca5-bb30-f3a53197360b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "06d5d0c1-1a0c-4600-a7ed-96ae520f662b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d368d058-b534-4ca5-bb30-f3a53197360b",
        "cursor": {
          "ref": "e6336cec-8b28-4cf0-ba70-40b555bf80fd",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6b7d25cd-a8d6-4c68-b459-b67f36bc112b"
        },
        "item": {
          "id": "d368d058-b534-4ca5-bb30-f3a53197360b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "06d5d0c1-1a0c-4600-a7ed-96ae520f662b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7be8a0f-a935-48b0-bac3-4440ec5de17d",
        "cursor": {
          "ref": "31c1fc90-e4c1-45bd-8547-8fdbf3b22486",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c5efbdd1-a46c-4ae2-ad64-b27d0030b758"
        },
        "item": {
          "id": "d7be8a0f-a935-48b0-bac3-4440ec5de17d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4f1f18ab-1467-41fa-baae-dd5b4e420048",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7be8a0f-a935-48b0-bac3-4440ec5de17d",
        "cursor": {
          "ref": "31c1fc90-e4c1-45bd-8547-8fdbf3b22486",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c5efbdd1-a46c-4ae2-ad64-b27d0030b758"
        },
        "item": {
          "id": "d7be8a0f-a935-48b0-bac3-4440ec5de17d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4f1f18ab-1467-41fa-baae-dd5b4e420048",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc077ce-24e6-48e4-a98a-514198474c3d",
        "cursor": {
          "ref": "0e0374e9-bb24-4b19-baa3-51f990ac902b",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a017eca1-3ba4-4406-8dad-291a11647aff"
        },
        "item": {
          "id": "edc077ce-24e6-48e4-a98a-514198474c3d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "83e24704-7d25-471c-ad28-254b93739d26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc077ce-24e6-48e4-a98a-514198474c3d",
        "cursor": {
          "ref": "0e0374e9-bb24-4b19-baa3-51f990ac902b",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a017eca1-3ba4-4406-8dad-291a11647aff"
        },
        "item": {
          "id": "edc077ce-24e6-48e4-a98a-514198474c3d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "83e24704-7d25-471c-ad28-254b93739d26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62371392-1c87-4208-8a4e-a6bd90d8dbda",
        "cursor": {
          "ref": "f50b72c1-5f04-4ce1-9fd7-e01fc7ee94d7",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c4774d30-cb2c-4cc3-9378-6523862d0a3c"
        },
        "item": {
          "id": "62371392-1c87-4208-8a4e-a6bd90d8dbda",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "907694fb-55ab-4f57-9375-47805bfe37d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62371392-1c87-4208-8a4e-a6bd90d8dbda",
        "cursor": {
          "ref": "f50b72c1-5f04-4ce1-9fd7-e01fc7ee94d7",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c4774d30-cb2c-4cc3-9378-6523862d0a3c"
        },
        "item": {
          "id": "62371392-1c87-4208-8a4e-a6bd90d8dbda",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "907694fb-55ab-4f57-9375-47805bfe37d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73aba34-d5ed-4795-9662-d71172031349",
        "cursor": {
          "ref": "3bf98454-4678-4e3c-a205-012fb26a5587",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "85dc7f48-74ab-4066-ac9d-0a5de418157d"
        },
        "item": {
          "id": "e73aba34-d5ed-4795-9662-d71172031349",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e90be147-5c38-4734-8ec0-27f9873ede7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73aba34-d5ed-4795-9662-d71172031349",
        "cursor": {
          "ref": "3bf98454-4678-4e3c-a205-012fb26a5587",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "85dc7f48-74ab-4066-ac9d-0a5de418157d"
        },
        "item": {
          "id": "e73aba34-d5ed-4795-9662-d71172031349",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e90be147-5c38-4734-8ec0-27f9873ede7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b450f1-b93a-4ed0-b9cd-119f7f50a964",
        "cursor": {
          "ref": "beec17fa-b61b-45c4-a9b5-df4c9b4f9510",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cb7c3f18-0584-4bd4-84c0-d3c10ff77e12"
        },
        "item": {
          "id": "78b450f1-b93a-4ed0-b9cd-119f7f50a964",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3fb4e64f-8610-476e-b617-4d338046c7b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b450f1-b93a-4ed0-b9cd-119f7f50a964",
        "cursor": {
          "ref": "beec17fa-b61b-45c4-a9b5-df4c9b4f9510",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cb7c3f18-0584-4bd4-84c0-d3c10ff77e12"
        },
        "item": {
          "id": "78b450f1-b93a-4ed0-b9cd-119f7f50a964",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3fb4e64f-8610-476e-b617-4d338046c7b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02df1a30-4739-4d8c-b793-11c9affb1c88",
        "cursor": {
          "ref": "8ab4fbab-59c7-4f74-9210-f73f00150bb9",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ebc782ca-13a8-4e4b-a515-79542b4f175b"
        },
        "item": {
          "id": "02df1a30-4739-4d8c-b793-11c9affb1c88",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "daee03ae-6dab-40cb-90bc-3b117f5cdfbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02df1a30-4739-4d8c-b793-11c9affb1c88",
        "cursor": {
          "ref": "8ab4fbab-59c7-4f74-9210-f73f00150bb9",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ebc782ca-13a8-4e4b-a515-79542b4f175b"
        },
        "item": {
          "id": "02df1a30-4739-4d8c-b793-11c9affb1c88",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "daee03ae-6dab-40cb-90bc-3b117f5cdfbb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a558740b-4003-46f9-a419-dd1136fd67c8",
        "cursor": {
          "ref": "5c72f611-32a8-420d-b146-f24d9c864eb6",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "38fb1ff1-4500-4a5d-be42-e4342e16c732"
        },
        "item": {
          "id": "a558740b-4003-46f9-a419-dd1136fd67c8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1ed6e20f-5b1f-4c5d-bab2-9e5aee9a7354",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a558740b-4003-46f9-a419-dd1136fd67c8",
        "cursor": {
          "ref": "5c72f611-32a8-420d-b146-f24d9c864eb6",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "38fb1ff1-4500-4a5d-be42-e4342e16c732"
        },
        "item": {
          "id": "a558740b-4003-46f9-a419-dd1136fd67c8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1ed6e20f-5b1f-4c5d-bab2-9e5aee9a7354",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da590a5a-2b18-420f-ba7a-c6abb1914a1c",
        "cursor": {
          "ref": "a50ad4a3-0d57-41fc-bd25-39ed0b06df56",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1db7a30b-2aef-403e-b1e9-eab96811d5ef"
        },
        "item": {
          "id": "da590a5a-2b18-420f-ba7a-c6abb1914a1c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "984e01df-fb7f-4863-9b72-4aa344b51707",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da590a5a-2b18-420f-ba7a-c6abb1914a1c",
        "cursor": {
          "ref": "a50ad4a3-0d57-41fc-bd25-39ed0b06df56",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1db7a30b-2aef-403e-b1e9-eab96811d5ef"
        },
        "item": {
          "id": "da590a5a-2b18-420f-ba7a-c6abb1914a1c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "984e01df-fb7f-4863-9b72-4aa344b51707",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284b8b82-56e5-472e-8953-e2a90f826c5c",
        "cursor": {
          "ref": "b9b3304d-79e3-43b0-86c0-63c4011b3344",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4d87737e-83a9-41af-a4a9-4d92afb8e053"
        },
        "item": {
          "id": "284b8b82-56e5-472e-8953-e2a90f826c5c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b22cd363-39a9-483b-9862-bce8f43ebc97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284b8b82-56e5-472e-8953-e2a90f826c5c",
        "cursor": {
          "ref": "b9b3304d-79e3-43b0-86c0-63c4011b3344",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4d87737e-83a9-41af-a4a9-4d92afb8e053"
        },
        "item": {
          "id": "284b8b82-56e5-472e-8953-e2a90f826c5c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b22cd363-39a9-483b-9862-bce8f43ebc97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec05a9a6-ce8d-4912-ac2b-b6074dfdbfee",
        "cursor": {
          "ref": "985efad5-5bc6-43e2-886b-ff16a1cfad49",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "568e775b-36f8-4476-9b87-789e05c46828"
        },
        "item": {
          "id": "ec05a9a6-ce8d-4912-ac2b-b6074dfdbfee",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "42774712-2822-4487-a416-f8395889cfd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec05a9a6-ce8d-4912-ac2b-b6074dfdbfee",
        "cursor": {
          "ref": "985efad5-5bc6-43e2-886b-ff16a1cfad49",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "568e775b-36f8-4476-9b87-789e05c46828"
        },
        "item": {
          "id": "ec05a9a6-ce8d-4912-ac2b-b6074dfdbfee",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "42774712-2822-4487-a416-f8395889cfd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53bd8ca3-3041-4d11-88fc-a4b3fca58b2e",
        "cursor": {
          "ref": "db18bd09-6968-4c03-a887-afe1bdcf355e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b7864261-aafe-4c26-be20-f2dcfbaa12e4"
        },
        "item": {
          "id": "53bd8ca3-3041-4d11-88fc-a4b3fca58b2e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "74058ad4-4d95-4b6a-bcf5-a4d73905acd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53bd8ca3-3041-4d11-88fc-a4b3fca58b2e",
        "cursor": {
          "ref": "db18bd09-6968-4c03-a887-afe1bdcf355e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b7864261-aafe-4c26-be20-f2dcfbaa12e4"
        },
        "item": {
          "id": "53bd8ca3-3041-4d11-88fc-a4b3fca58b2e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "74058ad4-4d95-4b6a-bcf5-a4d73905acd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8773ed-01fb-4a5b-81de-020c0b5f93b3",
        "cursor": {
          "ref": "419f70e4-8219-4155-aeaa-74f5a7cb705f",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d87b630a-95d0-4108-b707-10f79685b9a6"
        },
        "item": {
          "id": "1b8773ed-01fb-4a5b-81de-020c0b5f93b3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "623d96df-4fb6-4d52-a4b1-b730e8141f5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8773ed-01fb-4a5b-81de-020c0b5f93b3",
        "cursor": {
          "ref": "419f70e4-8219-4155-aeaa-74f5a7cb705f",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d87b630a-95d0-4108-b707-10f79685b9a6"
        },
        "item": {
          "id": "1b8773ed-01fb-4a5b-81de-020c0b5f93b3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "623d96df-4fb6-4d52-a4b1-b730e8141f5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912da498-b8ef-41a5-a608-5f82c67de808",
        "cursor": {
          "ref": "193625b1-2908-48df-9ede-4821d6745185",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b2a44d79-101f-4f1d-b3ff-de0f6ceac62b"
        },
        "item": {
          "id": "912da498-b8ef-41a5-a608-5f82c67de808",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "af57b547-c8b2-414e-af8a-d68f003d1504",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912da498-b8ef-41a5-a608-5f82c67de808",
        "cursor": {
          "ref": "193625b1-2908-48df-9ede-4821d6745185",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b2a44d79-101f-4f1d-b3ff-de0f6ceac62b"
        },
        "item": {
          "id": "912da498-b8ef-41a5-a608-5f82c67de808",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "af57b547-c8b2-414e-af8a-d68f003d1504",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451af292-cff8-429f-a898-c7d734184599",
        "cursor": {
          "ref": "82a55a9e-9a1d-4eb5-a26b-8988c1f01081",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7dee6338-f4fe-4580-9883-f0b8cb67ca94"
        },
        "item": {
          "id": "451af292-cff8-429f-a898-c7d734184599",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ea2f7f26-1bc6-40b7-b733-1162f127fe64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451af292-cff8-429f-a898-c7d734184599",
        "cursor": {
          "ref": "82a55a9e-9a1d-4eb5-a26b-8988c1f01081",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7dee6338-f4fe-4580-9883-f0b8cb67ca94"
        },
        "item": {
          "id": "451af292-cff8-429f-a898-c7d734184599",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ea2f7f26-1bc6-40b7-b733-1162f127fe64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2288651e-0d50-41ad-8c97-cca8ac9f8ab3",
        "cursor": {
          "ref": "323cab07-3411-4820-961e-888fd607fc2d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b9a0d060-6b89-4d00-95f0-1a2fc0bca813"
        },
        "item": {
          "id": "2288651e-0d50-41ad-8c97-cca8ac9f8ab3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b2711047-7d0b-461f-9b6d-9b41501aef65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2288651e-0d50-41ad-8c97-cca8ac9f8ab3",
        "cursor": {
          "ref": "323cab07-3411-4820-961e-888fd607fc2d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b9a0d060-6b89-4d00-95f0-1a2fc0bca813"
        },
        "item": {
          "id": "2288651e-0d50-41ad-8c97-cca8ac9f8ab3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b2711047-7d0b-461f-9b6d-9b41501aef65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501bd063-7c71-489b-88c9-79ac59ee73ba",
        "cursor": {
          "ref": "d0d54355-46ee-4916-be06-ae842b3a556a",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3165e580-9310-4fe0-90d2-2974d59a2e4d"
        },
        "item": {
          "id": "501bd063-7c71-489b-88c9-79ac59ee73ba",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fcae5c3c-2297-4876-a0cc-852d6a953c91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501bd063-7c71-489b-88c9-79ac59ee73ba",
        "cursor": {
          "ref": "d0d54355-46ee-4916-be06-ae842b3a556a",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3165e580-9310-4fe0-90d2-2974d59a2e4d"
        },
        "item": {
          "id": "501bd063-7c71-489b-88c9-79ac59ee73ba",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fcae5c3c-2297-4876-a0cc-852d6a953c91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736709db-3478-4b9a-acc0-28308cd8bd1c",
        "cursor": {
          "ref": "8443fe73-87d0-46f1-b214-35d0458122e1",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9ee125a0-d30f-4362-94a2-d6d004386b81"
        },
        "item": {
          "id": "736709db-3478-4b9a-acc0-28308cd8bd1c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3da93c60-015e-44cb-8c26-8563aebc626c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736709db-3478-4b9a-acc0-28308cd8bd1c",
        "cursor": {
          "ref": "8443fe73-87d0-46f1-b214-35d0458122e1",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9ee125a0-d30f-4362-94a2-d6d004386b81"
        },
        "item": {
          "id": "736709db-3478-4b9a-acc0-28308cd8bd1c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3da93c60-015e-44cb-8c26-8563aebc626c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198a5262-6491-4649-9b81-6223ae01f836",
        "cursor": {
          "ref": "263e23b4-ce9b-465c-8b56-ace09ac202ec",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e60302be-d37b-4106-bf22-4d454417270a"
        },
        "item": {
          "id": "198a5262-6491-4649-9b81-6223ae01f836",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "657cee3d-bd83-4277-abca-1614547d39fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198a5262-6491-4649-9b81-6223ae01f836",
        "cursor": {
          "ref": "263e23b4-ce9b-465c-8b56-ace09ac202ec",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e60302be-d37b-4106-bf22-4d454417270a"
        },
        "item": {
          "id": "198a5262-6491-4649-9b81-6223ae01f836",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "657cee3d-bd83-4277-abca-1614547d39fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad613e3-4272-4358-a174-6f7d65a9215b",
        "cursor": {
          "ref": "8fec7dad-6315-42d0-9f16-02fbd38c9403",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e2a9f609-5faf-433a-83bc-822fee25fbb8"
        },
        "item": {
          "id": "cad613e3-4272-4358-a174-6f7d65a9215b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "15158fc6-13ff-4ac5-93cb-ab8a22d746ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad613e3-4272-4358-a174-6f7d65a9215b",
        "cursor": {
          "ref": "8fec7dad-6315-42d0-9f16-02fbd38c9403",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e2a9f609-5faf-433a-83bc-822fee25fbb8"
        },
        "item": {
          "id": "cad613e3-4272-4358-a174-6f7d65a9215b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "15158fc6-13ff-4ac5-93cb-ab8a22d746ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43aaaee4-0bb5-4f75-8e0e-bf6c43d7792b",
        "cursor": {
          "ref": "e4afe505-9dfe-46b9-951b-5d0faf4912b4",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "26a9653a-0ebc-4ddf-8e0d-2d822a2c823a"
        },
        "item": {
          "id": "43aaaee4-0bb5-4f75-8e0e-bf6c43d7792b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "121b1f18-42f0-48cd-8902-5d14f2a609d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43aaaee4-0bb5-4f75-8e0e-bf6c43d7792b",
        "cursor": {
          "ref": "e4afe505-9dfe-46b9-951b-5d0faf4912b4",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "26a9653a-0ebc-4ddf-8e0d-2d822a2c823a"
        },
        "item": {
          "id": "43aaaee4-0bb5-4f75-8e0e-bf6c43d7792b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "121b1f18-42f0-48cd-8902-5d14f2a609d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5864ba3-284c-4757-bd4f-a213eda309b0",
        "cursor": {
          "ref": "53b28948-c56f-4c3a-a55a-2019130424c5",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9982704d-a50b-446c-bed6-5b9ac4f73bee"
        },
        "item": {
          "id": "a5864ba3-284c-4757-bd4f-a213eda309b0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "91ebff4c-fd8f-4858-8b6c-99c938e01707",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5864ba3-284c-4757-bd4f-a213eda309b0",
        "cursor": {
          "ref": "53b28948-c56f-4c3a-a55a-2019130424c5",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9982704d-a50b-446c-bed6-5b9ac4f73bee"
        },
        "item": {
          "id": "a5864ba3-284c-4757-bd4f-a213eda309b0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "91ebff4c-fd8f-4858-8b6c-99c938e01707",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17a9a3a-cecf-4e0c-ba92-c4afceb99f30",
        "cursor": {
          "ref": "eda96a70-e678-4297-ab83-58455abd7c5a",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "879793f6-48fb-4498-bf71-4cc36b53eb02"
        },
        "item": {
          "id": "b17a9a3a-cecf-4e0c-ba92-c4afceb99f30",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1df434ff-fd39-4b45-881a-b566211f52cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17a9a3a-cecf-4e0c-ba92-c4afceb99f30",
        "cursor": {
          "ref": "eda96a70-e678-4297-ab83-58455abd7c5a",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "879793f6-48fb-4498-bf71-4cc36b53eb02"
        },
        "item": {
          "id": "b17a9a3a-cecf-4e0c-ba92-c4afceb99f30",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1df434ff-fd39-4b45-881a-b566211f52cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f2eda8-bda8-40bd-b2c7-ba6953faee4b",
        "cursor": {
          "ref": "f17a577b-aad0-4aa6-8e59-b9f97052695d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "025abe4f-eca0-4ecd-b155-aedd98965cb9"
        },
        "item": {
          "id": "c3f2eda8-bda8-40bd-b2c7-ba6953faee4b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b5e4acf0-890c-4b2f-8ddf-f241c09a7b01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f2eda8-bda8-40bd-b2c7-ba6953faee4b",
        "cursor": {
          "ref": "f17a577b-aad0-4aa6-8e59-b9f97052695d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "025abe4f-eca0-4ecd-b155-aedd98965cb9"
        },
        "item": {
          "id": "c3f2eda8-bda8-40bd-b2c7-ba6953faee4b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "b5e4acf0-890c-4b2f-8ddf-f241c09a7b01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bb2d1e-22b2-4020-8494-3105ea7c7a22",
        "cursor": {
          "ref": "4669794d-eeda-4f25-8363-dae435d822ef",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9947b2f3-4cde-45e0-ba29-31f7cef6a82b"
        },
        "item": {
          "id": "d0bb2d1e-22b2-4020-8494-3105ea7c7a22",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "72ee8952-5490-4f7a-bd5f-e448c8032264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bb2d1e-22b2-4020-8494-3105ea7c7a22",
        "cursor": {
          "ref": "4669794d-eeda-4f25-8363-dae435d822ef",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9947b2f3-4cde-45e0-ba29-31f7cef6a82b"
        },
        "item": {
          "id": "d0bb2d1e-22b2-4020-8494-3105ea7c7a22",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "72ee8952-5490-4f7a-bd5f-e448c8032264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563a8560-9113-4a51-99f0-b8def8fbe4d7",
        "cursor": {
          "ref": "0830151c-4a61-46a9-8846-264eee982b35",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8a686965-cab9-4907-9ef1-4c1033210079"
        },
        "item": {
          "id": "563a8560-9113-4a51-99f0-b8def8fbe4d7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f07ac86c-8927-42dc-8c41-29c2bf837c95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563a8560-9113-4a51-99f0-b8def8fbe4d7",
        "cursor": {
          "ref": "0830151c-4a61-46a9-8846-264eee982b35",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8a686965-cab9-4907-9ef1-4c1033210079"
        },
        "item": {
          "id": "563a8560-9113-4a51-99f0-b8def8fbe4d7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f07ac86c-8927-42dc-8c41-29c2bf837c95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8328d91-a486-48fc-b6cd-390c55798019",
        "cursor": {
          "ref": "31a5ddc1-fbee-4693-bd38-4caf1a4713cd",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bfaf867a-0f2d-4859-8fb0-246f238d779e"
        },
        "item": {
          "id": "e8328d91-a486-48fc-b6cd-390c55798019",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3dc2d0ec-4c30-4051-bcfe-fc744a4184a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8328d91-a486-48fc-b6cd-390c55798019",
        "cursor": {
          "ref": "31a5ddc1-fbee-4693-bd38-4caf1a4713cd",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bfaf867a-0f2d-4859-8fb0-246f238d779e"
        },
        "item": {
          "id": "e8328d91-a486-48fc-b6cd-390c55798019",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3dc2d0ec-4c30-4051-bcfe-fc744a4184a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dbcb27-b3d8-4768-ab52-e450ddc04dc8",
        "cursor": {
          "ref": "41e01be9-5ae0-41eb-adf9-606c3ee866bd",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e210f9bf-3ccb-40da-af3f-f01e16bd801c"
        },
        "item": {
          "id": "42dbcb27-b3d8-4768-ab52-e450ddc04dc8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8f036e63-0598-4607-9122-a788644e9c92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dbcb27-b3d8-4768-ab52-e450ddc04dc8",
        "cursor": {
          "ref": "41e01be9-5ae0-41eb-adf9-606c3ee866bd",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e210f9bf-3ccb-40da-af3f-f01e16bd801c"
        },
        "item": {
          "id": "42dbcb27-b3d8-4768-ab52-e450ddc04dc8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8f036e63-0598-4607-9122-a788644e9c92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65182d8c-a287-42f3-96c4-e5f2ed2c3c6f",
        "cursor": {
          "ref": "b893ad96-a49b-4434-9875-18df23dc1fa1",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1daaedea-c55b-48b3-abd3-1c268ebe49d3"
        },
        "item": {
          "id": "65182d8c-a287-42f3-96c4-e5f2ed2c3c6f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a4a896a0-e1db-4150-a120-3bf7a5163adf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65182d8c-a287-42f3-96c4-e5f2ed2c3c6f",
        "cursor": {
          "ref": "b893ad96-a49b-4434-9875-18df23dc1fa1",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1daaedea-c55b-48b3-abd3-1c268ebe49d3"
        },
        "item": {
          "id": "65182d8c-a287-42f3-96c4-e5f2ed2c3c6f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a4a896a0-e1db-4150-a120-3bf7a5163adf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94462831-d8a7-4e44-bf0b-4bcb93e10354",
        "cursor": {
          "ref": "33a406d5-82ed-4754-97d2-a8d2dee1807b",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ca627831-d3d9-49e6-accf-a8d2c85c80ba"
        },
        "item": {
          "id": "94462831-d8a7-4e44-bf0b-4bcb93e10354",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "69783899-fa17-4ecc-bd97-2ae7137c84be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94462831-d8a7-4e44-bf0b-4bcb93e10354",
        "cursor": {
          "ref": "33a406d5-82ed-4754-97d2-a8d2dee1807b",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ca627831-d3d9-49e6-accf-a8d2c85c80ba"
        },
        "item": {
          "id": "94462831-d8a7-4e44-bf0b-4bcb93e10354",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "69783899-fa17-4ecc-bd97-2ae7137c84be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf95add-d433-4823-a249-e27246363cda",
        "cursor": {
          "ref": "5048e767-e502-4295-8504-3834373fd792",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "00ffb4d0-2333-4861-b427-25203ca429c9"
        },
        "item": {
          "id": "bdf95add-d433-4823-a249-e27246363cda",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f1456073-3200-4ff9-9b90-e5d4bbf97568",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf95add-d433-4823-a249-e27246363cda",
        "cursor": {
          "ref": "5048e767-e502-4295-8504-3834373fd792",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "00ffb4d0-2333-4861-b427-25203ca429c9"
        },
        "item": {
          "id": "bdf95add-d433-4823-a249-e27246363cda",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f1456073-3200-4ff9-9b90-e5d4bbf97568",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6e284f-db78-488a-94e4-5150ec447bc4",
        "cursor": {
          "ref": "f3f6f8f9-c238-43ad-8d15-667db39de3ba",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9448fbf1-5d5d-450c-a2d8-bc3919625329"
        },
        "item": {
          "id": "4e6e284f-db78-488a-94e4-5150ec447bc4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9944f013-517d-4b89-805b-666390e14190",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6e284f-db78-488a-94e4-5150ec447bc4",
        "cursor": {
          "ref": "f3f6f8f9-c238-43ad-8d15-667db39de3ba",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9448fbf1-5d5d-450c-a2d8-bc3919625329"
        },
        "item": {
          "id": "4e6e284f-db78-488a-94e4-5150ec447bc4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9944f013-517d-4b89-805b-666390e14190",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a26a445-6d8f-47b7-aa76-7eb368965e99",
        "cursor": {
          "ref": "61e8d461-55ea-404e-a31a-96f1c7b3d45f",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fbaadc82-2f97-4695-8efe-703738767a2a"
        },
        "item": {
          "id": "9a26a445-6d8f-47b7-aa76-7eb368965e99",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "576b2e2b-725f-4c66-861e-7c181a234afb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a26a445-6d8f-47b7-aa76-7eb368965e99",
        "cursor": {
          "ref": "61e8d461-55ea-404e-a31a-96f1c7b3d45f",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fbaadc82-2f97-4695-8efe-703738767a2a"
        },
        "item": {
          "id": "9a26a445-6d8f-47b7-aa76-7eb368965e99",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "576b2e2b-725f-4c66-861e-7c181a234afb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b23a140-994b-4b67-b2c3-fc32979dd273",
        "cursor": {
          "ref": "b25f8fd5-123f-4845-8a6e-ab3ecaa1a7be",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f535703a-92e5-4aca-a4d8-f79e3432fc75"
        },
        "item": {
          "id": "3b23a140-994b-4b67-b2c3-fc32979dd273",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ee6b6b1e-9741-43f6-8811-a6f641a8e103",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b23a140-994b-4b67-b2c3-fc32979dd273",
        "cursor": {
          "ref": "b25f8fd5-123f-4845-8a6e-ab3ecaa1a7be",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f535703a-92e5-4aca-a4d8-f79e3432fc75"
        },
        "item": {
          "id": "3b23a140-994b-4b67-b2c3-fc32979dd273",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ee6b6b1e-9741-43f6-8811-a6f641a8e103",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bc92b2-930b-46e6-960b-1d31b82a8dd7",
        "cursor": {
          "ref": "c6dd1750-527a-43e8-916d-131e91769dd6",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "90a46e5b-3307-4f41-9803-52cc4f32c11b"
        },
        "item": {
          "id": "d0bc92b2-930b-46e6-960b-1d31b82a8dd7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b00a9d5a-2b68-4b25-835e-62a8765411d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bc92b2-930b-46e6-960b-1d31b82a8dd7",
        "cursor": {
          "ref": "c6dd1750-527a-43e8-916d-131e91769dd6",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "90a46e5b-3307-4f41-9803-52cc4f32c11b"
        },
        "item": {
          "id": "d0bc92b2-930b-46e6-960b-1d31b82a8dd7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b00a9d5a-2b68-4b25-835e-62a8765411d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ab1012-dbe6-4c59-867f-347a692474df",
        "cursor": {
          "ref": "b570739a-bc4d-45e5-966a-337ce32267d9",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0f3e357f-1efd-41af-b0be-241b753ab685"
        },
        "item": {
          "id": "37ab1012-dbe6-4c59-867f-347a692474df",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9adcb9d9-9d6e-45c8-82fa-c27b50949266",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ab1012-dbe6-4c59-867f-347a692474df",
        "cursor": {
          "ref": "b570739a-bc4d-45e5-966a-337ce32267d9",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0f3e357f-1efd-41af-b0be-241b753ab685"
        },
        "item": {
          "id": "37ab1012-dbe6-4c59-867f-347a692474df",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9adcb9d9-9d6e-45c8-82fa-c27b50949266",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084d6633-1269-4d20-9dae-1989fcfe698f",
        "cursor": {
          "ref": "cc396049-132f-4541-ad5d-fb3422481528",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ce3194e4-37aa-4e0f-965a-05f1ceac0d03"
        },
        "item": {
          "id": "084d6633-1269-4d20-9dae-1989fcfe698f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "36135392-78c7-4559-bbb7-a7dae3267508",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084d6633-1269-4d20-9dae-1989fcfe698f",
        "cursor": {
          "ref": "cc396049-132f-4541-ad5d-fb3422481528",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ce3194e4-37aa-4e0f-965a-05f1ceac0d03"
        },
        "item": {
          "id": "084d6633-1269-4d20-9dae-1989fcfe698f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "36135392-78c7-4559-bbb7-a7dae3267508",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9ead17-4a82-48f8-8f69-9b543cf06fdc",
        "cursor": {
          "ref": "ca44f6d1-265b-481c-93fa-f041e699a468",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "49e86c0c-e134-4c42-8f80-0c47548ca40a"
        },
        "item": {
          "id": "1c9ead17-4a82-48f8-8f69-9b543cf06fdc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9a20e24f-355d-469b-a657-9bb3e55382ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9ead17-4a82-48f8-8f69-9b543cf06fdc",
        "cursor": {
          "ref": "ca44f6d1-265b-481c-93fa-f041e699a468",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "49e86c0c-e134-4c42-8f80-0c47548ca40a"
        },
        "item": {
          "id": "1c9ead17-4a82-48f8-8f69-9b543cf06fdc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9a20e24f-355d-469b-a657-9bb3e55382ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1e39f8-8769-4d03-b51f-36b295bf742d",
        "cursor": {
          "ref": "591f8583-e7e5-4c42-9b1b-2fcbb92f7965",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "33ee8077-6bed-4de4-8181-7b03f36b3779"
        },
        "item": {
          "id": "fa1e39f8-8769-4d03-b51f-36b295bf742d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bffb9126-6bfe-440e-b810-758b9c36eeed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1e39f8-8769-4d03-b51f-36b295bf742d",
        "cursor": {
          "ref": "591f8583-e7e5-4c42-9b1b-2fcbb92f7965",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "33ee8077-6bed-4de4-8181-7b03f36b3779"
        },
        "item": {
          "id": "fa1e39f8-8769-4d03-b51f-36b295bf742d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bffb9126-6bfe-440e-b810-758b9c36eeed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a717e0-3a8b-4f74-b638-9ec8c46f302c",
        "cursor": {
          "ref": "15999b40-a59b-4b03-b500-b90735101710",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "753f476f-55a9-46e4-a389-65e4c70c7deb"
        },
        "item": {
          "id": "c2a717e0-3a8b-4f74-b638-9ec8c46f302c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6a364ed1-e322-48d2-8d3e-94fb4341d0e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a717e0-3a8b-4f74-b638-9ec8c46f302c",
        "cursor": {
          "ref": "15999b40-a59b-4b03-b500-b90735101710",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "753f476f-55a9-46e4-a389-65e4c70c7deb"
        },
        "item": {
          "id": "c2a717e0-3a8b-4f74-b638-9ec8c46f302c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6a364ed1-e322-48d2-8d3e-94fb4341d0e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a46bc50-2542-457b-8dbb-b714e8e45501",
        "cursor": {
          "ref": "7b10dbbd-54ce-4553-b625-30fa79d6d4eb",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "56de0f04-d9c1-42ce-85d7-f28dc51edd25"
        },
        "item": {
          "id": "0a46bc50-2542-457b-8dbb-b714e8e45501",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a0e49375-c511-4c07-895b-9e259c92465b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a46bc50-2542-457b-8dbb-b714e8e45501",
        "cursor": {
          "ref": "7b10dbbd-54ce-4553-b625-30fa79d6d4eb",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "56de0f04-d9c1-42ce-85d7-f28dc51edd25"
        },
        "item": {
          "id": "0a46bc50-2542-457b-8dbb-b714e8e45501",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a0e49375-c511-4c07-895b-9e259c92465b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d056e775-1666-4ccd-b49a-aa628b48e349",
        "cursor": {
          "ref": "ee2c9e47-636e-4567-9c69-1ce8c5e99b13",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c7ed4328-143c-4179-93b1-415ca5034789"
        },
        "item": {
          "id": "d056e775-1666-4ccd-b49a-aa628b48e349",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e0deb504-fcba-4396-8a62-33a3045c4002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d056e775-1666-4ccd-b49a-aa628b48e349",
        "cursor": {
          "ref": "ee2c9e47-636e-4567-9c69-1ce8c5e99b13",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c7ed4328-143c-4179-93b1-415ca5034789"
        },
        "item": {
          "id": "d056e775-1666-4ccd-b49a-aa628b48e349",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e0deb504-fcba-4396-8a62-33a3045c4002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c337cc-3208-4b52-a0dd-fece5ce1ad41",
        "cursor": {
          "ref": "a5d3cb10-f267-446b-85d4-3a4e3dff54de",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c60cee0f-d946-45e0-bbab-5733ae041116"
        },
        "item": {
          "id": "d5c337cc-3208-4b52-a0dd-fece5ce1ad41",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c27fc50b-6ca2-411f-aa1c-e1e88abbd4c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c337cc-3208-4b52-a0dd-fece5ce1ad41",
        "cursor": {
          "ref": "a5d3cb10-f267-446b-85d4-3a4e3dff54de",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c60cee0f-d946-45e0-bbab-5733ae041116"
        },
        "item": {
          "id": "d5c337cc-3208-4b52-a0dd-fece5ce1ad41",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c27fc50b-6ca2-411f-aa1c-e1e88abbd4c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71abcaac-6049-4ae9-8ce9-d48921cc6849",
        "cursor": {
          "ref": "df77fa68-fb76-4d70-8ba5-c80a1fd96bb8",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8ae99781-4c57-4870-9dd3-fb8e8cb23609"
        },
        "item": {
          "id": "71abcaac-6049-4ae9-8ce9-d48921cc6849",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dbc8257e-f661-4ab3-8ddd-3f3daa5970c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71abcaac-6049-4ae9-8ce9-d48921cc6849",
        "cursor": {
          "ref": "df77fa68-fb76-4d70-8ba5-c80a1fd96bb8",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8ae99781-4c57-4870-9dd3-fb8e8cb23609"
        },
        "item": {
          "id": "71abcaac-6049-4ae9-8ce9-d48921cc6849",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dbc8257e-f661-4ab3-8ddd-3f3daa5970c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0233e535-0e49-4209-a4f8-136265ad3280",
        "cursor": {
          "ref": "14c5333c-4973-444a-8e86-4d348b043c13",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5d755afe-9e5b-4aee-84b7-883800c637ed"
        },
        "item": {
          "id": "0233e535-0e49-4209-a4f8-136265ad3280",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bc83199f-1683-4ebf-b9e4-7653409f0435",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0233e535-0e49-4209-a4f8-136265ad3280",
        "cursor": {
          "ref": "14c5333c-4973-444a-8e86-4d348b043c13",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5d755afe-9e5b-4aee-84b7-883800c637ed"
        },
        "item": {
          "id": "0233e535-0e49-4209-a4f8-136265ad3280",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bc83199f-1683-4ebf-b9e4-7653409f0435",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef2b0f2-65d2-4f5e-9a50-705b4b092d47",
        "cursor": {
          "ref": "c5608513-a3a8-40fc-becd-bea44201b8df",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "349a9498-c187-4d13-8d8f-a38b227dfb13"
        },
        "item": {
          "id": "0ef2b0f2-65d2-4f5e-9a50-705b4b092d47",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "849c2762-9987-40d4-93e1-5823e9d49ee9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef2b0f2-65d2-4f5e-9a50-705b4b092d47",
        "cursor": {
          "ref": "c5608513-a3a8-40fc-becd-bea44201b8df",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "349a9498-c187-4d13-8d8f-a38b227dfb13"
        },
        "item": {
          "id": "0ef2b0f2-65d2-4f5e-9a50-705b4b092d47",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "849c2762-9987-40d4-93e1-5823e9d49ee9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21494365-5f05-433c-974c-d70744692c81",
        "cursor": {
          "ref": "71d58aba-0c77-4083-96da-dbfee27a3e85",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6b5b589f-fe56-4534-aea9-515d6162d5ab"
        },
        "item": {
          "id": "21494365-5f05-433c-974c-d70744692c81",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ad9a6214-85e3-460c-9a46-16d8c5fa1f2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21494365-5f05-433c-974c-d70744692c81",
        "cursor": {
          "ref": "71d58aba-0c77-4083-96da-dbfee27a3e85",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6b5b589f-fe56-4534-aea9-515d6162d5ab"
        },
        "item": {
          "id": "21494365-5f05-433c-974c-d70744692c81",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ad9a6214-85e3-460c-9a46-16d8c5fa1f2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7127ee95-f035-447a-9fa7-b02304b2453c",
        "cursor": {
          "ref": "c45eced3-9434-4a39-95e8-6ce1b16203e1",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6c0b9df8-1044-4bd3-ab17-1e28baca3025"
        },
        "item": {
          "id": "7127ee95-f035-447a-9fa7-b02304b2453c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "efd1204d-5f69-4e25-84e0-181011000ae3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7127ee95-f035-447a-9fa7-b02304b2453c",
        "cursor": {
          "ref": "c45eced3-9434-4a39-95e8-6ce1b16203e1",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6c0b9df8-1044-4bd3-ab17-1e28baca3025"
        },
        "item": {
          "id": "7127ee95-f035-447a-9fa7-b02304b2453c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "efd1204d-5f69-4e25-84e0-181011000ae3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490ecb53-0431-4703-ba1c-509037c535f5",
        "cursor": {
          "ref": "14e9a7b6-e8a2-46f6-a863-21a203224dfc",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fbbdc7f6-34cb-43ec-a0e4-ee987d5a1ebb"
        },
        "item": {
          "id": "490ecb53-0431-4703-ba1c-509037c535f5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "be011133-a69c-4c6b-a5c5-8a1dc98f5faf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490ecb53-0431-4703-ba1c-509037c535f5",
        "cursor": {
          "ref": "14e9a7b6-e8a2-46f6-a863-21a203224dfc",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fbbdc7f6-34cb-43ec-a0e4-ee987d5a1ebb"
        },
        "item": {
          "id": "490ecb53-0431-4703-ba1c-509037c535f5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "be011133-a69c-4c6b-a5c5-8a1dc98f5faf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac088d0-37dc-42f2-bdb4-e5296dc01a8e",
        "cursor": {
          "ref": "a397d000-26ad-4d74-9466-07e0711f1302",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "262b9eae-7f86-4ce5-809b-46459f553f80"
        },
        "item": {
          "id": "bac088d0-37dc-42f2-bdb4-e5296dc01a8e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "96845088-761a-448b-92c0-c39814a5cd01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac088d0-37dc-42f2-bdb4-e5296dc01a8e",
        "cursor": {
          "ref": "a397d000-26ad-4d74-9466-07e0711f1302",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "262b9eae-7f86-4ce5-809b-46459f553f80"
        },
        "item": {
          "id": "bac088d0-37dc-42f2-bdb4-e5296dc01a8e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "96845088-761a-448b-92c0-c39814a5cd01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24a537f-80e0-4ef3-960b-6398db6cdaf5",
        "cursor": {
          "ref": "00451347-921b-43f9-9bd8-e589607bbde3",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "03e4c05f-b2f2-46db-9e29-7cf9d19ea63d"
        },
        "item": {
          "id": "c24a537f-80e0-4ef3-960b-6398db6cdaf5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3a7a7880-ed89-412a-b09d-7d472105ff31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24a537f-80e0-4ef3-960b-6398db6cdaf5",
        "cursor": {
          "ref": "00451347-921b-43f9-9bd8-e589607bbde3",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "03e4c05f-b2f2-46db-9e29-7cf9d19ea63d"
        },
        "item": {
          "id": "c24a537f-80e0-4ef3-960b-6398db6cdaf5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3a7a7880-ed89-412a-b09d-7d472105ff31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdd3fcb-d7ea-48c5-975f-02c9b9363a69",
        "cursor": {
          "ref": "0b3c598c-bf51-48f4-b819-f210d51541b2",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ed3970d4-a3ac-4f2e-add0-a250fe5d7572"
        },
        "item": {
          "id": "ebdd3fcb-d7ea-48c5-975f-02c9b9363a69",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ef4cc21f-5410-4324-8d80-10a3776c8f90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdd3fcb-d7ea-48c5-975f-02c9b9363a69",
        "cursor": {
          "ref": "0b3c598c-bf51-48f4-b819-f210d51541b2",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ed3970d4-a3ac-4f2e-add0-a250fe5d7572"
        },
        "item": {
          "id": "ebdd3fcb-d7ea-48c5-975f-02c9b9363a69",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ef4cc21f-5410-4324-8d80-10a3776c8f90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35bc115-39a9-4247-8862-4a97c85d8000",
        "cursor": {
          "ref": "f6f62966-fd76-4dbf-ae69-5fff90f5349d",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6296618e-75ab-4aff-a478-6d401250df4e"
        },
        "item": {
          "id": "b35bc115-39a9-4247-8862-4a97c85d8000",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3819dbf0-4368-4f65-85b8-2e3f98cf0b29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35bc115-39a9-4247-8862-4a97c85d8000",
        "cursor": {
          "ref": "f6f62966-fd76-4dbf-ae69-5fff90f5349d",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6296618e-75ab-4aff-a478-6d401250df4e"
        },
        "item": {
          "id": "b35bc115-39a9-4247-8862-4a97c85d8000",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3819dbf0-4368-4f65-85b8-2e3f98cf0b29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ff7df0-053c-48a0-a039-7d25f4cb636d",
        "cursor": {
          "ref": "c28eaa7f-fb42-4b95-a9a6-cb63d8d5f00d",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b8042ea6-4dc2-4fb9-8da5-c31a03b0030f"
        },
        "item": {
          "id": "54ff7df0-053c-48a0-a039-7d25f4cb636d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8e4a5e86-9b79-4da3-a13f-6b9ab3e839fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ff7df0-053c-48a0-a039-7d25f4cb636d",
        "cursor": {
          "ref": "c28eaa7f-fb42-4b95-a9a6-cb63d8d5f00d",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b8042ea6-4dc2-4fb9-8da5-c31a03b0030f"
        },
        "item": {
          "id": "54ff7df0-053c-48a0-a039-7d25f4cb636d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8e4a5e86-9b79-4da3-a13f-6b9ab3e839fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516f5cdc-598d-4d17-a98b-7ddd9d4ec81d",
        "cursor": {
          "ref": "91159505-7385-4607-9f42-7e8ba8f1a450",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "057f66fd-4a98-4634-8368-62e7be5ef2ac"
        },
        "item": {
          "id": "516f5cdc-598d-4d17-a98b-7ddd9d4ec81d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b456fe7f-c87d-49cb-9637-b9e36357248d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516f5cdc-598d-4d17-a98b-7ddd9d4ec81d",
        "cursor": {
          "ref": "91159505-7385-4607-9f42-7e8ba8f1a450",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "057f66fd-4a98-4634-8368-62e7be5ef2ac"
        },
        "item": {
          "id": "516f5cdc-598d-4d17-a98b-7ddd9d4ec81d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b456fe7f-c87d-49cb-9637-b9e36357248d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d090d411-7668-4028-bc0a-610d744b2d90",
        "cursor": {
          "ref": "e110a215-591a-4246-9c15-a663dfce97a4",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "37b33d73-e17f-4ea0-9d1a-cfcfcc6d8af0"
        },
        "item": {
          "id": "d090d411-7668-4028-bc0a-610d744b2d90",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "62574519-d3a5-4e34-b009-de322e140fd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d090d411-7668-4028-bc0a-610d744b2d90",
        "cursor": {
          "ref": "e110a215-591a-4246-9c15-a663dfce97a4",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "37b33d73-e17f-4ea0-9d1a-cfcfcc6d8af0"
        },
        "item": {
          "id": "d090d411-7668-4028-bc0a-610d744b2d90",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "62574519-d3a5-4e34-b009-de322e140fd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d951a7-a25b-4a4e-9e45-3ec3673ffc17",
        "cursor": {
          "ref": "f5c56128-adcf-4398-9dea-1e5422ad67b4",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "4eb7bfe4-34da-41cd-a10e-4cbbdf25fc3a"
        },
        "item": {
          "id": "44d951a7-a25b-4a4e-9e45-3ec3673ffc17",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d39eac5e-b7f5-4624-8b69-b72104f3e4db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d951a7-a25b-4a4e-9e45-3ec3673ffc17",
        "cursor": {
          "ref": "f5c56128-adcf-4398-9dea-1e5422ad67b4",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "4eb7bfe4-34da-41cd-a10e-4cbbdf25fc3a"
        },
        "item": {
          "id": "44d951a7-a25b-4a4e-9e45-3ec3673ffc17",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d39eac5e-b7f5-4624-8b69-b72104f3e4db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b3919b-dbaf-4b25-88bc-4aedf67c12dd",
        "cursor": {
          "ref": "91c844f7-d5aa-4fc6-92e0-8916a041645d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "4359b7b8-91c7-4e55-bc5c-40f0e08ba3cc"
        },
        "item": {
          "id": "71b3919b-dbaf-4b25-88bc-4aedf67c12dd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8dfab65e-404a-436a-a137-0ec14906e513",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b3919b-dbaf-4b25-88bc-4aedf67c12dd",
        "cursor": {
          "ref": "91c844f7-d5aa-4fc6-92e0-8916a041645d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "4359b7b8-91c7-4e55-bc5c-40f0e08ba3cc"
        },
        "item": {
          "id": "71b3919b-dbaf-4b25-88bc-4aedf67c12dd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8dfab65e-404a-436a-a137-0ec14906e513",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818ed335-eb00-4d95-9330-72cd15eb25bd",
        "cursor": {
          "ref": "fa82fa40-c08f-43c7-bf48-eec4aaeb1130",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "9f8d4dd6-a362-4bc0-a442-3a446f5646f1"
        },
        "item": {
          "id": "818ed335-eb00-4d95-9330-72cd15eb25bd",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f0777157-c493-4aa6-9f40-79ce5518e08a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818ed335-eb00-4d95-9330-72cd15eb25bd",
        "cursor": {
          "ref": "fa82fa40-c08f-43c7-bf48-eec4aaeb1130",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "9f8d4dd6-a362-4bc0-a442-3a446f5646f1"
        },
        "item": {
          "id": "818ed335-eb00-4d95-9330-72cd15eb25bd",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f0777157-c493-4aa6-9f40-79ce5518e08a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e8028f-3652-4cf5-b6ed-f77a833558a6",
        "cursor": {
          "ref": "ee6d93e4-ba3b-41c6-8d3b-3b5465e839d6",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "af8046a7-32bc-413e-afa0-55cec22481af"
        },
        "item": {
          "id": "a5e8028f-3652-4cf5-b6ed-f77a833558a6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f4d35d5d-2f1e-40c9-ade5-bc923df53eed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e8028f-3652-4cf5-b6ed-f77a833558a6",
        "cursor": {
          "ref": "ee6d93e4-ba3b-41c6-8d3b-3b5465e839d6",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "af8046a7-32bc-413e-afa0-55cec22481af"
        },
        "item": {
          "id": "a5e8028f-3652-4cf5-b6ed-f77a833558a6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f4d35d5d-2f1e-40c9-ade5-bc923df53eed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2cc43ee-e473-47e0-8268-a6dcfef71104",
        "cursor": {
          "ref": "fddc631e-1f71-44b1-acff-5fabccb025a4",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f4d21a18-c8e4-4f42-8b0e-78ea75b98e59"
        },
        "item": {
          "id": "d2cc43ee-e473-47e0-8268-a6dcfef71104",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7ae666e9-8dd6-40a1-8dc3-9c67e6196216",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2cc43ee-e473-47e0-8268-a6dcfef71104",
        "cursor": {
          "ref": "fddc631e-1f71-44b1-acff-5fabccb025a4",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f4d21a18-c8e4-4f42-8b0e-78ea75b98e59"
        },
        "item": {
          "id": "d2cc43ee-e473-47e0-8268-a6dcfef71104",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7ae666e9-8dd6-40a1-8dc3-9c67e6196216",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1e1913-0883-4638-a047-62f0dc947aa3",
        "cursor": {
          "ref": "f90def83-6ec2-4223-92e7-5c571bdd381f",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "02b4a857-a812-4b0d-85f7-b34f4252cbe7"
        },
        "item": {
          "id": "0c1e1913-0883-4638-a047-62f0dc947aa3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "368273e7-4372-40ce-ad0e-59d769857306",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1e1913-0883-4638-a047-62f0dc947aa3",
        "cursor": {
          "ref": "f90def83-6ec2-4223-92e7-5c571bdd381f",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "02b4a857-a812-4b0d-85f7-b34f4252cbe7"
        },
        "item": {
          "id": "0c1e1913-0883-4638-a047-62f0dc947aa3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "368273e7-4372-40ce-ad0e-59d769857306",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb684c20-fa56-4125-a0d2-b0f84b89da35",
        "cursor": {
          "ref": "89a36662-0487-4488-8222-fb3691613266",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ba4325da-46ce-4af0-bc9b-a680a26ab123"
        },
        "item": {
          "id": "bb684c20-fa56-4125-a0d2-b0f84b89da35",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6e4ab701-9036-4b4e-aaa6-e27fca379048",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb684c20-fa56-4125-a0d2-b0f84b89da35",
        "cursor": {
          "ref": "89a36662-0487-4488-8222-fb3691613266",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ba4325da-46ce-4af0-bc9b-a680a26ab123"
        },
        "item": {
          "id": "bb684c20-fa56-4125-a0d2-b0f84b89da35",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6e4ab701-9036-4b4e-aaa6-e27fca379048",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c2b044-d16f-4120-ab82-7d0a0fac46af",
        "cursor": {
          "ref": "6679b87c-1c1a-489f-8d57-816bfb32d10b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "67936b54-4341-4739-aff0-283f11eab381"
        },
        "item": {
          "id": "24c2b044-d16f-4120-ab82-7d0a0fac46af",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "92c5e8d4-b1f1-48ba-be88-10c14ec6f821",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c2b044-d16f-4120-ab82-7d0a0fac46af",
        "cursor": {
          "ref": "6679b87c-1c1a-489f-8d57-816bfb32d10b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "67936b54-4341-4739-aff0-283f11eab381"
        },
        "item": {
          "id": "24c2b044-d16f-4120-ab82-7d0a0fac46af",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "92c5e8d4-b1f1-48ba-be88-10c14ec6f821",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba055915-d1d5-456c-8311-1971e899384a",
        "cursor": {
          "ref": "78ed153e-86ec-4c52-ab19-5f0936c0ef48",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "733e4a4f-000c-4721-ae36-d1ff2d51b6e8"
        },
        "item": {
          "id": "ba055915-d1d5-456c-8311-1971e899384a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fa90d8b8-18f8-4227-9c0c-da06c0953061",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba055915-d1d5-456c-8311-1971e899384a",
        "cursor": {
          "ref": "78ed153e-86ec-4c52-ab19-5f0936c0ef48",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "733e4a4f-000c-4721-ae36-d1ff2d51b6e8"
        },
        "item": {
          "id": "ba055915-d1d5-456c-8311-1971e899384a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fa90d8b8-18f8-4227-9c0c-da06c0953061",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe27e035-cdc0-4b76-a6f2-862c5958b9f3",
        "cursor": {
          "ref": "54d4dbaf-d3c7-4851-b0d7-9cb2872cd5e3",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f9165336-aa62-470e-bc43-2f6c9cab5199"
        },
        "item": {
          "id": "fe27e035-cdc0-4b76-a6f2-862c5958b9f3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5e44c433-04e7-4e75-91cb-8bd24dc538ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe27e035-cdc0-4b76-a6f2-862c5958b9f3",
        "cursor": {
          "ref": "54d4dbaf-d3c7-4851-b0d7-9cb2872cd5e3",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f9165336-aa62-470e-bc43-2f6c9cab5199"
        },
        "item": {
          "id": "fe27e035-cdc0-4b76-a6f2-862c5958b9f3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5e44c433-04e7-4e75-91cb-8bd24dc538ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37b9ae8-ba2b-493c-a877-d64853e18058",
        "cursor": {
          "ref": "aa244699-ef4a-4e7b-ab9f-46c3f8212038",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "29f2286d-dca0-47cd-8bfd-42452583ccd8"
        },
        "item": {
          "id": "c37b9ae8-ba2b-493c-a877-d64853e18058",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "551717b8-23dc-4484-b91d-c83a9d723a6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37b9ae8-ba2b-493c-a877-d64853e18058",
        "cursor": {
          "ref": "aa244699-ef4a-4e7b-ab9f-46c3f8212038",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "29f2286d-dca0-47cd-8bfd-42452583ccd8"
        },
        "item": {
          "id": "c37b9ae8-ba2b-493c-a877-d64853e18058",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "551717b8-23dc-4484-b91d-c83a9d723a6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a118780-0f29-408d-ac5e-670b4a6dad75",
        "cursor": {
          "ref": "47162a54-805c-480f-9444-e502cd41bfa8",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "57de89da-1f5e-47f8-9bbd-d9393e73dbb7"
        },
        "item": {
          "id": "0a118780-0f29-408d-ac5e-670b4a6dad75",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "eab84abb-bbdf-417e-be6c-af46c3a9668a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a118780-0f29-408d-ac5e-670b4a6dad75",
        "cursor": {
          "ref": "47162a54-805c-480f-9444-e502cd41bfa8",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "57de89da-1f5e-47f8-9bbd-d9393e73dbb7"
        },
        "item": {
          "id": "0a118780-0f29-408d-ac5e-670b4a6dad75",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "eab84abb-bbdf-417e-be6c-af46c3a9668a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36a6f30-93c5-4a9f-bd05-9d192c699449",
        "cursor": {
          "ref": "dee9ba56-5853-4132-9f64-b663a05ada37",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "153514ad-72a6-4b0e-a36e-e458e178dbbc"
        },
        "item": {
          "id": "f36a6f30-93c5-4a9f-bd05-9d192c699449",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bb18746d-7e2d-477e-9e65-b65d8ce6f636",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36a6f30-93c5-4a9f-bd05-9d192c699449",
        "cursor": {
          "ref": "dee9ba56-5853-4132-9f64-b663a05ada37",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "153514ad-72a6-4b0e-a36e-e458e178dbbc"
        },
        "item": {
          "id": "f36a6f30-93c5-4a9f-bd05-9d192c699449",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bb18746d-7e2d-477e-9e65-b65d8ce6f636",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6f05b5-44cd-48f1-8716-f178b4cfaf6d",
        "cursor": {
          "ref": "2e1c526d-bb7f-4fd6-9df1-449db2683633",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "d4a946f2-1865-49cf-a28b-4d8727236a9c"
        },
        "item": {
          "id": "dd6f05b5-44cd-48f1-8716-f178b4cfaf6d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c8f2b48b-1711-42c6-a6b1-a83d419cabcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6f05b5-44cd-48f1-8716-f178b4cfaf6d",
        "cursor": {
          "ref": "2e1c526d-bb7f-4fd6-9df1-449db2683633",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "d4a946f2-1865-49cf-a28b-4d8727236a9c"
        },
        "item": {
          "id": "dd6f05b5-44cd-48f1-8716-f178b4cfaf6d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c8f2b48b-1711-42c6-a6b1-a83d419cabcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f293e9-083a-44df-9db5-015c77ac20ea",
        "cursor": {
          "ref": "2cff9057-608b-4953-9092-37da8cc0c4ce",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2aec2567-071e-4a0d-a837-83a319bd5225"
        },
        "item": {
          "id": "52f293e9-083a-44df-9db5-015c77ac20ea",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ff64031c-8bd0-49ee-b133-259ceeb1d854",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f293e9-083a-44df-9db5-015c77ac20ea",
        "cursor": {
          "ref": "2cff9057-608b-4953-9092-37da8cc0c4ce",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2aec2567-071e-4a0d-a837-83a319bd5225"
        },
        "item": {
          "id": "52f293e9-083a-44df-9db5-015c77ac20ea",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ff64031c-8bd0-49ee-b133-259ceeb1d854",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1448dde-bdef-4db7-87ef-b31392864757",
        "cursor": {
          "ref": "3c3e1390-fd8b-4fbc-a3d5-a85a013230c9",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d1474cb5-d5c3-4bc8-b508-cddb1d7d8504"
        },
        "item": {
          "id": "f1448dde-bdef-4db7-87ef-b31392864757",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a8cd5b30-3a8d-4efd-a337-4c46777d4545",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1448dde-bdef-4db7-87ef-b31392864757",
        "cursor": {
          "ref": "3c3e1390-fd8b-4fbc-a3d5-a85a013230c9",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d1474cb5-d5c3-4bc8-b508-cddb1d7d8504"
        },
        "item": {
          "id": "f1448dde-bdef-4db7-87ef-b31392864757",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a8cd5b30-3a8d-4efd-a337-4c46777d4545",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c56ef1-6d35-4a07-b5bc-cfcc6484d3b7",
        "cursor": {
          "ref": "be361b4c-9262-4206-8ece-1491700e3efe",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "8686d6db-d4a2-4a30-b718-89bcca8416a5"
        },
        "item": {
          "id": "b0c56ef1-6d35-4a07-b5bc-cfcc6484d3b7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ed373942-e896-4c41-a530-de4d6980bb28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c56ef1-6d35-4a07-b5bc-cfcc6484d3b7",
        "cursor": {
          "ref": "be361b4c-9262-4206-8ece-1491700e3efe",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "8686d6db-d4a2-4a30-b718-89bcca8416a5"
        },
        "item": {
          "id": "b0c56ef1-6d35-4a07-b5bc-cfcc6484d3b7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ed373942-e896-4c41-a530-de4d6980bb28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041ea13b-fb7d-4026-b96f-b43cfd2d80e1",
        "cursor": {
          "ref": "4bd12916-c1b2-48c8-8e99-e3ae44dd853a",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "8a2321d1-69ce-4c55-a76d-0efc81736857"
        },
        "item": {
          "id": "041ea13b-fb7d-4026-b96f-b43cfd2d80e1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "04ecc834-ddde-4a4d-98df-fc9052b2bad9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041ea13b-fb7d-4026-b96f-b43cfd2d80e1",
        "cursor": {
          "ref": "4bd12916-c1b2-48c8-8e99-e3ae44dd853a",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "8a2321d1-69ce-4c55-a76d-0efc81736857"
        },
        "item": {
          "id": "041ea13b-fb7d-4026-b96f-b43cfd2d80e1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "04ecc834-ddde-4a4d-98df-fc9052b2bad9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeef6097-ab9c-4dba-bbe7-e650f4bc31f0",
        "cursor": {
          "ref": "5752e4f1-099c-4e56-abc8-eb03c4f1ab5d",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "3fcd7602-1e64-45e1-aa5d-a94351614564"
        },
        "item": {
          "id": "eeef6097-ab9c-4dba-bbe7-e650f4bc31f0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3275b212-4baa-4275-b8f7-138fcde968fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeef6097-ab9c-4dba-bbe7-e650f4bc31f0",
        "cursor": {
          "ref": "5752e4f1-099c-4e56-abc8-eb03c4f1ab5d",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "3fcd7602-1e64-45e1-aa5d-a94351614564"
        },
        "item": {
          "id": "eeef6097-ab9c-4dba-bbe7-e650f4bc31f0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3275b212-4baa-4275-b8f7-138fcde968fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06fb51e-2caf-4172-ab2d-a9f00dab9c90",
        "cursor": {
          "ref": "8684db94-2559-4119-ae54-6a080f18b994",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "0083a1a5-1b18-424a-9c36-34e5f5027870"
        },
        "item": {
          "id": "d06fb51e-2caf-4172-ab2d-a9f00dab9c90",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fc8e73d4-316e-4bea-9e1a-b059c930a4b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06fb51e-2caf-4172-ab2d-a9f00dab9c90",
        "cursor": {
          "ref": "8684db94-2559-4119-ae54-6a080f18b994",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "0083a1a5-1b18-424a-9c36-34e5f5027870"
        },
        "item": {
          "id": "d06fb51e-2caf-4172-ab2d-a9f00dab9c90",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "fc8e73d4-316e-4bea-9e1a-b059c930a4b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339c88fc-1f0a-4c96-98bf-df2ce9cac5ce",
        "cursor": {
          "ref": "0d2c1182-3822-45cb-a364-c35a007d8d89",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "49ce67de-60c6-4913-962b-f5e4f62bde56"
        },
        "item": {
          "id": "339c88fc-1f0a-4c96-98bf-df2ce9cac5ce",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c04e99dc-8ac9-4aeb-b2f4-6e82180d2444",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339c88fc-1f0a-4c96-98bf-df2ce9cac5ce",
        "cursor": {
          "ref": "0d2c1182-3822-45cb-a364-c35a007d8d89",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "49ce67de-60c6-4913-962b-f5e4f62bde56"
        },
        "item": {
          "id": "339c88fc-1f0a-4c96-98bf-df2ce9cac5ce",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "c04e99dc-8ac9-4aeb-b2f4-6e82180d2444",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee01663-aae1-4176-8dcb-47a9cb44b1bc",
        "cursor": {
          "ref": "138f0fa9-db47-491f-a584-d66fc4eed123",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "b35d7696-1c44-4885-9147-cc281597ca4a"
        },
        "item": {
          "id": "3ee01663-aae1-4176-8dcb-47a9cb44b1bc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9457b2eb-4f29-4bfb-aac2-d580eb2ddb67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "3ee01663-aae1-4176-8dcb-47a9cb44b1bc",
        "cursor": {
          "ref": "138f0fa9-db47-491f-a584-d66fc4eed123",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "b35d7696-1c44-4885-9147-cc281597ca4a"
        },
        "item": {
          "id": "3ee01663-aae1-4176-8dcb-47a9cb44b1bc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9457b2eb-4f29-4bfb-aac2-d580eb2ddb67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "0385385e-8c4b-4c2d-af2f-088c455e428a",
        "cursor": {
          "ref": "280f2ea7-8db9-4693-bdbc-90d9a0dcb2d8",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d2eb9012-999c-4e7e-9b0d-b37226bd7172"
        },
        "item": {
          "id": "0385385e-8c4b-4c2d-af2f-088c455e428a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fbe2261d-fba0-4c70-9b7a-b0de0bc9e981",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "0385385e-8c4b-4c2d-af2f-088c455e428a",
        "cursor": {
          "ref": "280f2ea7-8db9-4693-bdbc-90d9a0dcb2d8",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d2eb9012-999c-4e7e-9b0d-b37226bd7172"
        },
        "item": {
          "id": "0385385e-8c4b-4c2d-af2f-088c455e428a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fbe2261d-fba0-4c70-9b7a-b0de0bc9e981",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "deb48a26-6851-4af9-b6bb-982ee8499b31",
        "cursor": {
          "ref": "b6c5ef85-1b18-4967-9f93-b66fb7731e65",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "6182ad84-2927-4013-8122-fd77b316a646"
        },
        "item": {
          "id": "deb48a26-6851-4af9-b6bb-982ee8499b31",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9cca8b74-b719-4e4b-865d-3b21685dd5f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "deb48a26-6851-4af9-b6bb-982ee8499b31",
        "cursor": {
          "ref": "b6c5ef85-1b18-4967-9f93-b66fb7731e65",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "6182ad84-2927-4013-8122-fd77b316a646"
        },
        "item": {
          "id": "deb48a26-6851-4af9-b6bb-982ee8499b31",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9cca8b74-b719-4e4b-865d-3b21685dd5f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "f96a4df8-52fe-4e1f-8461-1547fb96facb",
        "cursor": {
          "ref": "872dc2ea-1be2-4bcc-aca5-7c87b6142029",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ac372e55-fae0-4094-8e78-c8726642e0fd"
        },
        "item": {
          "id": "f96a4df8-52fe-4e1f-8461-1547fb96facb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "68941e36-3839-4edf-923b-34a5f70f600d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96a4df8-52fe-4e1f-8461-1547fb96facb",
        "cursor": {
          "ref": "872dc2ea-1be2-4bcc-aca5-7c87b6142029",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ac372e55-fae0-4094-8e78-c8726642e0fd"
        },
        "item": {
          "id": "f96a4df8-52fe-4e1f-8461-1547fb96facb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "68941e36-3839-4edf-923b-34a5f70f600d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96a4df8-52fe-4e1f-8461-1547fb96facb",
        "cursor": {
          "ref": "872dc2ea-1be2-4bcc-aca5-7c87b6142029",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ac372e55-fae0-4094-8e78-c8726642e0fd"
        },
        "item": {
          "id": "f96a4df8-52fe-4e1f-8461-1547fb96facb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "68941e36-3839-4edf-923b-34a5f70f600d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e9fb6c-49e8-46e5-ba43-9c60c52ce827",
        "cursor": {
          "ref": "03f2ad75-4f24-4051-8792-936874530a1b",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "256738a4-9840-4c81-98cd-d5f24136be8b"
        },
        "item": {
          "id": "15e9fb6c-49e8-46e5-ba43-9c60c52ce827",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ec42ccc9-9348-49e4-a4c4-ff80a80a63b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15e9fb6c-49e8-46e5-ba43-9c60c52ce827",
        "cursor": {
          "ref": "03f2ad75-4f24-4051-8792-936874530a1b",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "256738a4-9840-4c81-98cd-d5f24136be8b"
        },
        "item": {
          "id": "15e9fb6c-49e8-46e5-ba43-9c60c52ce827",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ec42ccc9-9348-49e4-a4c4-ff80a80a63b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922bfe5d-fc6d-49b8-90b1-34a23d0d9f28",
        "cursor": {
          "ref": "7ca1ad9e-d2a2-47d7-925e-e47dcbbf2173",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9aa83273-f7f6-44dd-92a7-6b9ebcb3172a"
        },
        "item": {
          "id": "922bfe5d-fc6d-49b8-90b1-34a23d0d9f28",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a45c62d9-6e0b-499e-9a81-1cc91238be6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922bfe5d-fc6d-49b8-90b1-34a23d0d9f28",
        "cursor": {
          "ref": "7ca1ad9e-d2a2-47d7-925e-e47dcbbf2173",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9aa83273-f7f6-44dd-92a7-6b9ebcb3172a"
        },
        "item": {
          "id": "922bfe5d-fc6d-49b8-90b1-34a23d0d9f28",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a45c62d9-6e0b-499e-9a81-1cc91238be6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}