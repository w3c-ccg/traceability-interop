{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dce4d2bd-e818-4224-a43b-ab4f4fcb3bc6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8315a107-bfcb-4226-9f11-36a57d0a5d17",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f1310bce-9593-492e-be42-da710afc1cf0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2519c3b8-12ed-486f-a20f-42a1f93420ff"
                }
              }
            ]
          },
          {
            "id": "a9719dd0-667c-4f47-ae3e-e79b80323812",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ddd002ae-85a2-4593-99c9-ccc57524fa18",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8247dbd9-4ada-4a01-a523-e8bbfc73524c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2beb8da0-fe87-4842-88e2-9cf04d9ca695",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "655d4b43-0173-4799-aa4b-174cf725c93b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "96d872ba-379a-4894-9855-b6d39e606248",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fea0f0e-6c39-471e-a8f0-e565aee22acc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c75c6221-c23e-428c-abd9-e3fb86953fdb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a859913a-c7d2-4193-8fe7-172956ab7212",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a60dee3c-84f5-4f86-b4c8-2dec787c657a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1f0bb5f0-9619-4e4d-9d27-5f990c6d6e14",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "baeef170-66c6-460d-8190-4bc35543e563"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6791ab8-9391-4037-854a-e699fd779c81",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0eeed894-d8bf-4399-a76f-ba0daf19f334"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92eec6ea-d5ca-4a47-bb45-95f161eca212",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3906375-ccab-4db0-be3b-83aa84c8545a"
            }
          }
        ]
      },
      {
        "id": "9f201b54-2199-467c-bc40-f6f43fabc032",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "074b959a-fe43-4f67-a19d-7d44dee15180",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb0db5b7-dd74-4c5f-bcab-facdf9f68225",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "79b2c012-31c4-462d-ba33-488fccefc1e2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55191d9a-e3d6-4fca-8776-c7983f187df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "610914d4-6b06-46a0-9028-d7997850ea17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d3b364-29df-4e68-9347-32084a8796ec",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d7512f-c6c3-42e1-a84c-5fb1f667d930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df4141db-0284-4a5f-a340-da1dfb3b3dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b45f4ee-7d8a-48c7-a350-22702045baed",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb758651-2f27-4980-88f8-979d6c369a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e34e19fd-d842-4dad-acf3-946236c736e9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9fdf67a1-cad8-4151-a5b0-8d3e24d3590f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0d5b035-11e9-466c-8b02-e7f203608064",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a44b50-8986-4786-bd78-ce7191fe4666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08c26120-3296-4d5a-8515-9b387d2295b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09716df-4cb8-4523-890e-beb810004a54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9679e0d1-cc50-4294-9a11-827caccb9378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b510341-2e9e-4411-97ef-c18a8e6f20e1",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2cc893-f344-4f43-9944-171033df636e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7bfd246-55cc-4379-85fc-7f3389c2624b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842bb10b-323e-4d0d-94d5-ddac5c9289c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "0041a05d-8bde-47b6-8418-437885435e9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5ec02ee1-f9bd-4fff-a900-b1c7a7c8617b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "79f9eef7-e4b6-4e85-832f-aa2545b9779c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d140a06-bbd0-4c74-b4d9-365594d81871",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5ba285c0-8c8e-43a4-a8e5-0000f061b6f4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7251afb4-1c2e-4536-9df0-4992cfb5c4f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "44656700-5f36-49a5-8e49-094032f08ed0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52f3c0d7-c555-462d-9966-62e7e0586519",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b3b47057-3be6-43e0-8ef6-de9e7a7b7549"
            }
          }
        ]
      },
      {
        "id": "9889ebd0-46e9-49f2-ba78-d4d6ee252d48",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3d42d760-0a63-467e-b3ce-f419d53d4b8a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a025102f-2350-439a-9267-fa503d2677e3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b553269c-6eb5-4b68-8e18-4a25cdffcf2b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849b001e-afe4-4fc9-b951-1da3dc556e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ce0e2d-047b-4fa7-a7c0-73da8d032ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d173d8-d172-4f11-96f9-f554d56d6dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb8bb186-d496-4cb9-85d1-4dae7a4f6823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979d5970-8795-4ebf-be72-e2ff93de229f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bce49c-9b8e-4cd8-b7d8-a0485392dace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497a0803-ab2f-4c77-a4fd-efdee6c35bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498dd488-768b-42ab-87ca-0a33cc2f344a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f97ae463-7f1d-49c6-896e-b23bbb9b1a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f25ae9e-4a83-4cb1-8638-c5d4aa9487ea",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48bae7f-c1b5-4dec-a842-5216578e4374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16273778-c18d-44af-a1c1-8772ba7e2d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a585b1-7c6b-43cb-907e-2f85fa4a7e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1c3a5ff-c903-4a78-b1b8-9e5f783dac2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051605e0-d556-4394-aba8-7af11e8e8aa2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbe042b-5969-40a2-aac8-ff77d22700e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c33000e-f0bc-422c-bcd1-2d6c65e194b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880dba09-03e9-488d-80fa-0ecf86f73ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "785d0ae1-8961-4fb3-abba-a29f1d115226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bba570-cdb0-4bb7-9410-bc45e1cad1c0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ab14a6-930f-4cfe-8c45-d77420bf76da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2141e23-d52c-48c3-8f0a-9a29c28b25cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f4b1a0-050b-42a9-afc4-2f2066a8e2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1763bd8-043f-4eae-ba39-ce870537d096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229385df-6bbf-4e0a-b692-665606a9c394",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f1d492-550f-4c05-8a87-0875eb5c39c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9466cbb-ca41-4cf2-8e5e-bc89a71a7d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa96727-bb9b-4c31-9987-8192357d8797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "115a62ac-0471-4bd3-9e47-0bb6fa8a0305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab3413e-aec6-4365-bead-adbdd2e43e3a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4922f6-6421-42bd-9a06-619f708290f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658fba8f-ddaf-410c-96b0-5a67d7107655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f767efa3-512c-474e-a61e-e64054952af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3512c81-bb97-41d8-b872-8f8f6997f779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9fdf32-41aa-4655-aad6-dc3b9d4363b1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8264c5f-fcb2-42dc-a772-8db3e3b39d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7f6a64-1ccf-4535-a1be-cb1b90fdbc77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1433273-be2a-4691-966a-2a98c86ef011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "061f0ddb-1b96-4f1e-b0e1-2d096d9fabc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dca99a8-ce90-458d-a74f-9c110c192931",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac36706-5a0e-4254-89ec-06ef1dbe2d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6416b17d-4f0d-4d91-a341-c3f65e92acd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ab24b4-3ea3-49e1-995f-bb8628527578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9927991-4e1c-4dcb-9061-957ddbd4f8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4051e0-9eca-46f5-b458-a80a3d5a98f8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb6a931-1681-4080-b90a-8186174600a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29733fc-ea72-4456-86fa-b8662c63050e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde3555b-d7da-4b40-acab-39ef707f67dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e83fcecc-ce7e-44d1-8d22-5aad5760f73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbce1e8b-aa85-46b7-b2b6-bb15708f2d83",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6d7efb-7966-494e-8716-5db74ac85c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d70b5eb-5dcb-4b47-9afe-41e4162231d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8e7e2c-a5ff-45a5-acbc-4c61e3abf03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8301b1e-b0c5-4cb4-b41f-15c8c9a2128b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41519cdb-aedb-4cd3-bbb9-2222b092a85e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fef493-5c2a-4a4c-9429-e18bf65cce27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae1fbab-1266-48e9-a09c-08597228b32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef03547-58fc-42c7-a98b-6cf0f2ab9c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2575784-4c37-4839-b7d0-8d8d051eccc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feee870f-3a66-45c3-a0bc-5e0a628bb6b4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1bd4d2-36ab-4cca-8f5c-641a3a9064ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "986de853-1434-4975-a5ea-a5ef02fbdd41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94843099-f016-4f4f-8a29-1d2121acf500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dc6270e-704c-48cf-9a02-f01ac97ea208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c147d027-fb92-4ab5-9afd-63c75be4aea5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759f043a-b84f-4143-8298-9f7c2fcc1f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595cac78-cab5-4719-b461-9f0e709522cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77863aa-33ad-4576-aeae-8f86d36f2988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a5d06e2-0aea-4893-a97a-8031721d1a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0395ec47-6114-4143-9c2f-71a13b5fa0c5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae49fe3-8ab6-4772-97f8-a09186573f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad404896-1979-44a3-b095-7af1da51fd5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae7fe60-d72e-4ec9-9375-744b53ad4405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "798a3e43-bc10-4c5d-b25f-bc9de6821e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236a1c50-02c2-4171-b4eb-d90121a2cfb8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66818763-9c4c-4914-b534-c1b03f7b8d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97bcd6e2-9d7e-425b-9d75-64abf969c5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13620c4-a5f4-40fc-ba7d-6b34114b7d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf2c483d-4fac-411f-9a1a-668bc7a23a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d58c87c-9df8-40e1-9f4a-1372508568f9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb293617-473c-4389-b8f2-93b5811f5b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fca047ec-7e6c-4ea7-8b10-6484ee55c652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d6d80d-b128-4531-9618-441df2bc593c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0428248-6366-417a-aec6-48f60abdcdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd611c58-2092-48d8-b89b-497f3154ed23",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a20926-b13a-4e76-8fc1-202578f5ffa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2918dd7a-2dd5-4f13-9e3e-fb93ff38e6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf151c6-ea82-45a5-b536-f67aaed0aafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef43eaee-80f0-41c7-a5b7-a355b0b578ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555b1a34-06e9-4abe-9ce8-d3a097c98598",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1d9121-9e00-446d-80b7-d7e820a1ada8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7d762d-e381-4cf5-b833-cecfec141686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f01dbba-f9c2-4879-b66b-0a415a3cb5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed08882a-5db6-41b6-b3d3-0c7fc7be9f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c208eb-b6c8-4768-955f-d35e13afd47d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cad13a4-c08d-40d1-ae21-b82705add9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaae698f-e467-4e36-a202-c517b548e588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacff73f-90ac-478b-9ba3-48fd59d53f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71e5a4d1-6ca4-4355-8f18-e64123384c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e815726-0682-463a-9aaf-3d09b3d1ba76",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8996f2-0c53-4fba-bfae-b3c06c9654d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b80de4-4b7e-4be8-b018-c02a1b1019fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc68e77-5f82-48d4-8506-29e0f0563f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebec4381-3722-4e55-9274-f272d457ffe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52798208-2cc1-4d82-8de5-f801323fe2c8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0992b0-1a00-4ecb-aa47-ea963826fd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17602bab-d968-4b58-8828-4aa441a572b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5f1108-a35f-4f27-b621-30ad64027221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "348a11bf-157f-444c-ae6e-f150ad8451ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1d4751-3e47-4223-a6a9-e7b911a579d0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc92525e-0761-4a74-9a16-6459903a6de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764b59c5-fdc0-4527-90e1-92756349ecfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d004cf8-1655-4d58-a930-2ce4606ce879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27dfb21c-7068-4afd-a827-86d1cd8e940d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b67049-37be-4ebc-a249-acf994543ce3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8748d5cc-0041-4673-9773-10ca8398a301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2179c8f-0ab6-42aa-be58-e032b74df4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19b09d2-57f1-47dc-829d-0efc8c5fc2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffca0721-3795-4eb7-ac51-d87027e8324e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42076e4e-a74e-40bf-a42c-b2ac03ce38fd",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020ef376-a2e1-40f8-8e5e-0f9590127554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7363c3-6ffd-4995-b437-562ce32bc9aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84254a20-e864-43bd-8721-889654c56cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f97916f1-e862-4857-9acc-17d7dd55eda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a015e3-8eb7-4bca-b2bd-fe30f0ba3ac2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b8ad38-964b-4eb1-bb09-a576752a7c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a66eeb9-2ff6-446d-b276-84994a09e174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1642712b-6900-4407-8735-9c68f786d9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "129da5c2-7475-4c65-a5a6-6cdc6637b3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0b29d8-c8cd-4103-8fb3-afd31e14976c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c7dd11-25a8-405a-bbec-a27df1aa098d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1170abde-6392-428c-b839-1aaf0a3fcca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03439ea5-616d-4448-b043-38447aa14216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7d6d0e9-917c-4a0e-88bd-19165022e3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf8976d-95a2-46c4-90c9-6670ef10c26c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1bbb8d-78a8-4d14-b4fb-9f015665edb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c077951-eee2-462e-854b-1d7c6de636a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d814f606-f974-42b3-bfd5-2cfef7bd6b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd18b13-f1af-477b-8ec5-40c67e2694a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9132edf2-b509-418c-858d-c9fa7859dabf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0bb149-0bba-4ac1-9674-2e70b5d56994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9f1edd-fcd1-4a9a-9e0d-2de06beb7d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7302e0c5-8d54-4c0e-aae8-64c10e8db608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9458c228-ffa8-4e76-b617-d085ee2a5750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3aa478-e5ef-4bb3-b248-6f3c49d8333c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1793cc6d-85d4-4b35-b25a-57ba234542ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "161802f8-45ea-46a5-b2b1-e9306e0f2074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cab63d-26fd-4e58-b1fc-0b67f5f88cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "047bbfbb-74c0-4ef0-9c97-70bffd4bab04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8f6f42-7c97-4b31-9300-f3a7a9334576",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8739871d-8a43-444c-aa2f-08e6e4b5b8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7feadb63-eb78-4123-8d56-590285b57983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3654ab09-a059-438f-9808-94f0cfb2e8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2764999-0da1-4efe-b9dc-b81d6d036ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4afbc185-c2a8-4824-a0a1-58a9d3a1ff04",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d996b8-1ad8-4dcf-afd5-8c2a5a891402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee2f27a6-888c-4558-8d4a-6017abf8bf9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07087255-ac7e-4ef0-9412-3ea52468652f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f630d8d-12cb-4e43-8d93-3a28fbdb1f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f6debc-580b-44ce-811d-3f1b5b657e3a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43dc407d-39bd-4b6d-8b24-3b01095037ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d627f75f-1d0a-4c8b-b91f-556f440844eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98454dfd-e1f7-4139-979b-c14b6d321b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c76dd4be-2598-4bbb-9471-5dba79ca63b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d791b5-e5f6-4ed2-bc38-4240b8c36ffb",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a549af4-5826-440c-8cdf-28961dbe48f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b779b1-cb0b-4d08-b617-989853ea93a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084ef904-fb80-4223-8179-bcb761683d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "988aa2ce-4b1c-4c62-969b-71ff16083a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b963a2-b082-4db7-9367-0420aec5d72a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f19ad04-d55c-4f17-bf19-28f66fffe253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107e1210-ea39-4650-b39f-56d808a62222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db185a80-95a5-451a-aa39-a288428daf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "043bbe36-886e-4cbf-b235-cab69b1c1591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54121b9-2579-4993-92ea-e63f89a91a26",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa215230-2673-445c-af86-24e1a264073d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad23cefb-d0dd-405d-8890-c4aa77eed044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534714a3-bd93-4c4c-91ae-c25fddb7b980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f150886-3eda-4880-9684-4e5c6d021718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4401356-4966-4716-bbba-621be9005380",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c1ab70-d585-4723-80da-be09b4afcd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c091d5a-dc25-4399-8dea-0a07696d49e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed1356d-a87a-4da0-a0e9-d17f70ac3ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2554e567-19df-4f3c-aa9a-10456298ad5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a54044a-26e4-4fed-9789-6e6b8df04843",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e98b05-64c8-46aa-bbe2-217b7a15876c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0569e740-c737-497a-826c-fd79454d7698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510761f0-caa2-4404-8a1f-5e02b607e842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a73ed45-4373-46cd-ae1b-9e8fcab51fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9237a0a8-e2b0-4630-adfd-4792ba1d246a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc19376-d5fd-4cbb-94d5-da58a26f2c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b504716a-68a3-48e2-970c-8336601c8ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17589242-5daf-463d-a85c-9319c1ccaafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "46a43d6d-4ee5-4e36-9ed8-499041c0a785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152f1904-4cd5-47c4-8dc7-5f92ab368865",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4ece8f-72a6-4f55-8368-be99c4623af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f11bc8-2418-4e34-bc2c-1a3043a1ff5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46182db-203b-42aa-b06e-8576ea6e86ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6effaa8c-d2bd-4763-b868-79b4b23f6af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34f28a0-aa2c-4d33-bdeb-c7c3f2163de8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380d74fc-9882-4a9c-9049-e7820f4fce0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2e7c85-27dd-420a-bbb5-5dd935ec57e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3d9059-ff87-4382-8bf4-3f858644d0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b526a599-a2ed-4015-a70c-bf9ce62721ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cdf04f9-ab09-4644-9e49-707b0e9f1f99",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edec2b49-9147-4f3b-b774-3610121af413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2323698e-e259-4c4a-b4d2-5abeb77461cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b463eb-e4ac-4fcb-afcd-4d5fd82992e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d444a2-5e16-4dbf-91c6-f7bc35fb65db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b55412b-ee1a-4c61-b8fc-69a0b909b8e1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec8dbc57-2b23-4472-9856-972b1185ede1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f660c64f-c516-4e25-9343-4071a1cb435b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2935b969-991d-427f-b05e-fb5fe8129341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "35652b1d-628e-466f-8f2a-db359730eb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8138557d-a396-4744-a625-4dbfdbaddddb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19d0aee-6b96-4b09-b461-fee291988043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c19ca7-00d1-48cb-94df-83f72206dc73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579acfc9-8d8e-4f68-8045-bff69edf6918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "94cc2a97-935d-45b0-95d4-22f3ddd65596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a10e21-e26d-4850-93f8-ef543f06756d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0973561f-f4f2-4be7-8acf-fa2dbaf06750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "becd64bf-3e24-4800-a6e2-0742635d830b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b694cc-16b7-4381-b743-99d1232001e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69f244bf-f547-472b-938b-d4cf3ff5bef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add35495-17ba-47a5-b81d-c5099f57afb2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "587a241d-946a-4c70-ae53-1d9dcd8d011a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c50adfa-0af3-4af5-b8ef-5239af945dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9168f42-485c-468b-9621-de58f4ed4ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "160ce174-1aa8-43fd-a266-c08b63c82e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eddf66e7-cf66-4fb3-95f8-76283c784d26",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117a7a8b-a110-4b4c-a5c8-364a204f4125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc843062-c99c-4b9c-93ad-09cda0fee3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9536e9-76fa-49d2-80f5-c8a0318268bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbab125e-cabd-4c22-b759-83cdddb3e7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a77e7d3-4d48-486e-bd5b-84b25f6180ea",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ed1a54-cb38-458b-9e19-069d1a592e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c15d6b98-5645-42b6-8d59-88340864ac5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6317a32-68e4-48f1-9ed0-d38b9f69f9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f24cd41d-706c-49d8-bf04-e02e242d173e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a410c74b-74b7-4bc0-9d5e-7743bc548980",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c41d8b-b9a4-4646-9c92-7314b121d6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82676222-afd3-46c7-af75-1d04232d11fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bd8e9d-173d-4141-b5a7-b157add2a0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1493334-67c1-43be-9c9c-9b917c515b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74174aba-097b-4a63-89ef-b48de72686cd",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9682ea20-77de-4576-8700-ef9c834cc628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d831179-0f0a-4a99-b7b0-a4393210e5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658b0010-6f7f-4634-aabc-1946f82576b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "927a36eb-3c4c-471b-a4b0-ce5258edac65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb3a250-98ab-468e-8993-54a8511858e8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb94c265-114d-4633-83be-a24a748a823a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69dab1ca-91dc-4417-ad1d-685637088cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7175713c-8ac7-4bef-9ab2-0d2d77fcf7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eeba34d-693a-40a6-8d96-e0e711f00a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacef3ab-cd2d-4ecc-a324-ff5bd6bae097",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab41188e-f8f9-40c9-bc39-9f4960262764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1d26c2-ef3b-418b-8b00-407849d959c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f68c959-1654-46c6-81f2-be8b83d094c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d755e876-11c0-4d59-9df3-6fa028ce5390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbe2821-d942-43bb-9d04-043fb3c6c0c8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e45378-cbc4-4729-8388-79e0faefd1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9de0a33-ec24-4f7d-98a7-e91e45730064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceafea92-0fc3-4cda-b54e-6d7749c6b586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e2adda5-32bc-49d7-99e5-b34216c25a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2128472-a4aa-4a08-9e59-91749a1d1d52",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cfc376-470a-4b9b-ac44-f6eb221deb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd92e34-b8c6-4345-a1e9-36d1163b7a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f604057-c564-4253-9936-17621adce245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "796b49b9-0a09-4909-b4fb-fa0a6d7401dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca2aa43-3494-4a34-bcc8-4068d29335f4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f72722d-8c84-4975-af99-af957124d434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c362ba32-44de-4879-af9a-3b8f5a05da72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9faf4a94-959f-434e-9398-0981eb2b9ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc6058c-b037-4f28-87cc-e0d40495907e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcaa6905-f6d3-4dfd-9560-4269edb3430c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adfe4d7-a28d-4180-a8f8-2e45c4e930d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3464f165-babe-49c4-bde8-e108ad8900a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cf5ec7-9fc5-40b5-9f1b-37677a5b3269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1bab28d2-c677-4320-83d7-d4af32b913e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837c7d66-c380-4017-937d-e0e2591dba66",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32c67a4-655e-436d-a5b6-6f5d61638621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b142dfaa-4868-49f0-8ab8-43ff2595df1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d63071a-5940-4f7c-a22d-f410528f6ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4731e7a-51f1-46c1-973e-35725c4220ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbb5616-274c-45c6-a2bc-591768d4e9c1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06013b1-a8b5-4ee9-abc5-feb4042dd8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3895d7e4-12a7-4fdb-85cf-bdeb633893de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757f3ace-237c-469d-ae5b-d249b43d1036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6fa8e4f-f607-4845-aafd-ff3d0bb6b0bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc0ea47-0e8f-4ffb-b5e6-942f190f8bb5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78254fc-c9e2-4c2e-a06d-9082ab2294c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109cbad3-7d09-44cc-a8eb-7319844683c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8ec93a-a34b-4cf4-8167-d22d5ce3fc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3455af4-166b-4b2f-8de9-be088b429f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eda93e2-7deb-40f1-83cd-c080395408f1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ae648e-42f9-4a6f-a6a9-466ba334de59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e20f8871-6fab-4b0e-a0a2-86d6eca59f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19456bdb-2ff3-4124-9120-6b7eab9ef19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9e27262-0138-43c3-b9d2-3e8e5e0c7262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6824658d-4a73-4ac2-8d80-86f2b31c0f26",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c3f35b-4bde-493c-a68a-9e9fabbf24e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef01f3f5-6f5e-4586-a70e-7e478cfb74aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3f6216-e7a0-47d1-bd11-8ba133e12a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1f3035-c1bd-4c7d-92bc-cd75b2afdb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1948c3ed-d324-4c63-be0d-dd7739a65e83",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515beb74-0432-4d0c-86b2-9c7bb89812a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae6c4d46-7871-4467-ab6f-91d50c144419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7895b00-39b9-43ff-8e80-808b1423601c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "12918665-c073-4fff-a7a5-58f7fca22915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e5d927-31b2-4e1c-9f5f-3dc55beaa8ea",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a824ea77-82dd-4463-8336-675aec9cb127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec29aa01-5901-4bea-82ed-05e94dba0050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfa0f71-8c57-403b-8710-4983a9c0a5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "efa40296-3f9e-4370-93ad-8a4d4bfa5bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57d9cda-5590-411b-bc6c-68fef0266fe0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63777351-c107-4f87-b99b-1fc654f002ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ec18cf-b358-437b-8a42-4a81724b170b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a721a1a-9058-4748-9135-11588ef2a4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef49ffa-609c-443f-9728-68e7059b3fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44af60a0-86b7-419e-801c-358eafd2ce7f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551434bf-e787-4aac-9e82-6f685439d25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dcfd704-dc8f-4ded-a63a-5ec7a1e96702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea262b2c-6d29-4a93-b2d3-04fc37759c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aadf586e-3845-4ff3-8a8e-294342f2425d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632bf089-9b2f-4cbd-b727-44133f8c9505",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f37c91-d2c4-4029-8678-8a0f4790fc81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7761fabf-d32e-4a14-89aa-eb0a2a9521a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ebc1f3-5515-4f73-b432-41827095f645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95cd428d-235e-470c-b9ac-70de2427f1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f311109-38ec-4807-9ba1-31faa783a4f2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a66c70c-5ae5-4331-86a4-0821301f5d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0edb21-e107-48ee-9c1a-b6d49a535101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb1ac6c-ed97-4762-abc4-65124cf99ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b11dd5e8-ace0-4d8a-b9b8-79a31dcaaf76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a52bd8-8a98-4aaf-82e3-e960fbd0c712",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bb94f9-7488-4fa2-b460-b9b369a07224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e9f603-bec2-4882-8b83-18072d2e6d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84bab1a3-c3cf-49f9-a814-58502216a272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "14f54d76-be3a-4750-818c-206bcd706155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9334d7cb-e973-4a06-87d9-703eae2c2e08",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df76590c-3bd1-45aa-abdd-f7a5954cf6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f15d5a-90e1-43a9-822f-94abeff76c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2609899f-129b-44f1-8346-41c0e5169729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6a19ee-5f73-4fca-8415-c09676358ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf3927e-bb7e-4897-9871-de8866688994",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09d0a26-303e-4cb8-9833-40405a93a039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8d1bdb-241e-4b63-8c59-8dac3efefa93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4e66ac-cd16-41e6-b502-f1aa8c4d7d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96c28687-bdab-4c33-87aa-3c84049d0072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8cc302-7346-4650-b162-809ce05a0beb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c64d4c-6446-45d0-883c-394a661e2ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af1ccd4c-45b7-4d72-b135-30e7cd26920f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa586cbf-a528-46c9-b3e6-2ecb7eab1ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e7b3a38-cec2-4c33-8ee4-f2b845dc831d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27aefd75-3611-4066-b55c-2366324b3ba5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ceb91d-6aa8-4bee-9d2e-605947bd694d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a760aa6b-a2c7-4140-b93f-99f32d22a023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f366d1f-01f5-409c-812e-9d3fa2741c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9ccf46d-1ce3-4220-a3c0-732c9759bb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e315165a-8115-436b-837b-602634bb7c6e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccca39b-dcb3-4789-9857-18d43841e20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7685287f-543f-40c4-b6ef-c6f388c58c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e296d5-2b77-46ed-9537-90e26b1c2b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "898ef21d-f4ba-4dcb-a282-6ecd9b542e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adee4b06-99df-4a2f-92f3-d12c9062fbbe",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92911ad8-446b-4f03-ad87-8f7866863341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38159f97-f4d4-4f80-b3e6-7b3950ed9b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698c2b63-3b43-487f-98f3-4186b7298fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "777cd1c4-20fd-4e9c-ae71-7350fd6e9427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a8d588-595d-4a63-92de-4b24f364331b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d80220-5e1f-441d-86ff-13434333b8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c647567-07a8-4075-b763-5b86c669c64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685e6747-32ac-4db7-b808-09b087318289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a37802d8-799c-48d3-8e48-4118e90677ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58752571-f4e9-4ea3-96d5-37094e73e2af",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5513a304-7b05-4832-87a2-26acd769d5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a0ad99-170f-4caa-93ec-f2cb02893d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54136981-e8f8-4bd8-94e7-c47fc24cad2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4084f27-4c8d-4c79-ae9c-5361638ce5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1a5de2-a338-4899-970a-d3c15c07b9a7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e25126-7c19-420d-a97c-bb19994aa741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe3aad5-8b18-4fa9-b4ea-9fcd8222a496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0934aeeb-0d08-46c8-9540-ee336c6c16ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08ffdf4b-89f5-40ad-84c8-7fb9411cd57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984297b3-c7e7-4e1a-b2df-c1c4643520ad",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c8f663-ee26-4125-8fae-c05adc5dc9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc7734c-940b-474e-8499-185ae46eb0cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41662e7d-e8b9-4d76-a5d0-bbd537fcef51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "083ff86d-d0e2-43ca-b2aa-4959f8583088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9df2645-6dcf-443a-8aaf-8bb53cda1766",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b91ce0f-33d5-472c-ac8c-775d78c1b13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22be8920-1ff4-459d-8e6c-35eb51ae54b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762cc261-dd20-47df-85b4-c43667bb067c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2292a41c-28a7-4c98-b910-a8d006dd2e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f471119-d65d-4d20-89bc-9f0416fbe984",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ff748d-fab0-477d-951b-b920fe774545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83a3850-1027-4292-bf86-07095fd7bf9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d109d827-315b-4d10-b578-9bf6f95353e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e8ae2de-baca-43a2-9467-72b213f12bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e460e2c4-9afc-428d-9143-3c67b9fc1e91",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032bec34-b05f-47e7-bf43-a4dacb5d32ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd36fa4e-ce6a-4d65-8895-3c54ddd5a168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5bacae-6c91-4c97-980f-52fdefa91c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6e994ce-8d59-4aa9-b43d-58e014319beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba769c3-3e77-4e8e-b987-cee66e377742",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59004903-bcc1-4223-a5b1-e81628e369f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "577145ff-559f-446e-a84b-2c8ad700764c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95651cb3-0529-4d20-a308-7affae00a472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d08e0af-204f-43a3-bc0c-ef36bc74d554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91267c76-47d7-41ef-9a03-e0ee1447bbdb",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c9962c-67d8-4b02-b55e-f2384a02d2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f196be8-11c8-41c8-a666-d0c908280ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afc2b19-0f2c-4fc4-ad6f-f7886611d487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9135bae4-ea3e-4854-a2c2-6d596266222b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580eba35-fdc1-46b0-b109-5f79f6e39756",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ceee92-5e6b-4ab0-836b-64103fced08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97792ed9-bf3b-4d85-a971-cb68dc59106f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0e44e6-1452-45a2-a1dc-321e3980f197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15820602-33f4-49d0-997e-90d63d04eb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6088eb3-9f94-4ba4-a669-2ffe23d64e0b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd626f82-d6f3-4fea-bd2b-a20ab175e42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20eeec5-3f41-431a-a9a9-da30a6947cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcff4b76-2286-42a6-8c36-f5c80d23644e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5368b9c8-d795-44f3-9514-2027742d0d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a324ab55-f18f-4a8a-bf47-5fe5f702bf1f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f765c265-694c-4757-946a-551edd3e9e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b658729c-72af-400f-8420-ad81b254c43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b6c764-fdfe-456f-a295-e8eb04328bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e63bf733-7925-45e7-b471-88ec9e27c8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fcf8c0-0e43-4915-81ad-8479808c83dd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a4fc60-c407-4c49-8c95-fea77dcb15e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9341bfb3-c613-47f6-9dbc-ac7da175de46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db18b863-062e-4f10-8b75-d30d26291f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1068f049-ad9e-4dc5-ba24-f530cd28a009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b8ea7e-1607-48ac-b53a-b72f7c98f215",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dffd91c-a0ff-4b6f-8a2f-e5927fa41f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c9f5be-be2b-4e8d-a856-c92c5adcc45d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9dae421-2dc8-401c-a3b8-cb25a6be4ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a258a662-0301-4593-a271-48bbc60602f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8656cb33-49c7-4214-b78d-c377c0313043",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a873907c-9fcc-4e9e-94e9-b532c485af46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084913b6-3c6a-49ca-acb9-00bad0908731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53370a4-c56b-4770-a0a2-568a39852b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c6f9ce0-b86f-4e2b-893b-880f38153f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb9793b-b5f0-47f8-9946-5c3fb6e4620c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f725cc-7182-46b4-bc92-1c6ea4588da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd50f9b-037e-45e6-949b-ee390e72c129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f96476-3a84-4715-9ea3-4abd033aaea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "114cea8c-049c-4d6f-9ed2-9e7b6ff07a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162a6ef9-6a0e-4a13-8f4e-e0abb11505c1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a927dd9f-b4c5-4d92-9ed2-664357812101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc70789-0889-4a4f-bd5e-a19096fc8755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d400560e-9f2d-4e0b-bf85-24845cb18986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a6505ad-2ec0-49b3-bff1-c8a1a1b82e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c45994-250d-4899-a479-dceb18cd083b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba997544-c750-4ad6-90d7-925fbc7508da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "27d05d0a-4d99-4c58-ace6-1aeaababa638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd984cd-0f7c-48ae-b869-7bdd4d5fad83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d75d1033-f826-4552-afc5-3bd93a3ae8e9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "88d20c3d-2fef-4e0d-a1e3-41c27a34b81a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6737f443-75fe-40d0-ad74-ff5ffb9a6f6a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43ff956-c73c-46f0-86e2-d759c46ef02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "add7172b-fc22-4908-b806-111e13a99e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96637c68-5f8e-492e-9f93-33692c9eca85",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "071f07bd-16ef-44b1-bf5e-ea14c05fe8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3447500b-f8d6-4234-9a44-3ecfa2543dc5",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590730f6-5824-43ff-b093-6506619be73d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfbe74b2-6fa2-45b6-b8e0-077c672b990f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4babb03-a601-4c8d-af5b-87b3d71753e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35e248d0-fac7-4c33-b25c-19a2034e3f06"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df109610-09a6-4f16-a6a1-5d591b66d7ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7be32e4a-0892-4877-bd69-0a82645cbbe3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d99e3d0-f94a-4a24-a480-a39f31c534f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6461ddd2-e2ae-41e2-bfe7-d2b363015e3d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a41395ca-f9ff-45d3-9f52-31ca32e07323",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d6a3c33-77e1-41f0-8d00-d8b49bdf653f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cfec49ce-e1fa-4c1d-880e-79dc6c1264de",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ef5061b-ffb6-4c5d-a144-0b3a22f6d6f0"
                }
              }
            ]
          },
          {
            "id": "ab4e241e-3a26-439b-9317-3031f725e1c8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "09ad3127-4771-44ed-9d2e-d945484576b3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ac3d73a-e0c3-4ec4-b8f3-9ff7f908bd60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66a9632a-aa97-451c-a5b3-0ed8644da3b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9452a426-eb84-40af-987b-00691f139907",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b1c611f-a341-4581-a05c-169598a5a478"
                    }
                  }
                ]
              },
              {
                "id": "020f89f4-ebd6-4ab8-ade1-dda0edf85fd6",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be3974f1-36d0-4901-a50c-494fe8a0df37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4bcbe06a-0abb-4d71-9071-0950fb67e285"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0fd7d6f6-1227-402b-9e61-30dbef74caa0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e38f1b10-1116-4211-a59c-3a96f55192b7"
                    }
                  }
                ]
              },
              {
                "id": "ad1ab743-c53d-4191-aefe-89fa29ab161a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7867aeaa-1d01-4780-a85d-f24357ab2848",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a78d6e9-77ed-4df1-adc5-4aaa9e8b8ee5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b05ef8c0-625c-48f1-8595-72f12f5eb401",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d2be6711-8aa5-454f-8674-6f89a5df19db"
                    }
                  }
                ]
              },
              {
                "id": "26c54ee8-3888-4f7e-8ee9-3db82a64376c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e63ebc2c-8aad-4c61-908e-eeca1f7b2650",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "503117cd-ab35-4a5d-ae43-1d6e08c5b836"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd1698bc-7f5c-4c64-a7ac-49d479fd4e7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7cabc48c-e51d-4208-93f2-d000169f5a82"
                    }
                  }
                ]
              },
              {
                "id": "544fdacf-16ff-429a-b37b-0cd5ae857628",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1379f6e9-873b-4c39-8868-14d8bcf688ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8d292589-dd9a-4835-91dc-4d85786aee14"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1534d072-cca4-456c-b2e5-8629861eaea6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "eb567fdf-d032-4482-9ca2-8cf75d815c09"
                    }
                  }
                ]
              },
              {
                "id": "92f025b3-452f-4e00-95c6-344ceb816da2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c573b77b-1327-4eee-8235-99264607f465",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37bd59cd-ca4c-4a6e-bea4-f9815c9ae347"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "788c24d4-92e8-4efc-91e1-53875b3395a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d2938388-3940-44b6-858a-61dcd1805efe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ccffcfbc-6731-4555-9f5c-cc02802ae6fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b8dcf2a-cce1-4a44-8821-2533cd5a45a2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a54aa17a-89f6-47ab-9226-156260806bd0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "484e0657-4b59-4b4e-9120-ae604b913762"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53aa8b49-d359-44f9-a140-d834f2adc961",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a1c19508-39c5-416d-9492-4f4aa9a7e1d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b13d3423-8f45-4d25-acbe-a48dd1d10156",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b48cfda-2bbb-4e2b-b069-27c344019ff5"
            }
          }
        ]
      },
      {
        "id": "f21e9b42-16d0-4c8c-8687-1efa9cf1ade8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "27795a79-90aa-41f9-9eea-9a37bf15eba9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2439543f-ba93-41d7-8278-02f6188b5b78",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "66c76ae0-36d6-4741-a679-44ec129b9e9e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4cc41e4-afa5-48be-9a80-ed3261cb6774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824a86cb-4152-4927-aee9-0c4d224a5cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe923ab5-4d87-4042-8390-ad3645cabcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f76f5db-3a69-40c0-abf4-f855ba8e87f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84446c5d-fc48-462c-87ce-53f68210b319",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059284dc-0a5d-4d95-9666-2380ff73bc41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356d840b-21c6-4fa1-847b-5945a8badaa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e6e296-dfd5-4a1b-b749-508161e37348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "54d4e3ac-7acb-4fdf-9568-807df6bb1349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9426d7f-fa00-47b5-b16f-78f6dae9d97b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e9cb490-c447-415f-b89b-e88bb398ed5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8d9a41-683d-4395-a27c-1d6f68f4674a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adcda8c-4368-4996-a6e9-d6ef8430ae0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76f767ef-adeb-4af0-b2c5-28cd7c192af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef05633-697b-4d16-8feb-7c5e23200d20",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "756dff55-8e1e-45b0-8205-cbd30e8ff502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86a9d01e-84a2-44ff-894d-c5bfdcfabea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a8fa29-2094-411e-a666-81531153c0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2be7b5c2-5ffd-438f-9768-1f46e45e696b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74de13a1-aea4-4dd4-a6a8-d903e6b406c1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1b6c26-7bf5-49a4-b4e9-ce0d1abd4918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1101a536-5e10-4b4d-a2f6-b6798812ae9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda8b1fa-600c-45c7-a8e1-f156b9290474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8edfbc4a-911f-4da6-943f-0617d4c07afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6aa7c9-a93b-46e4-a0c7-cd2826d91ff4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f85d3f0-2bf7-4a98-8b73-ae2ed1110765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fffddc13-db2a-42e8-8127-4fdd9bf22556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0678ba6f-297f-426e-bf79-3728cd4a4333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8599ff80-425d-469c-9725-c142fc9dae47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b2b4ab-a610-408d-b294-6930ef774e42",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401b44ad-df3d-43d4-a2ac-f1e6d9659608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23fb7f79-9233-47d2-a746-77593541f572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a1d06f-4e92-4ee9-910e-467dd8318b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d111afb-eb5d-4954-b7f7-d39d17ba2d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbca222-4c4c-4cc7-be16-2c905dce76c9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538a5a25-2b1a-415b-816b-61f553009bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2a4cbe-dae3-450d-8982-dc4d8560e6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b45e8d7-8057-4dd8-b65b-896a5ae9fdbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1c52e4-7354-43b4-ab10-70a932914c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a757db-c63a-4ed1-bbb1-7021295d795e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162bd2ae-b544-4f28-87f5-ecd003ec8e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57877273-39d7-4d49-ae26-22a10ad90e2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca316135-2a8a-4bba-bad3-2cb9d7e15a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaff5706-88b1-4fa4-a466-8add3aa87326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72682da-04a8-40ef-bc50-86518a2836d4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf15c91-2ecc-454b-97bc-343ccd5fa481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6eba171-5e3d-4e26-9ce3-12112f21ae48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "778859eb-485f-4b14-851b-5d20ae38e311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48fab02b-bd28-433d-8a88-2a99f30020f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a51fb0-b6b1-4eb8-8fa0-a960c05e5d4e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8eabc4f-467e-4727-9a65-5be85f37d615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f649b42b-83ea-4ca0-9de7-828d9a783fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f5a9cf-ddd7-4362-8246-c0efffdacd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce9297a-0249-4085-afab-e45013d9a646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bcabf4-b13d-4c55-aa8b-11a94484b968",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6999c9-bd35-4330-86cf-7f1bb22e0f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2e52f6-55e0-4414-a9be-11fbdc5b06cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ee0503-7da2-41f4-9055-ae79a7b2333c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49acad13-eb7b-4649-94c1-2bf3490cad69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255c7239-1818-48e2-99c7-f4c4fb24892f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b73681-c416-4e3e-922c-d671bf99f8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf67ead-2cb6-4772-8910-5a6d540c5afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b2b17e-0e68-4e0b-b0f2-a9781b0fee46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ef64e94-8f41-4f66-af8b-f2bef660fdb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d166259-7d0d-4f3c-b8ed-ec1a3f785846",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4644d1-a1f4-4c52-a304-96ffdd0eb3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18489f8-f3a7-45d3-b80b-56966a718058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ad1c1c-ecc8-4ff6-9bec-f229601c0b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "65e43039-3ab7-4179-8ad0-282361302e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804cc51a-2ae4-49c7-8a7b-5d57e82420f5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599c6cc7-8f5e-4ba2-aa13-f24050556e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3bba9d9-1209-42da-b3b9-c6db1ef6c335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035f316e-c8ce-4053-96e8-c46ecd459d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e57e6d21-c5e7-4116-bd86-12a58552d2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7152d6-e91b-4bfb-a725-b852dcbb6ca4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c3bd59-90d1-40ef-a84e-0ba5e43e208e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69789bcd-3652-4257-a566-a4eca54d3467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7041cdcd-9e49-4181-8054-e60ef224cfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8b0f950-dd1a-481d-bded-ff42a66b9d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d4c5c6-72b7-4097-8f6d-5af54ae299d3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c64fe3-d214-486f-aa4f-345adaec21f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2065e579-e2f4-4d51-b474-6a145a0b8cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1a1091-1b07-433e-9852-94c5ca696eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9e15c56-72a9-4b88-91cf-e0f4e9b4d1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e94cec-1614-43e3-83e9-28a3fdc108f3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b7f2ed-29e0-429f-93fb-8bcb9f6bff23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10876e7e-9947-4d46-8bb6-c8b1f86f40d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66f871b-f9c2-464c-bf5e-c17e43939d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f2c5a06-ac81-4213-8337-3ed4baa224e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497521f6-60f8-48aa-8b0f-a2847d25d5af",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36da0aca-60e7-4efe-b8a3-718a5558fdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "158687cb-d57e-4241-b741-9bdb313406ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6960005e-2435-4616-bae2-c375e921a3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce36d54-387b-4508-989a-3a69d363f16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778c8274-8269-4a4c-8236-837644a21c66",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e5f6b4-db5b-4d55-82af-32881219661f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66bbe289-b2ef-4894-a62e-fd290a77f9df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b733357b-df36-4143-a19a-58f8d8bcbfa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dbf8162-26b2-442b-bdd2-173e3123ce19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b7a993-f22a-4bcf-9e68-86ef493d67d8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d629072-b709-425f-a09f-fd57f11238c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c16d7ef-6970-4029-90c3-375ddff5786a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8529f2-0eb1-466b-b2dd-f957322e729f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d192c2f-cad0-4082-bc4c-59e6da649284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d595498-e634-4dcb-987b-207b6b3852da",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fc26f0-d2f9-440b-89d2-a1fbbd60b21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56aa9375-d82b-4c55-bcb3-f01c358d873b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dcc06e-77c0-4a6f-ac56-bb2e040562be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "227f0b1d-0aa5-4fbb-9d9f-2c5b0c0c7645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313e1c99-cd22-4336-b671-6857b13d4b5f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ec631a-9211-4651-9d50-b021afdff4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98fab92d-cc27-4ed7-875a-8326520ec3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2beab3fe-de25-4996-98b1-eeb9c7722794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26c0ebcb-415f-4e79-ba54-702a924afade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcde7348-9fe5-46b9-ad91-b16678ca398c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "140eee40-3bc2-4f52-b61d-3a92ab5df29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae454bc4-3fd2-4409-9aaf-08bfbd00f21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae788587-11b6-405a-9de3-4afa08d940aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c84dcece-f5ca-4158-a82c-69582413227d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89bda36b-287e-4519-84de-ed2644b952e6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbadcd3-4005-4c6f-a60c-82deb41d266f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44da8bde-6811-4169-86fe-c5432f79a0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9f73a9-4333-4c2a-8372-4250944c30a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f55bd437-eaad-42e8-a39f-843db46e0441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1684d697-eaab-4b7a-94db-56717a958285",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3955ddaf-607b-4886-a6f8-8a3ca9789fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d9602f7-0fb9-4ef7-b615-9739d77cd340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db11073b-2ec4-41a0-87ec-c39961d7bd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb9d9287-0cc9-4e54-a500-34a826c7d4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d153c5d-5283-4e24-b72a-2391b0642af2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5839d6e9-3d69-483e-b626-d6766154a278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d9e5ee-7a25-4493-9a94-07b8997856a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b997a9bc-9b80-49e0-b860-0f327b003977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d243430-d4c0-4747-bec1-5148a0261765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c3bd66-eb10-4495-be6b-7f39c2b1f22d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084a41ed-1b88-4ede-bad7-c2ff71615d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126cbe6f-1cf2-4f1b-ab0e-bb2feb18a215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2f762f-2224-424f-84ef-f9660b1f16f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "228b452f-3248-454d-971c-3037735881be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ee5595-9452-4bdb-b807-ceadac73a562",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9d54c2-63e7-46ed-b07e-c48a7c101b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2094703-c07b-4d9e-b304-9c742d06118c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66defdcf-6291-481d-a9c8-3072f87f9076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc95daca-04c3-4745-b3a3-59c71972d597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b2bd09-550e-46ea-811c-d18893203f3a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e660df-c431-4901-9b40-4438c4959f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f6abc0-70dc-4182-839a-37032f94d3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e077c8e-510b-41c5-a3b0-4235c3b5d543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce7b528-7d14-4dca-96cb-809b9088d4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d495b873-65fe-4588-8a7f-9a44d75cfdb0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069b967a-5ed9-4cdf-99a4-95df712576b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "917bf950-f3ba-447b-8e70-50fbd5c6f472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08caf338-68ad-4799-ba4e-deec9b13f6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec1cace-c46f-46be-80e9-bf9b21ef5b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ad7f7b-06e6-47e1-bf61-ab40c5b8484c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6835f49d-3776-4b18-b1f6-5b2373abc796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7403208a-bf61-4886-bd54-08ed7ca8e234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d7bf7d-d3d0-4320-a7e0-1abfa05ea18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15e9c14f-7041-4160-9cb7-db0bec352489"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ed11d41e-4b78-4a33-a913-b9d3c4be5080",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e81f1018-27b3-4b4f-8500-08752fdf93ae",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed65c12b-b539-46c7-80c4-6433b7680a58",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "586a8124-d002-4040-995c-32e9afbf84a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f092cf-4f60-427e-8fd3-5478738f0a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "477959dc-b421-4f2f-a43b-715b0a1fb5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d538a167-9248-4bb6-ac7c-5102b6f54f13",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133b1de5-2580-4c17-84d6-86e44354d80c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "85f9fc07-35c5-4aea-8d6b-e4f736dbeea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5948bbc-c498-4cac-94b8-5dcff6560001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cad14f9-b766-42ab-ab6e-40ffa0c256b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "faf357c6-84bf-44f9-a4b9-58af388f804e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5df80e37-795f-41fc-9988-abf6e445e0e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f433372c-ab67-4be1-8b63-d8aa8a4006b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "894d61d4-07e3-4a55-baf3-275dce0a1d2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89c4d422-b542-49ea-b0f5-561449bcc527",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b0186b51-1367-42d7-a1b1-6a7d6ceb3fb2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b6b6c5b-6a87-4729-af08-8134496e78db",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3505c7d0-c51d-4f1a-bc3e-7a9043d0ae7e"
            }
          }
        ]
      },
      {
        "id": "bafb5550-3133-4fb5-bf0f-f65bf922b77d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "75d3361e-9368-4c66-be2a-bc35e886fc9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6bdfc836-0e3e-45a8-8e60-015882f8a03f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0164346d-b8ff-4b23-aede-a4a78d1466a1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff7edcd-510d-4c93-9137-4ad716acf27a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57cdf669-dba4-4216-b2f8-06eb43e653ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af843c63-ad4b-4821-8368-8c9628af4ca2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29e2803-4442-4790-bbeb-c8959ffa22b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c20f28-f1da-4b57-a242-84175f231b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aee3930-6a42-409e-adbd-cb1923a39bf4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3350494-02fc-48ee-b7cd-7a4e6871a1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1734ef0e-e107-455d-887e-42176bc96074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec9413a-40b5-4c0c-8bc5-b0759c2a3580",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "badda055-5fbf-4c59-bfb3-f0afb95340e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "235ef2f8-daaa-4ccd-b194-fccc4683e159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86817c7-0f8b-4fa8-95ab-8fa1dca7b03e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8f123b-e60e-42ef-89ad-4304e36687ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec4348f6-de51-467e-baaa-87a9962fecb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006771e4-ed9e-4a7e-a71a-9dc181c0ffd5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148e0fbb-552d-4801-ac05-ad92d6c75624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c97e12a-f8bd-4d0c-9888-df7569341a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05eb1079-4a1c-462c-a526-a3cc8e01f4f4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41ef3ed-9135-4cf9-a9a0-a9c57cc77426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8890ac60-cd0c-4281-a8f4-fea5fa1aedbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b684ed-5012-4bfa-8b2c-d67d46c935ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c10ada3-05c4-4214-8d1a-e2fc2acf893a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbd5a94-6fab-4635-802b-2b87db299495",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85370da0-8a59-4560-a7f1-4c983f55e477",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a937f946-ede5-453e-a3e9-90a12ad8808d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d184b0c7-0139-413b-b8ac-b27dd3f1b815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "350d319b-6ae9-4d13-bba8-2f0c976da06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3791bdc-4d39-4417-b455-f95ca4600ed7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075aae62-c64d-4c74-bb55-e7fabfe961bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "777ce84d-cdc2-44a0-93cc-39a00c2539c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bec8162-3097-4b07-9e23-24968b5b1623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3e0194-43aa-47df-848d-cd436bd27f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a99585-724e-461e-bcc2-91b583ff899f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1893f2f-01fc-4b30-99f3-e8cdf3302ac7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61adc59f-9f78-43ee-b5f4-bf05dd513e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1421f5e0-90b8-4d48-b94f-5b52f86af681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b403bbb7-b5ff-4e8c-b35d-5593163b6db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bc4677-3abb-45fa-9831-98b23b09bd87",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a58355-f78b-4903-b035-97919c600b08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85eda8de-edc3-4dd2-89a9-6a534b1768e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1590bf-1217-4207-b3b7-ba383d1bbaad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255f1a17-df7a-4c11-afff-d87047ddbea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48223268-9072-4999-9e39-b3df20683f9b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1765ffb3-8f99-4953-94f5-42c534e0c7e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd661af9-6eda-4def-9494-0bd9efcb1d0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad00686b-84ea-4df3-a598-22da86a41a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d448a9-cf08-475c-beca-de5da95ea6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e827467-f5a7-4b92-800c-53ceb96cd648",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6e8d55-1901-4001-9027-40ad704a08a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e1ae82-ae3a-4b79-a47e-72eb9348b691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860dee36-cde6-41e3-a5e9-1d4c46aa5be7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d24e82-85ba-4b5f-96c4-f0b40f1377d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bcca1a-a800-481c-9311-56e9ad432f94",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c441bfb-5bfb-448a-941c-7ee75b894668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7effaa42-9156-4fc9-b42f-2676950e8ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fde2ed-ceff-408d-8ae7-8cb25c430cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838fa8dd-24de-4351-ba74-9b5f8847387c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc019a62-53fd-4ec1-be66-1e0ffc61d41c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d8bccf-f469-4eb3-b7a7-14a59870bb60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea71416d-286f-432c-b154-a76c8968237a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d56c9d-822a-47b4-a6c3-184aa6260942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552951ac-ed1d-4b15-ba74-4212f8259c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0737580-3420-40e9-969c-4f6fea526dfa",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f53c017-6f91-4e4f-9bcd-42a3bb1c3770",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06396c04-693e-436d-ad8b-7331462abb7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5944a9bb-46a8-4233-97bd-088ea2961077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2765a1-444a-47cb-b8a5-891dc84c5312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac3cab2-6f15-4648-b10c-ab6ed6ceb652",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b006813-77b9-48f6-8aeb-7fd46caf3282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f53b46a-5cd5-40a4-bfc7-ca36ee8b8dd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a773896-4446-47be-8c2d-5d6b2eb060b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366e584c-6aee-4520-8f5d-054b5e08a180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ea66ab-9984-4f14-a746-a8381fab555c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75a67e9-d855-48d3-b103-d0fd27a039e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837631e1-d63a-4c03-9a76-9310bd650d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "614491a9-2895-40cc-8aa1-1a4defa08f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ff0a84-9224-4f6b-bcfd-dab2e51199f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee563cbe-53e9-40f1-a086-d17dd22c8da5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b6146d-e6b5-4718-8d4e-26b370a87756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f783e3e6-4f49-4781-93e9-b46e4be5e792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd1d2b7-4287-49ac-b6ab-f5cfbe9fb6e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4961b7f1-c1d2-4c1b-af5b-58f7baba426c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7845a59-6cf5-45e4-be0f-a938296fca67",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c67899-34da-4a30-b826-dd31006a468d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d13571a-f90a-4745-9195-9956dd4c76db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f58ca3-1373-4a55-aaa4-757a451bdd04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd40865-e3e5-40df-8e74-e9a456aa7961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4106a520-e0f4-475a-b25f-f94e8f25e2f2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e2fd03-555c-4dd2-88d0-7bac80f16f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8befb60-e09d-49c5-9587-c79f7cd3d18d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4743dd62-8aea-4f8e-9033-5aff29b57ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5606da-935a-4c76-bfb3-4117da16dcad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6361881-c1ab-4386-ae7c-59f48b639830",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bcaae3-fbcc-497f-8c85-86fc928279a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b57bf6-65e6-4d35-901e-68c2a2a8e495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f055a601-a3b1-45ae-a51c-dc2ed3958fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6b536ba-f642-4786-9cae-697ba12cc627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d241f78-0b1e-4bd1-9fc2-a31d47bec1e5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa88c10-ac6c-4262-8925-ca8be6d56a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b701e4-5da9-4491-9d25-0a0a5a28a3ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5c8ce2-4a50-436e-a8ad-edbfe0b1899c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7168887c-eb7c-4a74-9526-e686c123350f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4efcdd-b7b6-4333-9b43-62dc3e4456f5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f054549-112d-466b-ad0e-1350e56f8dcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fec3d764-337b-45e5-bf99-42d31028ce60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da14ba2a-17ca-4c51-a138-2c9d5bb1c63f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0d2ff8-a9a5-4126-8774-1c07116f4888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae4d6e9-d71c-4ef1-bf5d-918f789af025",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a871539-b228-495e-ab47-be68289a5139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a282f2f0-8bb5-4461-88b3-ba0f5af8c367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c2babe-cf5a-4e15-a061-bf649e82cffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bb118f-7279-4909-bfb0-94768c357582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0daff5e-5297-4e28-9063-61564df86841",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc79e232-c3ee-491e-96fd-9ac4a3187baf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a142166-055b-426b-8e09-75c6a466f95f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26821d21-a1df-47e0-8487-073b3162afc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab23366-3b39-4615-9c54-30c67be432a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbaae40e-e305-44f2-a1a4-b198e77ef727",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dace4b4e-d646-4c83-92fa-91a72aec5012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87a80ad5-8394-412e-839b-db02f3237923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14bdddc-bf19-4ca4-855c-a55f3f7b3851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e526501d-bdd4-4cef-9676-93f43eed6b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f888cc3-d69f-4686-8ab6-e75915ee059b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669d16a8-0405-4f83-be4c-8220cb697dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f0fada-7957-4b22-b86c-a7e1e78cc247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c85eb0-a0e7-4226-83c8-edcb212735f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f067577a-d9e7-4075-a3f1-38693a9d04db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f21f470-8a97-4d89-94a2-389df069a9b6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006ae615-2561-4fa5-91e6-a769d210c3de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d528d2f2-3ecc-4b09-b5f2-bc34aa9ca1a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6f8889-7728-4bd5-bdae-1066618243bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e21961-68f4-46df-92ad-ae759008b0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cfad74-59c9-44ed-9420-a143703a5036",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8591bce8-ec8e-43f6-8d6c-38ba686ce47c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eae4e0ba-2c2c-4bdd-9c1d-f1be10a354cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f8ff5d-76d3-4751-b4be-fde575ed62f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c997a136-f215-4e98-9858-272df046c397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a007d16-9ceb-402a-8238-849690786126",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c02d31-5098-4a74-b4fa-89a3287679b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9afe6a6c-ebb5-4fe2-9d5b-b2199639fadb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d1cfa5-ec40-4b37-9776-e2d24c81eaf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6f188e-8302-40cb-aab1-4bafa242668e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b1a8ca-e7dd-4c7e-8e4d-f736439eb7b3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d17a129-d6d9-40ba-8af3-fdd96e531c66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9082b23b-1fe8-445b-8701-c4dd74e10b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "675ddd39-8ca3-44bb-b461-fd3a726882af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715b0c59-bf61-4d76-9b30-70faeb0e22d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce7e43a-0e7f-4c99-b4d5-f0bae7ae5f01",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75cd80a3-4d5d-48b9-9c27-ec2dcce45895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b838e8c1-be58-4dd9-8ea6-fe44ab00c7c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e139c581-46c5-44e3-9766-a2bfa4ac4c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e31d13-9bf2-4992-a564-e9c720641484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0f816a-47a0-4151-a264-d7198c772b9b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e57e698-cd45-4964-ba9b-2994eae68e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fec614b7-235d-47a6-af77-071d2d093d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa0a086-3038-4a55-a65e-e2677669d92f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30f91e0-c5bd-437b-a6eb-2e29c879fe61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355c3dd1-4c20-4ef8-a4ec-1c5da3b3de44",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8403a3b7-7b93-43d2-9327-9de04d545f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84f54eb-e93e-420b-831a-89c33b301431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd5d43d-5e6f-465a-a61c-cb795beb9e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a467ad85-5ce9-4887-91df-10f96dcf4649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32e24db-f99d-4439-933c-fce55f48d4ca",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9c755a-c9c8-4a72-abbb-b17b2a052e48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edce24c0-b914-4ebe-8264-00f20fcfacba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28462817-3e34-47a1-a9b2-f3180a112a4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206fa2dd-1ce6-4a73-b5f4-0425c23ed271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919e537e-362f-4435-9794-b8e8f103fe99",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45994157-7f7c-43df-855d-f399160e10f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b049c7f-3eed-4cfc-8bfe-941dc5cdc201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fd13db-a2d9-4d2f-8b28-e76b96cb398b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1121c6d-dea4-4af2-844f-c02ce6413314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f976c43c-1b8b-4998-a376-ca662fcd731f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a415da4-f17b-4886-b31f-6333b5dc4fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e32707-5270-4b30-a6ca-ec1bf4b50fe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "409b17b0-a434-4231-9a4a-39ad77647ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18fa8ac2-6b86-4a95-8df2-540017507e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc7ab42-9c7b-4eca-893e-068182ae1a83",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfdd505-53d9-4a24-b568-e289aa8379cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19fbb910-7ccd-4891-99b5-2e6deadb9645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b49dd2-ed8e-4b5d-9941-3e883cd4740f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a3032ca-eb86-44e3-ba41-a5a47b8ae959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08c1a92-52f7-4d00-b8e4-80c8650f9694",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65afd034-9ac4-4337-ba4d-506075385355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c3666c-22bf-44da-8c90-51953305de85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9611e84c-f362-46fb-8842-ce0b323e3197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "479fe450-5848-4612-a887-463e976bcdb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74b010c-398c-4d25-a7ea-d16f2c76bcab",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6916ec-cc4b-4077-9751-5ce2e5fe1ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64237673-46cd-4657-afb3-255414dc6d9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000beccd-cbc6-4ce9-993a-3c00d20516ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6d1cf4-ddc3-4ca1-9b51-ea15dd30c647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f05ec38-93b3-4244-8acf-675ba4fecd7e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98f82af-7e84-42bb-97a8-4cdec6a52e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bbcc34d-c487-4470-8520-4d1223ffaf06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cc1f78-6018-4b2e-ba7b-dc183756db20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75de52f3-a079-4906-8e1f-5ebda71026f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768abe1e-bcf7-43ec-8471-c1093642c581",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3d9049-96ab-461b-9eaf-e2c2a23e8353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff24a92-bb4c-431b-89eb-f912213e0570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d89cac7-20c7-43b7-9901-33cd1cd51f80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e16c195a-6116-4bed-81b3-e90d9deb61a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59776504-cb65-4cb9-9a80-b71a407a934e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799d2223-1976-4b89-ae95-1d6d5cba7036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8402f656-1499-4238-8dd1-2654518c16b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1cb41b-962f-4e45-963e-9d77c4a20e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00151ddf-ffd6-4d7f-aa6c-6a6858da781b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f83f3e9-1159-4d3b-b23c-9b195758b6dd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbe6f64-f1dd-4075-a1a3-6db6653d5426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc79d52-92b3-4a6c-a54d-4210f3958ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2908a37-a52f-4171-a5cb-5a9b16b8afd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab124356-5437-4275-a9de-3fe014fad2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f6fe8a-327a-4751-96f8-5b9876be7246",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0306d86e-ceec-46c8-8324-a89d25714ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254cb9c7-3890-4330-bbd5-fe9ada1ea0c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba64a7a8-256f-4425-a1b4-6464f1b9075b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af92a796-1e89-440c-b18a-8175eb848aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2b25ad-9f3a-4139-ac45-541cc6e55331",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a3ed1e-9bc9-4311-8bee-ea14510ab810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "354389d3-bf9f-4835-a1db-3357942812f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e81c158-2b3b-44ed-a457-8a9f78c8ff68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a14b27c-a007-4c41-81cf-610029060749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e60cc7d-738a-4aaf-90ed-49a197b02c6e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a83e07-87ad-4d71-b238-b9a666fba5a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803c46aa-512a-4b82-b556-07125ce729db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1783a1fb-4334-45a5-baee-15791226656e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15097a6-fe39-4b25-9422-5c5b298a1239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80126db-86e2-4da4-a625-3cc6d72dd106",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c164773f-03b9-4aa1-bf4a-bc580557c4e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb609db-5d94-46b3-9cb1-8c4b7d4f7bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f78ff9-7dae-40be-bdfd-408cd425c009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99cd0ee-3df4-44be-8d5e-dce61ea8126e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cdad1f5-20dd-42dd-a7a0-23648ba42b0c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "021fbd89-a72e-448b-b27c-3cd691127f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd38934d-3122-4565-af94-443ea25d55da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18867f3c-eed4-40c1-88b7-2041de44915e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5230bd71-044c-4492-b559-13086130fc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38f6b8f-9ddb-4d02-a80b-ca6271059087",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b62bc0-0236-4d7c-838d-a694c5f11326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c885b70-1662-43cc-9370-4eb16a5e2ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb53f9c-5ea8-42ad-a924-2848d0adb9dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "983a01a6-ccbb-49f8-93e6-6dec04771c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b3b738-a956-4b0f-8aed-144aa071de19",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb95234-881f-4d90-8832-99f64a5fb6a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c86b616d-71dd-4152-90a9-44c7fb4b8b6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f202fba-222c-4bbf-919f-e20c8835c2c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a366681-6a4c-4ae3-a4f1-22b313944038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd3c1de-542f-4ece-9af6-243534fafcba",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51dfcc55-b8dd-465f-9043-6b9e0ab53ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70112de-74e5-44e8-8282-4268bc366689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a319c44-b839-4e65-ac2c-aa929f29f944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742efc54-955a-4898-983a-5b1902db4e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f4c432-98b8-4bdd-abb7-68e2283f5eb0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01a6696-185a-4d55-b446-e11fbf64981e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03909aec-17a7-486c-8340-ffa824439e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec55ec6c-3ebb-4555-81cb-5b4f873a84ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff81963-78db-49a3-8d79-7628fa9b29dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d2e9a0-0241-4422-b510-22e269d77f77",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e12de2-5eaf-48b8-be5b-dbc56455be66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c3d03d0-50e2-4039-8834-f0ac6b44437b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70adb2ce-84c4-4718-92d0-5bef2f3365d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc59f6cc-7734-4792-89c7-d75dccee86eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b6712c-dd49-4632-b5e7-6c905b713ed2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79754c2-7c26-4a3b-bbac-ce4f9f1a5568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418d10d2-24ba-407d-ad5a-d14b7ab0e298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d204a5-69f7-43f5-ab78-47ed6ec1fed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25de535-1c5a-4d71-91f4-11f5229727bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba301a3-732b-46d6-898e-87092f48b220",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13620928-1d30-4770-8bdd-f7fd1e65c3cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a2fba24-1aa8-49a4-aae9-164d5189b12a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d3e8cf-0646-4b8d-b2f1-cf4ebc5fdd98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a470fc5-62ca-413b-ad76-8aa9e139f493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1f51bd-d2ad-409a-8142-ebb6611c49bd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36298cb-8e90-4b6d-84f5-1684aaea1dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04836d5d-0432-4ebd-a15d-f2d229ef6a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75714e98-4f0e-446d-a26c-e3c1633adf10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca2d5ab-cfa7-4e6d-975e-abf3e12cf58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a91e055-e65b-427f-a382-99df6dadbd9b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a93e52-0a0a-421e-91ef-554d397e2cd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd6a098-fd55-4cd1-be4b-38aba0ee785f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fabe91b-1c52-4c75-a6c7-c6ed20e5cc1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da943a9a-0588-4ed7-b02d-5d58ebd1a6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b92de3-40af-499d-b539-09ec5241f8fc",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ea71cb-2643-4a65-9828-74053fe80274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9df1acb-32b8-4e51-9b12-fc4a0f7b07f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9461bd9-60a8-4c89-8d15-31f658166d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a216be7-8c92-4233-ac11-10f916f8c7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ae4f4c-9b60-49a3-b883-9b825fed0fe5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0159b1-3836-4f59-a6be-afddcc381833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d35df1-133b-4d17-a635-2415e2bf52cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83cc7dc-bb97-4649-b5ef-203e0074126d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b31940cf-c23c-43ca-8592-b6c084eab9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a34b819-cef8-4d06-8cd9-998320821814",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86f7d89-891f-40fa-abb9-d05f59cd9ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9263a63f-2069-46d6-a7a0-f194a5f9a3c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6c45c2-9c5b-4620-b0b4-82a63f95dc0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c23440-a1a6-4da4-a18a-a4133ac38349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33a108a-2bb9-4b31-9405-c2d5503ddeb1",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17b25f7-e903-45a5-b278-4fa256869def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96331b13-f274-467f-a55e-69480d223dfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3dbf83-c3ab-41e6-b269-c94c4f41504b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e26656-b385-40d9-b77f-bac3e6a643bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0136cdb2-50f8-43a0-af85-5ff783468241",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4729da-dc77-49b6-8222-47c686ceaf2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "500acd88-4a8b-45d2-bd4b-69ad42c8a67b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d5f5f6-8717-4eef-a0e4-f3e0715d022e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72ba417-06ca-4592-88a7-7e538ed20530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f299fb28-1410-4393-ad59-62365344e73b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb67cdb3-379a-46e3-88bf-45206885d3af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "464a6dc9-8a6e-4a88-b158-d4333cac467a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc980e90-cff1-4c3a-bab2-7c38feba9536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f13be81-8f05-46fa-a466-709386d655e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6dbad0c-1151-4dee-9957-d96b44b81bc5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a56904-f2a9-497a-bc07-62a463bbef4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f05a698c-6e83-4e07-b7e9-79f46fd00c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdcd7c5-8007-4b28-bb36-ffcf57bcfaa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8875a278-f8fa-4a1a-95f3-634d94caf218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49023348-686d-4773-b949-dc67e5f2fd01",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80dc4255-dbab-49a3-b44e-85de28ad5110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01c680d4-84a9-4b5f-85f5-ab32c8dbd994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4edd06df-b96e-4394-9e60-32cc382de171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2185ce-5e56-4c92-ae11-45c0e734cbea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30be06d8-156b-4ccd-ba01-ae94ac41820c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd144eb-2e5e-4a9d-9f88-07b92b9edc04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94bd9a5c-00c3-4c39-bdfa-1dd9e243c4e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "443ad688-ff13-45c7-a5bd-3049085c87da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8f0938-66bd-4894-a4c0-5d2330be844f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee76f97-9f39-4c09-99e9-e6cbf4d5fca9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fabfb7-ca3f-4b71-a5e5-31f56ec754b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2198007e-cc15-448f-ae1c-538e61bddf0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba69d5b-5de1-45f7-9cf6-d4315c959804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a43970-0692-4cd4-a734-fe7cce4768d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac8e3ca-92c4-403a-82ff-f4b1fff8a24d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b9e755-5ea3-4f13-9eb2-fa3b4dd9b7ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f69222b6-8d64-4a9f-9792-dd796ccaa966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ba6561-2e92-484a-84c4-56c7cb865123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7201952a-3653-44a1-ac1f-6492237f79e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba588d1a-2e86-4c13-b3ee-9f4b4b1e27a6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1425b0b2-12e7-461e-b255-377552ae445c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78cde70a-69ce-46d1-a2db-cb83142ce194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8773b3dc-56d4-4079-ba61-918e4b3e76a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbab7aa6-9c20-4d06-939c-9ec0919c87b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811d4ee9-2d67-498c-a3dc-66e888e30db7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201d8652-711b-4bf1-b809-5792411c1208",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdbf75bd-d78d-49a5-bf66-f4916c9d03dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f244bfd-817c-4578-9a41-31ffe64a3a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3614bac0-0254-4ccb-8235-8ea33c29db4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadd1af8-ec6e-4353-abb9-a07242e1e28a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a4c68e-ce48-4291-8fd2-03b2121b7cc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b1daae5-e8d9-4841-8b43-f54844060bab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e3405c-5b5d-4469-8afb-355d28952055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec36ff9a-56d1-43ad-9b7e-36353dc1968b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8b2a0d-a90a-47d3-9500-b54f51f872ec",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a54849-c605-4584-86aa-2675a9041d8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f573d9-1aba-4a62-8a9a-b66844d8e961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a706f3-eb28-4b44-8f6c-ec10b3a978fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deec97fe-37e0-4dc9-8eba-9a01ac72e9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e7cd89-a739-4979-b6f5-8d5300d5cce9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ed1b5a-2d33-4ef2-b005-9bb61035338f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd818224-a93d-4787-8253-3cf0fa149e86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef1a2e1-935d-4d42-a626-322febbf04ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec60b58-9d08-4151-b335-b13ab0f535b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cd018d-d6be-4818-9cc7-521209a57900",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb75666-0aed-4625-9fd8-09e202a6972d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe4a59a7-e372-40b3-a3ab-54b02c4a8a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "144b3ac8-9003-400a-919e-5a86bc9eff02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0efea050-47eb-4f98-ba77-5ca5f84b5c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce92240-b46a-4cab-84d3-be1c8069e974",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31e77f4-5cb5-4e54-87fe-adf3e2244ebb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e57c0c34-d2fe-4d70-823f-48701e54aaf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c87972f-c61d-47f1-9585-f606aa4dcf99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe7062c-7ea3-4215-9429-1b0b48fbf1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8944f4dd-248e-4f96-a524-4e1fe4d0d3aa",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34655f1-f8db-4ec1-8029-e95c4d773764",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b4505e7-10f0-4b07-9bbe-25f5bec9b233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7b3ecc-ec68-402c-82b7-5a1420cb4c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847a62b4-e687-44ec-9da1-3154153bd4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1ee358-695f-4700-86e3-e83ce79202bc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87eae63-6f45-4d50-91da-2b73b874b969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ca414a8-9c12-4b4c-b410-5220b0da2945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8ec6ac-a5de-4813-9c46-4ef7ee5c97ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ba123a-7b26-46c0-97bb-b2921297d581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22cb027-7cd1-486b-bf8b-8b257291e195",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd9dd21-addb-40f3-938e-9870e43f7a6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a14af00c-41f1-4710-994d-a31ce6411983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6653feb-1384-4db5-a749-2a8cc1fef919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23673197-e072-41c6-8004-07a15fb332a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7836a9f6-a0f2-403d-a285-aa07d0f75578",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56e31de-99cd-4fe7-a68e-93a41772590d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd8844cc-f6a8-4f58-8760-19457857c543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f75a20-2254-4b43-8a9c-2830c5170a54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "849e8031-c442-46dd-a65f-b21acdacc054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882bc274-f084-4f64-9e6f-631c3dbe5a33",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695e6987-ee2b-419c-a954-2c74f1acfa8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9afed89c-c271-4e28-b5f9-4f107f2f70bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6479bf26-b524-44bb-b433-eec85eb3ea58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83440e18-b9ee-4901-963a-94b9added91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce25c3b-25da-448b-aaf6-1a155828bf84",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3aed05-681b-480b-8924-f7bc34fe9f79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddbd2bb3-c94f-4516-a2ff-a5f0b838b533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10afe3c0-7896-4813-9344-a5798c6831a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64bd4a2b-1bd3-4c6f-b338-500db61c63a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b88f218-74f7-4a19-98fb-bb7a64174172",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e9b893-2dc3-4dac-80d3-09859195ce82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f221425-4073-40e5-a4d8-1b0237d6fba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c80cff5-5832-46cb-9428-2a856dba7723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c18f13-38a7-43c5-af5b-e6811114c1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b847d931-4989-420c-b20b-b31d811cd8b0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6eddaf1-8a49-4cc4-8dc1-7c6cceec33be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "675c8191-1566-4017-a266-4c356a9d4101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "931d8cfe-54f7-4753-9055-0c00a2609e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d561b9-7661-434c-a349-804b38c2ee58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b38afc-87e4-4cc2-9550-7085c7e77d29",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df9e332-419b-4456-91c7-2c530b845f34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba7deddb-2836-41a9-91ed-57fde0505325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71e8f27-7f43-4c90-b889-88dc3ea70654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4bbb1ce-5ea4-49a9-a468-132fdc601e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8be5576-f01d-4d2e-9741-5f01699b59c8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd2066e-e1ec-4feb-b778-92b7208c58f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5366dd40-c652-46b5-975d-816632fd161d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a337cb6-18b6-4f4c-bd32-3429b3d2a847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "943a08ad-dd67-4058-aa4c-b8dc99408966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd313827-23ce-4649-8fd7-856808b1ff11",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d79f73d-e27d-4f16-a920-84b419321318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6604b06c-a864-4398-b9d3-12820169fad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486b2c52-bf10-4105-bddf-7094c735ad9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2075716-70bd-46ff-bb9e-5bfab3d1ec6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4b9fba-f8ff-4ac4-b7f3-24bca7a247a9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1eef64d-dc63-4263-864e-f129e3882a05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b226440f-d6b1-4cbb-921c-16911a0c5724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92308335-b1a1-44f5-9ef4-dcef8a75a022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c301a2-85f6-4e8c-87c7-2ec4cc6f181f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c579d99-4b5b-4575-a03e-ad10deec8bde",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f8df6a-8e2e-41f4-9fa8-1bbe75df30eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e70268fe-bed7-4699-a989-e1d57eed7c86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab35422-25fb-4d2c-b703-cd16dffde0d7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c97ae6e-022d-475e-b8db-4389f060da15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fd0fe9-a9aa-4818-b96a-89e40e8c0bbd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41fc244-598f-4a44-8ed1-ed10613889ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24339cf4-fef1-48e5-a355-4e331318925f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ae8375-152c-4867-b822-1c07ec69367d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56fc680-9f20-4437-b6a9-8939385d9072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9e222f-0d23-4f62-ade8-f178e9cd5e24",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b97b309-47d7-4592-8470-a5f4c30f0a0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f8e5230-377b-4b66-a399-d4aae440bb3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5299ea-45fb-49c1-8c7d-c892404fcfbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c9f272-550a-4af2-a969-e3ae2c6010da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1e1da9-57c6-4d5c-9886-fe0d23a96159",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c10f177-ca51-483c-9ef5-c18882c5576c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "276d7197-42d0-48ef-91dc-dcbdea0651be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "261d40c0-d79a-4021-b099-6ae701f5b366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8eb350e-14ba-4a90-b59a-a79639e08347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a176cb99-64b1-42c0-ad27-f88aac4e7db9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02995b54-af14-4b16-bb2b-e2c359bba4e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19c83857-9944-4bb2-a020-1aae7c9675b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96193403-5d5a-4a34-a14c-0ca934fc383e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb234a3-a334-4ed8-8f87-e7ea5cca091c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d87feba-bb0c-49bf-b7ca-4eb3890ea8aa",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4bf2c5d-d4f7-4ab9-9b6e-5ec8b82f5d16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61d93920-1672-49f2-bada-a5758718144f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "048b81f5-2773-4c37-9260-fd92fe0a9439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c151f2f1-415f-4f9f-90bd-5bfad8338ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac64eac5-91d3-47d4-85e3-e8597f5b1b9b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545f0820-9b4f-492d-aebe-df088ec1b5cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2a1180d-7968-4ec3-9294-1a82789eb9ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "805fc604-f578-4ba2-9857-65b0bf75b5e9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24994aea-e606-4e37-a7d5-b5aee66784a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb4e1b0-35fe-4bb1-8723-814c64821727",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4b22f8-6040-4474-8bbf-8c9377f7ebab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e83e2c5-8cc5-4f15-97f1-a9034beeb375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b815615d-55bf-4b0e-ba46-f9016084ca83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5795799-513d-46ed-9ca6-a91de708ecc9"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0c5e759-a3a0-497d-9cea-57ef07abd13d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39be3559-c711-4a73-a372-789f787c593e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc0e0750-5792-4e09-ab1a-6f8f142ff278",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca842e73-b81a-418b-904f-8ba10b4c7a38"
                    }
                  }
                ]
              },
              {
                "id": "78ae43bc-3cf5-446c-92c0-bc3959011ea1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14da75f3-c0f0-4e10-83bb-8ff22fb88471",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a9a8b0-8995-4456-8f44-574900d9e9d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "63acd061-9ac2-4d6d-8dc1-5e39cfd7d54c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c48464a-b0a8-4881-97a1-840869416bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f17520a-7ef7-4795-9c39-c81da5d29153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7cc592-caf1-4b4e-ac80-c35c07d8a88d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2dcdb9-9c6d-474f-9e83-0d242527e141",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b37d039d-4665-4196-b88c-495f7be3a373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9edc96f-31bd-4573-b416-b173e6c532e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec9edccd-6dd8-4f55-be96-15989cff5035"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b0f7fa6-8bf9-4088-a3a6-722bb79eb862",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05698b25-4704-4c24-928e-aee6cac49a28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3812228f-2ea7-47f0-9b86-4d536f749632",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac0588d0-4018-4196-b83a-04118c12a95a"
                    }
                  }
                ]
              },
              {
                "id": "6e820c9d-9ef9-4368-b9f9-b595435eeae4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6a422074-b22d-4123-842c-adc032b95f6b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de93451-8384-464c-a23c-5adbd1624834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e8ea8d3b-39e4-48b7-bfda-fbd9a4b90452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c423469-5968-4fc5-be39-26f727255690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb71074d-4712-4489-96f6-019ef945f099"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "303d4287-d911-4e4c-b0b1-3a2fdca30335",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1db0c221-7b86-43af-bf52-f310ec3e10b3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77a78907-2b46-4223-a4e7-8525ee57033f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "821de18f-0a99-4350-ae14-71bce85843af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bff3ffdd-d928-40a7-a26d-c081d01407d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34f1bec3-557a-4764-bed5-0b1f7327b5bb"
                    }
                  }
                ]
              },
              {
                "id": "b88d0019-2c3c-4777-85f5-b54353304cc0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da1abb2b-174b-4ef2-9c23-60d19fb361cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "211772ba-fa19-4f50-a23b-d6c21933b164"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1478b0b-0b24-43dd-9f66-1ee430c48d39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "948eff04-a255-4222-9844-be6e427a49de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "736ef66d-058b-4ed7-b33b-b11416534d4c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8627894a-6fb0-438c-b113-9df513cfc218"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a51e4302-2e99-41ca-9619-369947c8e4ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4354a312-2945-4c89-87d2-6fc8b46d3a34"
            }
          }
        ]
      },
      {
        "id": "9e467a83-0d24-4443-9fdd-d56ce41f3eac",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "efa6ce2d-77d0-4351-be83-50f0755dc6a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e03dd26-b415-415d-9377-aa27bfc6a6ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7e9bad0c-00e1-45fb-886d-ef06db1b91d9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1461a039-555b-4dae-bca9-22adec3beb6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "647586a5-25ef-496f-bbe4-27320b4a0a1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97236fca-d6d7-4794-bff6-766c1a4dee1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c01fd40d-16c0-4aa8-8c39-5244d6a8bfbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79d3758-f595-4f66-b546-8c96e7dc2f20",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116ff497-7146-49fe-9be7-e8ca6517a53f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dd6626c6-8691-4e2f-ae9a-d90ab9810328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b31fb9-8a76-4bde-8ef6-06e856a0189c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "caf75f25-3a76-4720-ac51-0e5fe0cdf43d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c792daa8-db93-485c-925d-e8d7ae51776b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a5004a8-c7c9-458d-adfa-8a8389fb0711"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24d84e91-7214-4c3b-9479-2af35029898e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14fc2868-2073-437a-8500-d428901235be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6766f42-1332-4eed-9eae-c19836cb54df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5e88dd75-cee1-4e34-bda3-910ea407e03e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d77ed19-8a83-4080-9fdc-14ecbdbf7eb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20cf07c4-f033-4d5d-b71e-e4f90a9cec28"
            }
          }
        ]
      },
      {
        "id": "dca9cd1c-1576-4071-a443-c236296ed09b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7753ca6d-2a76-4fde-9ba2-67c86a9fc5de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "abfa49fb-4b1e-4366-b267-982b98b022f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ee5e029-45b0-4e6a-af25-6b90d998dc7a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a035eab8-bbd0-4661-a337-df3f68d3e17f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d317255-bb9b-4f12-aedd-b70ec7c119fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7c0d70-c1ca-4706-bf69-7378dbdc062a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9351b567-e136-4e79-b087-24ed71cb9cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f840c23f-1c65-48e0-a430-75ac6d01183d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69f199b-3c05-4c09-b0cb-60efa0c18be6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4be49909-9ca1-43a4-a982-4320b04ed8a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb399f1-736e-4e4a-bdfd-3df6b838ce70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd125cd5-bf4e-441f-8fc8-9cabd5765e0f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7c4478e-480d-46ce-a306-a4d6051b1fa3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83679228-6789-4d51-9177-1c5925fc02a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "83eb837a-d49b-4bd9-8f0a-0eadb158b432",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f2df3bb-0edc-450f-8bf7-5059894c2edc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8469311e-9c04-4443-890d-21f970290b2c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d38d5d77-8f87-4097-9185-765b3f509b77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7183a8b-cd73-4107-b285-e282fb7b4025",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "845cbdeb-bd39-4a2c-a80e-93bf1283a84b"
            }
          }
        ]
      },
      {
        "id": "ae09326f-6180-4589-b1ac-b2859d11939d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "05dfb36b-681e-4c7b-bf4f-ca9424dbe5d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4ca5473-3898-4e51-9f92-fb5fbba903d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d726c64-ab83-45a1-a602-fb7c8911501d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a69b03-a70a-4e14-8a2b-cd14935cdfa3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6efe0113-ea34-4c21-ab2b-834226b28fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d48786-86e2-48ce-99f1-2d99dc5f23c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b13e598-5f2b-4f22-8290-5287fb1913b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1365a8b0-9c9e-4628-905a-1e8902890fed",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68a56c4-2135-434e-bfdb-54efb89aa05b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fe6eb34b-c994-4a0f-bb78-0fb1ab7b5d43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6414298-7bbc-4add-8e45-b213dfe93b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec2352a6-a539-4f28-bbce-3916300b9a25"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e725915-8977-41a0-920a-fef684e6342c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6429c59f-9e62-4594-be8d-e05e54d4c846"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e67f25b-a73b-4eb6-a6ea-ad1cf1d54810",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4524ef9c-12ee-4b7b-b75d-b2523a5b4d7f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c0129b1-bbbd-4f54-9005-ad645cd0f71b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f51f33a6-9960-45c2-bbd5-a85c95f48056"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f6ff017-7c51-474d-b064-d4e0bfea7bbd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80f19ed5-67d1-41e5-b1c7-3b347dddab08"
            }
          }
        ]
      },
      {
        "id": "3599ffc4-0ec4-4164-bd9f-7c43e38336c0",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d55b7f64-986b-46ad-ab4a-cb4ce4b99f52",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98044dd1-de48-43b6-9fa1-4d8bed5ebbde",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1886343a-1492-4afe-a3cb-c89b472b419b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6d229c8-e769-4e2f-a304-0331427cf342",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "524f64e2-8cfc-4dd4-b159-785d24a82566",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 283
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 271.34230769230766,
      "responseMin": 7,
      "responseMax": 5778,
      "responseSd": 753.1350796570684,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681519125807,
      "completed": 1681519211334
    },
    "executions": [
      {
        "id": "8315a107-bfcb-4226-9f11-36a57d0a5d17",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "614e0a0e-6ee1-4cbd-b635-4aa2cabd64c3",
          "httpRequestId": "38dd3f86-4320-468e-a3b3-ace88804c8b6"
        },
        "item": {
          "id": "8315a107-bfcb-4226-9f11-36a57d0a5d17",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cae493da-5fe1-4921-bde5-02844b74d76d",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "a9719dd0-667c-4f47-ae3e-e79b80323812",
        "cursor": {
          "ref": "70a4c23b-98ac-4482-a370-c5f4eb502d6a",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "711644b3-9b4b-4e81-8c65-82f75efd80a6"
        },
        "item": {
          "id": "a9719dd0-667c-4f47-ae3e-e79b80323812",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "05081cd9-db9a-4d8c-8f2b-78dc895c7a5b",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "96d872ba-379a-4894-9855-b6d39e606248",
        "cursor": {
          "ref": "a5f3e1ef-eb01-432d-8cd2-32ab9fdc18c0",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "32f3287f-4268-46c0-97b0-26ef6068f0e0"
        },
        "item": {
          "id": "96d872ba-379a-4894-9855-b6d39e606248",
          "name": "did_json"
        },
        "response": {
          "id": "ebbf29d1-4c54-44d1-b82d-4876928bea4b",
          "status": "OK",
          "code": 200,
          "responseTime": 257,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b2c012-31c4-462d-ba33-488fccefc1e2",
        "cursor": {
          "ref": "fa197d9a-afd4-430c-ae34-86bdfc98775e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9d99a098-c556-4788-84e2-15315e74f656"
        },
        "item": {
          "id": "79b2c012-31c4-462d-ba33-488fccefc1e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "0c0c9fc8-baf2-4a42-b0be-ca7d6caccccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b2c012-31c4-462d-ba33-488fccefc1e2",
        "cursor": {
          "ref": "fa197d9a-afd4-430c-ae34-86bdfc98775e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9d99a098-c556-4788-84e2-15315e74f656"
        },
        "item": {
          "id": "79b2c012-31c4-462d-ba33-488fccefc1e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "0c0c9fc8-baf2-4a42-b0be-ca7d6caccccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d3b364-29df-4e68-9347-32084a8796ec",
        "cursor": {
          "ref": "9283e099-caca-416c-b1db-4b4758fc787e",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "45428c42-ceda-4ced-86b6-356b7f01de22"
        },
        "item": {
          "id": "21d3b364-29df-4e68-9347-32084a8796ec",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a177e114-bad6-4d33-9ee1-2ec316b8ed90",
          "status": "Not Found",
          "code": 404,
          "responseTime": 336,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "9b45f4ee-7d8a-48c7-a350-22702045baed",
        "cursor": {
          "ref": "6260665a-61f9-4366-b9fa-98cb7b5560a4",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0aa9358d-7c9c-4c88-bd46-c189336d07e8"
        },
        "item": {
          "id": "9b45f4ee-7d8a-48c7-a350-22702045baed",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5b80886a-d2df-4c82-9f95-fc3df4ef44ae",
          "status": "Not Found",
          "code": 404,
          "responseTime": 105,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "b0d5b035-11e9-466c-8b02-e7f203608064",
        "cursor": {
          "ref": "8a362934-19d2-4acd-9dad-1dd6e74f651e",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7c485efe-5e7d-4947-ab05-ff28f792b2ba"
        },
        "item": {
          "id": "b0d5b035-11e9-466c-8b02-e7f203608064",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ab924298-c51f-485f-809a-fe2bc0ef6e4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "4b510341-2e9e-4411-97ef-c18a8e6f20e1",
        "cursor": {
          "ref": "28d70d8d-5c3f-4917-852d-08e2793621de",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6626992d-6f33-4558-b41a-c3dca96ec771"
        },
        "item": {
          "id": "4b510341-2e9e-4411-97ef-c18a8e6f20e1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "34fd8d46-2da2-4764-95ba-e7a92ec75978",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4b510341-2e9e-4411-97ef-c18a8e6f20e1",
        "cursor": {
          "ref": "28d70d8d-5c3f-4917-852d-08e2793621de",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6626992d-6f33-4558-b41a-c3dca96ec771"
        },
        "item": {
          "id": "4b510341-2e9e-4411-97ef-c18a8e6f20e1",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "34fd8d46-2da2-4764-95ba-e7a92ec75978",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "79f9eef7-e4b6-4e85-832f-aa2545b9779c",
        "cursor": {
          "ref": "cb6518e5-de23-4299-826e-517e86592b3f",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4bbf9670-45a1-474d-b053-b602d32281a7"
        },
        "item": {
          "id": "79f9eef7-e4b6-4e85-832f-aa2545b9779c",
          "name": "identifiers"
        },
        "response": {
          "id": "48ab5639-df35-43b8-8103-94d7d9ee5d03",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "b553269c-6eb5-4b68-8e18-4a25cdffcf2b",
        "cursor": {
          "ref": "fca3129a-d723-4ea9-8408-2b8434d75913",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4a4b1a68-3012-4168-bd40-3bc735b3dbf8"
        },
        "item": {
          "id": "b553269c-6eb5-4b68-8e18-4a25cdffcf2b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f467df3d-f769-472f-a18f-5ba21cfdd91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "b553269c-6eb5-4b68-8e18-4a25cdffcf2b",
        "cursor": {
          "ref": "fca3129a-d723-4ea9-8408-2b8434d75913",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4a4b1a68-3012-4168-bd40-3bc735b3dbf8"
        },
        "item": {
          "id": "b553269c-6eb5-4b68-8e18-4a25cdffcf2b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f467df3d-f769-472f-a18f-5ba21cfdd91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "979d5970-8795-4ebf-be72-e2ff93de229f",
        "cursor": {
          "ref": "be34f9b9-bb19-4bae-96ce-4a24ed28a042",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d09b213d-f440-48ac-8897-23f71c9d2e55"
        },
        "item": {
          "id": "979d5970-8795-4ebf-be72-e2ff93de229f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f06c30df-c497-4edd-a1b9-277190aad8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "8f25ae9e-4a83-4cb1-8638-c5d4aa9487ea",
        "cursor": {
          "ref": "172fa0f5-c93e-4e4c-844e-22c5a6cf5fda",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "63e00608-a4fc-40ec-ae63-3bd4310e3bcf"
        },
        "item": {
          "id": "8f25ae9e-4a83-4cb1-8638-c5d4aa9487ea",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "597227ba-4707-4cb9-9c82-5077fc935316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "051605e0-d556-4394-aba8-7af11e8e8aa2",
        "cursor": {
          "ref": "67920302-7fd9-43e1-91f3-e8f6821c76a5",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b6fd1e1b-672e-44fd-a6ae-b5f87f66832a"
        },
        "item": {
          "id": "051605e0-d556-4394-aba8-7af11e8e8aa2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2edc7fc8-eb5e-4d9a-ae95-d2da0a3d0bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "26bba570-cdb0-4bb7-9410-bc45e1cad1c0",
        "cursor": {
          "ref": "581d68f3-8445-43f2-a009-7440dd3a9f88",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "40292d21-85a6-4784-9db1-8000bcfe5731"
        },
        "item": {
          "id": "26bba570-cdb0-4bb7-9410-bc45e1cad1c0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3a14b138-bc41-4337-a615-01c085afcbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "229385df-6bbf-4e0a-b692-665606a9c394",
        "cursor": {
          "ref": "5958ec13-7eac-4ad1-bfca-61745c39a0b7",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b9a95eec-f1f9-42a0-9b87-ce3303f90a18"
        },
        "item": {
          "id": "229385df-6bbf-4e0a-b692-665606a9c394",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "556b1727-d81a-4b73-b93b-9937707e53e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "eab3413e-aec6-4365-bead-adbdd2e43e3a",
        "cursor": {
          "ref": "b55cc7ca-805c-4b0b-a750-baf9a182d775",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "96c533b9-b62b-4e68-b70e-70016fb960d5"
        },
        "item": {
          "id": "eab3413e-aec6-4365-bead-adbdd2e43e3a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6c713de1-8e2e-41f9-8ebf-dd545e690015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "bb9fdf32-41aa-4655-aad6-dc3b9d4363b1",
        "cursor": {
          "ref": "232eecc9-d36c-4a2c-a34a-e1501d671f54",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "28e4579c-7275-43fa-87b6-5ea9fa488b5f"
        },
        "item": {
          "id": "bb9fdf32-41aa-4655-aad6-dc3b9d4363b1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9103d71f-3c88-47f1-9ed5-f7abade1c38e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "8dca99a8-ce90-458d-a74f-9c110c192931",
        "cursor": {
          "ref": "b2405d58-83d0-4367-805b-64ad45082762",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f00b1e3f-4850-4236-8940-659b31b7440d"
        },
        "item": {
          "id": "8dca99a8-ce90-458d-a74f-9c110c192931",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9ff3f3bb-115f-40e3-9f63-5d5e8d398038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "ad4051e0-9eca-46f5-b458-a80a3d5a98f8",
        "cursor": {
          "ref": "821c57ff-eab1-40dc-bb4e-8dbcb45c0047",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "13e7c02b-1f2e-4614-bbaa-20a678492b28"
        },
        "item": {
          "id": "ad4051e0-9eca-46f5-b458-a80a3d5a98f8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "11bcf715-31cf-457b-9689-aff983055621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "fbce1e8b-aa85-46b7-b2b6-bb15708f2d83",
        "cursor": {
          "ref": "b6bf8685-4244-4b21-a634-cab8f91ffaab",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a9cf4aa1-eed0-44b4-baec-6885433220fd"
        },
        "item": {
          "id": "fbce1e8b-aa85-46b7-b2b6-bb15708f2d83",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d5621696-c13e-4db5-9fa7-9bfa71a05dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "41519cdb-aedb-4cd3-bbb9-2222b092a85e",
        "cursor": {
          "ref": "10b669a0-0958-42c5-8120-95cd80c17a8a",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "99ddc727-7da8-473c-a30e-febae9e66ddb"
        },
        "item": {
          "id": "41519cdb-aedb-4cd3-bbb9-2222b092a85e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c883a234-b0b6-43c3-beda-e7eb092adff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "feee870f-3a66-45c3-a0bc-5e0a628bb6b4",
        "cursor": {
          "ref": "b59149ef-fd7e-4911-b3ae-abe4ba2e0057",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f6a29b61-9cc6-4588-9d36-9b6317cbb8d5"
        },
        "item": {
          "id": "feee870f-3a66-45c3-a0bc-5e0a628bb6b4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1b6f0490-0d96-4c52-bae7-786668d23630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "c147d027-fb92-4ab5-9afd-63c75be4aea5",
        "cursor": {
          "ref": "33d56881-b2a1-44fa-9f9e-d8a130c0ed82",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1e49c419-4b19-459f-8644-f11dcd918b68"
        },
        "item": {
          "id": "c147d027-fb92-4ab5-9afd-63c75be4aea5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f9a6591d-21ed-4b74-8852-3bb5217c10a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "0395ec47-6114-4143-9c2f-71a13b5fa0c5",
        "cursor": {
          "ref": "6e0fb5a1-9e00-495a-97ba-2e82dd5620af",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fdb9ddf3-5330-461b-8eab-022fef0496e0"
        },
        "item": {
          "id": "0395ec47-6114-4143-9c2f-71a13b5fa0c5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4b258eff-7ad6-4969-a051-2e5a5ebd2b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "236a1c50-02c2-4171-b4eb-d90121a2cfb8",
        "cursor": {
          "ref": "c629842d-ec00-4132-b762-527dd6876786",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "06daf780-5b6b-4076-909a-d76a34a76507"
        },
        "item": {
          "id": "236a1c50-02c2-4171-b4eb-d90121a2cfb8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "46b17e58-653b-44dc-9e38-2129fefe7a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "3d58c87c-9df8-40e1-9f4a-1372508568f9",
        "cursor": {
          "ref": "72cb0c02-2381-4843-af30-6c0c19d3056b",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f7691c98-1fcf-4189-892b-c7b71b2feaa2"
        },
        "item": {
          "id": "3d58c87c-9df8-40e1-9f4a-1372508568f9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a504c106-5b61-4a9d-8c24-2b82fd0f7d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "fd611c58-2092-48d8-b89b-497f3154ed23",
        "cursor": {
          "ref": "d64a6573-9aaa-4888-a514-fba2cde2d917",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a01f24e7-3293-4ece-b96c-a1e7f0a23a77"
        },
        "item": {
          "id": "fd611c58-2092-48d8-b89b-497f3154ed23",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "dfc11dd7-c20a-4088-b3e4-f09b499594ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "555b1a34-06e9-4abe-9ce8-d3a097c98598",
        "cursor": {
          "ref": "27e6f815-2362-4ede-a701-106f79aa6c4e",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d478a439-25f3-4731-a652-a66f6eb80f24"
        },
        "item": {
          "id": "555b1a34-06e9-4abe-9ce8-d3a097c98598",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d027de0e-8d62-42ab-80e7-8a60599276c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "78c208eb-b6c8-4768-955f-d35e13afd47d",
        "cursor": {
          "ref": "41f8fb5b-4393-41ac-aad9-ffdc521465df",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "880f72ce-c818-4863-9cef-8769c7537468"
        },
        "item": {
          "id": "78c208eb-b6c8-4768-955f-d35e13afd47d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a472e11e-e1b0-4051-a0e0-d33a8dc0411b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "8e815726-0682-463a-9aaf-3d09b3d1ba76",
        "cursor": {
          "ref": "96d2c764-e621-4994-8073-78eaff7f5a40",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "69a7e4e3-e710-4e81-aa03-4cf79d6f4c06"
        },
        "item": {
          "id": "8e815726-0682-463a-9aaf-3d09b3d1ba76",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7995b409-b988-4585-a026-cf64f48cd23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "52798208-2cc1-4d82-8de5-f801323fe2c8",
        "cursor": {
          "ref": "c41a384d-fa56-464b-a49d-0f8107a58553",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "817ab2a6-6a97-4d31-a9db-f5ff634fca66"
        },
        "item": {
          "id": "52798208-2cc1-4d82-8de5-f801323fe2c8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7b2b5e24-c261-4993-b154-d5b6126d0535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "3a1d4751-3e47-4223-a6a9-e7b911a579d0",
        "cursor": {
          "ref": "4f807705-5fdb-427a-8dbf-79cf02e74010",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "026431af-17f1-4739-8eaa-04b52b7c422a"
        },
        "item": {
          "id": "3a1d4751-3e47-4223-a6a9-e7b911a579d0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "cf6c13fd-c333-4b2c-ab16-a1dae5bbcbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "43b67049-37be-4ebc-a249-acf994543ce3",
        "cursor": {
          "ref": "e1860f82-a262-49be-afb5-537dc43fdf6f",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "19ff081e-8d66-4dff-ab75-e3fd0826dfb1"
        },
        "item": {
          "id": "43b67049-37be-4ebc-a249-acf994543ce3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "263c054f-8d0f-4442-83f8-89c0b3f2e28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "42076e4e-a74e-40bf-a42c-b2ac03ce38fd",
        "cursor": {
          "ref": "c4a5abdb-641f-4de4-bafd-314371bdd4b9",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "37e7fef3-5a25-43bc-b8dd-6241bae1b8cb"
        },
        "item": {
          "id": "42076e4e-a74e-40bf-a42c-b2ac03ce38fd",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "770169f8-2097-4c90-b4b9-bfcc7853329e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e2a015e3-8eb7-4bca-b2bd-fe30f0ba3ac2",
        "cursor": {
          "ref": "21919b70-1d66-4ba9-ab67-ec3d85fa8783",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bdcf0b0e-511f-4dc5-8139-ce0f7cd43a65"
        },
        "item": {
          "id": "e2a015e3-8eb7-4bca-b2bd-fe30f0ba3ac2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "40cac0aa-6c54-4575-b544-2d6d925bfba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "8d0b29d8-c8cd-4103-8fb3-afd31e14976c",
        "cursor": {
          "ref": "c32bf480-73b7-4347-9a26-1641de62e953",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "74fb4bc6-536a-4543-bbf2-992ace6266a6"
        },
        "item": {
          "id": "8d0b29d8-c8cd-4103-8fb3-afd31e14976c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9e3eaf9a-a1b4-46cf-be90-33f90d79bb07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "ebf8976d-95a2-46c4-90c9-6670ef10c26c",
        "cursor": {
          "ref": "5a4b3710-fc74-43ca-b224-565e9fed68f6",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e8c8e220-3de0-4418-ae83-45daf6db9833"
        },
        "item": {
          "id": "ebf8976d-95a2-46c4-90c9-6670ef10c26c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "550d3fb6-4138-4b63-8580-b5524f32ccb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "9132edf2-b509-418c-858d-c9fa7859dabf",
        "cursor": {
          "ref": "3e9d39a6-05cb-419c-b211-6ae43d9f5bc8",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9033bb16-15bb-411b-bd2e-78e55669d33d"
        },
        "item": {
          "id": "9132edf2-b509-418c-858d-c9fa7859dabf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "00c8180b-ec73-4c72-ae45-937384439239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "0d3aa478-e5ef-4bb3-b248-6f3c49d8333c",
        "cursor": {
          "ref": "50552dda-b7fb-414e-a945-a1e74a898625",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4d0f1d42-4e91-4f5d-bfd9-1299f1197263"
        },
        "item": {
          "id": "0d3aa478-e5ef-4bb3-b248-6f3c49d8333c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "41b3f209-976c-49ae-b8e4-ceb78d2c1c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "7c8f6f42-7c97-4b31-9300-f3a7a9334576",
        "cursor": {
          "ref": "37fb1e1d-225e-446f-83e4-9581b8eadbc1",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f02cc9ea-c103-4887-9a18-ff0e5559ce55"
        },
        "item": {
          "id": "7c8f6f42-7c97-4b31-9300-f3a7a9334576",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a7328fe0-f510-4963-9b5e-5cd0c731dd8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4afbc185-c2a8-4824-a0a1-58a9d3a1ff04",
        "cursor": {
          "ref": "f88e0c5f-ca73-4205-8bc5-c185c7b47e5f",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "123a5f4e-300c-41d5-8343-7b20f4ed8332"
        },
        "item": {
          "id": "4afbc185-c2a8-4824-a0a1-58a9d3a1ff04",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c82c3424-191b-4521-8f5d-c8598fa1f8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "66f6debc-580b-44ce-811d-3f1b5b657e3a",
        "cursor": {
          "ref": "ef8f3b67-fcc7-47c8-9240-b1d5f1cb3935",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a96db159-d33e-4da2-9ee0-f8ea87339761"
        },
        "item": {
          "id": "66f6debc-580b-44ce-811d-3f1b5b657e3a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "88ba3750-0c24-46c9-9fd4-0f1076605d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "b3d791b5-e5f6-4ed2-bc38-4240b8c36ffb",
        "cursor": {
          "ref": "36647d9b-3065-43bf-87f6-9ff4cbf14224",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6bc46bde-1841-4c96-a772-62fb498c6f4d"
        },
        "item": {
          "id": "b3d791b5-e5f6-4ed2-bc38-4240b8c36ffb",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2ab94a5c-da70-43d2-8c5e-33b7bf50ded1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d1b963a2-b082-4db7-9367-0420aec5d72a",
        "cursor": {
          "ref": "c408b240-acce-4188-9db3-87c25e9e304c",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "27524e51-4e05-406d-860f-f93325f0f35f"
        },
        "item": {
          "id": "d1b963a2-b082-4db7-9367-0420aec5d72a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "675ae3f0-c6c2-422c-8346-e95b749501a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d54121b9-2579-4993-92ea-e63f89a91a26",
        "cursor": {
          "ref": "1c2ecae8-b8bb-4e78-8589-0b24cdb8934d",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bc154f9c-322d-415b-b38d-585dcfa5d690"
        },
        "item": {
          "id": "d54121b9-2579-4993-92ea-e63f89a91a26",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "43f9db99-ead6-4fff-95ac-2c93916c678e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f4401356-4966-4716-bbba-621be9005380",
        "cursor": {
          "ref": "e8987d43-0c84-438d-b2b1-ab9dc5e4eda0",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "be2f2d58-c6f9-4382-9d43-193b682b0088"
        },
        "item": {
          "id": "f4401356-4966-4716-bbba-621be9005380",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "730e4a30-1a04-4b95-90a1-8d54e0c5d88e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1a54044a-26e4-4fed-9789-6e6b8df04843",
        "cursor": {
          "ref": "e23f990b-7b7b-470f-a0d0-ff45f8679a29",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "77531d94-7454-41ad-88bc-1b1bd29b176a"
        },
        "item": {
          "id": "1a54044a-26e4-4fed-9789-6e6b8df04843",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a9828269-643e-4db7-9229-579d5806d6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9237a0a8-e2b0-4630-adfd-4792ba1d246a",
        "cursor": {
          "ref": "0d3c6bd6-837c-44a2-a74a-03939af0f7a6",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1a0aa805-1c52-44e4-8055-f828c22774ce"
        },
        "item": {
          "id": "9237a0a8-e2b0-4630-adfd-4792ba1d246a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2ce318cf-dba7-41b4-881c-701675c68abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "152f1904-4cd5-47c4-8dc7-5f92ab368865",
        "cursor": {
          "ref": "f950ade4-402c-4322-b850-f543ab7886a5",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e66e0b1b-3999-4180-aed4-84c2473ef741"
        },
        "item": {
          "id": "152f1904-4cd5-47c4-8dc7-5f92ab368865",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "45d9fffa-5db9-4922-9387-f2e5e29050e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b34f28a0-aa2c-4d33-bdeb-c7c3f2163de8",
        "cursor": {
          "ref": "af49111e-9c1d-454e-9a87-c2923aa486a5",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3b1402c5-c906-41fd-8d3f-53a907c970a6"
        },
        "item": {
          "id": "b34f28a0-aa2c-4d33-bdeb-c7c3f2163de8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "107d2fa7-5b1b-4992-a90f-2360085b111c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2cdf04f9-ab09-4644-9e49-707b0e9f1f99",
        "cursor": {
          "ref": "a3cc565d-a641-4077-9bc3-bae7ca1f10c5",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "87bd5223-abdf-46a1-a695-680e4fcac139"
        },
        "item": {
          "id": "2cdf04f9-ab09-4644-9e49-707b0e9f1f99",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6d6a3176-0a0b-4776-825d-336d24eba539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9b55412b-ee1a-4c61-b8fc-69a0b909b8e1",
        "cursor": {
          "ref": "82fc8030-a38b-4557-a887-f8ffaabcb0a8",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ec9fd965-8cd4-4abc-ad12-ee2f08c2e3d8"
        },
        "item": {
          "id": "9b55412b-ee1a-4c61-b8fc-69a0b909b8e1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7febce77-761a-4698-9dd9-9dbf31523893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8138557d-a396-4744-a625-4dbfdbaddddb",
        "cursor": {
          "ref": "e38f9511-1ff7-4da0-83de-658f178918d0",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "492c2f22-d5d4-4ae3-9cd7-c688235e0cfe"
        },
        "item": {
          "id": "8138557d-a396-4744-a625-4dbfdbaddddb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "12e1a5b6-f46e-4f56-98e9-9d3610c3b892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "a1a10e21-e26d-4850-93f8-ef543f06756d",
        "cursor": {
          "ref": "52335e2c-3383-4dce-b6e1-ea34312584c4",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d65716cc-e4c7-4a82-9035-f4d132f3b85a"
        },
        "item": {
          "id": "a1a10e21-e26d-4850-93f8-ef543f06756d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c4fe2053-4fc5-4173-ad0f-1337c098cb96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "add35495-17ba-47a5-b81d-c5099f57afb2",
        "cursor": {
          "ref": "81f838c9-5296-4f55-8974-fe19dbb5f133",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6d78b38b-c5c1-499a-b1bf-ed7967c730a7"
        },
        "item": {
          "id": "add35495-17ba-47a5-b81d-c5099f57afb2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "807e2d5e-18fe-472c-81af-10ab14eef4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "eddf66e7-cf66-4fb3-95f8-76283c784d26",
        "cursor": {
          "ref": "861a632e-c7c9-4abd-b4d5-5e384cce4b4a",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8c42f75a-d4df-4959-a6b8-64e902f6aadf"
        },
        "item": {
          "id": "eddf66e7-cf66-4fb3-95f8-76283c784d26",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "74f6c50a-3da4-47c5-b85b-dfcd247b8419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "0a77e7d3-4d48-486e-bd5b-84b25f6180ea",
        "cursor": {
          "ref": "6ef8cb07-eca5-4c77-b1e1-d3f246e4c825",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "468e30f5-96d6-4626-9003-6069434a77b2"
        },
        "item": {
          "id": "0a77e7d3-4d48-486e-bd5b-84b25f6180ea",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6fe5e7cd-0193-4319-ace2-d959e86172cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "a410c74b-74b7-4bc0-9d5e-7743bc548980",
        "cursor": {
          "ref": "4701f86c-5f12-4ff6-8e47-cf4081ab3995",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7e0ad4aa-5c23-452f-bd24-193d7a8a6b93"
        },
        "item": {
          "id": "a410c74b-74b7-4bc0-9d5e-7743bc548980",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e16f61d4-fb21-4c6c-98d0-241765da50fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "74174aba-097b-4a63-89ef-b48de72686cd",
        "cursor": {
          "ref": "29c67a4a-36b2-443e-9463-8ac851718951",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3a2978ec-a6f0-4ee9-ba53-a7124b4c73df"
        },
        "item": {
          "id": "74174aba-097b-4a63-89ef-b48de72686cd",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f3e73504-41ca-4075-979f-1fabb0042e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "ffb3a250-98ab-468e-8993-54a8511858e8",
        "cursor": {
          "ref": "8d4f60c0-b37b-4a4d-a0e7-ed8415801a59",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5cd98593-b7a1-4e26-838b-5ecca43fe1bc"
        },
        "item": {
          "id": "ffb3a250-98ab-468e-8993-54a8511858e8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "640f1465-7457-40e5-89ab-080c79052539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "cacef3ab-cd2d-4ecc-a324-ff5bd6bae097",
        "cursor": {
          "ref": "ecf8b59f-02ab-4d6c-85ae-063c000fe9f4",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f7db7681-3fdc-4b02-a686-782c8d3a94fb"
        },
        "item": {
          "id": "cacef3ab-cd2d-4ecc-a324-ff5bd6bae097",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6f9b8e06-e842-4448-9fb1-52566288b46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "9fbe2821-d942-43bb-9d04-043fb3c6c0c8",
        "cursor": {
          "ref": "ac446393-a874-4c84-a1e8-3494b2a17a86",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5f5a4a46-d19a-409c-8030-717e358be8b9"
        },
        "item": {
          "id": "9fbe2821-d942-43bb-9d04-043fb3c6c0c8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3d2ee235-617f-44d9-a670-e87163ff3b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "b2128472-a4aa-4a08-9e59-91749a1d1d52",
        "cursor": {
          "ref": "1e3d1af8-610e-407a-9ab0-9ef46af2f511",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3c6cc1f5-9116-46ac-afc4-f6b4ac677a03"
        },
        "item": {
          "id": "b2128472-a4aa-4a08-9e59-91749a1d1d52",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "73d342c5-dadf-44bb-8f39-362c01cc6dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "9ca2aa43-3494-4a34-bcc8-4068d29335f4",
        "cursor": {
          "ref": "6c92bff5-2694-460f-a8c4-fe7660a62a83",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e0582bfa-fb5c-4cd3-9049-2991626a6879"
        },
        "item": {
          "id": "9ca2aa43-3494-4a34-bcc8-4068d29335f4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ee37ba06-6777-4baf-9013-fcd2af3ac262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "bcaa6905-f6d3-4dfd-9560-4269edb3430c",
        "cursor": {
          "ref": "fb107de2-fdd7-4cb5-bce9-90c47b65d9b1",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "93a7a7bf-6e50-4da1-94eb-bf313ede7f0a"
        },
        "item": {
          "id": "bcaa6905-f6d3-4dfd-9560-4269edb3430c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e943594f-8c95-44b7-b186-ac38c04e486b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "837c7d66-c380-4017-937d-e0e2591dba66",
        "cursor": {
          "ref": "a57d216f-b5a5-475e-bc1a-d07586c6a642",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "741b1cd2-cfa8-4727-aa3d-3699e377f80e"
        },
        "item": {
          "id": "837c7d66-c380-4017-937d-e0e2591dba66",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "428a5fc8-cf55-4118-88ca-ddd16cad2596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3fbb5616-274c-45c6-a2bc-591768d4e9c1",
        "cursor": {
          "ref": "78bf78e2-69a8-47dc-84b7-7b237bb003f2",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8c53db80-cb2e-496a-9785-066488b76995"
        },
        "item": {
          "id": "3fbb5616-274c-45c6-a2bc-591768d4e9c1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "63185fc0-8a03-4a16-afb2-e5f0eac90b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3bc0ea47-0e8f-4ffb-b5e6-942f190f8bb5",
        "cursor": {
          "ref": "eff65bee-c3f4-4d4f-87c0-a15d98d75b53",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3db5d10e-43ed-4524-8647-6cbd666d68ce"
        },
        "item": {
          "id": "3bc0ea47-0e8f-4ffb-b5e6-942f190f8bb5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9b17714a-979d-47a5-ae21-c47c575db21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4eda93e2-7deb-40f1-83cd-c080395408f1",
        "cursor": {
          "ref": "e32ed2d1-1aa2-4258-ab26-847e3f644146",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "02c35281-5636-4df6-8200-30186b15cf4e"
        },
        "item": {
          "id": "4eda93e2-7deb-40f1-83cd-c080395408f1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "05986d9f-2379-4333-8bb8-6a17b33f147b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6824658d-4a73-4ac2-8d80-86f2b31c0f26",
        "cursor": {
          "ref": "7e7428bb-0236-48e0-b455-892bec2513fa",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "785f57f3-700b-4053-b06d-9da3bc192d42"
        },
        "item": {
          "id": "6824658d-4a73-4ac2-8d80-86f2b31c0f26",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a9bea738-f476-4ce9-920b-132473d6d889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "1948c3ed-d324-4c63-be0d-dd7739a65e83",
        "cursor": {
          "ref": "099af60b-3851-4f5b-9a58-e9debd1afb1b",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "95b363f6-1273-4c0d-a19a-ae3c1e1b165a"
        },
        "item": {
          "id": "1948c3ed-d324-4c63-be0d-dd7739a65e83",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "55aa8aa7-9078-4df7-bfe3-8030f9e0b2f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "92e5d927-31b2-4e1c-9f5f-3dc55beaa8ea",
        "cursor": {
          "ref": "a075d544-b7dd-47a5-af9f-8f2828bb62b4",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5aff5cf5-b94d-4571-a983-0b405ca05669"
        },
        "item": {
          "id": "92e5d927-31b2-4e1c-9f5f-3dc55beaa8ea",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0aef0c00-6383-4ce0-b938-749cdd396f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "f57d9cda-5590-411b-bc6c-68fef0266fe0",
        "cursor": {
          "ref": "de03f5c5-79e5-41ed-80e2-3f3cccd80f31",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "beb4e15e-99c2-438d-b453-165458884f0d"
        },
        "item": {
          "id": "f57d9cda-5590-411b-bc6c-68fef0266fe0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c510e4f0-ac5f-41b4-8adc-279d189bbab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "44af60a0-86b7-419e-801c-358eafd2ce7f",
        "cursor": {
          "ref": "b30a5618-424b-478b-b930-55ca2d7c1848",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "dba33947-3745-4407-95f1-0a4f3005dc23"
        },
        "item": {
          "id": "44af60a0-86b7-419e-801c-358eafd2ce7f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2e8e600d-92bd-436a-9d22-10e8acd4f1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "632bf089-9b2f-4cbd-b727-44133f8c9505",
        "cursor": {
          "ref": "7a7eab02-849d-4972-ba1c-b9daff599e9e",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0d48c144-d98d-40df-a524-62a7b0cc987e"
        },
        "item": {
          "id": "632bf089-9b2f-4cbd-b727-44133f8c9505",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6070ca70-1661-4918-a040-31800b5f31d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "6f311109-38ec-4807-9ba1-31faa783a4f2",
        "cursor": {
          "ref": "7330c970-c1fe-4d97-a48a-cdb61ab34b0b",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c431824e-d7f3-47c6-849d-305502bc124b"
        },
        "item": {
          "id": "6f311109-38ec-4807-9ba1-31faa783a4f2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "dfea034a-2ed6-48a3-b0ec-296ff4824ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "c1a52bd8-8a98-4aaf-82e3-e960fbd0c712",
        "cursor": {
          "ref": "794f63f3-efc5-4e33-a82f-621deae658b9",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "afb1a340-4ea0-4b8d-83f4-488a2cc2dca4"
        },
        "item": {
          "id": "c1a52bd8-8a98-4aaf-82e3-e960fbd0c712",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3e4d70ff-2135-4532-b9ab-8a419fa93d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "9334d7cb-e973-4a06-87d9-703eae2c2e08",
        "cursor": {
          "ref": "d7bbfd14-a0f9-4873-9c78-f69289f3f5ac",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1893a1d4-c354-441d-b5ff-143e8130fdb1"
        },
        "item": {
          "id": "9334d7cb-e973-4a06-87d9-703eae2c2e08",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "88221875-a972-4736-859a-9a7d871e2555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "8cf3927e-bb7e-4897-9871-de8866688994",
        "cursor": {
          "ref": "d1d99dc0-6b21-47ec-b5ee-fc004f115230",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c96189ba-110f-4502-ac11-a052572a14e7"
        },
        "item": {
          "id": "8cf3927e-bb7e-4897-9871-de8866688994",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f3f8a565-b5d7-4f58-a4cd-c4c31b7d3f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "eb8cc302-7346-4650-b162-809ce05a0beb",
        "cursor": {
          "ref": "e2aebc6f-36dc-4232-bef3-1d6b6baf5f8c",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "36ce364e-c475-4ce4-8737-5b9826861979"
        },
        "item": {
          "id": "eb8cc302-7346-4650-b162-809ce05a0beb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8cfe525a-fd47-4dfc-bec6-ebc212ae093b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "27aefd75-3611-4066-b55c-2366324b3ba5",
        "cursor": {
          "ref": "0bf3a3f1-5182-44e1-ae9d-86eb4537ad72",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2605273d-365f-4484-a830-b357b58b8c57"
        },
        "item": {
          "id": "27aefd75-3611-4066-b55c-2366324b3ba5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b2dab7ed-bf72-4596-a274-21f8c254aef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "e315165a-8115-436b-837b-602634bb7c6e",
        "cursor": {
          "ref": "6ec14a1f-11f1-4b96-991c-2816da54bf17",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2492a12b-f391-47dc-bf27-aa312590bada"
        },
        "item": {
          "id": "e315165a-8115-436b-837b-602634bb7c6e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e7ac5c9f-9dc4-4b1e-b52a-7691304ff093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "adee4b06-99df-4a2f-92f3-d12c9062fbbe",
        "cursor": {
          "ref": "dfcdb34d-db0b-41b2-8395-a117587f98ff",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e66336b3-6de1-4ce3-b5c9-d1f837088557"
        },
        "item": {
          "id": "adee4b06-99df-4a2f-92f3-d12c9062fbbe",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8d4b0fb3-e852-4630-abf1-4a1b615651e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "91a8d588-595d-4a63-92de-4b24f364331b",
        "cursor": {
          "ref": "2666938c-1b55-4c13-9fac-3d41b8e897b2",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "21232ab8-13f4-48a5-b042-588fdef5ba27"
        },
        "item": {
          "id": "91a8d588-595d-4a63-92de-4b24f364331b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4fd815e8-1d20-4291-a9e0-a135f9f02d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "58752571-f4e9-4ea3-96d5-37094e73e2af",
        "cursor": {
          "ref": "1703d2e6-3c43-4533-b760-e991b59879f9",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e9e849d2-93eb-4274-8aa2-452759c22c02"
        },
        "item": {
          "id": "58752571-f4e9-4ea3-96d5-37094e73e2af",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "893d1963-fe55-4175-a599-97fe3b13d310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "8e1a5de2-a338-4899-970a-d3c15c07b9a7",
        "cursor": {
          "ref": "490718d2-92f1-461a-8916-26950efa39dc",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3d0e45de-686c-4780-a931-64444cc589bb"
        },
        "item": {
          "id": "8e1a5de2-a338-4899-970a-d3c15c07b9a7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4e2ba17d-6ff9-4a6e-abf0-60be9897e1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "984297b3-c7e7-4e1a-b2df-c1c4643520ad",
        "cursor": {
          "ref": "82a3fae8-d98b-45eb-9cec-f4d71d512d9f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9a410d5c-2282-4e99-844e-93272e7df6a9"
        },
        "item": {
          "id": "984297b3-c7e7-4e1a-b2df-c1c4643520ad",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8a09df8b-a327-405f-8ce1-1df5282f45d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "b9df2645-6dcf-443a-8aaf-8bb53cda1766",
        "cursor": {
          "ref": "2af511ac-074a-41c5-a9b5-a4b2b4f6aebd",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "33816cec-2429-4f16-9731-82e7885d17b4"
        },
        "item": {
          "id": "b9df2645-6dcf-443a-8aaf-8bb53cda1766",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "11a54fc7-537d-4bf1-b223-3c1166390aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "1f471119-d65d-4d20-89bc-9f0416fbe984",
        "cursor": {
          "ref": "530377eb-8568-4f19-a4f9-505f3206eb94",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ce110115-4005-45bb-a341-9b6ac5abd63b"
        },
        "item": {
          "id": "1f471119-d65d-4d20-89bc-9f0416fbe984",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "23cd2754-3760-428c-8921-d640bd89f151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "e460e2c4-9afc-428d-9143-3c67b9fc1e91",
        "cursor": {
          "ref": "d09c06fa-c0f9-4048-8f6a-486ca3a22eee",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3f760dc5-a589-4c37-90c3-4d52dbbc5fb3"
        },
        "item": {
          "id": "e460e2c4-9afc-428d-9143-3c67b9fc1e91",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7cfb731f-124f-4347-a41a-7e9a8d0248ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 214
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "1ba769c3-3e77-4e8e-b987-cee66e377742",
        "cursor": {
          "ref": "93b14552-991e-4a2d-a5c2-ed131e6af6e2",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "446ab969-9981-4208-92c7-a61a7611f31e"
        },
        "item": {
          "id": "1ba769c3-3e77-4e8e-b987-cee66e377742",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7e965027-eae5-4f82-9ddc-c6a8529f812d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "91267c76-47d7-41ef-9a03-e0ee1447bbdb",
        "cursor": {
          "ref": "d249b571-38fa-4fd3-8a97-0b3d16258045",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "aa5754e9-9f39-4d3c-a5ad-4c9fd732af7f"
        },
        "item": {
          "id": "91267c76-47d7-41ef-9a03-e0ee1447bbdb",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6d6e365c-871c-4e61-9791-ebb1d079af4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "580eba35-fdc1-46b0-b109-5f79f6e39756",
        "cursor": {
          "ref": "be59a7cb-a78b-4c06-b565-8ed921937284",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a02fc1d2-c6e2-4a04-9742-e73ac7b0f453"
        },
        "item": {
          "id": "580eba35-fdc1-46b0-b109-5f79f6e39756",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bbff48f7-aeaf-40e0-95de-00bf9bccbe1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "e6088eb3-9f94-4ba4-a669-2ffe23d64e0b",
        "cursor": {
          "ref": "0d8607f7-1b4f-442e-86b3-f9257e4c6270",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0c72d73e-b625-428f-965e-3d521e0e729e"
        },
        "item": {
          "id": "e6088eb3-9f94-4ba4-a669-2ffe23d64e0b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "224b36bb-a71d-445a-9014-25c41984c7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "a324ab55-f18f-4a8a-bf47-5fe5f702bf1f",
        "cursor": {
          "ref": "5c1ade2b-6c9f-42e3-9935-6492a2766a17",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "37ac911b-146d-4635-b331-4cc917986270"
        },
        "item": {
          "id": "a324ab55-f18f-4a8a-bf47-5fe5f702bf1f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "990b60de-cc8a-4eed-a6e8-aa10351cc943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "f0fcf8c0-0e43-4915-81ad-8479808c83dd",
        "cursor": {
          "ref": "64bc06f2-5f8f-483f-856a-efa112914bc6",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "29af11cc-0ebc-4072-9d95-bf4628980103"
        },
        "item": {
          "id": "f0fcf8c0-0e43-4915-81ad-8479808c83dd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2e3fa53e-d07a-4242-a202-ba31b0237757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "02b8ea7e-1607-48ac-b53a-b72f7c98f215",
        "cursor": {
          "ref": "0a0cc434-3046-474d-80d5-aea296f3f53f",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c9fe7c95-ded6-48f7-b823-0d815a806e70"
        },
        "item": {
          "id": "02b8ea7e-1607-48ac-b53a-b72f7c98f215",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f002dd96-5e6d-4461-8cc0-a0fd8c49273f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "8656cb33-49c7-4214-b78d-c377c0313043",
        "cursor": {
          "ref": "76d22067-4801-4445-a20c-484393c1ee3e",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bed7bcc5-8ded-4beb-9925-c5a9ea9e275b"
        },
        "item": {
          "id": "8656cb33-49c7-4214-b78d-c377c0313043",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "980391f8-1e6f-4cdf-98f6-8cd2eddc7b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "ccb9793b-b5f0-47f8-9946-5c3fb6e4620c",
        "cursor": {
          "ref": "00858540-c470-4ecb-a5e1-815165a79506",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2568df5c-1f03-48f3-80b1-4f0a1d2d95ca"
        },
        "item": {
          "id": "ccb9793b-b5f0-47f8-9946-5c3fb6e4620c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5f2df4a8-79a8-4d93-a9a8-137ce2d9d49e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "162a6ef9-6a0e-4a13-8f4e-e0abb11505c1",
        "cursor": {
          "ref": "7b295d25-70d8-48d2-9c06-24634f19b567",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c99d05fe-9108-48a2-b60e-efbf385daa7a"
        },
        "item": {
          "id": "162a6ef9-6a0e-4a13-8f4e-e0abb11505c1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d876022b-04f2-4708-8485-3333bb3ba6e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "41c45994-250d-4899-a479-dceb18cd083b",
        "cursor": {
          "ref": "76efab14-0afd-4a7b-a3a3-f490a3f1e9cd",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "45876217-4e39-4b39-9b34-45167351a6d5"
        },
        "item": {
          "id": "41c45994-250d-4899-a479-dceb18cd083b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f9ee1c1b-a57d-4578-9036-19fb4a7bc9d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "6737f443-75fe-40d0-ad74-ff5ffb9a6f6a",
        "cursor": {
          "ref": "012c64cf-2d81-43e4-b851-733439d676ed",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c72d912e-1f27-436c-9fc8-ae6959569d04"
        },
        "item": {
          "id": "6737f443-75fe-40d0-ad74-ff5ffb9a6f6a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4424d33c-0e5d-448b-93c1-ab93e890f288",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 181,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3447500b-f8d6-4234-9a44-3ecfa2543dc5",
        "cursor": {
          "ref": "0db9064d-4860-44ba-84d0-da2e41c1c1c1",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d8e91118-a5b8-48e7-aea5-7bd928c8b81d"
        },
        "item": {
          "id": "3447500b-f8d6-4234-9a44-3ecfa2543dc5",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "9819d6fb-02be-41f5-89f2-f01f587df336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 637,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "09ad3127-4771-44ed-9d2e-d945484576b3",
        "cursor": {
          "ref": "47d114a3-6d74-4fe6-a153-2de2cb29be1a",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d44140dc-70cd-4989-ac01-feb82b54c9e6"
        },
        "item": {
          "id": "09ad3127-4771-44ed-9d2e-d945484576b3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1edc80ce-2325-4ab6-899f-672c5f6bb6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 423,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "020f89f4-ebd6-4ab8-ade1-dda0edf85fd6",
        "cursor": {
          "ref": "ec447e62-2bcf-4195-b787-5c280d0273dc",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ca22d1c3-8ccc-4128-a8a1-c236291c41a8"
        },
        "item": {
          "id": "020f89f4-ebd6-4ab8-ade1-dda0edf85fd6",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a4019c68-d10d-4e60-a1bd-c59388304e72",
          "status": "Created",
          "code": 201,
          "responseTime": 5778,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "ad1ab743-c53d-4191-aefe-89fa29ab161a",
        "cursor": {
          "ref": "3dbe2043-acbf-4963-9a2e-76f39b5058f5",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2e917461-fbda-487a-ad83-7c43ef8d9dda"
        },
        "item": {
          "id": "ad1ab743-c53d-4191-aefe-89fa29ab161a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "feb2a91e-2697-4939-98f9-f5507d024f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "26c54ee8-3888-4f7e-8ee9-3db82a64376c",
        "cursor": {
          "ref": "1df3319e-3aac-40e5-b44f-8368e2ed4013",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f6c2c363-bec5-4878-a0a3-73640ff4e93c"
        },
        "item": {
          "id": "26c54ee8-3888-4f7e-8ee9-3db82a64376c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8bb7277e-1997-44bb-ada5-ae8b370d0d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "544fdacf-16ff-429a-b37b-0cd5ae857628",
        "cursor": {
          "ref": "8a73b24a-23ce-41d5-8717-82763a884b06",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "01049922-7bd1-4db3-a7f4-b3ad848ecb40"
        },
        "item": {
          "id": "544fdacf-16ff-429a-b37b-0cd5ae857628",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b0b89de3-c330-47a5-ad81-9a3c6d00a10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "92f025b3-452f-4e00-95c6-344ceb816da2",
        "cursor": {
          "ref": "2b488cfc-f89e-44a1-a374-c561926d20cf",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7d1284b2-9b7b-4dfe-8a5f-e50d2eb9a4d6"
        },
        "item": {
          "id": "92f025b3-452f-4e00-95c6-344ceb816da2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ab1f2c14-23be-4486-8a5c-d6a534e0b4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "66c76ae0-36d6-4741-a679-44ec129b9e9e",
        "cursor": {
          "ref": "be7e32f7-df60-4ede-86ee-f1f6d561baa9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "30922a5d-4236-447d-a857-3d1cc160afa3"
        },
        "item": {
          "id": "66c76ae0-36d6-4741-a679-44ec129b9e9e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e89b8a14-1eb3-4c0e-accd-80dcdea49cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "66c76ae0-36d6-4741-a679-44ec129b9e9e",
        "cursor": {
          "ref": "be7e32f7-df60-4ede-86ee-f1f6d561baa9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "30922a5d-4236-447d-a857-3d1cc160afa3"
        },
        "item": {
          "id": "66c76ae0-36d6-4741-a679-44ec129b9e9e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e89b8a14-1eb3-4c0e-accd-80dcdea49cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "84446c5d-fc48-462c-87ce-53f68210b319",
        "cursor": {
          "ref": "022debc3-1f54-43b5-a6bb-894d812c943c",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0d686086-161c-487a-8b1e-e3ccb41d9274"
        },
        "item": {
          "id": "84446c5d-fc48-462c-87ce-53f68210b319",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "077c974b-1f1e-4bc2-9746-1ecac5f4d1a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "a9426d7f-fa00-47b5-b16f-78f6dae9d97b",
        "cursor": {
          "ref": "01fb612f-9f1f-435f-8d15-798a01d96369",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "88baabd5-6cc8-466e-aa47-f8ce2c1c5abe"
        },
        "item": {
          "id": "a9426d7f-fa00-47b5-b16f-78f6dae9d97b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5b2ea0a2-4b33-4ba4-9169-397a9ce54a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "aef05633-697b-4d16-8feb-7c5e23200d20",
        "cursor": {
          "ref": "52be33af-604c-4d47-8a0e-49dc585ce65f",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b5215389-4c3d-43b0-b647-d3c936c6f9ce"
        },
        "item": {
          "id": "aef05633-697b-4d16-8feb-7c5e23200d20",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0de921d4-226e-417b-9346-6aa1344c7128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "74de13a1-aea4-4dd4-a6a8-d903e6b406c1",
        "cursor": {
          "ref": "24cdd632-27f9-4d38-b9b6-249acd95a659",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "48ba54ba-c73d-4f88-bfcb-037ff0be22c1"
        },
        "item": {
          "id": "74de13a1-aea4-4dd4-a6a8-d903e6b406c1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "57cd3ab5-eea1-4e28-826c-277513671b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "fe6aa7c9-a93b-46e4-a0c7-cd2826d91ff4",
        "cursor": {
          "ref": "da59b471-2e01-49ed-a975-da1d05290f45",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "dda97dd3-0b3a-4ce0-b978-83e612d850fd"
        },
        "item": {
          "id": "fe6aa7c9-a93b-46e4-a0c7-cd2826d91ff4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e56a9893-4494-44ba-80e1-58206346cd83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "c1b2b4ab-a610-408d-b294-6930ef774e42",
        "cursor": {
          "ref": "0fb25253-7135-4994-bfd6-098fb06bbcbf",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d2c858fc-778f-49bb-99dc-1a711a562416"
        },
        "item": {
          "id": "c1b2b4ab-a610-408d-b294-6930ef774e42",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "08733288-5923-4721-be9d-d2811eed7fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "8dbca222-4c4c-4cc7-be16-2c905dce76c9",
        "cursor": {
          "ref": "4c95bae6-2c4d-4c67-968a-76b72c19534c",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f1e0d69f-27e8-4344-b53c-e9e6fd33c870"
        },
        "item": {
          "id": "8dbca222-4c4c-4cc7-be16-2c905dce76c9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "90e7e8b3-d3f1-4467-90ee-0c10bdaa2d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "61a757db-c63a-4ed1-bbb1-7021295d795e",
        "cursor": {
          "ref": "f0a78687-1f25-48f8-90c9-80f37c45ac04",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8421a671-7363-4234-a6b4-6bb2d52fd0ba"
        },
        "item": {
          "id": "61a757db-c63a-4ed1-bbb1-7021295d795e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "68d18576-3beb-43fc-8f83-9697a42c08cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "c72682da-04a8-40ef-bc50-86518a2836d4",
        "cursor": {
          "ref": "34b5abaf-8abf-48a8-8285-dbcee52fe632",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "954702ec-e9d6-4e04-aeab-9d71b053119b"
        },
        "item": {
          "id": "c72682da-04a8-40ef-bc50-86518a2836d4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "982e6d71-bfaf-40e1-9d9c-9eedec998183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "a1a51fb0-b6b1-4eb8-8fa0-a960c05e5d4e",
        "cursor": {
          "ref": "bb274198-be60-4a09-86a4-6a813bcd5d95",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f7ab5c19-90b6-4a57-bee2-e421c576819b"
        },
        "item": {
          "id": "a1a51fb0-b6b1-4eb8-8fa0-a960c05e5d4e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c07c6e93-fe1b-4a58-ab5a-cbfc46968031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "54bcabf4-b13d-4c55-aa8b-11a94484b968",
        "cursor": {
          "ref": "d03b2802-e540-4943-991d-7d18ffef4219",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "fcb71288-8058-4036-9b93-bd0535744e6a"
        },
        "item": {
          "id": "54bcabf4-b13d-4c55-aa8b-11a94484b968",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "444e53d4-61c6-4785-8d6d-1a7a0c4b356e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "255c7239-1818-48e2-99c7-f4c4fb24892f",
        "cursor": {
          "ref": "348b9b13-4bac-45a6-a045-4216cbbb7e71",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "57441670-a675-4534-a0c8-0c7e7097c70c"
        },
        "item": {
          "id": "255c7239-1818-48e2-99c7-f4c4fb24892f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0c6b6435-f864-413e-97a8-a8b2488d6df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3d166259-7d0d-4f3c-b8ed-ec1a3f785846",
        "cursor": {
          "ref": "3a4fe89d-4a14-485a-ad90-bea8c646ceb8",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e1ca6fea-fa05-4a10-bdde-09e803afe523"
        },
        "item": {
          "id": "3d166259-7d0d-4f3c-b8ed-ec1a3f785846",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3e72955d-f5db-4185-942e-11bb18846bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "804cc51a-2ae4-49c7-8a7b-5d57e82420f5",
        "cursor": {
          "ref": "3807e42d-d105-461c-bd61-232e01ffa38d",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "dabd62bd-2195-4d84-b3ed-fb16b8eb5848"
        },
        "item": {
          "id": "804cc51a-2ae4-49c7-8a7b-5d57e82420f5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5a5b3b7e-fc0d-418c-b2f9-43dcd28bc28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3f7152d6-e91b-4bfb-a725-b852dcbb6ca4",
        "cursor": {
          "ref": "8abe26e4-d300-424d-8395-86b9996c21a0",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1b440765-35c9-4e37-ba83-1de956f7e4da"
        },
        "item": {
          "id": "3f7152d6-e91b-4bfb-a725-b852dcbb6ca4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a75062dd-c8e6-4d27-91ce-3b8d581782c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "57d4c5c6-72b7-4097-8f6d-5af54ae299d3",
        "cursor": {
          "ref": "38b2d20d-7418-4672-a0ec-6efae329a158",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e4ddcbcf-cf68-400e-b741-7108bd91a68c"
        },
        "item": {
          "id": "57d4c5c6-72b7-4097-8f6d-5af54ae299d3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "906cf4d1-03e6-49b4-9c9a-8317260a0904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "05e94cec-1614-43e3-83e9-28a3fdc108f3",
        "cursor": {
          "ref": "72cf3507-be30-4da0-a1c7-12d55d7801f2",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2c55b5a1-eb60-4572-a3d4-6e74ecfc4e95"
        },
        "item": {
          "id": "05e94cec-1614-43e3-83e9-28a3fdc108f3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "13bbc42d-d54a-4aac-9a9d-7466f0b1c3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "497521f6-60f8-48aa-8b0f-a2847d25d5af",
        "cursor": {
          "ref": "c0908301-c748-47d3-9db8-89935f8432a8",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9d99c95c-dda5-49be-9958-808e6c633ba0"
        },
        "item": {
          "id": "497521f6-60f8-48aa-8b0f-a2847d25d5af",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2ffae506-4cf5-4965-af48-597eeebde84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "778c8274-8269-4a4c-8236-837644a21c66",
        "cursor": {
          "ref": "06c6c075-5b86-4277-9348-7dde13c5bba5",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e91b3b71-55be-47e9-b6f3-980fb3cf6d49"
        },
        "item": {
          "id": "778c8274-8269-4a4c-8236-837644a21c66",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "27a2e676-44f9-40b4-9c4f-3171b3b9c467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "d1b7a993-f22a-4bcf-9e68-86ef493d67d8",
        "cursor": {
          "ref": "8f14b90f-b579-4843-a317-760c6387b557",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a90b809a-954b-40bb-80bc-0b5c103ad5be"
        },
        "item": {
          "id": "d1b7a993-f22a-4bcf-9e68-86ef493d67d8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "18ee83c6-eb8b-4c5c-a11a-f83d1af06d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "5d595498-e634-4dcb-987b-207b6b3852da",
        "cursor": {
          "ref": "f8a8ba23-b39d-468d-9797-ce02737628f0",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fe0e0554-5fa1-47f0-bc33-35c11bbaddc0"
        },
        "item": {
          "id": "5d595498-e634-4dcb-987b-207b6b3852da",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "deebaee6-59d7-45cd-944a-321aab0c9606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "313e1c99-cd22-4336-b671-6857b13d4b5f",
        "cursor": {
          "ref": "bd614b11-8d22-4905-9565-4736f7758c37",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2d1a264e-f7ae-458f-93ae-7481a58bf42b"
        },
        "item": {
          "id": "313e1c99-cd22-4336-b671-6857b13d4b5f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fe90dcf3-cce6-497d-b65a-977afe453ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "bcde7348-9fe5-46b9-ad91-b16678ca398c",
        "cursor": {
          "ref": "d547543d-2470-4334-a098-72ae13f7f190",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fef49d65-c02a-42ae-8991-d2a15d95aeaf"
        },
        "item": {
          "id": "bcde7348-9fe5-46b9-ad91-b16678ca398c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ef0f7142-d742-46c1-bcfe-09a9c9d0f3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "89bda36b-287e-4519-84de-ed2644b952e6",
        "cursor": {
          "ref": "5aa2267c-212d-45bd-bbe8-50e4586ede2f",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1f1ece4a-b734-4bb0-879e-ca388d608810"
        },
        "item": {
          "id": "89bda36b-287e-4519-84de-ed2644b952e6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ec362957-2eba-46b4-9334-b3dbf64bdbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "1684d697-eaab-4b7a-94db-56717a958285",
        "cursor": {
          "ref": "64a68f3d-0d20-4801-9910-e7022608c285",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "03423e43-d2d2-4f83-8ff9-4d194e31f2d4"
        },
        "item": {
          "id": "1684d697-eaab-4b7a-94db-56717a958285",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f35e4fad-ebeb-4797-80ce-e11d522cad28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "3d153c5d-5283-4e24-b72a-2391b0642af2",
        "cursor": {
          "ref": "cf379374-8015-4eaf-95cb-770df5fff722",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "336492dd-9c32-4a01-9fbd-6f829c53e381"
        },
        "item": {
          "id": "3d153c5d-5283-4e24-b72a-2391b0642af2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "83d580b0-a7bf-4364-99ce-e541f64ea22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "88c3bd66-eb10-4495-be6b-7f39c2b1f22d",
        "cursor": {
          "ref": "ca004160-cb34-488e-899a-408b436e8269",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4e690c22-7f92-4860-a91e-4f6777ec0a92"
        },
        "item": {
          "id": "88c3bd66-eb10-4495-be6b-7f39c2b1f22d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a237c818-9aa2-48f0-b104-3d295a39b778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "e5ee5595-9452-4bdb-b807-ceadac73a562",
        "cursor": {
          "ref": "c56f1c4c-e20f-430c-ab14-4b10d2011818",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "660299c9-386c-4634-8eaa-57589671f03e"
        },
        "item": {
          "id": "e5ee5595-9452-4bdb-b807-ceadac73a562",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a9715387-ae35-4a54-a712-e4a9e2341c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "40b2bd09-550e-46ea-811c-d18893203f3a",
        "cursor": {
          "ref": "2d753931-3f65-4253-ac9f-cc97b0ac5c09",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bbf217d9-aa0a-4085-a901-1aae597a1d60"
        },
        "item": {
          "id": "40b2bd09-550e-46ea-811c-d18893203f3a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dd59f2d9-bb52-4fbc-8b98-bbd429a9ddfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "d495b873-65fe-4588-8a7f-9a44d75cfdb0",
        "cursor": {
          "ref": "4f4b197d-be9d-4e33-a98a-86728ac723d1",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4cbe8792-4511-4a0b-8608-85d3d4444f5f"
        },
        "item": {
          "id": "d495b873-65fe-4588-8a7f-9a44d75cfdb0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0399fd1a-45c4-4918-97f3-c241d77cdc25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "59ad7f7b-06e6-47e1-bf61-ab40c5b8484c",
        "cursor": {
          "ref": "cd97b475-ac53-4878-9334-6dd0916a2050",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e884ca1a-cbf9-4a66-b1de-7d2dbbd06b66"
        },
        "item": {
          "id": "59ad7f7b-06e6-47e1-bf61-ab40c5b8484c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "59d64b87-aece-4991-bc9a-ff2be86ab56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "e81f1018-27b3-4b4f-8500-08752fdf93ae",
        "cursor": {
          "ref": "7f9eb18f-d8f1-4847-b73f-0291c95bebf1",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a2f4483f-8eda-4211-9692-e162160710dd"
        },
        "item": {
          "id": "e81f1018-27b3-4b4f-8500-08752fdf93ae",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "747248b1-1bb3-4aeb-8491-ce11c15bb98f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "d538a167-9248-4bb6-ac7c-5102b6f54f13",
        "cursor": {
          "ref": "7c657790-c193-4b62-8552-91a3c3ef1d20",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bc679d45-db1c-4f49-9ff1-6ba8faa8cf22"
        },
        "item": {
          "id": "d538a167-9248-4bb6-ac7c-5102b6f54f13",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d2588d93-b96f-4271-afbd-0ae043f3c665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "0164346d-b8ff-4b23-aede-a4a78d1466a1",
        "cursor": {
          "ref": "31b8c30c-eb63-4282-9ef2-d41572782269",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9d32a31a-2b3e-4a81-9baf-e1cb20069997"
        },
        "item": {
          "id": "0164346d-b8ff-4b23-aede-a4a78d1466a1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9dfce225-709a-4989-8a9b-f50f3d0f3e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "0164346d-b8ff-4b23-aede-a4a78d1466a1",
        "cursor": {
          "ref": "31b8c30c-eb63-4282-9ef2-d41572782269",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9d32a31a-2b3e-4a81-9baf-e1cb20069997"
        },
        "item": {
          "id": "0164346d-b8ff-4b23-aede-a4a78d1466a1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9dfce225-709a-4989-8a9b-f50f3d0f3e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "af843c63-ad4b-4821-8368-8c9628af4ca2",
        "cursor": {
          "ref": "a9953bfa-000d-4602-96fa-d524ede1000a",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "47ea7c6d-25d9-4e5b-9d49-48e10a63b8a4"
        },
        "item": {
          "id": "af843c63-ad4b-4821-8368-8c9628af4ca2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "85b3bb4c-4117-4c36-98c2-7d7770893e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "5aee3930-6a42-409e-adbd-cb1923a39bf4",
        "cursor": {
          "ref": "17247e4c-2260-417d-a032-66650bad3d88",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "12fa82d0-5553-415e-911a-b68767b8b3ba"
        },
        "item": {
          "id": "5aee3930-6a42-409e-adbd-cb1923a39bf4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c5d24bb7-4959-4813-b813-53419a3dcfd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "4ec9413a-40b5-4c0c-8bc5-b0759c2a3580",
        "cursor": {
          "ref": "1745edcb-c0cf-4125-b6a1-136ed1f4d20a",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a1e94a2f-8d60-41f9-af01-c0fd6ee34fe8"
        },
        "item": {
          "id": "4ec9413a-40b5-4c0c-8bc5-b0759c2a3580",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e88cc8b1-889c-4d9c-91d5-0c2db626dc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "e86817c7-0f8b-4fa8-95ab-8fa1dca7b03e",
        "cursor": {
          "ref": "b922fe74-908f-46d0-b28c-139a6f100f56",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0cdf10d1-f978-46da-b467-b85eccfcc5bd"
        },
        "item": {
          "id": "e86817c7-0f8b-4fa8-95ab-8fa1dca7b03e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "744fd9d6-f5a3-483f-a02b-ee16af5543a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "006771e4-ed9e-4a7e-a71a-9dc181c0ffd5",
        "cursor": {
          "ref": "c423fd37-2336-4baa-b990-90bf24f769f1",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "278a7aa9-8492-4076-afe4-62583ab6e24a"
        },
        "item": {
          "id": "006771e4-ed9e-4a7e-a71a-9dc181c0ffd5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "22afb0e8-b88e-4195-9430-995c73d49ef5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "05eb1079-4a1c-462c-a526-a3cc8e01f4f4",
        "cursor": {
          "ref": "d3b8b2bb-95ae-4778-938b-78e04d0ce08a",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "aed0d62c-b7fd-4215-9528-8e21dd9e677b"
        },
        "item": {
          "id": "05eb1079-4a1c-462c-a526-a3cc8e01f4f4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c5fe1bd8-df5d-4adb-9bf7-0aac9952f051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "5fbd5a94-6fab-4635-802b-2b87db299495",
        "cursor": {
          "ref": "ab5d5311-1d10-42cc-a712-00c18eba1e8f",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "55d4d45c-c61d-484a-9727-e4e43635a1d9"
        },
        "item": {
          "id": "5fbd5a94-6fab-4635-802b-2b87db299495",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ca7f2589-02af-4624-850e-810633c6b483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "a3791bdc-4d39-4417-b455-f95ca4600ed7",
        "cursor": {
          "ref": "1ab50655-57e3-4a12-9548-14f935a330c0",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "843e7e3e-eb0c-424d-b5e9-59562b41eecc"
        },
        "item": {
          "id": "a3791bdc-4d39-4417-b455-f95ca4600ed7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3dc5c2be-2ff4-4c8f-9081-3d0f8f065e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "c2a99585-724e-461e-bcc2-91b583ff899f",
        "cursor": {
          "ref": "40074f3f-c2ee-432c-ab7e-00a28ab8a981",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "32c2c4cd-9599-4d28-90fb-b3e2f1a0c66f"
        },
        "item": {
          "id": "c2a99585-724e-461e-bcc2-91b583ff899f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "114b089d-1f0d-4542-afc4-bab52dcddc9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "a9bc4677-3abb-45fa-9831-98b23b09bd87",
        "cursor": {
          "ref": "7b16110f-cf07-4452-bd9d-ef99141b0251",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "303dcd54-54c7-4cea-bae5-174bde112319"
        },
        "item": {
          "id": "a9bc4677-3abb-45fa-9831-98b23b09bd87",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f48239e3-7beb-498d-aa99-1c05e5007cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "48223268-9072-4999-9e39-b3df20683f9b",
        "cursor": {
          "ref": "11f104ad-7740-4bd7-ab1c-a5e84b0fc359",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "93669738-3a43-41b2-b831-a244a316d6c9"
        },
        "item": {
          "id": "48223268-9072-4999-9e39-b3df20683f9b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ff9b684f-0d23-4751-bb36-d1515c19a24f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "3e827467-f5a7-4b92-800c-53ceb96cd648",
        "cursor": {
          "ref": "30ef66b1-8a4d-4f4d-a1db-9680c9c6dd36",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c124acfc-b979-421f-9ff7-f873464bb3da"
        },
        "item": {
          "id": "3e827467-f5a7-4b92-800c-53ceb96cd648",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8717571d-6081-4a4f-a316-1c4548b0bbaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "e6bcca1a-a800-481c-9311-56e9ad432f94",
        "cursor": {
          "ref": "fe42a599-77b6-4b1b-b535-ae5dce093cd6",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "61ef03f9-661a-481f-aff0-4db97a7d9f3e"
        },
        "item": {
          "id": "e6bcca1a-a800-481c-9311-56e9ad432f94",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bcac17da-d0ee-4a4a-8c38-1663a017156c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "fc019a62-53fd-4ec1-be66-1e0ffc61d41c",
        "cursor": {
          "ref": "55b3b356-c350-446b-9bda-7fbd7fce584b",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "58c7df6f-5b93-43c6-a923-00823daadac8"
        },
        "item": {
          "id": "fc019a62-53fd-4ec1-be66-1e0ffc61d41c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "66b0cf81-5a95-43e4-b226-638f0454763f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "e0737580-3420-40e9-969c-4f6fea526dfa",
        "cursor": {
          "ref": "5a1ce272-e2ad-47eb-8618-8f0dbb1a2f1b",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3e4eeec8-6ce1-43f6-944f-d35a424e2aa9"
        },
        "item": {
          "id": "e0737580-3420-40e9-969c-4f6fea526dfa",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cc82cedc-fe2a-4043-9159-943a1fbf72a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "2ac3cab2-6f15-4648-b10c-ab6ed6ceb652",
        "cursor": {
          "ref": "bf25173b-a4c6-4bd2-82e5-236df4e26fe0",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8fb5f27a-9760-470c-9331-ed69d0729ee0"
        },
        "item": {
          "id": "2ac3cab2-6f15-4648-b10c-ab6ed6ceb652",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cb871628-2e11-4ee7-a465-1e8ead3885cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "78ea66ab-9984-4f14-a746-a8381fab555c",
        "cursor": {
          "ref": "1cb73d26-103d-4645-ab3f-dfdab40e92c9",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f323dcf8-79cf-4020-894a-24d65ede5c89"
        },
        "item": {
          "id": "78ea66ab-9984-4f14-a746-a8381fab555c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fa6acf31-f0a7-4157-bcf9-b013b9c6ff95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3769,
          "responseSize": 1630
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "ee563cbe-53e9-40f1-a086-d17dd22c8da5",
        "cursor": {
          "ref": "20ef0900-4ab3-49d8-9555-2e51f51bf58a",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e3343e26-40e9-4eff-a072-a8d3da83ae3f"
        },
        "item": {
          "id": "ee563cbe-53e9-40f1-a086-d17dd22c8da5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2749ccf2-4f32-4767-af44-b39bd8eb4539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3542,
          "responseSize": 1586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f7845a59-6cf5-45e4-be0f-a938296fca67",
        "cursor": {
          "ref": "f233a629-0c9d-45dd-9461-d9146107008d",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "729881ce-b19a-4c58-a171-7e6b763423b9"
        },
        "item": {
          "id": "f7845a59-6cf5-45e4-be0f-a938296fca67",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "74b534c7-08b8-4be5-814d-535c172a846e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2526,
          "responseSize": 1584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "4106a520-e0f4-475a-b25f-f94e8f25e2f2",
        "cursor": {
          "ref": "18d1138e-fdf8-4a42-a3c5-79c1ab1ae327",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e7c9cace-8885-4c1e-94ef-251e40352481"
        },
        "item": {
          "id": "4106a520-e0f4-475a-b25f-f94e8f25e2f2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1f69e764-b4a1-4f77-958d-492a72111a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "e6361881-c1ab-4386-ae7c-59f48b639830",
        "cursor": {
          "ref": "1c8369ec-4092-4fc0-919e-bcd367ba0f5c",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ca27a258-deee-4ab4-91d4-293f75d1fbc8"
        },
        "item": {
          "id": "e6361881-c1ab-4386-ae7c-59f48b639830",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3cfc432c-f1fb-412c-98eb-5877b5a3604c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4079,
          "responseSize": 1636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "0d241f78-0b1e-4bd1-9fc2-a31d47bec1e5",
        "cursor": {
          "ref": "246f1a02-7fb3-48b2-9c13-031b313eb6d4",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4b278b73-6d31-4784-a411-7666454be66a"
        },
        "item": {
          "id": "0d241f78-0b1e-4bd1-9fc2-a31d47bec1e5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "15092895-e22a-43ab-8c59-ac2662fdcefa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "8f4efcdd-b7b6-4333-9b43-62dc3e4456f5",
        "cursor": {
          "ref": "fc8c6afd-7e45-48a3-bf33-b538ccbb70ac",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "06a238db-c441-4040-9405-b2ddd1a79403"
        },
        "item": {
          "id": "8f4efcdd-b7b6-4333-9b43-62dc3e4456f5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ec8f8522-127f-4966-946b-1a3a252ee1fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "1ae4d6e9-d71c-4ef1-bf5d-918f789af025",
        "cursor": {
          "ref": "1a7a802e-ff59-465a-a90c-6f2f100099e9",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4b3065b6-e3f8-41a6-a244-03211de35d43"
        },
        "item": {
          "id": "1ae4d6e9-d71c-4ef1-bf5d-918f789af025",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2acc8d30-088e-43f8-bf8a-3a4c58e9819e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "c0daff5e-5297-4e28-9063-61564df86841",
        "cursor": {
          "ref": "50d7d9f8-0f5e-4162-b11b-4a37f53404a5",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ab5d2f84-4a73-40df-b0c5-3c1a934f711c"
        },
        "item": {
          "id": "c0daff5e-5297-4e28-9063-61564df86841",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "058a9467-ca55-4392-915c-50929edb95bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "fbaae40e-e305-44f2-a1a4-b198e77ef727",
        "cursor": {
          "ref": "972ef84d-57af-4aa3-919f-36f4952c9dbf",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2d350787-2200-4fc6-85d4-9333a6085cc3"
        },
        "item": {
          "id": "fbaae40e-e305-44f2-a1a4-b198e77ef727",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d55e4d90-eec1-49ce-bff3-41a4b2e47d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "1f888cc3-d69f-4686-8ab6-e75915ee059b",
        "cursor": {
          "ref": "16446f3b-27ae-46b3-9738-0955e86456aa",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ba643c56-4283-42ae-ab5b-883916000ae3"
        },
        "item": {
          "id": "1f888cc3-d69f-4686-8ab6-e75915ee059b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e1d30079-206d-406b-b8fe-265d7a606777",
          "status": "OK",
          "code": 200,
          "responseTime": 2574,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "4f21f470-8a97-4d89-94a2-389df069a9b6",
        "cursor": {
          "ref": "6499e3c4-31b1-4184-b16e-a1104ecdcfc8",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4b782de1-94ce-4661-80f7-c0ab9df73d0e"
        },
        "item": {
          "id": "4f21f470-8a97-4d89-94a2-389df069a9b6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bad5a8dd-30be-486a-a8ff-7ff684216088",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "76cfad74-59c9-44ed-9420-a143703a5036",
        "cursor": {
          "ref": "ab531371-5f7c-434b-8213-94ecfeb71b5b",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1aa5a916-2de6-4d6d-91aa-b529e863a217"
        },
        "item": {
          "id": "76cfad74-59c9-44ed-9420-a143703a5036",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "937a54d0-893d-493d-8f9b-460184a8b2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "5a007d16-9ceb-402a-8238-849690786126",
        "cursor": {
          "ref": "98203a5a-3c9b-4d00-911d-27d57104db29",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dc5ba7f2-d2c5-48fb-9e90-a5126e404a96"
        },
        "item": {
          "id": "5a007d16-9ceb-402a-8238-849690786126",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "530da5af-0363-4312-8de8-6b121b131d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "58b1a8ca-e7dd-4c7e-8e4d-f736439eb7b3",
        "cursor": {
          "ref": "600f875a-091f-4598-9e50-60d1c3572d8b",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0a3523d9-c7e9-4fc8-a1cc-cfb40a25041c"
        },
        "item": {
          "id": "58b1a8ca-e7dd-4c7e-8e4d-f736439eb7b3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "065a6ea2-0d57-416d-bb09-f3d93d66955e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "6ce7e43a-0e7f-4c99-b4d5-f0bae7ae5f01",
        "cursor": {
          "ref": "9b490096-ced6-495b-a50f-1869f72543d7",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4e4b294d-119d-4db6-aa36-fffa1a3e8dc0"
        },
        "item": {
          "id": "6ce7e43a-0e7f-4c99-b4d5-f0bae7ae5f01",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "763b5f80-1093-492a-ba09-726827430374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "2d0f816a-47a0-4151-a264-d7198c772b9b",
        "cursor": {
          "ref": "189251eb-a7a8-4961-8df6-bc2e9ce1e4a3",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "386ab069-8a43-4838-9cae-4906b7ea386e"
        },
        "item": {
          "id": "2d0f816a-47a0-4151-a264-d7198c772b9b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d7ec953a-a572-4cff-90be-aaf6594759e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "355c3dd1-4c20-4ef8-a4ec-1c5da3b3de44",
        "cursor": {
          "ref": "b37c23a5-8f4e-42a4-b0ab-28bf1726e66d",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "32727b8c-4009-4b54-a4ef-a4d7f0e9b0f8"
        },
        "item": {
          "id": "355c3dd1-4c20-4ef8-a4ec-1c5da3b3de44",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "97e73096-9b26-48b5-8574-ae2690b80b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "c32e24db-f99d-4439-933c-fce55f48d4ca",
        "cursor": {
          "ref": "5c7bc507-44db-4261-9693-dcd82dd7e1a9",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "efbf5700-6820-4eda-b656-854de0e28d91"
        },
        "item": {
          "id": "c32e24db-f99d-4439-933c-fce55f48d4ca",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4e229d66-7606-4313-b72b-97b2b2f4d020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "919e537e-362f-4435-9794-b8e8f103fe99",
        "cursor": {
          "ref": "2206177a-b7cc-45cf-aeec-d3829a91b73c",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8f5268bb-3c11-40b2-98cf-a61e69f40aa9"
        },
        "item": {
          "id": "919e537e-362f-4435-9794-b8e8f103fe99",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "29fb82cd-4beb-4d59-b0af-db9aacdf3c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "f976c43c-1b8b-4998-a376-ca662fcd731f",
        "cursor": {
          "ref": "f4a46a00-6630-437a-970d-1da1b3a45a4c",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6d9c7809-6b36-4f81-bbf3-3889c21bdf61"
        },
        "item": {
          "id": "f976c43c-1b8b-4998-a376-ca662fcd731f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a59c92bb-97a8-4a22-a4b8-f4512e3a8736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "ccc7ab42-9c7b-4eca-893e-068182ae1a83",
        "cursor": {
          "ref": "226eae52-cd22-47dc-97c0-41ab981bceb5",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "61232ddd-33d3-41f3-98a2-499d5a115089"
        },
        "item": {
          "id": "ccc7ab42-9c7b-4eca-893e-068182ae1a83",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6ad20c8f-f925-4923-ae15-fb0115b9c6a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e08c1a92-52f7-4d00-b8e4-80c8650f9694",
        "cursor": {
          "ref": "dc067e19-ef0c-4429-86f5-3f24077bc854",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4499b54a-0d8a-457c-ba48-594ed2372ba5"
        },
        "item": {
          "id": "e08c1a92-52f7-4d00-b8e4-80c8650f9694",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "67e5d1a3-7437-49e6-9590-5ad9b52638b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "c74b010c-398c-4d25-a7ea-d16f2c76bcab",
        "cursor": {
          "ref": "70b9a03a-2dde-4bf7-9623-c402fd3157ed",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fd24a5e1-2802-4a5c-a54f-244b278fde02"
        },
        "item": {
          "id": "c74b010c-398c-4d25-a7ea-d16f2c76bcab",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e16c9039-fffd-4796-b781-f5b56020a33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3f05ec38-93b3-4244-8acf-675ba4fecd7e",
        "cursor": {
          "ref": "3f174a45-1edc-4f21-aad6-efeafde73e92",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b616c1a1-5d38-4384-b824-462cbcad7cfa"
        },
        "item": {
          "id": "3f05ec38-93b3-4244-8acf-675ba4fecd7e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8b698440-3e05-4614-bcd1-13cdf9bfbd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "768abe1e-bcf7-43ec-8471-c1093642c581",
        "cursor": {
          "ref": "36bd7253-c726-4e56-90b7-f39fbda25e47",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3804d10a-8159-42f8-acbc-ed2ad256737d"
        },
        "item": {
          "id": "768abe1e-bcf7-43ec-8471-c1093642c581",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b41e6e44-79d2-4d2d-aacd-a148bb19169a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "59776504-cb65-4cb9-9a80-b71a407a934e",
        "cursor": {
          "ref": "39d015ec-1c46-4cdc-998e-faa2d3e7edcf",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "22c79008-72f8-4ae9-ae80-20a02453c83e"
        },
        "item": {
          "id": "59776504-cb65-4cb9-9a80-b71a407a934e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4fa3c449-8af5-4ad3-8af3-75d3900af5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "8f83f3e9-1159-4d3b-b23c-9b195758b6dd",
        "cursor": {
          "ref": "e01f4b91-628e-4c7e-9f75-177fafa7c217",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "227143cf-e188-48e1-b093-14ce6a1520a9"
        },
        "item": {
          "id": "8f83f3e9-1159-4d3b-b23c-9b195758b6dd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f2081e38-334c-4269-bdbb-3c1c2ee6677d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "d8f6fe8a-327a-4751-96f8-5b9876be7246",
        "cursor": {
          "ref": "601cdcda-ffee-4c36-87b8-d3b97ece1ac6",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "090b93cc-63f2-4bd8-a80a-ad946f9dc5f6"
        },
        "item": {
          "id": "d8f6fe8a-327a-4751-96f8-5b9876be7246",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5b4d6465-05cd-4abc-b730-fe20a34df57c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "dc2b25ad-9f3a-4139-ac45-541cc6e55331",
        "cursor": {
          "ref": "3ebe38cf-a5ed-40e0-8a02-9dd9783eed3d",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d21e08a9-9d62-4471-a302-e1a1472aaa77"
        },
        "item": {
          "id": "dc2b25ad-9f3a-4139-ac45-541cc6e55331",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5d7a85b4-c7e5-49c9-a531-c102fc6ba80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "4e60cc7d-738a-4aaf-90ed-49a197b02c6e",
        "cursor": {
          "ref": "3f5b4200-eb5b-42f0-93d3-a4a45a392d8c",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3d533108-b67e-4418-90bf-3307dbe07c72"
        },
        "item": {
          "id": "4e60cc7d-738a-4aaf-90ed-49a197b02c6e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "83211676-7a73-4a77-8d3e-b36dba8bed7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "b80126db-86e2-4da4-a625-3cc6d72dd106",
        "cursor": {
          "ref": "99a90a44-7297-48dd-bc60-9a48a62ca2a6",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "51860069-7150-4ebd-9e7a-a2045579ebd0"
        },
        "item": {
          "id": "b80126db-86e2-4da4-a625-3cc6d72dd106",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "86f9d077-9ad9-4620-abaf-5793f5695cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "4cdad1f5-20dd-42dd-a7a0-23648ba42b0c",
        "cursor": {
          "ref": "3d3eb2f3-ac7c-416f-847d-a453ff0f3332",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "79c52328-d7d1-4b73-b759-17b6ec0d8185"
        },
        "item": {
          "id": "4cdad1f5-20dd-42dd-a7a0-23648ba42b0c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "75e7e72d-d852-4814-9ab1-615d1cb063d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "e38f6b8f-9ddb-4d02-a80b-ca6271059087",
        "cursor": {
          "ref": "b1627780-01df-4d2d-abbe-50179befe55e",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c86c980f-c611-4500-900e-de1f85b114d5"
        },
        "item": {
          "id": "e38f6b8f-9ddb-4d02-a80b-ca6271059087",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fbf11bb1-9cff-460f-9204-076266f12670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "35b3b738-a956-4b0f-8aed-144aa071de19",
        "cursor": {
          "ref": "287712ad-3315-4681-a3ce-68ac213c0fd2",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "41d93a1b-aeb0-45dc-bab5-750aaad87a2d"
        },
        "item": {
          "id": "35b3b738-a956-4b0f-8aed-144aa071de19",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8e65cdfb-d9a3-425e-9461-8182a0a73798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "9dd3c1de-542f-4ece-9af6-243534fafcba",
        "cursor": {
          "ref": "58177bee-c9b5-4a80-b367-e65feb95cd87",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5396bdb5-9d57-4294-b986-8c94648a3798"
        },
        "item": {
          "id": "9dd3c1de-542f-4ece-9af6-243534fafcba",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b75a409a-da99-4fc3-a047-875413d94988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "d3f4c432-98b8-4bdd-abb7-68e2283f5eb0",
        "cursor": {
          "ref": "09080989-1f71-41a4-ad8c-c28c0f1ec08e",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "67a73212-5d0e-47af-b3f8-ed751b9a8010"
        },
        "item": {
          "id": "d3f4c432-98b8-4bdd-abb7-68e2283f5eb0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "79cffe32-673d-4dfd-bf3b-34dc3b31323c",
          "status": "OK",
          "code": 200,
          "responseTime": 2434,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "95d2e9a0-0241-4422-b510-22e269d77f77",
        "cursor": {
          "ref": "a6d1f4ec-9d8a-4b6e-867a-bccecd0a90f4",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5a69c61b-0274-4984-a224-8b82170fcfe5"
        },
        "item": {
          "id": "95d2e9a0-0241-4422-b510-22e269d77f77",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "06b86cfb-5575-4a27-bb2f-0cada3679770",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 352,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "c8b6712c-dd49-4632-b5e7-6c905b713ed2",
        "cursor": {
          "ref": "334e8596-8ec2-45d4-b7c2-3abc7ea8c41c",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f32e5c35-0007-4e08-98b9-bab64a9315c0"
        },
        "item": {
          "id": "c8b6712c-dd49-4632-b5e7-6c905b713ed2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9584b349-a829-4269-b378-aec58de6edc1",
          "status": "OK",
          "code": 200,
          "responseTime": 3853,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "dba301a3-732b-46d6-898e-87092f48b220",
        "cursor": {
          "ref": "7bab50b4-fe14-4403-9b23-1e8d5acb5e94",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "09ecc94f-f8b7-49ca-ae1e-67470fd9bced"
        },
        "item": {
          "id": "dba301a3-732b-46d6-898e-87092f48b220",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "91a2d3a6-0408-4daf-83cc-70d067b6974e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "fc1f51bd-d2ad-409a-8142-ebb6611c49bd",
        "cursor": {
          "ref": "27fd5c62-09e5-41b2-8f59-621a5f4dbdba",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d1022fa9-3ead-418e-89f4-0fc867c5017c"
        },
        "item": {
          "id": "fc1f51bd-d2ad-409a-8142-ebb6611c49bd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ffed2335-e8ee-40ef-869a-895295362738",
          "status": "OK",
          "code": 200,
          "responseTime": 2494,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "0a91e055-e65b-427f-a382-99df6dadbd9b",
        "cursor": {
          "ref": "a0bf64ae-7118-402a-81ae-7aa8a02f0a1d",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9a7cf48f-98df-408f-b3aa-39c82c62ba72"
        },
        "item": {
          "id": "0a91e055-e65b-427f-a382-99df6dadbd9b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6daa0196-d458-47fe-963c-64f2b6a3d8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3928,
          "responseSize": 1542
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "94b92de3-40af-499d-b539-09ec5241f8fc",
        "cursor": {
          "ref": "d911a9ba-6ad7-4979-b911-3e20dfb19d73",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "75d244ad-82cf-439d-80d4-827f88c981e9"
        },
        "item": {
          "id": "94b92de3-40af-499d-b539-09ec5241f8fc",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e0fb7806-f499-420f-b4a6-4421b62507c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2543,
          "responseSize": 1528
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "11ae4f4c-9b60-49a3-b883-9b825fed0fe5",
        "cursor": {
          "ref": "b22e22e8-8140-4a4f-b694-84c9bbb9831a",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d64a09e1-fd83-4a9f-9da7-657885fd2688"
        },
        "item": {
          "id": "11ae4f4c-9b60-49a3-b883-9b825fed0fe5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9959c23e-64a0-48de-95c3-3d4010f77329",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 146,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "5a34b819-cef8-4d06-8cd9-998320821814",
        "cursor": {
          "ref": "df557234-ae94-42c0-923a-c70bc37a23d4",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9e67f062-2cee-4222-9d7e-fd4b3652062d"
        },
        "item": {
          "id": "5a34b819-cef8-4d06-8cd9-998320821814",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "76bc7f9b-d01b-4094-81a3-f4496bf43fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3846,
          "responseSize": 1527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a33a108a-2bb9-4b31-9405-c2d5503ddeb1",
        "cursor": {
          "ref": "b2d6eaf1-e0b9-43bf-a25f-a569934c1512",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3f17421b-89d2-4f7e-a96a-712af884f4f4"
        },
        "item": {
          "id": "a33a108a-2bb9-4b31-9405-c2d5503ddeb1",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2ab5b400-383a-4994-b87a-8225773fb184",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "0136cdb2-50f8-43a0-af85-5ff783468241",
        "cursor": {
          "ref": "daca884b-8de9-467e-b0ba-ece1f063de6c",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f9ae3cda-01e4-464b-99a2-175b58eb4cd9"
        },
        "item": {
          "id": "0136cdb2-50f8-43a0-af85-5ff783468241",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "638e7b60-31fc-4026-890e-03d2cd4a0be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "f299fb28-1410-4393-ad59-62365344e73b",
        "cursor": {
          "ref": "789f6da6-e90c-43ca-8185-5bf1857f12a8",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c6a0f122-5aae-4f68-b672-f1d6083cd48b"
        },
        "item": {
          "id": "f299fb28-1410-4393-ad59-62365344e73b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "81542813-d435-4b47-b2fb-d5dca873665b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 1049
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "a6dbad0c-1151-4dee-9957-d96b44b81bc5",
        "cursor": {
          "ref": "eaba9a84-d8e7-41e6-a536-5740b85a0a0a",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "97cf6e47-b0f7-48aa-941f-b15b9a56b90e"
        },
        "item": {
          "id": "a6dbad0c-1151-4dee-9957-d96b44b81bc5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bbef182b-bb46-4306-95ce-95d9a40ef806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "49023348-686d-4773-b949-dc67e5f2fd01",
        "cursor": {
          "ref": "c322b562-8f80-4ebd-908f-71cbfdd1808b",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "61f2626b-e230-47c2-bd6d-1c767e9f6fa3"
        },
        "item": {
          "id": "49023348-686d-4773-b949-dc67e5f2fd01",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "220a3b7f-5b60-4ffc-bdc9-4776c480645f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "30be06d8-156b-4ccd-ba01-ae94ac41820c",
        "cursor": {
          "ref": "91a80b04-c6fc-46bc-8ce5-3d3b4b0b4238",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7d4a1565-9fc6-4a66-ad03-3f6378c61d21"
        },
        "item": {
          "id": "30be06d8-156b-4ccd-ba01-ae94ac41820c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1c30966f-1d9b-49a7-9716-8c3550ad67eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "2ee76f97-9f39-4c09-99e9-e6cbf4d5fca9",
        "cursor": {
          "ref": "9bba86c9-bef6-46fe-b372-65ea824e5bef",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c337f64a-49a9-4a00-a0f4-47bf5c8050e8"
        },
        "item": {
          "id": "2ee76f97-9f39-4c09-99e9-e6cbf4d5fca9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e87130d7-3177-42d8-969c-c24adc9f2474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "cac8e3ca-92c4-403a-82ff-f4b1fff8a24d",
        "cursor": {
          "ref": "dad993ae-5548-4518-9fd1-91e627c605b4",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d192fb0b-a14f-4c3a-b9e0-4832a3e78df4"
        },
        "item": {
          "id": "cac8e3ca-92c4-403a-82ff-f4b1fff8a24d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b2d97ba3-f337-4a73-92c4-a9fb7ee1ddc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "ba588d1a-2e86-4c13-b3ee-9f4b4b1e27a6",
        "cursor": {
          "ref": "80e43b7f-a750-45df-bcfe-8770212ec712",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c9b312bd-8c00-410a-9360-0a908abfe376"
        },
        "item": {
          "id": "ba588d1a-2e86-4c13-b3ee-9f4b4b1e27a6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b0069e3a-61a4-4f14-8587-979943c50a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "811d4ee9-2d67-498c-a3dc-66e888e30db7",
        "cursor": {
          "ref": "b4d9a2e3-effa-43b4-a5c8-e7ea8d26a08e",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e9707b35-0bdb-4aab-bb6f-c4beade95b0d"
        },
        "item": {
          "id": "811d4ee9-2d67-498c-a3dc-66e888e30db7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a55e38af-90bb-4393-ac59-c885cbc9b0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "fadd1af8-ec6e-4353-abb9-a07242e1e28a",
        "cursor": {
          "ref": "364e0922-f483-4cd7-823a-237ecdcc2b97",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "dc683aa9-e5c1-4088-859f-f685d6381eaf"
        },
        "item": {
          "id": "fadd1af8-ec6e-4353-abb9-a07242e1e28a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "869b2d2d-1f8d-4a37-b26a-c9c8230381f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0e8b2a0d-a90a-47d3-9500-b54f51f872ec",
        "cursor": {
          "ref": "4c277756-dfcc-4ae3-9d2f-dcb0dc4e1249",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "84b20c47-b0d4-4810-bde6-f14551b45ae3"
        },
        "item": {
          "id": "0e8b2a0d-a90a-47d3-9500-b54f51f872ec",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "731d6ccb-5715-4dd3-a176-2bf93f088f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "63e7cd89-a739-4979-b6f5-8d5300d5cce9",
        "cursor": {
          "ref": "00c71288-1e08-45c7-b081-445a4d60f526",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "51e5e20d-e72b-45cc-82af-a2ee14511ea3"
        },
        "item": {
          "id": "63e7cd89-a739-4979-b6f5-8d5300d5cce9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ca64e02e-0d8b-4d61-a9fa-36c968cb0be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "25cd018d-d6be-4818-9cc7-521209a57900",
        "cursor": {
          "ref": "c0ab1675-7fa3-49e6-807d-5231477fd350",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ec0a8472-055d-4ebe-a935-ca3f09e9dc75"
        },
        "item": {
          "id": "25cd018d-d6be-4818-9cc7-521209a57900",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "195c0247-eda3-4a31-8428-3c92b701e71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1ce92240-b46a-4cab-84d3-be1c8069e974",
        "cursor": {
          "ref": "9db7fe7c-c5b7-442d-87ad-36d55f05ab39",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c527cfc4-725b-4e02-8fde-696928bdb11c"
        },
        "item": {
          "id": "1ce92240-b46a-4cab-84d3-be1c8069e974",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "eed4fdd1-a127-49ea-897d-a6848ef4d157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8944f4dd-248e-4f96-a524-4e1fe4d0d3aa",
        "cursor": {
          "ref": "164b0723-4781-420e-9e13-3ca373d7e8cb",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7f52d6ac-1bf0-4c97-bd8c-e136360a1a85"
        },
        "item": {
          "id": "8944f4dd-248e-4f96-a524-4e1fe4d0d3aa",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "696d89a5-40d3-4d03-8d9b-deadaf8e7a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "dc1ee358-695f-4700-86e3-e83ce79202bc",
        "cursor": {
          "ref": "7b2128fe-443d-4540-ae69-036e29e416a2",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2e2e063d-069c-4522-9a7b-55c8fa0eae45"
        },
        "item": {
          "id": "dc1ee358-695f-4700-86e3-e83ce79202bc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ad6e4f60-0736-465b-bdef-38a2da698240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b22cb027-7cd1-486b-bf8b-8b257291e195",
        "cursor": {
          "ref": "b37adf9c-bf6c-4a02-a240-74b0204a0588",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b144e408-b4eb-4ebf-af81-4d538309ffb8"
        },
        "item": {
          "id": "b22cb027-7cd1-486b-bf8b-8b257291e195",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1a2033c9-afef-478a-b1fe-2a42b2bad821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "7836a9f6-a0f2-403d-a285-aa07d0f75578",
        "cursor": {
          "ref": "c4bc2bf4-0c49-4bb1-bdc7-c2830902d749",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e1e83d56-e726-43e9-ba1e-846b72024e16"
        },
        "item": {
          "id": "7836a9f6-a0f2-403d-a285-aa07d0f75578",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3a34b69d-c3ea-4364-87d9-72e621b0ca59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "882bc274-f084-4f64-9e6f-631c3dbe5a33",
        "cursor": {
          "ref": "646d85db-dd13-484d-9c7b-cab38a4c0044",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "81d92e45-3a6d-4890-89c0-6b867755ab78"
        },
        "item": {
          "id": "882bc274-f084-4f64-9e6f-631c3dbe5a33",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9affbdd0-cdfd-48fb-a8ae-22a71ce76493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "2ce25c3b-25da-448b-aaf6-1a155828bf84",
        "cursor": {
          "ref": "7b78935a-c723-4d29-877a-7571b30a8c9d",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7da103ac-5493-4189-aae9-544842034fad"
        },
        "item": {
          "id": "2ce25c3b-25da-448b-aaf6-1a155828bf84",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "50b5de9e-d48e-44ba-a640-2de2456d9385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "4b88f218-74f7-4a19-98fb-bb7a64174172",
        "cursor": {
          "ref": "ab72ffe7-5239-49f1-b4c7-35e9556551a1",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f21d48ab-2269-40f1-8b96-25bd163ad5fa"
        },
        "item": {
          "id": "4b88f218-74f7-4a19-98fb-bb7a64174172",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a8b14a51-b963-4e52-a88a-5b691c71bc30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "b847d931-4989-420c-b20b-b31d811cd8b0",
        "cursor": {
          "ref": "feb9cf40-730b-4f23-9370-2b694f3ece65",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e00c56fc-29bd-48a2-a214-a25caf750305"
        },
        "item": {
          "id": "b847d931-4989-420c-b20b-b31d811cd8b0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a5eaf6c3-f007-4f4b-93dc-603d752f7412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "d4b38afc-87e4-4cc2-9550-7085c7e77d29",
        "cursor": {
          "ref": "f3ecd5ea-1936-4eb8-9552-f548a3e12d91",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f8dd3f4f-2081-4b62-8056-b3632b486050"
        },
        "item": {
          "id": "d4b38afc-87e4-4cc2-9550-7085c7e77d29",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d68796a6-3272-45e0-8a96-cd0694dca96c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "a8be5576-f01d-4d2e-9741-5f01699b59c8",
        "cursor": {
          "ref": "425f96e8-00a0-4ee6-9370-7eef3c6f7b12",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a1961224-6520-463e-9eab-e616f4a1f515"
        },
        "item": {
          "id": "a8be5576-f01d-4d2e-9741-5f01699b59c8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ea62a1e5-828d-4e85-be27-df10ad41b545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "fd313827-23ce-4649-8fd7-856808b1ff11",
        "cursor": {
          "ref": "236d6cda-89a0-4aaa-b005-8bf6b8422b93",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cae1be00-52c0-4367-87d0-94792a67382a"
        },
        "item": {
          "id": "fd313827-23ce-4649-8fd7-856808b1ff11",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "082b0bae-7054-4a22-8629-bdc693e4b174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "cf4b9fba-f8ff-4ac4-b7f3-24bca7a247a9",
        "cursor": {
          "ref": "c7ea7ee6-f8f3-4fb9-9f24-fa6f291d3906",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bc92b880-fead-4cb8-ad81-b8a7c49b40cf"
        },
        "item": {
          "id": "cf4b9fba-f8ff-4ac4-b7f3-24bca7a247a9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6ed8699d-3305-469f-90d0-cfa9ab67edca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "5c579d99-4b5b-4575-a03e-ad10deec8bde",
        "cursor": {
          "ref": "cc385f8e-b64f-4d6b-bb43-f05757682409",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "24e9bac3-100e-4a8e-b92b-a61d0608226c"
        },
        "item": {
          "id": "5c579d99-4b5b-4575-a03e-ad10deec8bde",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8175e71d-e3c7-4649-9a00-b62829428974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "77fd0fe9-a9aa-4818-b96a-89e40e8c0bbd",
        "cursor": {
          "ref": "85fb2ba9-7d16-4a51-83b1-9c3dd4926972",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "100835d6-6623-49fb-ad35-ee06382a1d63"
        },
        "item": {
          "id": "77fd0fe9-a9aa-4818-b96a-89e40e8c0bbd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fd365538-3253-40cb-9805-35a66ee336fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "ad9e222f-0d23-4f62-ade8-f178e9cd5e24",
        "cursor": {
          "ref": "efc96b82-e045-4a39-a01a-66397af451f4",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "41f2faf3-56bb-4cbb-922c-821e352b9c26"
        },
        "item": {
          "id": "ad9e222f-0d23-4f62-ade8-f178e9cd5e24",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1cb48eb9-3f60-4f84-aebf-a70c4b9d3839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "5d1e1da9-57c6-4d5c-9886-fe0d23a96159",
        "cursor": {
          "ref": "d641bc7a-f145-48e8-a806-240511fe91dd",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f130b4a5-7493-4af9-9d8d-e9a5ba0257ce"
        },
        "item": {
          "id": "5d1e1da9-57c6-4d5c-9886-fe0d23a96159",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "61dad3bd-4af0-4323-a5d1-b35a1b530384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "a176cb99-64b1-42c0-ad27-f88aac4e7db9",
        "cursor": {
          "ref": "ba8eff57-dae0-4e50-aa93-f51398c0b925",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3b1b315f-373b-48e6-84b1-bd9292ec192d"
        },
        "item": {
          "id": "a176cb99-64b1-42c0-ad27-f88aac4e7db9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2770b3e3-c556-4280-9a2b-729bff917aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "4d87feba-bb0c-49bf-b7ca-4eb3890ea8aa",
        "cursor": {
          "ref": "b774587f-5ee5-4fe9-8349-0224cab6fc9f",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a3a8e1ec-5ba3-4de4-89a4-60109a0c4e08"
        },
        "item": {
          "id": "4d87feba-bb0c-49bf-b7ca-4eb3890ea8aa",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a100a21b-ba90-4085-a4ae-f90923874c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ac64eac5-91d3-47d4-85e3-e8597f5b1b9b",
        "cursor": {
          "ref": "330a0b78-0291-4cac-a046-29ef7e809dfd",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "26483112-039c-4119-ab96-e5420381c94d"
        },
        "item": {
          "id": "ac64eac5-91d3-47d4-85e3-e8597f5b1b9b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4cd9c078-67e1-4253-993b-3d5fec1aa3e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4fb4e1b0-35fe-4bb1-8723-814c64821727",
        "cursor": {
          "ref": "86c48e6a-fc18-40d0-aebd-40070759e634",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "dbfdbe27-284c-467a-9c6c-112a71bff89e"
        },
        "item": {
          "id": "4fb4e1b0-35fe-4bb1-8723-814c64821727",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4681eb62-1d8b-4ee6-b5e6-fd7e5d8968f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "14da75f3-c0f0-4e10-83bb-8ff22fb88471",
        "cursor": {
          "ref": "f4e3f137-702e-47be-8fd0-d5e7876e2427",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "02987038-a8e7-4c26-88e1-9bb176e91067"
        },
        "item": {
          "id": "14da75f3-c0f0-4e10-83bb-8ff22fb88471",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6dbeafd3-a37a-4915-bd6e-33538aae8982",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ab7cc592-caf1-4b4e-ac80-c35c07d8a88d",
        "cursor": {
          "ref": "e252f303-72aa-4706-981b-59352377bd7f",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "675e6160-9de3-45fa-b9f9-decff98a1eb2"
        },
        "item": {
          "id": "ab7cc592-caf1-4b4e-ac80-c35c07d8a88d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5de6e193-a709-401d-9acb-35d45e9d22a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 1129
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6a422074-b22d-4123-842c-adc032b95f6b",
        "cursor": {
          "ref": "bcef0626-d694-42f4-9d26-92947564c732",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "daa8a9f4-aa90-48b9-804f-c9fc62dae0f8"
        },
        "item": {
          "id": "6a422074-b22d-4123-842c-adc032b95f6b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "23b35dfe-5782-475d-b623-bbf642a7fd7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 1129
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "1db0c221-7b86-43af-bf52-f310ec3e10b3",
        "cursor": {
          "ref": "e5155e56-c1f4-49b6-ae27-f27f3098721c",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ad44cdc4-576c-4c0e-9fc1-3f94e3cfb286"
        },
        "item": {
          "id": "1db0c221-7b86-43af-bf52-f310ec3e10b3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "23723664-f33c-42db-8646-9e66e7fe165f",
          "status": "OK",
          "code": 200,
          "responseTime": 3121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88d0019-2c3c-4777-85f5-b54353304cc0",
        "cursor": {
          "ref": "8c8ce367-8f77-4034-bae5-15316e97366e",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6c8b39f4-2027-4a15-859a-69448bc9d2b0"
        },
        "item": {
          "id": "b88d0019-2c3c-4777-85f5-b54353304cc0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c05c749b-8da1-4003-b9eb-68337213d816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "7e9bad0c-00e1-45fb-886d-ef06db1b91d9",
        "cursor": {
          "ref": "8a2e6172-ffbc-4992-b3c2-5459d59ccdf2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "265a0a84-a503-4999-9faf-c3f1d189cd03"
        },
        "item": {
          "id": "7e9bad0c-00e1-45fb-886d-ef06db1b91d9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "05f18af5-e316-4b91-8f15-4aab3c87f855",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7e9bad0c-00e1-45fb-886d-ef06db1b91d9",
        "cursor": {
          "ref": "8a2e6172-ffbc-4992-b3c2-5459d59ccdf2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "265a0a84-a503-4999-9faf-c3f1d189cd03"
        },
        "item": {
          "id": "7e9bad0c-00e1-45fb-886d-ef06db1b91d9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "05f18af5-e316-4b91-8f15-4aab3c87f855",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7e9bad0c-00e1-45fb-886d-ef06db1b91d9",
        "cursor": {
          "ref": "8a2e6172-ffbc-4992-b3c2-5459d59ccdf2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "265a0a84-a503-4999-9faf-c3f1d189cd03"
        },
        "item": {
          "id": "7e9bad0c-00e1-45fb-886d-ef06db1b91d9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "05f18af5-e316-4b91-8f15-4aab3c87f855",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "b79d3758-f595-4f66-b546-8c96e7dc2f20",
        "cursor": {
          "ref": "3a61075a-b354-446a-8dfd-d1b4dd06aa87",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d6ba1595-5dea-4fa2-adab-d2a410e7b9aa"
        },
        "item": {
          "id": "b79d3758-f595-4f66-b546-8c96e7dc2f20",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3355aa90-a830-4b5b-bdca-68b341dbde7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 319
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "5ee5e029-45b0-4e6a-af25-6b90d998dc7a",
        "cursor": {
          "ref": "903e6475-c97f-4b41-b92c-4da77fb59ce3",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9d261d39-0a17-4f17-841f-74a7d2295115"
        },
        "item": {
          "id": "5ee5e029-45b0-4e6a-af25-6b90d998dc7a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d34dc245-d97e-45dc-8ce4-7b8f9d52522d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5ee5e029-45b0-4e6a-af25-6b90d998dc7a",
        "cursor": {
          "ref": "903e6475-c97f-4b41-b92c-4da77fb59ce3",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9d261d39-0a17-4f17-841f-74a7d2295115"
        },
        "item": {
          "id": "5ee5e029-45b0-4e6a-af25-6b90d998dc7a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d34dc245-d97e-45dc-8ce4-7b8f9d52522d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "f840c23f-1c65-48e0-a430-75ac6d01183d",
        "cursor": {
          "ref": "52dd09ad-0cf0-4ed7-9f0e-5e80bcafd18f",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "aee838fc-7b60-4643-817d-29d21c982151"
        },
        "item": {
          "id": "f840c23f-1c65-48e0-a430-75ac6d01183d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ec6b48f9-1e88-4ad4-9b4e-e13e167427e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 87
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "7d726c64-ab83-45a1-a602-fb7c8911501d",
        "cursor": {
          "ref": "c91de98b-6b82-4a2d-a5fd-46fbde5f06df",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c342014a-9b42-4cfd-8f52-9e3a822c48da"
        },
        "item": {
          "id": "7d726c64-ab83-45a1-a602-fb7c8911501d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "304b782e-1dc3-4a3d-a9a6-ffdbc65bbf74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "7d726c64-ab83-45a1-a602-fb7c8911501d",
        "cursor": {
          "ref": "c91de98b-6b82-4a2d-a5fd-46fbde5f06df",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c342014a-9b42-4cfd-8f52-9e3a822c48da"
        },
        "item": {
          "id": "7d726c64-ab83-45a1-a602-fb7c8911501d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "304b782e-1dc3-4a3d-a9a6-ffdbc65bbf74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1365a8b0-9c9e-4628-905a-1e8902890fed",
        "cursor": {
          "ref": "30830433-7c82-4783-9e74-f410cad17c10",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e16eacb2-3289-45bd-9153-5dc7a51cb592"
        },
        "item": {
          "id": "1365a8b0-9c9e-4628-905a-1e8902890fed",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "08e52053-1b89-4d08-ac6e-ac8c88884e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 97
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}