{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "77268ccd-0b5d-4747-b496-c2a6802462c2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1128f58d-a9db-4ad4-91a1-b81488deca57",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "40fad17a-12c2-4e3e-9df7-3f5e81c6f747",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1cf2d6aa-e1ef-4660-bbed-037362e513be"
                }
              }
            ]
          },
          {
            "id": "e5427961-3dee-4349-96b3-3660d2d5015d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1ea7e533-cd1d-4909-9ba0-17fd7efc6ddb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8cf8a80c-d61c-421d-b011-a67b0e8b7324"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8e68427b-9eb7-4632-8f18-b86a7fc9b75b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2f5d0969-3617-45a8-8919-a6c0e11a1f3b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ceea4836-c16e-4f9e-8c03-f68eaaf29761",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a110076-f771-4913-9a02-c7c1bae2441f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "361b0528-c81d-4dc9-8761-3ccb69b77966"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e3499a39-9ae8-45ad-9cc6-03fca688c13a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "10dd15cd-bd1d-4dff-ba9b-9420a3605d97"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "04b0bea4-0560-4105-bad8-ea7efd9bbdae",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b3dfa49-f01d-480c-b326-9ec38dea245a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ea1b870-0ae1-4217-92bb-a6cf9544a4dd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a4c26cfc-c6fa-49de-a8c5-5a64c4998b31"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a8b61dd-6c3e-4d45-9505-ddabc4ca50a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9740817-632c-4f91-81ae-6ea9f21e43d1"
            }
          }
        ]
      },
      {
        "id": "8aaad97f-410a-414b-95c9-19ad53984e34",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "15c33d37-3c63-4e49-9e80-dd18aa77057c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ca6ce39-3f67-4914-b88a-00d650945324",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8afedee0-7eba-4f32-af50-aed93ad21240",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a7e5fe-f071-4c5d-9e47-7cc26cfcaf3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b67cd48d-4bf2-4c74-aa95-08bb2b04727f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686a404e-123c-4b8e-bd96-60009234d90a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1531dbf8-c926-49b6-98cf-4d79167e6432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6f252f0-bf42-4948-a360-1877f1d6fea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2676008d-9672-44bc-8f44-45bcc8c19ea7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc22ec5f-4b89-42f3-8097-45a31c386d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3034567-3c3c-4f4f-a8ad-a91da73c9c76"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "781aef19-3fca-47bc-9005-d89dc1ea67e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f1be705-5128-40a5-947f-8f3df17e3a8d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d371e84-1b7d-4bd3-b583-b432c8449de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48fd45f2-3877-429f-917d-212da6addb0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb95ef9-a0ee-408a-b12c-caec7cd0a375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247e535e-17e2-4539-b788-db779143f492"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a70e5ee3-0714-4651-b5f5-f7a9b2c6120e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bb1b25d1-5d76-4d92-bfef-f59d997c4133",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91c53945-a808-4f40-8989-c136ea24f4af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a96d5104-fd32-4dba-8718-ac3b3fa2cdb4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29867e05-6ddf-48bf-b70c-5e3bc7fe5590",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3201afbb-681f-4252-ad5d-aea342a06e36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea9de53c-8575-4d4a-bc7e-b110b2d35d63",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "73b7bb6c-07ad-4de7-81da-ab69747546e6"
            }
          }
        ]
      },
      {
        "id": "b210c056-6648-41e5-b4dd-6304d4990793",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f6e0963b-0e89-4052-a223-bb9ecae650f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6be9f3e-a9d6-4101-8653-7016efd1970d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c0d830bd-8a95-471f-a19d-cff8173fbfc5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1dd49f-98f6-4519-bdee-9b789d138a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442c1551-8df6-4b6e-865d-97354a992c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898387aa-6bb8-4907-a521-ba8ea4b71d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7931fb18-ad7d-4d8d-9846-84caf0c5a00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197055be-fe65-49d8-9ca0-44917794e038",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9c3cf2-bd66-41c8-b51d-1e9c123da468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ba7b3c-7f28-4f7c-bba4-d70ed9ad53fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55895845-8ca0-46c6-9c71-53ce8a6f3d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4b74c6b-fd19-4074-b968-28f85d26c22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fffddbc1-20c0-485f-8702-e7bf473cd05c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6056bcfb-91ca-4b88-ac0b-8f80ac640861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb7b2d8-42c9-461a-94aa-3fdc278ca596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453484c8-6a10-4e12-b2da-46cc75204728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72ca023d-5e47-44ae-b5f8-e5c01fee3a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a683bb9-a932-45ee-a40c-bcfa83319ba0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dfb279c-9233-4d50-9806-062cb562727f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4f4045-a494-4a4c-8e98-29cfc4f88139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67c1f8f-2d95-47d0-8daf-ce288e2ce43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaa9a6a3-78c8-4eb6-b185-1dabd2b52f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49d7d42-ffbd-476c-8de8-1e99e345ce29",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de22452-dbbb-4fdf-b32c-6a62fe063e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06350ab-da64-432f-8801-7babb9776337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfd97de-6e49-46ba-87a3-6432cea39f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98049a6d-9321-4f42-8917-dd4cd4364352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa8350e-e6c5-4f8b-9e6c-9dadef0f0b71",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4e359a-4d7e-4f27-9070-9d83f5fe78ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae9b755-75d9-48ca-a533-4aaa166602ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb32479-5320-4c74-b124-871d7d733b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23a79cc7-c6cf-4fda-b8a3-7f493bf0e1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6a5f9f-9999-4aa3-95d4-957e8b3530ed",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a7e100-2654-4700-b5a2-aa66189436b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c19e76e3-ff6e-455d-8120-2631d6a4826e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f937f2ca-298b-4828-a061-3584df89bbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3b6b543-d3e5-4e50-a078-af4bb1de7851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9513632-702a-4a6a-9cb6-6d185b87070f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277eb07c-6f59-4a0c-878e-40a4a69a568f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8595f5-6669-4896-b9a8-e7457b9b4ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fad899-9f8a-4f60-813a-8c1845adb1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "10daa066-7639-4458-b6d6-096eba26c7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4405c725-1866-4574-a97f-fdbd22e4fb5c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e204ffa-cac8-4192-9b0a-9eb13b065cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80acfdb-d72b-45fe-98d3-7effdc88d245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112be59d-50dd-4866-9d2d-3800b0bd1585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e34e3520-f10d-41f9-b013-a03b483352a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ac0599-f519-44be-99d0-56bbc5b50c23",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca264552-cd96-4d6e-88bb-bf763383a985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe38e615-a8d8-4ddb-aaee-6805942eda9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0044e07a-41df-4582-98cc-92b89744d6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab89abf6-cdb5-499c-a1e1-5247c479a341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713f9514-d6e8-47ff-b6f8-d4012506586f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c79284-42f1-417c-8f81-630a3d710246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a92cfe7-82b3-4413-a5ac-99ce0ed3c5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db914f94-cd04-4a45-83f6-41b94a76c0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d14a6c61-8632-41ee-a89b-61294080b72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3292871b-a3ef-4813-8119-9ae1466e9a04",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae2ceb5-861e-4b93-bd09-7418849b54a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bebe28aa-8a12-4caf-8531-b4716f8ba6c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4369fd-58bf-423b-a663-d385c6399ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c6b8f31-52a0-4cd4-bec2-dc3c63d86e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a93a90-b853-4e7e-bffb-5a2ae12fbb5d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70baed07-552e-439b-b661-9f06525e6676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abca3985-fd11-4a93-b0b5-04be44045988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6198efea-c17a-4a7c-8991-5f89fcb90ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50693863-4cb4-472f-824d-fe81971fc380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dd51a7-4809-4214-b90d-f1911ba9bf3c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c542f7b3-270b-4595-b917-070da5692248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6620862-2fbe-4ca1-8187-bc4a03860704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab1c15d-e9b0-414e-a337-c739cf52766d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a157b61a-3b9e-4d52-b224-a272873c7869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7adceec-be19-472a-9df6-d004efbd0b5f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f534592-60be-4f2c-9c60-381a966a97ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8de2baa-1917-47db-9229-c5f03609ad21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620fbb20-e850-4883-80cb-65adb8458b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbd04dcc-ce52-454c-83f8-0665215aa479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e33719c-122e-4fac-b0cc-2542efe4e413",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc48638-2f8e-4aba-aff6-578114ec0d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99461e17-892b-4728-a093-fc86c4d4dbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1bca14-d5f0-46a4-a9b9-5573dc8a5a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06f89c06-528a-406e-a29d-4c4a3196856b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc15dceb-2580-4fd1-8720-abc573486da3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e77e8a-c776-4afa-88be-4e96874158cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ccb9db-b4fb-47e2-a471-b1a5d2f513d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2096b97-104c-483f-93af-ea5b93bb3753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c324665-9f39-4561-9815-e8b0f1075707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2121b55-210a-499f-ac6a-1e60e525c40a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393b5aa6-6b63-465a-8ab7-f4c3264f1b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85ebad5-e1f2-447d-8caa-0e26b4a00f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51651eff-b7f6-4a34-9774-e475a52e0422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d25a0a-fd46-4905-b78e-c6a14bc25da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cd6a52-e298-4e22-b59e-19076e64ea33",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8aa966e-41be-423c-8316-a99eb470cdbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f771216b-ba28-4b08-936a-0fd9f35fb4c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db16334c-4544-46c1-b701-2e2df9842e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb400d37-730d-482a-a31a-635c01c2b513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e345497e-f191-465f-ab84-1f7f84d7fa3b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56be0d47-26df-4ad8-afa7-d0622afcb8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b551f002-53c7-4cd0-a249-b1243a3a226e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435b418d-8b23-475a-8f61-7ad46bdde335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c197aede-5484-494a-8a66-6c2f43554cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8783462-8a80-4c96-90ff-b7e1c258d738",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedbe6f8-4d4f-4154-9141-368887752bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9391b6e4-4c06-4df1-89a9-f6c27ed27619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3817ebf-6920-4c0b-9c1d-3b05037cf22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85e83f37-e2f1-48bf-be4a-ce9fdf18627e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ccef50-fc6b-4a72-a86c-0f93af33a098",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b7b1e3-2f0f-4d8b-8ed9-87786653e610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b9a54d-f22b-4c56-a1ae-5a43b6e45b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461bdb81-7fc7-4b82-87a2-f938a0d56070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29a7c7cd-7a1c-46e5-9f78-7e7474616d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17544a8c-3e5c-4c7f-9637-e8e3030ca499",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dcc5ca-a9b4-4362-9b53-362939324f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ee69e0-8190-44ee-bf16-7873d637a264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934cb0bd-694f-4eb9-856b-f80ce5e88ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42676f76-d0a1-43de-bb83-a1d9af3043d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a5ca34-5fa4-4212-9d94-1038e3799b6f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633dfbb7-6e03-4ee1-9f28-6851a1760c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4a36f9-6c24-45c5-8caa-8f92b2a51446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f02e27-3d40-43f5-9581-9f4f83823a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0da851e1-1e1d-443e-8918-9a19ad5f7524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9eaabd-05c9-406b-9cff-bd11b0076838",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023ca04b-e950-40ec-8894-039e9d4e57f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f443c3c-8ca9-46a4-a1a3-abbe87b62275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec83bb35-5d62-4c79-b418-7881d7a24a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83da35ba-32ae-4a5c-a25a-81c1f6b924f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211e39ac-7caa-472c-b991-6c5a5e5ba0f0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "121e6c24-ac13-4fbc-a9b1-e4a5d00bb07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15ab003-198c-4451-b8a3-d3c9a96e5da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc5307e-32ed-48b8-b264-c064a5f72973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7328e6c-e720-436c-a332-cf07cd328083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393e3d5f-d254-47e0-9e6b-d592a1ede395",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0728d2a-fec0-4104-b153-f0409dc6fc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36325792-222f-4caa-8396-92691c3dbea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a2ce8f-5b34-41d5-9b17-b3a81ae69ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e7a0def-fa01-413c-b046-ded861b7e2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6248393-17b0-4acd-91f4-ef3a37807f89",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1252cf1f-efd3-4962-80da-11617cd8d337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5b1dd8-1862-410f-9fbd-39027c2b60ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb92d6f-686b-47d9-bd13-b491c1bdee0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a67d90-01c8-4b8e-b9f2-409cc2803d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac139b2-d18f-49c6-917f-e27c08a0abee",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13dbec74-22c6-4547-af1f-028309c1ae5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f8d075-a049-479c-b2f4-eefe11ce5cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6b78b0-d3c1-4a68-9896-af712d7ac8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1ac8a1-4097-4a94-9a0c-99ce14089b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a81523-5625-4278-8049-ea9fe9abe010",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64089939-5bd5-4493-ad93-c181dcf77c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94aef9b9-6295-4d05-9c2e-54736904554e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f48b36-92db-43fe-b688-a833d35ddc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3167d6-ed59-4eb8-b992-d4cb7b5e88bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feacd61e-37a9-40bd-b40d-e2de991c9494",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b71f8d-9907-4107-8894-75d06737ff81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135af432-3101-499a-9190-003d2f16b903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f125ced7-d5b3-4544-855e-aa1c26f23cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "131492c4-b726-41da-9913-8d129a485f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b0caaa-1634-4a16-9c97-acaede0ef0e0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d160966-2ad8-40d4-8e0a-33cd8cb43dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c49a89-f135-4ce6-bc6d-727331201573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53dc86fe-ab3d-4e61-ad2f-f76930e6a924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "289bb538-ba2b-4e8a-a7e1-97eafc664e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3abac6-095c-48f4-9836-68dea51ec4ea",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baefe835-be76-4346-acf7-f9c5d4513ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3690153-9a1f-4b34-98fa-f39d2f897a0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dc83ef-2f26-4f43-8e5f-4f11b48c6b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b73d22e-3e6d-4c5b-a342-71d9b3f9c4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877c6f74-4db7-4462-8b38-6b27c42da449",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7b238e-3717-4769-9f2e-1244afd44202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d244dce-f831-4805-a857-f3add9a29f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ab7750-8593-49b6-bec7-3c2da460b76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb28d71-44fb-4440-b965-8d550b447ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5478e327-0fa8-4bf3-a8e2-bf0f9fb42ffc",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cb5668-55d0-4a99-8791-d83bd60ff3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a53c9a-1913-46b2-8b49-acb6822a020e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d5e2a5-ab26-4d32-bb65-92ed9ef14374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cf0ee97b-3b3f-4527-a8fa-019ad9c83bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e179ecf-a492-41d6-afa0-a69c6e7ab431",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd093730-3588-43f3-bb0a-57019aaef772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb6e3023-dd3d-4117-b13c-a5a501baf607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f36e1e3-5fbf-421c-93da-4f5daf7dceca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a17df548-88d2-40bb-a5bc-fbf04496a3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a79b10-22b8-419e-85d6-35fea9a34565",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d551486-31c8-4f04-abb9-36dc71d85e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e60d734b-9da9-4ca9-8569-aa929fc23831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d483f5-771c-46a4-a6a2-f479ecd44a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec7ef318-1b5e-4a81-bc37-edd40fc99817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc084ed-45ed-4dba-b76b-d1bfe5c40741",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdaba467-ae31-4d71-b09e-e4445a355aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b814bd4-6eec-4dd8-8ddc-e3313638f28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8056ca-33ce-42e3-b4f3-a7581ca7a054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3e1785-fc7f-405b-87eb-9e09f7f13b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4d1797-67e5-4309-8950-59faebe0a83c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed821273-7529-46c6-843c-a712104003e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31a6b972-8349-4a19-9af5-3751d87ffd22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9febe9-a87d-485e-a972-2897ab4f8f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "977a12fd-6c9e-478c-9d72-6d91612b9ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f4cd96-9357-4a5c-8eca-fcf8334161bc",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3364f8-85a3-412f-b660-22d487b91221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016da939-ffba-4843-997d-891421f4ca8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad234d6-722d-4bbd-811d-d8af38163097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e496cd90-3dbb-4e61-8bf0-0864d649d1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5888573-1288-425f-89fa-b2b50ff0bce0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38c47f9-3735-4bc8-9864-96546354e089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef62ae83-f245-46e9-80d8-0b72393ccaf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdbc8ff-1b8a-47be-b511-666dcc3e5704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "64c0d9ba-9aba-45ff-895d-acbd6693e067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e99b1d-da8d-4d32-8b4e-9b990cdaeecc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bdfa15-0228-4e08-a7cd-398c0d46b997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed912bb-b8a6-4abd-9471-b700663f7db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc962178-692c-4999-ba75-811a3fc0d203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3ec451f4-21b9-4776-9f31-de87112cc4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c6bc03-f639-454b-8ba2-647eae9626a9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87b85ae-3021-453c-9a2e-6ae432612770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31b4a00-ed1a-4834-9d07-074dc0b418eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b522c4cf-4ca1-4985-aeb1-6982cfe74dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ddacb9e-e72d-4a09-8b8f-a12e25084559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4e8b0a-dac5-482d-b037-5e0c3a8595fb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83acc716-3ec3-4eef-8a6c-38cae7f52503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df356c52-9c8e-490c-83f4-f3f3059d84df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb033cd3-285f-4a2f-8d5c-4f21b234ee46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0c8bcf-68b1-4d50-bcd4-3360f14310c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50245951-0f0a-45ef-a8e2-0d135a6f26d0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8617b0-152a-4ca9-af7a-6ff9b0522198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88cf6a44-5bc7-4d23-bbc8-db4c92c97579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a04fac-2c4f-4627-a62a-f9bd2fdec2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2833013f-949a-4044-8d7b-3da0821572d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0ba94b-0b17-4721-adeb-6148fb7f6713",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4009b7-ac18-4c93-916e-8e05d7ee9812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e72cfbe-e0bf-42da-84cd-ab09495c3d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877049f4-fafd-4876-833e-a31a7ee23cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8279cbfe-9bec-4fb0-be51-9b5991fa890b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af885982-0bca-40d6-93f2-4fde2385cf9b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5624e87c-3555-46bc-8cbe-d66b7af7dd87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09832b52-8351-4a74-97c2-4b13fedb2bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37d316f-4d77-4b05-bad6-6a6a8daefbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ceaf4b20-c7eb-4207-93b2-b2b394b7e091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690c3fde-fced-4b64-81c3-6ed081632ef9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08adc2c9-e74f-443f-a80e-b9b230fbfb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a509b8f-35fb-4555-8629-ac06cf6fd8a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a1ca43-2d40-4f95-b8fe-825dfc9124e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c213d29-45f3-4be8-8f21-333a1bca02bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6b8101-731e-4d24-8c18-9c858b1d67ad",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d671591b-67b1-4d72-8578-3183ab01624e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ebd063-1cb4-452b-af0c-32cc38c58729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e07e136-3f5b-4419-973b-4942253dba42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c9ebab-ddf4-44c7-880a-d2dcdda36a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0436b66-c452-4918-9b13-b7975df798ad",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11de8c5b-013a-4a4f-9574-2f803ab6812b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6253d40-4b9b-4424-b2ca-439066d3cd17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848bc9bd-0373-4a4c-ae42-192b395bb9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "830c38c1-c366-496f-b467-b15cde0f8af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d04baf-306b-47a5-8363-8fc0e7811789",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e079df-1213-427c-98b8-0573a3dd791e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eccf91e-ec59-4a8c-ba31-c3c1714db064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ec19cb-aa0d-4ec5-9699-7cd3b2ffcda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d76012b-e03f-4607-b1e1-c62b0ddc62f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad31363-967f-4e92-86eb-210dccf28909",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1423f914-7e6a-473d-af0b-b9e614d75f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5433ed11-5670-4e77-99c6-1d2ffc2cf526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d5a4c4-81e8-4aab-893c-19f21da0e0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "131c1557-cf0c-47ae-9d31-4dd9acc6cc08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ec646b-5b78-454e-b458-99ecff8bb0bb",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7d62b7-7289-43bd-bf6e-2ad65ed6fdfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723f97c3-eb4d-4437-b9ae-9ec6452b2874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b02bdbc-9c2f-4884-876f-3c11ba7f9f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24d4dc14-3daa-4184-9274-9c1dc171151b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe30cd7-a3a1-4e79-81c8-91314ca62a17",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dff049d-8c1e-4631-8ae3-d6fc993f7022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f2c9966-27ce-425c-b8ce-597f4c69368b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483fa763-eb6d-4570-a89c-a7fe410e2ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86abfad3-784c-4750-8cf8-bac6e34e88ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a606fd7-a331-4096-985a-200c9276ac19",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ae60f9-9406-4b95-a21a-a38ed41cebf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e14b80f-86c7-429d-ad88-92743f732d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bb6f7a-e351-4e82-b350-44661588231b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bf48cea-b820-400f-be75-d011fac20507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b883f078-7e67-40c5-b1fc-6caa2dc3c56c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a16fc9-c27c-4d82-8db5-5e0032542fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3e754c-0743-4c8a-9398-54e94e6229d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303f42fe-2abb-4329-961d-cc0940dca143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bf74ceb9-8d8e-4364-95df-97248a47c441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5075d5-92e6-4246-9c0b-848876502f0d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7dccb9-f912-4eec-8e69-2805947fc4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a8fde8-7c06-4c05-8e89-83907706d538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180f692a-a93f-4c24-b396-09304a062ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "55e01c5e-0a11-4fcc-b782-91a033907899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc00929-3cbb-41d7-be56-f1b6d383f272",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622b2ce8-97ef-4e6e-8395-535e106eb671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc15e31f-4d3a-4038-8e25-aa847e5b6127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1c2346-60b8-4584-b71a-68af1c6ec942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0896ca5-4f4b-4f50-a13f-7afba904c71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b94087a-d53f-4ba4-af94-1f86c0fe0ad2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b927af-9b08-45d9-a625-3007b7812e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611025bd-cd6e-496b-8da5-b8c2e8c10293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911d6201-aa15-4576-a870-01e61b1a8e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b473dd-535b-48a8-bb21-bd23132a9c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b02e02-b344-46cc-ba28-b72bd03ef8f6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c4ee00-4407-4435-9b52-8fdde4ed20af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb52338-64d9-45bf-bd78-b62693cc227a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67dfc832-0ef7-4b76-b5b7-672be36273f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4ac5f3-d53d-4fbc-add9-e519a4b55595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0e415d-28a2-4082-8342-50abf8d9b386",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e1dd44-176a-4ffd-af0c-16dec810058a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129bbdf6-49b5-4dbe-abf2-f62d6b26d23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf455bf1-d82b-4eda-a96d-e1a681545ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "375613c7-dee3-4866-9685-9cfed0c35690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b890ed-3579-428e-a361-21b2078640c0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7608e4d9-11de-4890-a59b-395547bd8579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1aa4b7-e52e-4bb7-99af-d38ef7183494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e2ce41-6242-43fe-a8e4-9ad41a513005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1894805-b1cc-4d7f-aabb-d0312d85c74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c9c922-d1c5-4c0f-83c9-0bc7710e4b16",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf51b15e-e92b-445d-aad8-73971859ef5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430f42e6-3f94-4f39-a7c3-53fd27ae345c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c1d6a1-15f2-496f-aeab-7859d132810a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b810a942-52e9-4ee2-b855-889358419843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdfad83-e7fb-4549-b98e-8da39a3852f3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54604429-9912-40e1-923a-b70f46669e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a8e815-61a3-4189-8ced-9ba4b611f297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00facfa8-e988-4d5e-8d88-2abc191cc2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ec19e68-a7aa-49da-9e92-46d7078460e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7327b9a2-1733-4de0-983c-4ff71d4ef1c9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07defe9-863f-4906-90ac-d164a08b7ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae3e628-1db3-4297-99ef-f873fe5b5b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ebed10-5ffd-4d3a-a80a-0f710bad2c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1578b0d2-764f-48b3-9661-b46274bc79a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b353e6c-87f8-4fd3-8673-c2c7d3ae93c9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af151a6c-26d7-4be2-81ba-35645fa31c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a89ea7-3c6e-4260-b7f3-3288612788ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f828463-f4a9-40b8-b85b-b1ddc79d6092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cbb86db-9c66-4e2e-b8f5-c81ef3fc2a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e0a2c3-7df2-4adb-9055-167f785e8148",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "615f78af-94fa-4626-bf1a-620f9d47064d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148e640b-3547-476e-b5fc-58a3742b95f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87367657-50c2-4c1c-a909-536253504f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dbee0091-2342-4ba4-85d1-cdf6ebaa2fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbaf748-06ea-44c9-bcc1-bc24aa0488a3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62db0801-9304-4bb1-ad98-207bbb245a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0b21d7-67b0-4fc2-aa20-a7a39c898dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e4fb57-7497-4f3c-b281-1a6e4dd707c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ff77e98-b597-4e40-b56c-6acd6086aebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8f2145-b010-4e78-b88b-0081d6d5386f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1954762-2dba-4d82-abb8-eeb9394f2634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd79d632-6c23-4c95-89ee-5ce922bce77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3692c469-f6b3-4f11-9d84-9b630c7ae936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8474d1f9-eb29-4a65-b64b-d28a01abdf87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12495a6a-ec3b-437e-b741-ff875c792884",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a4f942-7ef6-4efe-8e12-8d9cb866ab0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54dd8655-6c90-4930-a02d-34fe77603466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809f8b62-c328-481c-a3ac-8db66731cd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e15e00-9afc-4d75-8c04-90a5a829e700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fcdf7ec-854d-48be-b72e-a9a8b4534f60",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6c49bf-1c94-4b24-9163-745760ad8af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "486ca4ea-2386-4b4c-87be-287e17bd9749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb77115-b746-4e97-a78a-18459bb271e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72cda9cd-0fc1-4861-8083-8c15dd24c2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527512e2-79e9-4092-ba99-fbdf8bfa81e4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12455292-0cc6-4d76-8614-d2a10a858ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef28afb-3d21-4cee-b014-ff4e12197f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38dc47c-24f4-424e-9873-6cb07d5f2695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "503bd704-4635-42ec-bb85-8795a87fb5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b38c2b-3433-47b6-9324-3e9ddd7aa63a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde24ab2-5ff8-4bc2-abdb-7ccd9029ecfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "506ea884-c0a4-4a2f-8282-0c248f3f2675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6205be53-b4ed-48e1-a411-696bdf42313a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62db8c72-3d6e-4342-ba80-1fe3662ac1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e472b0f2-44ce-4688-99ed-8c5b4a8dfa9e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4bd083-684b-4ad2-bf56-e6848032067f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9efa347-23ab-4ac7-9f5b-970d61c89bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c31999f-f767-4e28-a773-04cc65138f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c55dcea3-e619-403d-aa66-587f40d7b994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142493d0-31bd-43ac-8146-ca1b00b80f10",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87889ac-0bea-4738-8748-b5345ad29b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569c6782-bf79-4d44-bd1a-376b798ed573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e8bc35-3dc5-439a-857f-fb14b40f821e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "60cd4bbb-3b4e-4f86-96f2-df64334a70a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887d8736-3f6d-4048-86c6-88ca733884b2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715f53af-449e-42f9-9627-09c85648a7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb27a99-edd2-4272-879e-298d99884cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bda5a7-46a5-46a6-b792-c73651893641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2f4e91a-9d57-408f-9690-91fa9e84ccdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be1f480-2aa2-4196-887d-b6ee15bdec47",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f54df29-c0bb-4cf1-8bf2-186e93c287e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4cec547-b119-4f43-8b17-4876feff9391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5a2658-3c49-4693-900c-fce267540883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5855e468-9081-4486-87f9-457da8f2dd0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec17f626-d528-4073-9848-915ec9d49865",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f461888d-19fd-4fe1-8b00-ec5729392f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7eb4cb2-466e-4c0e-92da-dd9ce8589f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36a4747-6eb2-430d-a636-e4d73a7a2d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b102c000-4739-40b6-bbb3-016122ee8169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7813f257-528d-494a-ad7c-19a7ceb6982d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390b3c5a-2146-45d3-aaf1-e66569c6665c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70e3adf-8f31-4769-84db-3c4774ae7374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1e84da-9805-4715-b160-dd0a421773aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f405775c-40f4-4e71-86fb-db333e50188c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468f4bd8-d6d0-472c-a8ec-60d70af490a9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4963795d-8026-497f-9c31-c468f835f5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f82a38-60d3-49b5-b913-112b3c32586e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd62aaf-673a-44af-9502-452279a96953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ffc4913-8c2b-4c80-a214-70dc2001d2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345edd3c-e789-4c8b-a235-cd4afa5d7ba0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e12c34-1c2a-4391-baff-d2d2563d818f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d71e3f-3dee-40f6-bead-82e08ef07f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f1462e-f039-450c-98b0-ae5ff87b3792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a791da0-4022-4230-8955-b1f8c0d9ce46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a5b1d7-572f-46bb-b436-e832ed056da3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265a9838-7ad6-4ecd-b26e-d178fb210c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a9eaceb-5abc-4713-aec4-3ae3308b56e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4318b9-fe02-44d9-b610-3e90f6eb286a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0877dd1b-9280-4f12-b2ba-13584badf65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c551e984-521c-43cf-b8df-a2176a7accb3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c805ae9-661a-42fc-b420-44e82cff3163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2140f9a3-b06d-4559-8e87-0bba4ade3952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f89bba-4953-4309-b5b7-c116a16b6e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7505ce3b-d559-44f7-949a-7ef342371fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbc5c54-6729-4208-84ff-b89d90ba1d39",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fbf712-dbb5-4642-a049-d5c6d46ab7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01093453-4674-470f-be75-3ca53bd08e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f2d2a7-a141-457c-a7b6-f0f0775f1979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a89db19-d1b8-4536-bbb4-05572717a027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b25b79d-c2b5-4962-800b-45d18d24126e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73671a2a-0b5e-4398-9bc9-a4f8c265a302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0940e137-be03-4094-8647-7a92d0df00df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbd0866-25bc-492a-98f3-1ffa8ae798b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31b3c0d0-f635-4de2-a97c-b63a33898ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d524ab-17eb-4da1-8460-2afe8cd607e2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617fb027-f621-43d4-b204-a38a6a6cf4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c8721ec-cfb6-4a32-a623-15822a4b77ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37fd4061-21e6-48d6-a66b-1debc99c2f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e0435de-67cd-4693-8b51-ef8b720a78b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6731cb85-e01c-460d-a3b8-3ebdd58a3725",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf550f5-7a65-46ec-8df8-aa87fdce5e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5999d4-f5d5-4ae8-8b71-645360fae182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9645a5-f196-43fc-85fa-698ac1931ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2585dd59-e76a-46e9-87ee-6962303590ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ff3587-571d-483b-96bf-180ec48b54e0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f89567-e925-4da7-b98b-e92b96bc03c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c73a6fb6-336b-47dd-b4c8-3645ec978a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f886fe1-479f-48d9-b550-cdc15fc58c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "797bc983-2fdc-415b-8ffd-6ed464e5952c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e852be50-6a76-4a67-a253-7600a8757262",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f14c41-41fd-4646-a817-596021293194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d20d5830-3fd7-45f0-b70e-6952df69f467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e112961c-ab04-4ba9-94e5-1238d2cd293f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cddbf3a-1ccf-4439-be12-99d194b2d7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b85412-3ecd-4547-8652-a61b95337450",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3fce57-20fe-4acf-9498-471fec3df461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d2a5da-ee5f-475b-b4f4-a5590568fd2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f8f01c-0c13-418a-9a81-c38c9a9ff2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "347a90e8-4ab3-446b-b15f-a2f3c1661b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4655e9b6-fe67-4aea-b71d-ebbe803eab2c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b9b146-b528-4a88-aaf8-53198d6b574c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9d32237-8258-4cc3-ad4a-90e9da20e347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b1f593-71f3-47eb-917a-6c62624977fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f96df1-370f-41df-959a-09f5b8c77d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3808eccc-5ec5-4ad1-8437-3ab9edd27911",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9baca631-2d5f-45bf-99d9-160555a81da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f86f63d9-6e84-4988-8092-5c0310595400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9395d617-01c1-49f8-8b19-e3506d69e3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "962b1363-1c67-4644-809f-6dda28dfdb2c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0d06d3e-b7c5-435d-a08a-604979c15c7d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5906b2a-4080-478b-9d85-e076892d7111",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bd751f-dc8c-4e29-a006-77d18f0e1d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9b0f0cb-66f6-4ae0-83ec-91cdb2d2c401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cc7b23-5674-41e4-9931-d26b57aa2a0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72cb0e78-a258-4bab-b1ab-d8c4ab3ac4b7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a726848-02d6-4565-b9a3-2b707ef8c24e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b72d54f8-7be3-4446-8a59-dd1031b221e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "62fda7ff-3137-4ba0-a873-28268d887874",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d7d5428-43cd-4401-86cf-6a3acb88a6de"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29608bc7-5f38-4bdd-a2bc-f4476fdb16b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a891134c-a776-4302-86f7-40f2e62e1620"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5197c104-a0a9-4229-b654-36408b1460aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0af5f186-b021-4ac2-9468-3866dae212dc"
                }
              }
            ]
          },
          {
            "id": "0b5cd7fb-dd1c-459d-af60-05a5a2d32aba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "df8e807d-37b1-441f-8379-fe28ea852e14",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "2f401f98-0f5f-4517-b0dc-7ebe64367cf4",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5c9206-9998-4e20-b3bf-390c4712d7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ebf9518d-25dc-4798-bed5-468db22d3c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35ae74d-537d-4e80-8a7f-aac1569f99ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8015f469-08ee-489f-a4ac-08db3b202495"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6d97554a-1939-4125-9c55-0607bacb1439",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bcb253d-d760-4b47-a991-c82b121205c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e363a70e-f8cc-403b-ab85-a20e5ff008c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "959c99b7-f622-49b7-8d15-e33a7f6a7d44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80437677-9a64-47e6-93ee-45b44ff1dcba"
                    }
                  }
                ]
              },
              {
                "id": "a50550ee-e6a3-4832-a18d-dbb2f7b2a544",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7af45462-4e57-4e65-899e-9a2537df0611",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ac5de39-0489-4f13-b183-69158c77483e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f85d4228-e3d3-4c0f-9e84-95c890caeb15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "15601816-197b-4966-a16c-af77ea9be81c"
                    }
                  }
                ]
              },
              {
                "id": "6b7f4d00-f332-4df5-823a-0bc50c402f5a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89fd3995-d865-4805-988b-6d2aeb361ecc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8af238b8-b1e3-41de-a0d6-953864e1bc3a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acc0b975-ddc3-44c5-8965-7ddd672f788c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0f9c51af-1f90-4dcb-b1e5-a807572d0c89"
                    }
                  }
                ]
              },
              {
                "id": "99de8a4b-16b1-4fd8-9b2d-3d477031ef07",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5f5d3c7-1c1d-4d39-b274-9ec57f30ee54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66d44747-3b60-42c5-90a5-d5a22859c222"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2bc94479-5c00-4373-8cf9-779f7709303e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9ab25120-4619-416c-9e5f-c438dd41ae91"
                    }
                  }
                ]
              },
              {
                "id": "9b3c71bc-3a7b-4a9a-9ac1-18f2766359bb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93b498d3-367f-483e-8751-555e67540834",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c525e1a-06dd-4457-b946-5bdd210c246d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1fc4999-ec2a-44ff-8891-54aba59950b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6eed02f4-1ae6-41a5-bd99-01a6dba30340"
                    }
                  }
                ]
              },
              {
                "id": "7b747d86-f94a-4f2a-b891-94c322fb1f9f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c016f35-108d-4de4-9c1c-1c2b34dabf80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "288c171f-69b3-4be3-a2b6-9f8b27641862"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b97ffe61-7841-4882-b798-59c47ec8a5a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "db5525d4-2d1e-4d7a-ae82-6c43d9fca89e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "20abaab2-8a65-4c1f-bb39-6824fbb3f5bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ce5ef6a-d91f-4377-a70d-9dbe2e56b05c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dec6dfe3-3909-4adb-a4ba-ef9acd7138c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5fa94c28-7d12-4c70-bf36-c1c14b0aebc5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a0264e3-7959-4c62-8ba8-d2272e7af1f5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1e809f5c-08c3-4d08-8e28-877189797a23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "838532a9-42d6-4746-9caa-69cc5612db32",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4ebcfdc-5e94-411a-81ec-cadf14a45785"
            }
          }
        ]
      },
      {
        "id": "7fe3c7bb-2c21-4f86-91c9-defac95ed9bb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f98fdf7c-61e2-45bd-88c1-ef4cce124beb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "295b26df-c160-4e21-a000-8642df2937b5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bcb2bf2b-a30e-4f35-be36-feb9e22b4cd4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023b0a74-5790-451b-8c88-ecadafb5bd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9557335b-9d89-4e0c-a7ac-b588f66e57c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284d0ebc-c6d9-42e1-a7e3-dea32446a393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb9cf5cc-df58-441d-804f-6bade35f0713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd4a234-5e46-4ac0-880f-25ab2ff06655",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4e2395-2c7c-4c7c-8dbf-26ae88cb94c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0077863-947c-4bbb-82a5-efec1c33c351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2f205a-fa0c-44b2-82df-b6147d948144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f930695-2e0d-458c-b9ba-c81b8184203d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64339991-c928-4c49-bfe0-d76d5058afcb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955e6045-27a9-45ee-b7ab-f6508e31df8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78fe0d0f-1a15-4bb6-b074-09541ef12d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03379019-358b-4656-9482-383d97f285cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25b97eb7-42e5-4d14-8c10-d53d42e1162d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8bbe23-1c23-4c79-8869-04c7edab9760",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9a0b7b-3fdc-405f-8eb2-c52872ef4e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf388b0d-ba91-4edc-adb0-a4d31856233f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d9551c-2e72-4341-b2f2-eece4464e3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cfab4e4-6acb-4f08-8b86-13c3854d8305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ed4fdf-88f9-475c-a37c-69e73a934f29",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0e853c-570c-48d8-914f-5fb24381935f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a06c79-b198-449d-9543-8d0f7fd33d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca152344-8222-443a-b719-de69de3e4b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98c173c4-30a3-4e9d-9a29-342d12d6d536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b7a6fe-87c7-43d5-ab0b-9bab7055ac3e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3630912-33d9-4bd4-b6db-621fb376f596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa470cc4-f6ed-4597-8a9e-20d1184b4d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fc0f58-f10d-4a45-a21b-2130a21acb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffa2d828-6b9b-40a0-aacc-1706a9e26026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99932ba-ed33-4a15-8637-9f1fd38474ef",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf0574c-bafa-401d-a1e9-12709275e71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ce2404-6a5f-4491-9ac2-2cc85286b3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0d7b51-9526-40df-8b7d-6f952387ba4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "678540c7-8ecb-42ee-aa36-84b3a17c9904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5aa95a-35c1-48a2-b54d-3978f1e860c0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2d849c-de59-49fa-9fb6-fa86d9dc5bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125107ab-b54f-4baa-85a6-fb1bb6f31d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518dbf27-d622-4cde-a148-3c34c5d68a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f17e5a5-69f0-4e2e-a029-b9b849092c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fa39aa-4ad7-48cc-9392-a67eea951bc9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cb003d-858c-4fef-86a7-dcea925d57f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e148b06-59fb-4f94-80a1-114096802349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0dda24-e6f2-49af-9c15-0381d2d8e0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a38ba4ac-b54b-4704-aeae-715f70a2a568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c07bbb-3196-49c1-a2f0-718866b17158",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a96134-137a-4ec3-869b-298d5206bdf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "528bf7a0-a5d7-4f70-a850-2af909c75e80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93f189e-f812-4bf1-9325-e6f8d5cb1622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a168136a-fc16-4282-ad4c-d078d6250c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d45169-8f5a-470b-b86d-02e51b523fb8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1e3fa9-33ce-4373-9cd8-0e0a1f9194c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45462607-095e-4c11-ad97-e0aab5e1ba78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0276335a-7c2f-48f3-b820-b39349bd77ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6006559e-8498-4c23-bd40-6a4fbac9f4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07d1890-dfbd-49ce-989e-16d24511d4ff",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4acc21-5c93-4e77-aeda-2a9cf2c8e914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac3663e-b597-4bac-840c-f260e25ce28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828b9ae4-fa07-4767-8366-dc571ecc0d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5382b3b2-124e-45b2-8724-5fbbbbe11ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5fe51d-f4f2-414c-bdfb-990036064472",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381414aa-a2d9-47ca-a50e-aac4f3210863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2511c1dd-7135-416f-8d2c-6847fa752193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fcd2db3-144e-4824-82d5-260387d48b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16b9d505-3467-41d3-990f-47e5b05e8772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f29979b-3fac-4df3-8219-4a7fa56d4030",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee94bad-ed08-4abf-8991-a83eeabf7114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4600f1-5cb0-4069-a04d-f905ac9e3083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6c63d1-b082-4942-a4ec-adc1cf7063ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc560de-041c-43e3-bb82-9c5cf23594e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc68b5aa-b3a9-457a-a87a-a66a17d4fdb1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8eb04e5-3afd-4201-a5c1-b564c6f8c8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16bfb7b8-e054-401b-acf9-23fd7891cf62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de9579e-31d3-4e78-aae0-2e835fd45390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "185b13de-a79b-4e97-ba34-cc000ebd898f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a20c81-c036-4dcd-a458-7eae39cce192",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daef2e3c-4cf9-40e7-b284-2e8053b59a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f15f49-f857-448b-b2c0-9a97d131a50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1a6e36-dc3d-48ac-acfb-ac2aa3436242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "08c8ff51-c26a-474f-a29f-7563c6357434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ed22d8-3cbe-4717-8f99-99c0feab91c3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af22946-3684-4412-bff6-6c50836db443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504ef5de-80b1-4b35-9cab-b8fd69738139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa6362e9-b603-41e5-8534-4fdc935582ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "dabd597e-be79-455c-b0f0-e38e38c55f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b2f913-d069-4891-b19d-2902b9669e86",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a952ea25-4f19-4cec-ab52-ce9fbe5fc34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9f0569-caf2-4db6-ab68-c9e9eacfed55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a32580-e423-44b7-baf2-27ab640cccd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd25ab8-478d-4cba-97a8-7da2ff49505e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c736c3c3-097a-4c0e-86ec-5144a8a69209",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25097c36-179a-491f-a76e-230c2a429acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f739ca9-293a-407d-b50f-c583c3bd79da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51796944-5ee4-46a1-a5f5-1db6dae47841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f0fc46c-4155-4d59-bdf5-3b15680c3e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd09889-eafd-40f5-833a-9c8267a4a4c2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35f67cf-8623-4e92-a158-e752fa6a35f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96bd49ac-1e74-42d1-9739-af59e40bed8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae4e7a9-d2f2-4356-aeac-b02b6205fd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7923f16a-7853-4dbf-9b7e-0b87059c99c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15245782-725f-484b-b0fd-88464c894865",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b1f207-3059-4475-9e28-cc631a417895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf662cc7-417d-4239-9a30-01dd53a3ac0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54aa3912-f77d-4bf5-a9c1-36373518cc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4560695-9915-4d5c-b654-ea06199a9ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68013fe-b5e9-43cd-955a-69c0b5c302ad",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1595de5-26bd-478b-9382-a40cdb119161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25441b7c-5560-4c32-982e-93aeab5e2534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc3dda2-6f87-47d9-a7be-a0beea36ff49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34fa44db-0b0e-459d-a94e-ba164fea9e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4165f1-126a-4c74-b2fb-87ee8cec73bd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ad1606-a0f7-4ab5-ba3d-096ce5f05819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a153f5c1-86bc-4146-b230-5c1be35abbfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74329fa-ac33-4ac5-8c0d-98ce4ad9fa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da786eba-dad6-4cbc-a3d2-8958fafd1a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01bc4db-3cd9-49bd-aef3-593f60f6f556",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e18536c-aaaa-421c-a589-4d09360c7f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0a606f-4f3b-485f-8103-89f9fc314404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7f03b7-3d6b-497f-994c-b28a30b069d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f43b8b7-ae3a-49b8-86ce-33412d31532a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f08717d-5c0f-401f-8752-a760560bdadb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ff7d61-c07b-48ff-aaf3-eb41c4c2ba06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85fd6e5d-1ef2-4701-99ae-da3e031d3a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29c69bd-1b03-41ff-92c0-259ef531ed12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1721d7d5-efad-472b-9324-145fd23b7f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685bde1e-4eb0-4eea-8911-4e5037f49fa3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b30640c-aca4-4ebc-884c-2fdd3d2249c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84936ebe-8d3d-42cd-9dd4-9872f5e13227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b5a9fe-500e-4a84-b01e-290efecfe119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b742e24-1f71-4fc9-b929-08e118b8a55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357306bb-0c6a-4487-8d18-94eaa3f44ed8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318bc8a2-36ac-4c7d-bfb3-a9e038d3b2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bffb1027-ce50-4331-b3a9-34d8b5ccacf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54175d09-1e6c-425b-a520-0fc62123b20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c571fdc-d9ee-48a0-a496-1c89198cc12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959202be-0cbe-4dec-a43f-ee03d3f8d21f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eca8777-fd73-48ff-adf6-7011b99a4545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e644fa89-b7b2-462f-9786-da6e590f4494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552cad32-50c4-4746-8843-c822dc4d9e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daed8929-504a-49e9-a76c-385d0ab750c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04077518-2426-4e69-8c29-dc0d463586e8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29ebb07-c4d0-4814-93f2-afafaf09e3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fabca7d9-14b0-4bfb-80d7-8fd1f66178a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a482d3f9-0db3-4493-849e-db9752b4e226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d6b3f6-64b9-4485-b486-73885ddbdfca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d552d0-fbf8-471f-997e-33746692179c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91131cbf-c84d-4b7a-9ced-bb45796e3526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b5d74ca-c35b-4172-bda3-4fa9887f47f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0009cc53-ee40-4032-842c-fb74225c01da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc74ae8-a7e7-4277-9f1f-ed1e887539d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bdb61c4-c13f-465e-94c1-0ec1e176d11b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2599d625-ded6-4340-a7f8-12d92071be3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab73295f-0765-444c-8ece-421c5c4a53cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123083d8-e98f-461e-a662-00810ad71ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "951723c1-4f30-48e4-a214-9ffea2ff269c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861ff65e-59e4-4692-984d-bc21c2330cb3",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bae714-566d-4835-bfa1-d2aa9a88bc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650fa0c5-02b2-4261-b0af-27b1333039d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2796f05d-e176-49cd-8fa4-9f549af0632a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "337d37a4-a937-4e5e-bfb7-0c48a65ef1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cadd81c9-ed37-4817-9272-3c83c438a09d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d125be-1577-490c-b24a-4250b7cb6101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3dd0cd2-582f-45cd-b912-5cbc546b8c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7410fa42-cbe6-417a-beb5-8026a8634953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56ac57a3-6ffb-4473-9ffb-60bc2d4ddc60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be11c2fc-9159-41cc-9271-1f1ab54df6d2",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4a8ddf-ddb5-49b1-b764-c232b1ba3ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ee8f14-cfb6-497b-9574-e5d95300cf52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5609444-ecb4-482a-972c-14ce4b351012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1009413e-55db-4490-951d-645c1a04bf37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21827a12-ca01-4cba-ab19-84c0e824d346",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71fc6f61-92a6-46bc-98f4-d4f8e703d870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b7651a-fc33-4347-a7a4-0135e94660bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7726b3bc-0808-46b9-8477-681233d0aeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98684483-230e-46ac-9bed-1d4e156346bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d737b148-f1c0-4fa5-bacc-c9406c175db3",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aaf9008-48d5-4f12-b915-947a6ca2ef6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "174bfc8f-1f2e-402f-b3ed-dc47c509efac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d41e1d1-6980-4ac4-9b98-8e3b9f5ead07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb90453d-712e-432b-970a-fb4774c7e555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404dd9f2-e1bb-4781-a2ad-0926992c1fd4",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7734bdd3-7465-4dee-8b62-cffee8edd627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0029731-5467-423f-8cd8-28b580df64ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa0105b-f728-43bc-9a0d-339e8c0df0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8883c4f-6bd9-4639-a3bf-b3904d0e90c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "39e357d8-d5cc-450f-874e-6c64a53942b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc14f211-c720-4e62-a281-cb0f4f41ed52",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad811fc-d38a-492e-949c-517bb0d4885a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "59003d23-9acc-4752-9ba2-6091509bcb2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270d2488-c1f7-4e6e-9929-53c92ecc045b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "737ca204-a410-4368-a794-6d5d6145f573"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e4ecd60-9b9b-46ec-9488-b0faadac96c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7512078-4753-4710-a5ef-1abc8144b640"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc83498b-ca59-4f8a-ae52-9d30ffb9ea3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13a8ec1b-ca30-4fd6-9241-13bd66388d6f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e0536ff-1763-4ae8-924e-9723d9f0d450",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ac53fa55-9082-40fc-a74f-f4b60e710135"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "495c5b5d-c54d-4ef5-abbf-f8ce2149c66d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "594bc224-78c7-42f4-86d8-26146eb05724"
            }
          }
        ]
      },
      {
        "id": "67152a01-7269-41ea-aa9e-60b7b46b903d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f057f491-998a-42ab-ae5b-0a333dcd890d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "acded6e2-e080-49de-8edd-65050789576e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0665e7e0-c98e-4aad-8fd3-f3eeeb38ba2e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1ec3e7-5516-4f03-b385-1a21087807ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1afe32a-4187-45b9-926d-94c862dbb62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74b1332-fb38-493d-8977-83603f2593fb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9aa4fd-444a-4aab-abd0-b1bbdb4fe25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46321912-a10b-44b7-be1c-4b8b0345e7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562bd0f1-7e76-45d1-8461-671b32a6b958",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f92490-44c2-4235-b900-d6295e1ae59e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73bbe7f7-354f-4794-a63b-b179bb708048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e698c68f-d25b-42e0-80e8-987149c2968b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2244b233-489b-466b-87cd-944cb4c99408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a3e003-333c-44e6-aa58-105717cd7574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11721d1-d6a3-4b04-9e9c-e0d451a4fa3d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db088d9-9b04-4a05-b075-f321a87b5866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f109b4fe-7a78-4dee-affd-399d58aebb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8db3cb-e0f3-4e64-9cce-561c3716f892",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3cdf603-c370-432e-a823-20ad43c1d925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca733a0a-4cd8-416c-8e42-dc3c9abc09d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88913827-e1e1-4a01-bb7d-32e2ab3379a2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a504a3-e8ca-4d48-8013-dfd93a2582ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed84bf0-f9de-4510-adba-536a728e3ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4738beb-f24b-4246-926a-6ca3d623224c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c230dd94-bd49-4353-9713-06806971fc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f7bc6a-59b1-4d08-be05-ac711b32d373",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de8083c-6f7f-4031-a654-5ed3c8509e93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "446d86ec-667b-40dd-a0df-113bc47ac7b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bc3a4b-5892-44bb-ad85-0d9e565938c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a6ac1f-5037-4ca1-a359-32f1cf53745e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be19af53-d4c4-425b-a757-9482ac881c93",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f96570a-5d1c-411b-a9e4-c55397277c09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57186445-9f53-449c-91ff-703a109e2d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f324f32e-ab02-4c6e-8272-cad36e35dc0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b98374a-f2e9-4814-950d-66d4e3af1bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d31e87-1619-4828-a042-071a32bea6da",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5369a0ce-69b2-4361-81ae-59f81dc8995f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80da9716-5ee5-42e4-bb3e-b73335dad55a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4f4d1b-a6ef-48f2-9ec7-78fccb08a269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "984a1ffd-aef2-4132-a0a3-dc66db96e3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f95b24-073d-4a35-af8e-e1e7fa1f56f8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2012c18-da3d-419f-8d33-bd99e1de2e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c9e0d0a-d1a9-472e-90e4-a4df15a63bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95eef100-e897-4dea-97cc-dd718ca7abca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1741dbe4-ba61-4c94-bb4c-35a4bc6b1198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6baf76b7-fc62-463a-9828-e02fec71532e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cb516c-fc16-4922-92d1-ed0d6fcb2d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b97e2e-144d-4825-8a71-0de771dc9ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b98b092-6a2e-4a81-8083-a1f1573b5e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b6aef1-9aa7-4a64-a4ca-7b95c4415d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecd7e4e-cdc1-499e-8315-f15f9b273638",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2942b03f-64ab-4529-b8ef-9a4284f33b85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bbbfda7-4999-4327-b5c9-5655314aebde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be47d370-6b78-4ade-92bc-bafda6c5ca10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d353258f-61e3-477d-8ca9-f9014745603e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f4a934-3840-4ec8-901d-a752814e0afa",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ca8b65-86e0-463c-bf68-c2f463fb1aa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1bed3f1-4733-4111-8078-dca86a7a5329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5f62cc-9e50-4368-b984-8787818e4b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "340b4b63-5035-494f-995b-56ae91dc420a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbafdb1e-ca00-40aa-873c-efc4883800c4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1af1c0-d540-4e6e-b414-aec56a405973",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0794bbe1-71d7-4103-9066-895e61683689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf0bcf5-777a-4115-a3d9-2a88e493d24d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9dcda10-8644-48ec-bc79-dc50737621b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa2de0e-0872-4ccd-add0-411cb83ef00e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9bd5f7-e5cc-4ec1-8558-9e5d15477685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d28a793-da26-424f-8ff8-25dcbf419410"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f54465-17e4-403d-b1be-3384d1e8375a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ffd8fc-d811-4d51-a68a-b70ff20382a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86bf5d7f-8811-4802-a649-f3695945b327",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae03f39-c399-4f59-9642-a47692db1a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca0ee87-df59-4b6a-9289-9c8f57820d06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9197fe3-2976-4a7c-8e19-5654d416972b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "860e2b88-143b-4d87-926b-1a01682c2142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aff6cd4-a6ac-4eb7-914d-56a6408a3a56",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c11e3f9-fb5a-4c4d-a0c0-8fd6c61c9915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a432ce-9796-4028-bc1d-30841d450828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfb0174-473e-4ce3-a31b-d2af97bc89ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2347a387-a081-4857-a609-a93a52d54b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5ede4d-eeb0-44c6-b82e-402ee5b7ae61",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3370b3d-433a-4278-a549-c260d28c5e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9cc4c69-74f0-429c-8430-53faa1827abe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79130f25-b12b-431e-972d-d4eedcee9b66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a713d153-00b5-4f3e-b98b-7487a197f5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67033cfa-9d58-465c-b7b7-afbca6df7cce",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0145d9b9-553e-40a7-ae60-f83ce927d674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9875b7db-3851-45a7-bd9d-c9297359fcbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5801c2c3-18fb-4639-93b5-ac2b076554c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2642d030-f589-4935-812d-cd35e6a569d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377425fc-ea46-44bb-939e-8bde6fcaaf2b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae4ef77-6232-4ab5-a1f0-7ad26856ae3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06c80cf-b160-43dc-9b62-562460a668b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f469ad-ae8f-489c-9aae-e96a9aca6fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b93ce9f-91b9-4e9c-85ec-0a84005d1a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0251a98-694c-4b51-aac5-35da2c0b2359",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc18057-5d4c-4b26-b4be-5a315c441be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ffd3e92-7b89-48e5-816f-6ac6aa4f84a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e459850-a7a7-44c4-b9d3-8e422687c87d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98bc527-cd86-4979-ad77-40851dcf83d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0edf916-7a9c-41b8-bb1f-045073c122f4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4375712c-793b-45de-a726-bab6466af795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e19934-e41e-41bc-84d3-0c89a7e5cdb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e63c2c8-8da0-4e08-84d2-44a661a44860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d01bcf-cada-464c-9d29-1c7c724c6b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebb2540-1261-43c4-92c2-3a064755fb67",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519aeb02-93e8-4882-84fb-cdb319783e65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31adb49f-f650-400d-ae89-35919ecff309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada662a1-88fb-4f9c-9bf6-4543e82a7cc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b186339-b4bd-477b-82eb-6ced9ef45560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a499da-fc27-4e05-bbb8-6bda5ee1ad0f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398419ec-b3a9-4dff-b287-6d9c57e02669",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e428b563-ed6c-4252-be2f-65edfa3a0c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db37062d-070d-41b2-bcc6-a4a580a1141a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "982c7ba8-45aa-4568-914a-f352265a4772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7d179c-6ad6-491c-aaa2-6d15be30c7cf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6b29bb-cfaa-4c60-8bff-a10857f4a5db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0d7f405-c679-4fb0-b35d-6ec1b86435a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bc969b-ac5e-454e-b4c6-23d3fdd626d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196c6e0e-05f5-4f47-921f-b05d999ffdf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f2170c9-ae9d-42d8-96d6-7accb162603b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ef00ba-394c-4496-b9c1-c024c93a4358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa961cb2-eac1-426b-8c10-fa5785e4f6e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e8af3f-4c56-4088-ac84-f2a835983bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd954e7-7e1d-4808-846b-2f4fb63d7fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3583e0-0d5c-498a-8c5a-03152d155eb4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfba39cb-9564-45d3-aae5-e8077b1a3cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2491cef-4560-4def-aac1-9a1dedc4a033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b373ebb-d433-4513-a40e-d209a0688f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b337405a-0cb9-4c6c-b8f7-82f8026f4ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a228ee0a-e23c-41ec-8ed9-0e39a4af7e86",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d75f50-2d42-4a14-9ffc-7fb6c2126a82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "402baea2-4b31-47e3-ba1f-b23d600efbfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "785a168c-ad69-46b6-a884-6733b2635010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3ce896-30bd-4d74-9f50-d911234866c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92bcdb9-3ce6-402c-9b86-765544cd261e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e061e76a-ec42-4b1a-b0b8-b06fcc22cfb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d9b73aa-047f-4ca7-af5d-922e9f633cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bff8679-598d-4505-beaf-69f655cf139c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd5b249-89ed-484a-b4c3-91f8ab6aa5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74509aa6-900c-4cc9-84a7-7e9402b4925d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1602c39c-7006-4c0f-9202-dd8a635295c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fd4a642-1690-4d86-a7d7-12a5019a9ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df36f253-fd70-44ff-b958-d5051a32a405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064d21b4-3e55-4f09-a589-cb7977c49edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cde469-2eb2-4f6a-8434-adf16376615b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7552f7e-2b49-4b61-9190-f96267b73c24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "276ef3a8-b482-4fb0-b195-c8b1e23e4073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a13a83-0449-41e7-90f8-7a96b85da7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd78b0cc-5809-4a66-8d27-a549bb30976a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a2def5-f5f6-48bc-8535-748f0987de2c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fb658c-1d9d-453f-9077-aaa601aa6144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d0a7e7d-ee29-4f33-86c4-400ebd02c28b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cf6600-75c5-4d2f-821b-16cd17f2444c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0cb586-c99c-4b63-b98f-5f11dd0fc9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad7de2e-977d-4fb7-8b0b-3011b1791cce",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6bea8c-4edd-4953-b84a-3ce38625bc30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb8ba146-944a-4701-a0f5-7edf0d55599a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6169a8-acea-4c14-8460-b3aa53aa0ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a53056-172d-453c-9ed7-654481ea7c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3891b83c-a5d5-47df-b9af-9a3e491cef16",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd290bb-c054-4df5-866c-94a6f9512400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc0f67b-1c2f-431f-aede-44270fc0d013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "448ab83a-7e87-49a1-8fd7-aa4d32c9da1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcd1938-b4b5-4145-bcb6-116bd61f884d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4549cd3-d33e-4062-9a46-08861438c965",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb60526-f8af-453c-ba68-89ddf3da9768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5894e45-7374-4840-867a-51568d064add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ec48b2-fbd1-4e44-8926-2be8ceb4782f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874e993b-9742-4a39-b162-c66e2d345286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f49ceec-e9f5-4a30-ab84-3504edb5ee28",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7596fa7f-2dfb-4989-9f01-1914dead8581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f4b88c-13dd-4b67-9e05-8b551f76e1a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de353a3-8047-45f8-addf-c2776a62165c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960e1554-e79b-4261-8dd3-17d6c0dc42d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3de2677-e242-4f0c-8670-1b0b287d900d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0de1b6-2ab3-4b9b-a594-a9be07856a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e6bb57-5aa5-4655-8a01-447e1602d23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ec9388-72b8-41c6-bda0-4c8c6930da03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44999ca5-3e9d-4ceb-bc5d-6d61ea8d8240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47c875d-af94-4005-8810-15e61453d43b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb023b3-52f0-4db5-8030-55639c124a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82f6c4d-9ddd-40cd-8e14-87cdf7a4c39b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d806eeef-7d3e-4327-bbb8-8f19246097fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea2ad729-6fab-4d55-bad5-5792cf6cdf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29607e1-2e55-4a7f-a24b-5bac9d74d321",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ebc1ab-9fbb-45d5-9d49-1aa90818c856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a672c7fc-31f1-4a06-a87f-427e0fadcca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2d1613-265e-4126-b111-2cad955dfaa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d146e565-9217-434f-adf6-81d6dffafc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7354cd52-a8f7-41d7-ba57-db2315bd147d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d665be0c-9f43-479d-a57f-2402f243b275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121814c2-042d-4bf2-8ca3-5df67e145eae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a95deb7-d93b-4f70-9713-9e23c7b7b5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c25470-9972-4a2f-b579-46b82ced8de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a62056-1dd8-4825-9773-821f247eb3eb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3fab216-214e-404a-a52b-ef59b14b1bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66aa26b-f803-4593-bef5-c2e8508730db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a444b2-6de7-4bde-a62f-f19f6f6a2341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10918af-b934-44c8-bb77-9c2b74471abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d889c736-d40d-41c5-ba69-9081f04e0dd7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e83efa-fb03-4de1-a106-896a6237b578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fcbcff-442d-42ed-b25e-42ece9e887b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fe9727-0836-4cfa-a669-3117e8b542c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f32e297e-874f-4390-acd4-02e38c698030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34561328-9005-42c7-9d66-66d1d2eecf05",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2368d4-9704-43aa-8f97-ab55e2c8f304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad5a35f-2377-43da-8c76-17e9744f64c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "954a6bd8-cbbc-45ee-8b63-f62081864c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4df1e8d-d18f-44e5-86c3-763ae1a66cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206c74b8-47aa-4a75-a9c3-27c13253c31b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffa9457-ebd8-4b5f-a571-76b6e1a74938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32fd4a46-a9d0-4658-a36b-76d875e19ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb7ea81-df14-4ae8-88ef-34099430f256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f589a57-59af-4d0b-b4bb-07f36ff46d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a64ee5-fe2a-4d5a-b6bb-ceb996aed766",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bad0ef-c55a-444b-8eaf-4d31776f3746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b7756c-6ed0-4f55-a8ab-a97096475c4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "472bae89-aced-4c89-8606-ac40bd4bf549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6dc9637-4964-41f3-91a7-f7cfd16e7c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45431d1-6872-4e24-8e30-a9edc4e82864",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a200f3c2-f377-471e-ac4c-002f37f4a7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab85dfc1-988a-44c6-9fbb-c7d71ba1aca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8574d1-aacd-47da-84b9-646bb5264ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b887e1-3b35-4de7-bd0e-e6cc771b8ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6653f5-252c-4b18-8d6f-bad9e8f945d5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fa76af-7ca1-4c5c-8a8f-d6d68d870786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091b5582-c1aa-4b52-bb0a-337e9d69e443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa22af9d-fb74-4599-a3b1-53b78aeb9459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e5c14c-7841-4281-a265-e18c9b7da1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11dd0a5a-e447-4548-927d-abd3be266b1d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db911925-a9e9-4106-9057-81408376e44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e291ffdd-28ec-4374-80e4-9e6b68622505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40442f4d-8e1f-47af-b9ae-2457ed37f3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eda6ae2-1434-4972-8a28-12402dcb25f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cdd800-4ef1-4a9f-8e08-0005f7c06d61",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae0d2b9-5d76-4f2b-b8e8-d1372238fc6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9686625a-cd3c-4206-ba61-ee9b45256a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "705d1dd7-2d1d-4c55-a7f1-689006fa5f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefa9dc8-4392-47ad-8334-944a85f7f312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a092fe-70a3-4b85-b7c9-73c8e2b9a634",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21166474-d509-4c06-80e4-1153e53cf26d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29629121-6d73-4799-9b7d-d01818e5bcf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8f44dc-f69d-4010-b6eb-a5957ea9922a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c575228-10bc-401c-979e-c1078758ab33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0cf185-9cbb-429c-a0c1-774807cd7b72",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192ab691-1607-4cc8-a871-ba3dd9325900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412aa499-e28a-43ff-8992-a2b8b0bb545c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd098e9-f2ec-4472-9f88-56adbcd6330b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a516bb-90ca-4a54-b406-20e3968ffc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcdf5ea6-c38f-416b-997f-2412d7a08e3a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675a31c3-23d3-42f0-b17b-0e41f211ef15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2231226-de8e-4c2a-8916-b2640bf3f054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e513e2b2-b1b2-4f9f-9e05-4a0fe4db85f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c77a42-b35a-4b9f-b70e-5b6e97f27ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b09b4c5-40df-4e68-b661-e73ce907a4e2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ebdcb3-1cc2-4a9d-b9e4-d3acddef4750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82ad6de-d272-4ba1-9ad4-dc94bb939b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f50cbf-a53d-4ae4-9904-44e3920080cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99a57a9-734b-4807-a453-b31844a155c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3f3e1f-4ead-4313-8e7d-4dbb2973e35a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa566012-d66e-4c48-89ed-bdb143eb9404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a1cb8c-25e3-474e-9986-5bcfb1b1aa61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25fff8a-6164-427b-baac-3c48bb58cced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbcccefb-0dcc-4869-b887-1e2be8ada99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83f20be-c93d-42b8-a050-1d56feddc3a7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ba55c8-b189-4499-844c-e8da36518f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd51d14-4d16-48dc-8bc4-f5a8458a42ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113bcdd3-59b5-4747-b48e-e8d44bb53c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8705bc01-254e-486f-9404-950ba6206b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed54abf-1dd9-4b1d-862d-24032f02b2ef",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1688f0f8-23a6-46c3-94ea-3c5e58fddcaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e2a074-148d-42de-bf6f-ac1fb9b0e519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba92ac12-4cf3-441e-a9ed-473df1f8dd52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777f5eca-7e2c-493c-a6e0-ef27a7b6c56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949a888b-9246-4213-be9f-a10b464d2006",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836d220e-81e1-4bb8-94dd-7da1f44d4b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "860c89ff-b56a-473d-a85f-bff728f7b08a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e946ecc-0f1d-4258-9a76-2dafe61ba933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c21db0-db8b-42e7-b34c-f565dc4f2d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74cfc63d-e4a2-446a-937e-b3da771c5370",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c0d382-ee73-4b3b-a80a-529a0faf5509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e044ed7b-57fd-44b3-b4b0-4b30ca8ac627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c642b2-072e-42a4-86d3-1419e5983a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b22e889-7ada-4462-b73d-1c4d714c9bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc362cc-578e-44aa-9543-ec989d7a8ab4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fa7927-ed0d-485e-a24f-97ae2a65fed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d105000-2b58-448e-a405-8180382e6959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a32f80-6721-4f92-8899-cae6f5e1a511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ce78a6-570f-4cb5-b1b5-0b92224a02d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f90f391-e200-423f-8281-d4c54c467f85",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1022a37e-a2e3-4481-98b4-3766364285a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa4f82fb-1ff8-4c15-8217-64cd997f043b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd5feb5-621b-403e-bac3-553e90c2c207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef808c22-d5c8-4e84-b74c-1408fc11b685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d831e631-05b3-4ff3-9dfd-80c1f468f273",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afcbf12-50d2-4fcb-9a71-435a49b7d98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd0bfae4-9f7c-451b-93eb-85fe36b4a292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75bd7441-e5b4-442a-91ce-2ff0642885de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52e112b-9784-4a73-86e6-4d36b2e6117e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a426cc15-2bd9-49d6-bc1e-8073144a3b4c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f31e7a8-f5b5-4f21-abb7-66e368d20f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b830472-60d7-4c3b-a772-1b0bc3576d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1b0bac-d8d3-443b-90a9-c67c1e9a70b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9247e253-dab6-4d32-94fd-9b5bf3cc9a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b257f50-15d3-48cb-88a6-00edf514cf16",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ca9413-a772-4600-91d2-e557816705f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29a9ce27-b82f-4501-932d-fa9d4dfd3ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7802b52f-13a6-427d-acfe-56b4eeb5ab42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9245d91b-4aad-4a6b-ba4b-ce76f13661da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2145a516-0985-4120-b420-da5a82d923fa",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da96221f-1db6-4424-a731-a490f3c8b188",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "597f6ea8-7231-4d9b-b6c1-f234dc092383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5288996-0525-4556-8dc0-5ac33f4ea20f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6002829-56bc-472e-abce-1270fd7f62ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f12e9c-8d42-4547-8929-2609ef24490e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5d2129-e61a-4609-8a10-1e31420e8593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5d1ab17-09fa-47c3-98b6-6e707f7c0213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7abbcb-9ef7-42cf-bf44-ada7d7ba4f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a9ed64-7a74-4b30-a51d-c082ef2e151b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb670be-cef0-44a2-9c22-fd309eeb7aed",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5f1a76-c438-4179-9bdb-e31a661488a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "923a8d14-2cf2-41a8-b170-ecf88ab4de7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b589b96-8968-4ded-89e0-68ec5173ae54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20abfc7a-5282-48fa-b967-4136ebc31499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc4e535-05f8-40ba-b4a8-2400dca8cbe7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9645a64a-b8b9-48f9-966f-dd01e6a7e71e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec8b8fa0-a3fe-4a59-93b2-5ce3784af463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d3b3f0-b819-4024-84d4-ef4b7f9cbb67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f4b326-e04b-4ba6-881e-caef2314e73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3394781-1225-4155-ac6c-a4c4e5346ba6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966ed0b3-1fca-4031-be1b-bb0d286e692c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "769bcd4c-0bdc-496b-a6cc-bd7174b69d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e3565a-ac26-4e51-bb48-4d289bbf7622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d14963-d190-4b8a-9ee3-eba6f19ab874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443756d0-0af1-4b98-b16a-e2f9d5d6f40d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b99ad1-04ed-4481-91a1-b2e4a883871f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32b18f68-2d05-4767-9b9b-7b4d2b65f2f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15b8065-d425-4974-a782-2941989a123d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c96a132-6af2-4917-a53c-3bbd040f9b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c20623c-9baf-482c-8f98-eb05f985867d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510a503c-42fd-4831-86ea-ac883fc3b242",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36729e25-854d-4d93-90cf-d1db56af8a00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb840838-a3f5-4a05-b312-d98f77a23fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b405ff8-f4f7-4629-a16c-76279e60a289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a1aa90-7a48-4bf8-aca7-4d46fd590066",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff7ef2a-7bc1-4bae-be29-2c0369bf1127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2079407c-64e9-48ec-a34e-ffbc9451a5f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fa52dc-281a-4f4f-b3af-be1e71974c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b37f5c-0ff4-42b0-84eb-2c2d244b16f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8308d646-243a-4636-a987-4f117ba66e6c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e591c3fe-1a2d-44ce-aa81-1c69cc5fd163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49bac8f2-ade6-4b2f-b303-5111372b5318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b8c648-06b1-448d-b087-ce63751da25a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1ead69-2eac-48c4-b39b-dff75610a03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2c7b9b-ce95-4654-afc4-16d2883d98d9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0790b1-f30a-47f1-a7be-efd602456d59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78a54efb-db65-42f6-bf43-7eb47d407c01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3a25ac-ec77-42a7-9ce6-074b2176752a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a70e7f-7fb2-4a9b-8288-0ffaee33df27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4509489c-782b-46ed-a016-416152d77d69",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6aec906-5745-4fb6-a8de-344ef3d71205",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e309b4ee-57bc-4b69-90e8-b7135c6a26f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2663ff0-eeb3-42da-b6d8-de758f226cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb4100c-fa42-4893-b689-618555c33129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e6832e-3b13-4ff8-b7eb-55357430f24c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881c2813-21c9-4c57-a96a-9c2fdb6ab51a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24312c6a-cefa-482c-a13e-a636b16411b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb6bfd0-eb44-4d2b-a8e3-47a6cf469c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c269430-619b-4584-b1e3-b3cb1e49ddc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4925d74e-502e-4cae-8e9e-48329e391b6b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0007a80-cb48-4354-a628-c5ab166801fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5af6566e-5eb2-4f38-9471-c87687308e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7810799-f4fb-481d-b608-a78dc3b58bd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf9486d-00b9-42b3-b5c1-8e50ff364487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1587e057-d97f-4df8-93a9-6746913c7273",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd5417d-b1eb-46fe-8894-28a7ac59a0bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "889a277b-2076-4ec4-8d2e-19fa6f0e3189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87255259-58a2-4118-a00c-3a435de90c4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74cf9791-603f-4806-883a-1bd6ef8665e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f3907e-2a80-49d9-ad38-425d35c8b667",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bab7a5-884b-400e-b98f-681e7b6d298f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "721855e3-6b72-4ccb-a1fe-101a0826deb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "785f6f89-d801-4685-b146-848026efe72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030fe289-c20f-4c57-b3e9-f32e89510970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75e4d15-75a0-445d-b06f-b9737f57ec2f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a67a55-a0f9-4fa4-ad1b-5867cb92f8c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d878d02d-87dd-40c2-b996-2c3fedcf6ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f0b738-b1c4-4416-bb61-c335dd60b7d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feba19d8-4e15-4c3d-93e0-a0de18362620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fdfcf5-d795-4d0c-8ff3-945850ce1db9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad7b1c4-8d6e-43d1-b69f-83f598f2101a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07562f35-9608-482e-ae2d-678146d64fab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d68376-f4ee-438a-9ba8-c93ca66585de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2edec61-090c-4118-a10c-1dd619929076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4b917d-2da8-4fc0-abaf-133f1bc72676",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1a9922-048c-4025-ab54-cb30fe17fbc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8063ef9-902d-49a7-ba42-54630951f21c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c9c4ab-cac2-4c03-bb73-a18e6ef7fecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0687d890-2717-4d85-a2e8-07b757eccc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fe7136-7e0c-4e43-9b5a-2a74ccaa6a23",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288ee210-777f-4078-a769-f2f56b551ae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cf5e9b2-6e4f-4cdc-9caa-57ac75d759a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2613303e-fc26-4830-8cc4-c73df245ae8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837d020d-ccb1-4ee9-a4f8-946010bf6307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a5e4b8-6259-4321-8052-69ba82be676c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fc7736-12b2-4a32-84bb-feeb873cb772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afe00b45-6bc4-447f-8368-fd300075f15f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b48954-d6a4-4a7c-ac9a-d28eb468cd75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b489578-0e38-47dd-aee5-e57fb54dc20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce53a26-9147-4d50-9b88-ee67542e24f3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25cd8be3-0600-4027-ab7f-96e388a834c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8be340e-5669-490a-907d-741ff84f4c50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1932dd-97c6-4602-8809-798fca8e1854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da46f59-a5ef-4bb9-8708-afc59e09538a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4b523f-72b9-401f-9d24-74f5a0a441e0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34539a7c-188c-4777-b00a-4b537edafb6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2523ac57-1061-4eb6-b747-e0da9b4af068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7c9882-e9c7-4e25-9e58-8dd151cf3f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5d4d80-43b0-425a-b592-7a63547abfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08132847-12ca-419a-a625-53006c48415f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec2f403-5e43-4b11-aeb2-6c493961d6f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be3529d5-7f5a-402e-a0c7-fc66f99f1ee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8635970-85b7-47e5-8903-adde38539a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18fc6bfd-e0d6-4f89-a089-c1ee5ec17ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c789d1-114a-45f4-93d0-dff5052e5bbc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d84314b-6994-44e6-ae92-7d981beb35db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a364a28-8535-45e9-907f-b5bd38737ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "961c823f-7eb1-499f-93fe-b9071bf1f54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e20f528-029c-4123-83d0-3e695e5eb870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488383b7-551c-4e4d-a08b-1d773c46cfc4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c7b8e9-12d3-484d-9205-c4c8a4815f44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e34b212f-ceb3-4c03-a071-5f2779204eff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdaa9921-5b91-44db-b0ea-cac93be8955e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b810144d-e551-47bd-9145-7952df1636a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7d063a-5d39-4066-b066-da016cdbf700",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299e416e-30d7-4901-ac56-8f196fcf3275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fddd5078-545c-4205-9578-760c1a19a579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f5f869-5579-4c8c-a82b-c1988a641c14",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0836dce-62ff-40a6-be9e-875085a02566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20678e46-6173-42de-b459-a7991e01ee4b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413fb6cb-b7e3-4ed3-a032-f2695297e234",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4f90731-acda-4c97-a7ff-13d5ed665810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "908bfe21-39da-44ec-b06b-9d0839d67a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881850e7-da9d-4b41-88ac-000ee3815501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dc4b15-7de7-4440-b6cb-b1e814aea013",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d4665c-ff36-4958-acba-df67c80a1ec7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8809cf09-aa64-4044-8589-d0f78c8e1a9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed433a4-d722-489a-a0c9-125e3d052fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b53c22e3-8a83-4fd3-9bb2-a3a3ae1875a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4564ab11-4f52-47f0-850a-d8a6664931fd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ce5306-3892-4e67-b7c7-cebf6850c4c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffcef932-691d-46b8-a163-3f48b891b16c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbdbf177-de22-4834-adb0-a079f1e68ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d0777f-dd05-4e1a-ac3c-e7de5d697fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8e6fa7-f089-45a7-bcf7-194ed2a17639",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6207eef1-0f8c-4ef7-9615-9a316079bc5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e06cbf47-74d4-4923-b365-b792bd09e763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90fd8a9-e5d4-4544-b9a7-48eaf99eec14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4647cbcb-7fb5-4cd9-b26a-60852946bf68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53251fd-782f-4c5b-a8d5-e18fca75d38a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bd4053-dd9e-412f-95e1-76eaca078d9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4ced33f-2943-4d79-9d97-a425c71d39b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5dc6a1-fd48-4fa7-8360-2182b6efb20a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e0f2cb-be8f-4464-9b1f-467205108e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0c8dea-d202-42a0-8479-945b0250918f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9b82b4-e130-4cbc-bcd3-227d3700b1c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ac6f88f-4dec-492f-94f0-89a1e8cc746f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f4c4f8-5626-439b-99ca-1b8989c07000",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0db439f-ccef-4bd1-b276-b2ca904da493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e4c8c4-6f81-485c-8613-2a630cc5552f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e24cb6-b761-4be5-957d-b8644e5da9eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ebc2a1b-2ae9-4a3b-b6c9-c0eedb45d59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0681d47-f1ff-4fec-a285-cc52e7d4bb1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "771bbbfe-5588-4913-81a3-f034b1e44873"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f547ec5-520b-49dd-b9f3-c5e9b4beef1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b00655f-087c-4521-bd8f-900c8b8d7349"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e419df2a-da14-421c-bee7-404a77641f7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5168972f-cb14-46a5-91a7-8fbc21918d3c"
                    }
                  }
                ]
              },
              {
                "id": "3e57947a-762d-49d4-a463-1537fb251a25",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ccfb6d5c-ad8d-42d3-b17a-59483a101fa1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198f7640-de89-41e4-b254-2bc86461ed3c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bf370238-6d68-432a-b1d7-a51048d2d165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "541399e7-b595-4e41-8e5c-90f6e9ae4688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad0c1940-889a-45fa-9c1c-336bbab593b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fc529b5-cb11-4c7e-b4a4-1be7eb327509",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86f25e6c-a149-4332-b789-40c2346ff071"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3f14847-ddd4-4ad9-bb96-321cb683fcf4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19130917-547b-4496-85d1-90ed97ddacbe"
                    }
                  }
                ]
              },
              {
                "id": "79683618-81fc-4537-9cf7-c3920eea7887",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6a151e14-8a9f-4887-ae35-b4c4a3bb00e2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a85a057-5793-415b-b6d9-3fbbc4d29591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1f1388a0-9d54-47be-9c07-3e9ee3d71bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ccaf28-dcbc-4de4-bedd-72a96597f88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c379ddcd-cd61-453b-a761-c3e0a8535262"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cd8f084d-c6ca-4efa-9189-1f8715e6595a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "88100fd6-65b2-4022-b5a8-1de066b00755",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8bc09ee-a973-4b4d-bba8-293327ddeed5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7d6f907b-df54-4c51-abff-7785699ea34b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36117a76-7859-4f66-99e5-88da865a9a2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f659c55b-1ff5-4d30-8895-ef10e68494f1"
                    }
                  }
                ]
              },
              {
                "id": "7ef7927a-aeb3-41f0-b181-b16e015004c1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "534a059f-4278-4f7a-9fa5-8d150cac2f1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d77055ae-4ac9-4d13-ba5f-ee5741f4f600"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f84bac1a-43be-4419-a0ec-8f57f46f2a2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f662a070-453e-4e63-a990-2a053fae45fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5c59f53f-7940-4149-8a16-78dc08d62cb6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b020f3a9-122d-4b61-940a-748afb0d8ae2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fca4caa3-d8ad-4413-95b4-8e6aa4cd80d9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5275d79b-4edf-48c3-be2d-6ed8f3a80c0f"
            }
          }
        ]
      },
      {
        "id": "0a745c51-9170-4076-ac78-8678c109172d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ff0b78f8-717f-483a-b827-32576e13164e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33cfee65-5061-46de-b1c3-cc3f7a2dd659",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ccbd4a9-5b2a-4be6-b982-08f6c85eefaa",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f24ef94-3375-4c41-bd93-6c4da3157d49",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "80ef711d-9043-4e13-a632-5ead7b8617d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ae20fe-fa23-42fd-b4e7-0ba35b5c212d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55f6f5c2-c181-4d72-8ff1-f502abc01ed1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e42ee5df-138b-4d12-bf20-a454077887d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a707fa50-7fed-4075-ab5b-7448bbb25cf8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f185a8f5-7ac4-4730-b75c-80f4fa5358b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b800898-9e16-429d-8a5f-a61d483f90e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "079a1da6-649a-479d-bcc7-08d4779bef13",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bc751f1f-dad1-4f07-a05b-acc591793763"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d5255d2c-61fe-4c62-a928-ec50ba5a9452",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aba505fb-0805-4473-b2aa-2f65a4fa07ed"
            }
          }
        ]
      },
      {
        "id": "b4fa09ea-b033-4d3f-9e58-4fa305f58776",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9f0426e9-e62a-40a1-ba05-4e67822ba206",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c68a81c8-a433-4269-a56a-be50e6f2a27e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c37c8ed-60e4-41d7-98c6-d240df331081",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0d2b9f-1da1-4eef-b59e-6aed914da01d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c778c00-dd45-4152-995b-21e771737790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59aa3e1-3ca9-477f-95a5-9d8b277869db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89e38baa-6bf2-484a-aa75-fd06edfe3761"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "804d75e3-7a2d-414f-9676-1ec52f1544e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62247d22-9c57-48ce-a1a9-b66128949970"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90c9f99b-e586-47c4-8e58-6e3169e8cd18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97959526-bbf2-4f72-8f73-9350fdc4f084"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24646a1e-bc4b-474c-a5e7-01e7591f80cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "27b336fc-0085-4a55-85f3-ee993ffd2dd5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3377ad48-c76c-411c-aa75-9012b08985d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "250b4bac-6493-4ae0-b1e1-45a5f0be6ed0"
            }
          }
        ]
      },
      {
        "id": "7f5d8a46-21d1-419c-9eb0-fa5bfc6419e0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d1c25895-bbb4-4819-b29d-8d0576f9e951",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b930c00a-4896-40c8-9fc7-e59c047fc270",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc10b0af-190e-4bd3-be48-68e8cf890299",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439913b7-9dac-48e2-bc51-2ba2a053895d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "934eb62e-1729-4ca2-b70f-fcfe0f08433f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da2f30f-59cc-4d12-82a2-51e138941897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8157cac3-926a-4636-a8b7-8278a30acd7e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e852cd1-8441-469c-ba60-7f5a157e12a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "024e4f19-b715-4656-beb7-0706ffbdf05b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a7bcabc-1f1b-4bb4-89c0-5cdb89b015c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4235e41d-16fa-43cb-8a6b-6971932ad16e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34769407-eb80-4501-8673-f412b25ea879",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f809fefa-b668-4621-ae09-6ed2b75541bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ea5f63a-5cc5-46e1-af4c-d7cbdc1961c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81b01e88-dfa6-4de0-a761-496dbf44a88f"
            }
          }
        ]
      },
      {
        "id": "78e3a528-49a6-49ac-ab81-59d1b1a03e64",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6796042a-97ae-4694-8994-313784de4ce3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63e93fb8-e4a9-473f-adc7-08a72c641d9b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0061a0fd-2612-4fd6-b906-81853a3c8613",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cebe7955-4736-4ef2-9922-efc4f8e5b654",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc35a7ae-c63f-4353-8262-75d0e46e3bc8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 105.09920634920633,
      "responseMin": 6,
      "responseMax": 729,
      "responseSd": 74.98133418098536,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1728262071845,
      "completed": 1728262106914
    },
    "executions": [
      {
        "id": "1128f58d-a9db-4ad4-91a1-b81488deca57",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "911bb91c-a8e2-46b9-bde9-223945a298fb",
          "httpRequestId": "80f89463-c7ee-4d8d-bf46-a94d4476b35f"
        },
        "item": {
          "id": "1128f58d-a9db-4ad4-91a1-b81488deca57",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "13510d11-ee22-4767-87da-2d113818e0ff",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "e5427961-3dee-4349-96b3-3660d2d5015d",
        "cursor": {
          "ref": "8d478541-7e40-484d-9afa-fac09ceb128e",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d2234e64-91dd-43f5-af42-42bb638686a2"
        },
        "item": {
          "id": "e5427961-3dee-4349-96b3-3660d2d5015d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2d4570fc-d5a7-416d-85e7-d3cf85319297",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "ceea4836-c16e-4f9e-8c03-f68eaaf29761",
        "cursor": {
          "ref": "b93be5a8-fc67-4b26-8cc4-682464430757",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1ca0dd96-ec28-4a05-8fa4-246c4455dfd1"
        },
        "item": {
          "id": "ceea4836-c16e-4f9e-8c03-f68eaaf29761",
          "name": "did_json"
        },
        "response": {
          "id": "13212866-1980-4d97-9aca-b2286cf0e5c6",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afedee0-7eba-4f32-af50-aed93ad21240",
        "cursor": {
          "ref": "eeedc958-c9a6-435f-b2ee-0ea9a3c62621",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cb47b864-97d2-431c-9b25-3fbceb5c67a0"
        },
        "item": {
          "id": "8afedee0-7eba-4f32-af50-aed93ad21240",
          "name": "did:invalid"
        },
        "response": {
          "id": "640e33c2-a653-42c7-b997-5939853930d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afedee0-7eba-4f32-af50-aed93ad21240",
        "cursor": {
          "ref": "eeedc958-c9a6-435f-b2ee-0ea9a3c62621",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cb47b864-97d2-431c-9b25-3fbceb5c67a0"
        },
        "item": {
          "id": "8afedee0-7eba-4f32-af50-aed93ad21240",
          "name": "did:invalid"
        },
        "response": {
          "id": "640e33c2-a653-42c7-b997-5939853930d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686a404e-123c-4b8e-bd96-60009234d90a",
        "cursor": {
          "ref": "769c2a39-29c8-4abe-9f36-48fde83b6b46",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5c0033f4-a927-49b0-8821-203c778b8ea4"
        },
        "item": {
          "id": "686a404e-123c-4b8e-bd96-60009234d90a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bb4a0e2d-8349-42a3-8c88-8dd4d968ee17",
          "status": "Not Found",
          "code": 404,
          "responseTime": 370,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2676008d-9672-44bc-8f44-45bcc8c19ea7",
        "cursor": {
          "ref": "a0d5ba25-88c4-4197-9d33-8c3a298c3454",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "13555dc4-5c48-44f4-ac15-008bbe9034c6"
        },
        "item": {
          "id": "2676008d-9672-44bc-8f44-45bcc8c19ea7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "38eef2d4-2134-4d25-bc86-1f309ea0dd5c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 77,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1be705-5128-40a5-947f-8f3df17e3a8d",
        "cursor": {
          "ref": "a79b5a97-806d-4755-a1f7-22762a783aec",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1ceb9f3c-d54b-456b-85c9-8f0e1a9c71b4"
        },
        "item": {
          "id": "1f1be705-5128-40a5-947f-8f3df17e3a8d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1224eb8d-a85d-493f-97b1-3c26b2023b76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1b25d1-5d76-4d92-bfef-f59d997c4133",
        "cursor": {
          "ref": "c260feaa-fb85-44e8-84ca-eef5c4868735",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "73e87596-1c0a-407c-8f9b-17d03f0f7c90"
        },
        "item": {
          "id": "bb1b25d1-5d76-4d92-bfef-f59d997c4133",
          "name": "identifiers"
        },
        "response": {
          "id": "f0ac9ea7-26ce-4be8-91bd-1089179b2def",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d830bd-8a95-471f-a19d-cff8173fbfc5",
        "cursor": {
          "ref": "508d56da-3020-46c5-b881-d4b469158fe1",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c6153e98-86e8-45b8-b378-26d1da4a9ead"
        },
        "item": {
          "id": "c0d830bd-8a95-471f-a19d-cff8173fbfc5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3856e0be-01f9-4491-8f3d-ff7651d99df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "197055be-fe65-49d8-9ca0-44917794e038",
        "cursor": {
          "ref": "b6947bbf-5879-43c0-9694-a2be5d62406e",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2fc971e2-14b1-45b5-8554-4d64f2843f89"
        },
        "item": {
          "id": "197055be-fe65-49d8-9ca0-44917794e038",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d8e624f6-7987-46bb-a096-04d695e44771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "fffddbc1-20c0-485f-8702-e7bf473cd05c",
        "cursor": {
          "ref": "310b75e5-0b68-4a63-a9de-a291a7183a90",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "586b2e1a-5e33-4ed6-9a25-68513982ad92"
        },
        "item": {
          "id": "fffddbc1-20c0-485f-8702-e7bf473cd05c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0815a93d-2c72-4b08-8d79-a0d8a8930a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "1a683bb9-a932-45ee-a40c-bcfa83319ba0",
        "cursor": {
          "ref": "1d7949c7-a164-477a-beda-234475099644",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "85b3aa74-8745-49e0-b81c-80c0504fb98e"
        },
        "item": {
          "id": "1a683bb9-a932-45ee-a40c-bcfa83319ba0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fb162e29-7804-4dca-9004-5fcce81d1c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "f49d7d42-ffbd-476c-8de8-1e99e345ce29",
        "cursor": {
          "ref": "d17da5cf-dbd1-4885-a07b-b2ff7115b16d",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cba2aca5-3137-4b46-bf3d-e2f32dbc3e61"
        },
        "item": {
          "id": "f49d7d42-ffbd-476c-8de8-1e99e345ce29",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "44d97db5-810c-43bf-b2df-524a0f3e88b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "8fa8350e-e6c5-4f8b-9e6c-9dadef0f0b71",
        "cursor": {
          "ref": "17cf6764-7f83-4ef2-86e2-c8b24cbd7758",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "77e1889b-c816-4454-987f-fa1d840ef735"
        },
        "item": {
          "id": "8fa8350e-e6c5-4f8b-9e6c-9dadef0f0b71",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2898abeb-e9cb-43e4-9d2e-e9c23812f1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "ac6a5f9f-9999-4aa3-95d4-957e8b3530ed",
        "cursor": {
          "ref": "ad1f654f-e2db-49e2-8065-b57492bc8b51",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "263ec5ce-d1b1-48fe-a38e-6f24713892c4"
        },
        "item": {
          "id": "ac6a5f9f-9999-4aa3-95d4-957e8b3530ed",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2bd76abf-233e-4854-bdbf-ae11efdfea45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "f9513632-702a-4a6a-9cb6-6d185b87070f",
        "cursor": {
          "ref": "91b2796a-2ca0-45ff-a5e5-6b8c301c474c",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e425e8a0-573d-438b-ab2c-5c3a81e9b15a"
        },
        "item": {
          "id": "f9513632-702a-4a6a-9cb6-6d185b87070f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5bedfc37-bb27-4df5-9516-c8d36c5b133b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "4405c725-1866-4574-a97f-fdbd22e4fb5c",
        "cursor": {
          "ref": "d323cd28-33c6-4d16-b407-a297b2a8b8c1",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cdf738a4-2c4b-4d15-b821-b9a0eff67e8a"
        },
        "item": {
          "id": "4405c725-1866-4574-a97f-fdbd22e4fb5c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "583af04d-21d2-4659-a4bd-1c7976fbc67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "18ac0599-f519-44be-99d0-56bbc5b50c23",
        "cursor": {
          "ref": "59b898c8-1cb1-411a-9b2c-4cabe3186bff",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "43dc091f-6575-4860-be3c-a1a7772e1a79"
        },
        "item": {
          "id": "18ac0599-f519-44be-99d0-56bbc5b50c23",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6d8ee8af-75bf-4740-90e9-e09b774207fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "713f9514-d6e8-47ff-b6f8-d4012506586f",
        "cursor": {
          "ref": "c309198c-9f30-4895-bab4-96c2f33d9bc8",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "abf20a78-1efb-41e2-be2e-d0d9dc7aa023"
        },
        "item": {
          "id": "713f9514-d6e8-47ff-b6f8-d4012506586f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "11bc5072-5a93-4a60-ae10-c6c8ca3f87aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "3292871b-a3ef-4813-8119-9ae1466e9a04",
        "cursor": {
          "ref": "b576e0c1-60a1-4554-bbd7-eb5df15aea06",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "bfc73f57-c03a-4f6a-ab07-5932e8bb977d"
        },
        "item": {
          "id": "3292871b-a3ef-4813-8119-9ae1466e9a04",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4c082c76-2dc4-4cdf-be4a-600dc9d518bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "98a93a90-b853-4e7e-bffb-5a2ae12fbb5d",
        "cursor": {
          "ref": "366e1cfd-9f62-43ec-89ff-be8eddc7edd5",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "149a7619-b777-4af6-9419-53846535767b"
        },
        "item": {
          "id": "98a93a90-b853-4e7e-bffb-5a2ae12fbb5d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "33deda5b-e57d-4ad3-ad7b-7a48d37025e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "a2dd51a7-4809-4214-b90d-f1911ba9bf3c",
        "cursor": {
          "ref": "15bab132-4e37-41a4-8883-4c7eab8ea610",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9861f308-47b9-41c1-b527-0ce8b0bb2a50"
        },
        "item": {
          "id": "a2dd51a7-4809-4214-b90d-f1911ba9bf3c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "044c1b1f-bec1-4658-a892-9daf4b56d7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e7adceec-be19-472a-9df6-d004efbd0b5f",
        "cursor": {
          "ref": "2a8374bb-1bce-48c3-8e3b-4d80a82a8fa2",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3d9b09b1-f82a-4c3b-808c-5d57aa9e0474"
        },
        "item": {
          "id": "e7adceec-be19-472a-9df6-d004efbd0b5f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "05396603-583b-4714-89d2-1919d4184866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "7e33719c-122e-4fac-b0cc-2542efe4e413",
        "cursor": {
          "ref": "68ac150e-ee43-4007-aab4-a826a7d83957",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "72126e31-0d10-49a7-ac5e-86dd45206e04"
        },
        "item": {
          "id": "7e33719c-122e-4fac-b0cc-2542efe4e413",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7763f094-c851-49ed-8dd8-0c4374a1a388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "bc15dceb-2580-4fd1-8720-abc573486da3",
        "cursor": {
          "ref": "5a69607c-7e08-463f-b06a-b8b2c120865b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f7ceb5cd-c98b-41b4-91ba-3b2c9c53208e"
        },
        "item": {
          "id": "bc15dceb-2580-4fd1-8720-abc573486da3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e0809c33-f574-4daa-b32b-8234c38a1fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "d2121b55-210a-499f-ac6a-1e60e525c40a",
        "cursor": {
          "ref": "655310dc-0bf4-4711-a40a-9dc733b8dd1a",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "03cb2097-102c-4797-8f3d-12b706ff306a"
        },
        "item": {
          "id": "d2121b55-210a-499f-ac6a-1e60e525c40a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7aacda6b-bb32-409c-8790-c8caf4f73693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "85cd6a52-e298-4e22-b59e-19076e64ea33",
        "cursor": {
          "ref": "c338c7a9-2edf-44b2-b651-01767e324802",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "676f7323-6ff8-40ba-af1e-8015a40fa9b0"
        },
        "item": {
          "id": "85cd6a52-e298-4e22-b59e-19076e64ea33",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7f1bcd43-3281-471c-a7d8-bdf51c9c43e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "e345497e-f191-465f-ab84-1f7f84d7fa3b",
        "cursor": {
          "ref": "9d290a57-aa38-496e-b61a-a9d2fbb64291",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0f1fa36f-8e44-4d11-8944-0232dee48799"
        },
        "item": {
          "id": "e345497e-f191-465f-ab84-1f7f84d7fa3b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "69d8dc40-56e8-4fa9-b8e0-1ce4b06de9e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "f8783462-8a80-4c96-90ff-b7e1c258d738",
        "cursor": {
          "ref": "c5f6c096-0290-4d5f-aff4-8f2b850933ce",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2c5ec201-2db9-414a-8d8d-5e4e3bae939e"
        },
        "item": {
          "id": "f8783462-8a80-4c96-90ff-b7e1c258d738",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c6ddf406-1c2a-43b5-971f-429d81f4aea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "c0ccef50-fc6b-4a72-a86c-0f93af33a098",
        "cursor": {
          "ref": "2e328693-ede4-49b2-9666-9259fdd05ddb",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "00c7e95b-88fb-4194-a4ae-07f141453207"
        },
        "item": {
          "id": "c0ccef50-fc6b-4a72-a86c-0f93af33a098",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "705cb70e-d23c-4fc7-827e-0fc7465f05b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "17544a8c-3e5c-4c7f-9637-e8e3030ca499",
        "cursor": {
          "ref": "e6e0d773-171f-4a27-8a27-b5ca046fc1ab",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8e088151-c4c5-4117-a829-736d5c4e2dde"
        },
        "item": {
          "id": "17544a8c-3e5c-4c7f-9637-e8e3030ca499",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c71adf2e-93ea-40b8-977e-54c343b308b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "f9a5ca34-5fa4-4212-9d94-1038e3799b6f",
        "cursor": {
          "ref": "a485c8c2-f49b-4bd2-aa53-dcd61283839a",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "03080be7-4a21-433f-9875-da265b525c54"
        },
        "item": {
          "id": "f9a5ca34-5fa4-4212-9d94-1038e3799b6f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b3d939b9-ed13-493f-bbb8-bb03c76f52e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "0c9eaabd-05c9-406b-9cff-bd11b0076838",
        "cursor": {
          "ref": "45d2e37f-5708-4ef3-ac13-00ef936c1b18",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "307965e1-166e-4ed4-a05c-5570fcdec1ce"
        },
        "item": {
          "id": "0c9eaabd-05c9-406b-9cff-bd11b0076838",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "85cada5a-7851-43a5-955e-84ef40dc4ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "211e39ac-7caa-472c-b991-6c5a5e5ba0f0",
        "cursor": {
          "ref": "b6a973e9-fcf5-4f5f-b6b4-fa5d8efaeb2d",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e6236118-955c-4492-8674-702243968b06"
        },
        "item": {
          "id": "211e39ac-7caa-472c-b991-6c5a5e5ba0f0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "564dd214-70df-4f79-b923-51b1d98a11a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "393e3d5f-d254-47e0-9e6b-d592a1ede395",
        "cursor": {
          "ref": "e9d1b4a6-f8cb-499a-947d-4bb67da82618",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0bae1d1f-e500-451e-903d-eec0656077a7"
        },
        "item": {
          "id": "393e3d5f-d254-47e0-9e6b-d592a1ede395",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5f9cea7e-7ddc-4afb-b2ab-57dd2b5cbab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "c6248393-17b0-4acd-91f4-ef3a37807f89",
        "cursor": {
          "ref": "e867b13e-d654-497a-88c0-da517b9c462a",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0b670f78-36a7-455b-b9d1-d03d4b4b34c1"
        },
        "item": {
          "id": "c6248393-17b0-4acd-91f4-ef3a37807f89",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "82d69385-a8c4-437d-bf9f-d8ebf324d23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "6ac139b2-d18f-49c6-917f-e27c08a0abee",
        "cursor": {
          "ref": "d5a4d9a1-24bd-48aa-b840-395a1a7cbe22",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "25bb71f6-0a99-4c95-b9db-ebfbc34ec0dd"
        },
        "item": {
          "id": "6ac139b2-d18f-49c6-917f-e27c08a0abee",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b65d8caa-0621-43f3-b37d-ecf16cb9a499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "24a81523-5625-4278-8049-ea9fe9abe010",
        "cursor": {
          "ref": "db748d4d-d36b-45d1-9693-f92fb7368315",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a85c6e76-eecd-468c-aaba-187a70a62410"
        },
        "item": {
          "id": "24a81523-5625-4278-8049-ea9fe9abe010",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2e1d7653-ab6f-473c-ad78-677d012922ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "feacd61e-37a9-40bd-b40d-e2de991c9494",
        "cursor": {
          "ref": "c140b309-1b60-435c-a8e7-f471a9b21d20",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "45fa3d88-bff4-4e6d-9d70-3b6a60c3b055"
        },
        "item": {
          "id": "feacd61e-37a9-40bd-b40d-e2de991c9494",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6d03e3c2-a42b-4de9-a1ff-0795eba4443e",
          "status": "Created",
          "code": 201,
          "responseTime": 729,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "50b0caaa-1634-4a16-9c97-acaede0ef0e0",
        "cursor": {
          "ref": "b90a9896-a3b8-4fab-85a4-4ce752eb90a6",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f5bd5e62-0720-4955-aa7b-9f7761863e78"
        },
        "item": {
          "id": "50b0caaa-1634-4a16-9c97-acaede0ef0e0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "14cd3f1e-7bc5-486b-a3a0-39e0cb7ca877",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "de3abac6-095c-48f4-9836-68dea51ec4ea",
        "cursor": {
          "ref": "be623862-9918-40e5-91e7-521f41e1a08a",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0b2971ae-d1c3-4b26-87a5-7f45fda44b41"
        },
        "item": {
          "id": "de3abac6-095c-48f4-9836-68dea51ec4ea",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d4d58031-e4f7-41f8-9505-0d025b0defea",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "877c6f74-4db7-4462-8b38-6b27c42da449",
        "cursor": {
          "ref": "4a10718d-b712-435c-96aa-374de82fad15",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d05ce370-1ba4-4c94-b3e6-53fe3112331a"
        },
        "item": {
          "id": "877c6f74-4db7-4462-8b38-6b27c42da449",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3272a005-6f38-4be4-b9ef-859bd7a3399e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "5478e327-0fa8-4bf3-a8e2-bf0f9fb42ffc",
        "cursor": {
          "ref": "58b69e6d-7956-4f5b-b531-e7adede333b9",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f7b101ff-0c90-42a8-9bb1-f7d7c0d2f3f9"
        },
        "item": {
          "id": "5478e327-0fa8-4bf3-a8e2-bf0f9fb42ffc",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "363c69d4-7cbe-4adf-bdf1-48a859040e4b",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9e179ecf-a492-41d6-afa0-a69c6e7ab431",
        "cursor": {
          "ref": "884a7d35-b57c-425f-b458-bc775f6e8803",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b165c461-902c-4de6-9911-9e7822223bdb"
        },
        "item": {
          "id": "9e179ecf-a492-41d6-afa0-a69c6e7ab431",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "522a267b-419c-49df-92af-64572d6e50bd",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f0a79b10-22b8-419e-85d6-35fea9a34565",
        "cursor": {
          "ref": "f5e490be-c63c-4942-ad34-c79d9106926c",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e804fba5-b8b0-47bc-bea3-85aabdbbfd72"
        },
        "item": {
          "id": "f0a79b10-22b8-419e-85d6-35fea9a34565",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5d489dd7-ea27-496f-ac5b-050fac63d1a7",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1bc084ed-45ed-4dba-b76b-d1bfe5c40741",
        "cursor": {
          "ref": "75a9b4d0-ba79-4800-970c-97641b3bd2d4",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ce826c91-d8a4-4234-ae9a-0dbb0de748f2"
        },
        "item": {
          "id": "1bc084ed-45ed-4dba-b76b-d1bfe5c40741",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c82cd125-fb3e-426c-85e5-f947c3cf27aa",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ad4d1797-67e5-4309-8950-59faebe0a83c",
        "cursor": {
          "ref": "6a603ba1-3682-443a-b8c8-ceff5c6dbd95",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5d6fe0b7-a051-4947-967a-33bea954977d"
        },
        "item": {
          "id": "ad4d1797-67e5-4309-8950-59faebe0a83c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a884557c-aa99-47a7-a7a8-321064535207",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a1f4cd96-9357-4a5c-8eca-fcf8334161bc",
        "cursor": {
          "ref": "8bbd5149-1621-4753-84ea-9a9d795aa27a",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "bcfdc0b7-b42b-4f54-b92d-11fdad387dcb"
        },
        "item": {
          "id": "a1f4cd96-9357-4a5c-8eca-fcf8334161bc",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9fd29eea-9a54-44f0-a5b8-04cd35fb3dd6",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f5888573-1288-425f-89fa-b2b50ff0bce0",
        "cursor": {
          "ref": "1253daba-f339-46ad-aeec-b249b8131a40",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6fa24445-cd6e-4caa-a3a6-9e7fb6806dc3"
        },
        "item": {
          "id": "f5888573-1288-425f-89fa-b2b50ff0bce0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ac3b8b3a-fa0d-4110-b180-7dbc92e48a54",
          "status": "Created",
          "code": 201,
          "responseTime": 384,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "38e99b1d-da8d-4d32-8b4e-9b990cdaeecc",
        "cursor": {
          "ref": "56c7791b-a86d-4d92-af43-a65d4fc43251",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3ff5ca81-9060-4f6f-907f-d7b796add1bd"
        },
        "item": {
          "id": "38e99b1d-da8d-4d32-8b4e-9b990cdaeecc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5759685f-74f8-4b57-9b21-f7002df4d474",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "05c6bc03-f639-454b-8ba2-647eae9626a9",
        "cursor": {
          "ref": "ae0a0319-91f6-4a55-a43d-fc99c4cb325e",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8a9884ca-a384-4974-b876-312e48b69c96"
        },
        "item": {
          "id": "05c6bc03-f639-454b-8ba2-647eae9626a9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fe799fba-b979-49b8-9bd0-f87da8076f37",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cc4e8b0a-dac5-482d-b037-5e0c3a8595fb",
        "cursor": {
          "ref": "34a4c53e-cb55-4fbf-81ff-397a1cc7ebcc",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b3797f2b-b8b4-4404-9a43-cb5a9b958639"
        },
        "item": {
          "id": "cc4e8b0a-dac5-482d-b037-5e0c3a8595fb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2815dabf-525c-423f-bdb4-b9f48092d174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "50245951-0f0a-45ef-a8e2-0d135a6f26d0",
        "cursor": {
          "ref": "409df744-e9d6-4ac0-8c15-0485f8c3a59b",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f1da41c0-a4ec-46db-9051-c7dad2443b7c"
        },
        "item": {
          "id": "50245951-0f0a-45ef-a8e2-0d135a6f26d0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "361bc8b1-60be-4749-b608-d883b0a56f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "df0ba94b-0b17-4721-adeb-6148fb7f6713",
        "cursor": {
          "ref": "fa41f95b-4235-4be2-983a-fe7fc75659ee",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b4af2b39-c224-4cb7-8edf-1c729db203ea"
        },
        "item": {
          "id": "df0ba94b-0b17-4721-adeb-6148fb7f6713",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8e2f45fe-ae41-477c-b6d3-b27016b991de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "af885982-0bca-40d6-93f2-4fde2385cf9b",
        "cursor": {
          "ref": "0544a95c-c6a8-4bf6-9caa-c68e7a9ee986",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "4d0b363e-cb38-4c02-a35b-04dad65a1144"
        },
        "item": {
          "id": "af885982-0bca-40d6-93f2-4fde2385cf9b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "802deedb-11a3-4cb3-bbac-cf8f0c13a25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "690c3fde-fced-4b64-81c3-6ed081632ef9",
        "cursor": {
          "ref": "99ae849c-6856-4730-bbf5-93aed66fede6",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3c513063-9775-4560-b82b-3ae7379f0928"
        },
        "item": {
          "id": "690c3fde-fced-4b64-81c3-6ed081632ef9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "aaca7686-fd6e-4d0e-8339-659a8a062dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "dc6b8101-731e-4d24-8c18-9c858b1d67ad",
        "cursor": {
          "ref": "b35fc10f-34ff-4ff9-8ec4-5f2908e5140c",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6acafc4d-a6e6-4b79-8382-be4664236667"
        },
        "item": {
          "id": "dc6b8101-731e-4d24-8c18-9c858b1d67ad",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "26278ef8-ce46-4eb8-8619-ae2765b90503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "a0436b66-c452-4918-9b13-b7975df798ad",
        "cursor": {
          "ref": "dbc8ec12-834a-48c4-ada8-3706381c2918",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "60c53c1b-b3ee-452b-8b9c-214003d8b1f4"
        },
        "item": {
          "id": "a0436b66-c452-4918-9b13-b7975df798ad",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "67fe872b-682e-4817-b1d5-f803adccae50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "67d04baf-306b-47a5-8363-8fc0e7811789",
        "cursor": {
          "ref": "79c5b991-de2e-4a26-91e0-9c4b0c2f4ee2",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "81faea37-dec9-4de8-9b35-c6d23392036a"
        },
        "item": {
          "id": "67d04baf-306b-47a5-8363-8fc0e7811789",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "aa33701a-442e-4410-901b-fb3b12dd2bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "4ad31363-967f-4e92-86eb-210dccf28909",
        "cursor": {
          "ref": "24f49e25-5160-4a65-8836-714e80d283d3",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "be136af0-42af-4fc8-af08-970663918a1e"
        },
        "item": {
          "id": "4ad31363-967f-4e92-86eb-210dccf28909",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "6a8ee412-91bf-4b04-99fe-99cc007c5b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "d2ec646b-5b78-454e-b458-99ecff8bb0bb",
        "cursor": {
          "ref": "9e064cb7-cce2-4110-b152-eb6a295ebdf5",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5d84303d-6196-4792-8ebc-55ced53b1137"
        },
        "item": {
          "id": "d2ec646b-5b78-454e-b458-99ecff8bb0bb",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1a25bc86-20da-4a66-a04c-c90a86f2d282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "fbe30cd7-a3a1-4e79-81c8-91314ca62a17",
        "cursor": {
          "ref": "ba8524d2-d464-4457-8761-86f203832d6a",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "37153390-5461-44e5-8281-28842a8f8a17"
        },
        "item": {
          "id": "fbe30cd7-a3a1-4e79-81c8-91314ca62a17",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a78efd56-65c3-46d8-ab7f-e92316775c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "3a606fd7-a331-4096-985a-200c9276ac19",
        "cursor": {
          "ref": "98c48478-c6f4-4400-9b5b-5804ea699599",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5a480bc6-bcb4-4ed9-ad0a-04d404a53664"
        },
        "item": {
          "id": "3a606fd7-a331-4096-985a-200c9276ac19",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "26c8fd6f-d4dd-4355-b95f-d8e400745849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "b883f078-7e67-40c5-b1fc-6caa2dc3c56c",
        "cursor": {
          "ref": "335c59f0-bbf3-4270-bca2-8b4509890894",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4966deb6-c87b-41bc-a53f-543477b3aaff"
        },
        "item": {
          "id": "b883f078-7e67-40c5-b1fc-6caa2dc3c56c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2581dd74-42c2-4fc7-8cc3-5d92d8ded463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "2d5075d5-92e6-4246-9c0b-848876502f0d",
        "cursor": {
          "ref": "79b259b0-6e03-462f-a15f-6c2e4fb45d93",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "73dfe1c5-7ec8-41f9-8e82-4ed8897ca10e"
        },
        "item": {
          "id": "2d5075d5-92e6-4246-9c0b-848876502f0d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "84069110-a9cf-4dfb-b098-728f3a736305",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "8cc00929-3cbb-41d7-be56-f1b6d383f272",
        "cursor": {
          "ref": "6a6d351a-9c0f-4577-b41f-a1c978be4ff9",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e16adf45-8018-4387-ae4c-f4fad1a48c3f"
        },
        "item": {
          "id": "8cc00929-3cbb-41d7-be56-f1b6d383f272",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cae18ded-ba86-4cb5-b424-06fafd298964",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5b94087a-d53f-4ba4-af94-1f86c0fe0ad2",
        "cursor": {
          "ref": "7da6a574-1e2b-4c1e-b725-7b73e7f60915",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "bf6e14c8-8247-4c0b-9145-cb86fa088352"
        },
        "item": {
          "id": "5b94087a-d53f-4ba4-af94-1f86c0fe0ad2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2f87c0d6-1c43-43a0-bca5-0bd9e82323c6",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "74b02e02-b344-46cc-ba28-b72bd03ef8f6",
        "cursor": {
          "ref": "18df6f89-4b88-4181-961c-78170d257a4b",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a62ceed6-5f06-4247-bdad-c93df2d4f9b8"
        },
        "item": {
          "id": "74b02e02-b344-46cc-ba28-b72bd03ef8f6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "05ecf718-f800-4a6b-a62a-f4a947bfd0d2",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "7f0e415d-28a2-4082-8342-50abf8d9b386",
        "cursor": {
          "ref": "0cddda2e-8ec2-4936-83c7-537f9d0a89b4",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "07250ef3-2c86-49ca-893d-b877c257ac78"
        },
        "item": {
          "id": "7f0e415d-28a2-4082-8342-50abf8d9b386",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3c86221c-5926-407d-8140-22910699fed1",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "48b890ed-3579-428e-a361-21b2078640c0",
        "cursor": {
          "ref": "5cf50864-e375-4bef-b619-9b27ba533f7d",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ad81e3e1-e7cc-43e0-ad2e-1fc3785112de"
        },
        "item": {
          "id": "48b890ed-3579-428e-a361-21b2078640c0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "587aa633-3ba2-4748-8440-91eb6c1f3f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "d8c9c922-d1c5-4c0f-83c9-0bc7710e4b16",
        "cursor": {
          "ref": "ac335e6a-c6d3-4b25-ba87-06244855e1e6",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "99db16d4-bd15-4431-962b-9a5a830732d0"
        },
        "item": {
          "id": "d8c9c922-d1c5-4c0f-83c9-0bc7710e4b16",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0b78e962-46b7-4acd-85a0-4ddf0ed3381b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "8bdfad83-e7fb-4549-b98e-8da39a3852f3",
        "cursor": {
          "ref": "fe2ae1b0-5895-4701-8808-1b97d9ed5127",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5ad038ac-5688-471e-bfef-6ed07bcb7423"
        },
        "item": {
          "id": "8bdfad83-e7fb-4549-b98e-8da39a3852f3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f4fec622-8f90-4adc-a5ad-201fefaff696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "7327b9a2-1733-4de0-983c-4ff71d4ef1c9",
        "cursor": {
          "ref": "e6a8de48-15ef-42a7-8245-bc04ffd49bb4",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b5678d19-b66b-48c3-aaaf-4b41e3e83774"
        },
        "item": {
          "id": "7327b9a2-1733-4de0-983c-4ff71d4ef1c9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f6ad8fa8-5d28-4d47-a8d1-2a983930e949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "5b353e6c-87f8-4fd3-8673-c2c7d3ae93c9",
        "cursor": {
          "ref": "728b993c-d2aa-480b-930f-2f131481aabc",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9270b84b-5e56-4970-bee9-61e7bf04ef0b"
        },
        "item": {
          "id": "5b353e6c-87f8-4fd3-8673-c2c7d3ae93c9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f846b234-61e7-41a8-856a-a7e81a758f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "f7e0a2c3-7df2-4adb-9055-167f785e8148",
        "cursor": {
          "ref": "1934a5a9-6468-41f9-b8d8-03619f8296da",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "070638ad-6068-456a-954a-4c6c5dd6a6c9"
        },
        "item": {
          "id": "f7e0a2c3-7df2-4adb-9055-167f785e8148",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f612981a-2d68-4f5e-9b44-f068fedc219f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "8bbaf748-06ea-44c9-bcc1-bc24aa0488a3",
        "cursor": {
          "ref": "1e4566c7-6ed7-4cdf-bd67-ef841bcab794",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6fcfeddc-2dcd-4428-a19b-472f4154b445"
        },
        "item": {
          "id": "8bbaf748-06ea-44c9-bcc1-bc24aa0488a3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ced01718-484a-4ab4-9ff3-14d2c74c3d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "ab8f2145-b010-4e78-b88b-0081d6d5386f",
        "cursor": {
          "ref": "ee53599b-4e54-42e7-aa92-0c01e67e3607",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "887f87aa-e171-4b9d-8eaf-d65e6ac1586c"
        },
        "item": {
          "id": "ab8f2145-b010-4e78-b88b-0081d6d5386f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2090a0ca-7512-4b0e-af03-0286b1294f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "12495a6a-ec3b-437e-b741-ff875c792884",
        "cursor": {
          "ref": "4bdd895b-ed93-42ea-a80a-42a2843cb36b",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "76337944-627d-4dce-bba5-c1e3d133a01e"
        },
        "item": {
          "id": "12495a6a-ec3b-437e-b741-ff875c792884",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6ec80c9f-a7a0-440a-a03f-8429e9f8e5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "7fcdf7ec-854d-48be-b72e-a9a8b4534f60",
        "cursor": {
          "ref": "7c6c12eb-8613-4827-9790-a073b1748b08",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d54775ea-742f-4893-8db1-f29dd1edbe87"
        },
        "item": {
          "id": "7fcdf7ec-854d-48be-b72e-a9a8b4534f60",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9893c998-ef02-4193-ad30-d86965c0d027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "527512e2-79e9-4092-ba99-fbdf8bfa81e4",
        "cursor": {
          "ref": "b0fc9b3c-3915-43cc-a2e5-3c9ff72d1af4",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6a5e29fe-fb2a-43ea-8f80-48a9faa365d3"
        },
        "item": {
          "id": "527512e2-79e9-4092-ba99-fbdf8bfa81e4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "93208cf5-c8ab-4139-886f-608bd5817f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "e5b38c2b-3433-47b6-9324-3e9ddd7aa63a",
        "cursor": {
          "ref": "14fedebe-3235-4b81-8b9e-88ff22cbd3ca",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "719b8494-4ab1-4ec5-a7b1-a353c9c1d2c3"
        },
        "item": {
          "id": "e5b38c2b-3433-47b6-9324-3e9ddd7aa63a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "82a0971f-f187-4894-b353-3d345bf069ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "e472b0f2-44ce-4688-99ed-8c5b4a8dfa9e",
        "cursor": {
          "ref": "239824ae-7611-4bdb-8f50-befa52fc419a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "12fad8a8-76d6-40a3-9a41-4c0f887fa5ac"
        },
        "item": {
          "id": "e472b0f2-44ce-4688-99ed-8c5b4a8dfa9e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6ace667f-aeb2-4cfe-bc3f-29e74bdf6b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "142493d0-31bd-43ac-8146-ca1b00b80f10",
        "cursor": {
          "ref": "ab29ba73-62c7-4fa9-881d-52c5285375b5",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1a09abc9-f5e8-46c6-989a-89e428c1a82d"
        },
        "item": {
          "id": "142493d0-31bd-43ac-8146-ca1b00b80f10",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a661e65a-31c6-4990-8edb-58be15960860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "887d8736-3f6d-4048-86c6-88ca733884b2",
        "cursor": {
          "ref": "da5645b4-e7b9-48e6-96ef-c9133cdc846a",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1a181520-5735-4fc8-a257-cfbdce2933c1"
        },
        "item": {
          "id": "887d8736-3f6d-4048-86c6-88ca733884b2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "08783082-bc00-4972-be20-190ca5b1ed35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "1be1f480-2aa2-4196-887d-b6ee15bdec47",
        "cursor": {
          "ref": "27b3ad54-9582-41ff-9c96-c5d50432746a",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fc3aabea-d621-4662-acd3-8391f4feaee5"
        },
        "item": {
          "id": "1be1f480-2aa2-4196-887d-b6ee15bdec47",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "677e5976-076d-4c67-bcf5-84ddde6306dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "ec17f626-d528-4073-9848-915ec9d49865",
        "cursor": {
          "ref": "c2a2bf24-e409-4ab7-81e6-e1eccb8b93b9",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9c6ba1a6-07c2-4d7e-aa75-6be8c8295d55"
        },
        "item": {
          "id": "ec17f626-d528-4073-9848-915ec9d49865",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "821e7aa9-a7eb-4b28-9a23-a7bbcc1c2fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "7813f257-528d-494a-ad7c-19a7ceb6982d",
        "cursor": {
          "ref": "d0239eec-7f05-41b2-be37-37c880ce1594",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c405b524-6367-4c23-baf9-0268ce327534"
        },
        "item": {
          "id": "7813f257-528d-494a-ad7c-19a7ceb6982d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "544952d0-a18e-4c8b-8f12-3f904ee0d5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "468f4bd8-d6d0-472c-a8ec-60d70af490a9",
        "cursor": {
          "ref": "c8daaf50-78fa-4c30-80b6-a329eaa3a95b",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f817898f-01f1-4ca0-9d7d-a003522285ff"
        },
        "item": {
          "id": "468f4bd8-d6d0-472c-a8ec-60d70af490a9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fb18cf64-0550-466a-a7c0-9001a9194fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "345edd3c-e789-4c8b-a235-cd4afa5d7ba0",
        "cursor": {
          "ref": "dd5ce576-9302-4dc8-a0fc-6608cdab3939",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b33649a8-dab1-498e-8959-21e2262d4a82"
        },
        "item": {
          "id": "345edd3c-e789-4c8b-a235-cd4afa5d7ba0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "24c3e00d-3edd-4569-b537-ae4b771c595c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "23a5b1d7-572f-46bb-b436-e832ed056da3",
        "cursor": {
          "ref": "23c8aff5-0644-491b-8060-c18b0c5b34e1",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4de32a82-6b19-4afc-89cf-a55565649bd6"
        },
        "item": {
          "id": "23a5b1d7-572f-46bb-b436-e832ed056da3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b8c2d854-c121-46a1-9da6-33270f6370ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "c551e984-521c-43cf-b8df-a2176a7accb3",
        "cursor": {
          "ref": "8f4d7292-c18f-40fe-b69c-5689dd802963",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "dbcfbca3-08e7-4eb1-926c-8084ee3a674e"
        },
        "item": {
          "id": "c551e984-521c-43cf-b8df-a2176a7accb3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6d2a72c1-98d6-4aa4-a739-1872a7b7a3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "3fbc5c54-6729-4208-84ff-b89d90ba1d39",
        "cursor": {
          "ref": "abbc35be-f746-4d2a-816b-d61ff9c5499c",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "71089b94-49be-4d7f-b3fd-403f56dd9558"
        },
        "item": {
          "id": "3fbc5c54-6729-4208-84ff-b89d90ba1d39",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "de5efa88-f02f-4479-ab42-2b495ea71e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "2b25b79d-c2b5-4962-800b-45d18d24126e",
        "cursor": {
          "ref": "38ddd1b3-4f3f-4ba2-a7b7-c6a3e108649b",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "93e7db24-9dcf-4748-924d-631cd7fc8f09"
        },
        "item": {
          "id": "2b25b79d-c2b5-4962-800b-45d18d24126e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3721284e-d133-4f5d-860f-3dccbce5562d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "35d524ab-17eb-4da1-8460-2afe8cd607e2",
        "cursor": {
          "ref": "732a8d58-596b-4c1c-9fc2-e17d771c30fc",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7985a300-a8c7-4e9f-b4aa-9ed49c4a8dc0"
        },
        "item": {
          "id": "35d524ab-17eb-4da1-8460-2afe8cd607e2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4f89b08c-43f0-4069-847a-0d2ef4a14b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "6731cb85-e01c-460d-a3b8-3ebdd58a3725",
        "cursor": {
          "ref": "1dcd3fcc-7ec9-43c8-986e-99a2d8a51347",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e7c1f7dd-c0c2-43b5-91cc-c7d2dd111b24"
        },
        "item": {
          "id": "6731cb85-e01c-460d-a3b8-3ebdd58a3725",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9157850a-c092-4430-a56d-6b257b2a7d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "b9ff3587-571d-483b-96bf-180ec48b54e0",
        "cursor": {
          "ref": "1cee0d7c-43f6-44cf-b01b-03148bb383aa",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0f645792-6bb9-4a40-b580-506c33dcb2b3"
        },
        "item": {
          "id": "b9ff3587-571d-483b-96bf-180ec48b54e0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "99983149-2631-459d-a89c-16e192a15b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "e852be50-6a76-4a67-a253-7600a8757262",
        "cursor": {
          "ref": "450ab7bc-58b4-4bd1-aa2d-c20bed0c957d",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "102eecdf-e707-4bf1-8c47-b9b7f188b737"
        },
        "item": {
          "id": "e852be50-6a76-4a67-a253-7600a8757262",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7f5a8fb4-e3ba-4153-bdd4-45b338ab72b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "61b85412-3ecd-4547-8652-a61b95337450",
        "cursor": {
          "ref": "8e253379-a74f-4a98-b553-73101e4403bc",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c8f84adc-045a-4d2a-ae9d-c0825f2e487a"
        },
        "item": {
          "id": "61b85412-3ecd-4547-8652-a61b95337450",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "31041ed6-6282-4433-afdf-e6f4daf1acec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "4655e9b6-fe67-4aea-b71d-ebbe803eab2c",
        "cursor": {
          "ref": "3ac6a1eb-d190-4990-b184-77c171c30c01",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "95a6a9fb-9bf1-4266-b616-b6e6eec49ad8"
        },
        "item": {
          "id": "4655e9b6-fe67-4aea-b71d-ebbe803eab2c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "99c8b4b0-5426-41cb-9d2a-6ca3ac59185e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "3808eccc-5ec5-4ad1-8437-3ab9edd27911",
        "cursor": {
          "ref": "ad844d3a-185b-4570-a754-7a64a17d6e60",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0f4b923e-fa52-48e4-a5e7-85f1b83a3e65"
        },
        "item": {
          "id": "3808eccc-5ec5-4ad1-8437-3ab9edd27911",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "636be129-d5a2-459d-9417-e4544a5144d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "d5906b2a-4080-478b-9d85-e076892d7111",
        "cursor": {
          "ref": "1e043ba0-d21a-48bb-bfbb-7fe1d5907564",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5650bde3-c32c-4b70-a0e1-4b852aab45db"
        },
        "item": {
          "id": "d5906b2a-4080-478b-9d85-e076892d7111",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2b147b54-cd6f-4713-ad36-d81c477ec0b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f401f98-0f5f-4517-b0dc-7ebe64367cf4",
        "cursor": {
          "ref": "08ba874c-1139-492f-b117-ae5fbae10cb9",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8d691caa-4565-4090-974e-e138d4596c33"
        },
        "item": {
          "id": "2f401f98-0f5f-4517-b0dc-7ebe64367cf4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "37cb79df-05db-4802-b762-ec589d470864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6d97554a-1939-4125-9c55-0607bacb1439",
        "cursor": {
          "ref": "71538375-671b-45b4-a59f-7007b555ca39",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9e9fe8ba-1dbc-4bb3-b12c-d3d017f2619b"
        },
        "item": {
          "id": "6d97554a-1939-4125-9c55-0607bacb1439",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d14b47de-2d9f-4c07-9152-596d0d15b2b8",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50550ee-e6a3-4832-a18d-dbb2f7b2a544",
        "cursor": {
          "ref": "bf98fdbb-306d-4413-ac75-60b6dbef3922",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "423baa99-28a7-469b-92c5-3798c79c440a"
        },
        "item": {
          "id": "a50550ee-e6a3-4832-a18d-dbb2f7b2a544",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "af8713f8-3289-40d3-acaa-8e393ac88dc7",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7f4d00-f332-4df5-823a-0bc50c402f5a",
        "cursor": {
          "ref": "22162892-2fec-4e51-a871-40c9dc816db5",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "cbf0bd9e-a378-4384-8dc6-f79f68a93271"
        },
        "item": {
          "id": "6b7f4d00-f332-4df5-823a-0bc50c402f5a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e6071e61-f7ff-4e4f-ac04-0fe81c12b9f0",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "99de8a4b-16b1-4fd8-9b2d-3d477031ef07",
        "cursor": {
          "ref": "7c08cfcf-3c56-4d99-831a-0ad9b63f6bc1",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "523a9c9a-9d6a-4990-8278-44cf8415faff"
        },
        "item": {
          "id": "99de8a4b-16b1-4fd8-9b2d-3d477031ef07",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2f5f0b61-eb0e-4e68-bc14-5a179748742d",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3c71bc-3a7b-4a9a-9ac1-18f2766359bb",
        "cursor": {
          "ref": "9be32fb6-7182-42b7-b318-f8d222c82ec2",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6064492e-b101-4ffb-b1d3-20afd24af9fe"
        },
        "item": {
          "id": "9b3c71bc-3a7b-4a9a-9ac1-18f2766359bb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0d64b801-ed35-41ed-b9f7-8d506c61916f",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-10-07T00:48:09.811Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-10-07T00:48:09.811Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "7b747d86-f94a-4f2a-b891-94c322fb1f9f",
        "cursor": {
          "ref": "f1da2ca5-96af-45aa-a16f-64f9ed065bf0",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "eb84c4fb-a3ca-4781-8d0c-cb667ad6e5ca"
        },
        "item": {
          "id": "7b747d86-f94a-4f2a-b891-94c322fb1f9f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6fdbae6b-eda3-4093-9881-458562571bc0",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb2bf2b-a30e-4f35-be36-feb9e22b4cd4",
        "cursor": {
          "ref": "91ae718b-e990-4ab3-b076-cfaa5b1c4d22",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "cb01a00d-bf43-453f-9ee9-d9b62f2fcc60"
        },
        "item": {
          "id": "bcb2bf2b-a30e-4f35-be36-feb9e22b4cd4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2b028d71-4492-42a8-8069-acf00264d65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "cbd4a234-5e46-4ac0-880f-25ab2ff06655",
        "cursor": {
          "ref": "65b4ebf0-b076-4148-a28e-f614e9ce852f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "83cc3662-6301-4cef-b1b5-49bf23111be9"
        },
        "item": {
          "id": "cbd4a234-5e46-4ac0-880f-25ab2ff06655",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d4c29a1e-ca7d-45ab-828f-ff7e4aaafb12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "64339991-c928-4c49-bfe0-d76d5058afcb",
        "cursor": {
          "ref": "2378c2af-1ddf-4bc0-888f-d47adf0dc330",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "130e5ecf-d63c-46c2-a0b6-960958aef36a"
        },
        "item": {
          "id": "64339991-c928-4c49-bfe0-d76d5058afcb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2c8cd2c4-db3c-4e42-8ed7-2c63f6a4ead2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5b8bbe23-1c23-4c79-8869-04c7edab9760",
        "cursor": {
          "ref": "93d8de93-1cd6-4771-995c-8beab98a14d5",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "93243b28-d2fd-429c-a49e-b988eba954a3"
        },
        "item": {
          "id": "5b8bbe23-1c23-4c79-8869-04c7edab9760",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "87b9baf1-1b71-456c-886d-f254a305420b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "f3ed4fdf-88f9-475c-a37c-69e73a934f29",
        "cursor": {
          "ref": "7f039f48-0bbc-404d-8134-3834dfb64430",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5d90bdde-efd1-4cf2-9bec-2e1b9bdaa1d7"
        },
        "item": {
          "id": "f3ed4fdf-88f9-475c-a37c-69e73a934f29",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0d55e7d0-0d2b-4dcf-9cfc-9e7ffec192db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "77b7a6fe-87c7-43d5-ab0b-9bab7055ac3e",
        "cursor": {
          "ref": "402f726b-961f-4b37-bb19-e566bd53063c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7104b571-05c0-43d6-8129-af57a1fed618"
        },
        "item": {
          "id": "77b7a6fe-87c7-43d5-ab0b-9bab7055ac3e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "38ea9fd5-d277-4fa7-a025-d3d7f8c290e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e99932ba-ed33-4a15-8637-9f1fd38474ef",
        "cursor": {
          "ref": "801e3935-0094-4bdf-ad97-c1b31ca19df8",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "976d7c84-2ba0-4e18-950c-d49ca5b9eac9"
        },
        "item": {
          "id": "e99932ba-ed33-4a15-8637-9f1fd38474ef",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "365f4c98-4546-41d3-896a-0b4c44346801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7e5aa95a-35c1-48a2-b54d-3978f1e860c0",
        "cursor": {
          "ref": "62e9d95b-87e3-45e4-8af5-06fa261f8d31",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "012029ee-553d-4af2-bcf7-283776d3cf43"
        },
        "item": {
          "id": "7e5aa95a-35c1-48a2-b54d-3978f1e860c0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0b5c89db-3039-4af4-b92b-9f0965189014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "19fa39aa-4ad7-48cc-9392-a67eea951bc9",
        "cursor": {
          "ref": "f34ba3b3-5a07-4b77-8116-7963cd4c1c3a",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "66574781-7bf5-4df2-b486-fbb4fbd66567"
        },
        "item": {
          "id": "19fa39aa-4ad7-48cc-9392-a67eea951bc9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "840c467c-86cf-4065-93a4-d7378c7a284b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "f3c07bbb-3196-49c1-a2f0-718866b17158",
        "cursor": {
          "ref": "fbf00b46-efdf-4853-9cec-500c6f06bb93",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3e915304-5f1a-4b67-b402-e2fced325c79"
        },
        "item": {
          "id": "f3c07bbb-3196-49c1-a2f0-718866b17158",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7417aecb-1284-42b4-ab1d-ed22498860f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "93d45169-8f5a-470b-b86d-02e51b523fb8",
        "cursor": {
          "ref": "055db3a2-ba2c-453a-b201-3f3e9a6a7971",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c151d656-9ddc-4701-bf29-fe2d961c5eb9"
        },
        "item": {
          "id": "93d45169-8f5a-470b-b86d-02e51b523fb8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9ee73bf8-8947-4b3a-85d2-8325471d950a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "b07d1890-dfbd-49ce-989e-16d24511d4ff",
        "cursor": {
          "ref": "4cd4ebf9-8c92-43b8-96e2-5c4a0d596e02",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "41125407-97aa-4d4a-9205-f91c50284b3c"
        },
        "item": {
          "id": "b07d1890-dfbd-49ce-989e-16d24511d4ff",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2d050388-b384-41f4-aa37-19560296392c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "8d5fe51d-f4f2-414c-bdfb-990036064472",
        "cursor": {
          "ref": "93ef8616-02f5-4e06-b529-892884211cc8",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b078835a-e5f5-404d-819b-6eee83905426"
        },
        "item": {
          "id": "8d5fe51d-f4f2-414c-bdfb-990036064472",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9185fc03-1991-4d1e-a391-b23a4c885d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "8f29979b-3fac-4df3-8219-4a7fa56d4030",
        "cursor": {
          "ref": "532f3227-8308-499b-8ba0-b125072e504a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8d4c7f27-2feb-4383-9491-b6b508430058"
        },
        "item": {
          "id": "8f29979b-3fac-4df3-8219-4a7fa56d4030",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "baf3f3c5-e6c3-499e-b9c0-ccfcb96c28de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "dc68b5aa-b3a9-457a-a87a-a66a17d4fdb1",
        "cursor": {
          "ref": "062eee47-58df-4bd5-b045-b2a2f1db90d7",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5faaa612-fdae-4970-9d7e-7e8f77e9cde7"
        },
        "item": {
          "id": "dc68b5aa-b3a9-457a-a87a-a66a17d4fdb1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "78aae37f-2b24-44b1-bd13-6c95a1fe2684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "48a20c81-c036-4dcd-a458-7eae39cce192",
        "cursor": {
          "ref": "caefa877-5025-46fa-9d55-8fa6d109ab81",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d4362751-f382-4e44-a04a-99b11a3db451"
        },
        "item": {
          "id": "48a20c81-c036-4dcd-a458-7eae39cce192",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "21b0dce3-7396-46d9-80e1-b25c9a092dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "55ed22d8-3cbe-4717-8f99-99c0feab91c3",
        "cursor": {
          "ref": "778e77f3-aff3-4782-9b9b-22e2e170624f",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "02a46ee9-5fbd-4662-8c94-3cecdff4950b"
        },
        "item": {
          "id": "55ed22d8-3cbe-4717-8f99-99c0feab91c3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "94daca07-fef8-4721-ab30-e2c266f9fc29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c1b2f913-d069-4891-b19d-2902b9669e86",
        "cursor": {
          "ref": "c810adee-d462-40f6-b61b-e07fc19e3e3b",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "494c73c4-b2c7-46c3-a55b-eb797b8db7b3"
        },
        "item": {
          "id": "c1b2f913-d069-4891-b19d-2902b9669e86",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "db470cb3-b2d5-4516-9d4f-290a45cafe86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c736c3c3-097a-4c0e-86ec-5144a8a69209",
        "cursor": {
          "ref": "92ff2385-743a-4026-a975-e0d42fba5dd6",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b8433c6c-5817-43ed-a2c3-7af85299c833"
        },
        "item": {
          "id": "c736c3c3-097a-4c0e-86ec-5144a8a69209",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "573fdfc7-f4ae-444c-bd30-23f70b6fff00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "ccd09889-eafd-40f5-833a-9c8267a4a4c2",
        "cursor": {
          "ref": "dbea51b5-2f26-4b5c-8433-82c3c2cf2e9e",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8365704d-35e3-43d6-be9d-8b7f39f6f261"
        },
        "item": {
          "id": "ccd09889-eafd-40f5-833a-9c8267a4a4c2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "19116e49-025f-48f8-b508-223903556c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "15245782-725f-484b-b0fd-88464c894865",
        "cursor": {
          "ref": "120ca5c5-135f-47db-9774-f67f1ede47a0",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4e248708-4332-48f5-835c-6f3a2ce0c390"
        },
        "item": {
          "id": "15245782-725f-484b-b0fd-88464c894865",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a5cf95fa-12c5-48b4-805d-6f4f656f4653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "a68013fe-b5e9-43cd-955a-69c0b5c302ad",
        "cursor": {
          "ref": "f3bd5099-0cce-45f8-9fbe-3d89973787a7",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "806b83d4-e258-4dc2-a814-829be77d589e"
        },
        "item": {
          "id": "a68013fe-b5e9-43cd-955a-69c0b5c302ad",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d3c004f5-d548-4cba-8c7d-e5671458f004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "ca4165f1-126a-4c74-b2fb-87ee8cec73bd",
        "cursor": {
          "ref": "20c19b04-d445-4f5d-b544-576e645f6a46",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d28ae056-f860-4e96-bd57-ba94384b6f93"
        },
        "item": {
          "id": "ca4165f1-126a-4c74-b2fb-87ee8cec73bd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "36ffc315-5e7d-4fe3-b7a5-3557a6efc783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c01bc4db-3cd9-49bd-aef3-593f60f6f556",
        "cursor": {
          "ref": "0a17585f-c97d-4f83-87e6-21e1880b540c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ac24d11d-f15c-4e54-8fa8-754588ad428b"
        },
        "item": {
          "id": "c01bc4db-3cd9-49bd-aef3-593f60f6f556",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e19c33b2-3e53-4392-a131-7420c70d12f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "6f08717d-5c0f-401f-8752-a760560bdadb",
        "cursor": {
          "ref": "e6c4b6e8-5766-4ec6-886a-05bb63fa1089",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cdd515c0-3835-4bc5-a145-c26f33c85118"
        },
        "item": {
          "id": "6f08717d-5c0f-401f-8752-a760560bdadb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c5f80583-fc5a-4b05-a60d-4f4f2e271364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "685bde1e-4eb0-4eea-8911-4e5037f49fa3",
        "cursor": {
          "ref": "15791a48-e4c2-4e06-93d4-bbae08e33833",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e36cee24-1d9f-4ce7-8e62-3c900a08905a"
        },
        "item": {
          "id": "685bde1e-4eb0-4eea-8911-4e5037f49fa3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bdd69666-5ff3-434d-ab74-63f148bc8fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "357306bb-0c6a-4487-8d18-94eaa3f44ed8",
        "cursor": {
          "ref": "f99721c3-5673-444a-a8ae-28cd1ab4b356",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "61ce8481-3060-4326-a938-c72ddf161680"
        },
        "item": {
          "id": "357306bb-0c6a-4487-8d18-94eaa3f44ed8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6fe0b04d-8746-41b8-8cfa-9254ddf6b69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "959202be-0cbe-4dec-a43f-ee03d3f8d21f",
        "cursor": {
          "ref": "ea3b774c-2581-41e0-9b6d-3847e82069da",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3cd43b71-1c27-453a-b864-7de48a28b4f0"
        },
        "item": {
          "id": "959202be-0cbe-4dec-a43f-ee03d3f8d21f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "57842562-9b12-4998-8654-165bd69d578e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "04077518-2426-4e69-8c29-dc0d463586e8",
        "cursor": {
          "ref": "f24e1eb0-f618-4592-903f-e5f0814d7fea",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0060328b-f2d3-4f53-97db-632f77b07bbd"
        },
        "item": {
          "id": "04077518-2426-4e69-8c29-dc0d463586e8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "abf4fde6-5eb8-4079-bf87-3a3bd1defb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "56d552d0-fbf8-471f-997e-33746692179c",
        "cursor": {
          "ref": "9c654651-81ca-435a-bbe3-53659b6482ad",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fb6f2396-20b4-4608-b097-67512e264824"
        },
        "item": {
          "id": "56d552d0-fbf8-471f-997e-33746692179c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e463f4fa-2e3c-4152-b87a-79c5b0a9dda1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "7bdb61c4-c13f-465e-94c1-0ec1e176d11b",
        "cursor": {
          "ref": "83c07873-ab7d-4153-b029-ed7511aee5d3",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8af13a86-f8b8-44d1-ab05-5eecb87af6fe"
        },
        "item": {
          "id": "7bdb61c4-c13f-465e-94c1-0ec1e176d11b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "449ac58d-87be-43a7-b8e4-3e7ba45a6652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "861ff65e-59e4-4692-984d-bc21c2330cb3",
        "cursor": {
          "ref": "7112bffc-4b36-4db6-8933-7c588760e4bd",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a86fe419-8984-4cfd-a96f-44992cb73893"
        },
        "item": {
          "id": "861ff65e-59e4-4692-984d-bc21c2330cb3",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e06f21c9-97a0-41c6-9774-649eac4b763b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "cadd81c9-ed37-4817-9272-3c83c438a09d",
        "cursor": {
          "ref": "6626faec-f16d-4be6-b5c2-7373d45d056a",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a4739af2-3f7a-4846-9c53-a70443551d6d"
        },
        "item": {
          "id": "cadd81c9-ed37-4817-9272-3c83c438a09d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f9957874-a8c6-4daf-9de2-5f5a981e4643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "be11c2fc-9159-41cc-9271-1f1ab54df6d2",
        "cursor": {
          "ref": "3544f86f-3e7f-4b8e-b428-17c9affa7a51",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f8552c6a-27e5-4682-a066-2a24d1b75a60"
        },
        "item": {
          "id": "be11c2fc-9159-41cc-9271-1f1ab54df6d2",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "ca500f32-5092-4024-baa9-de1d4b25d3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "21827a12-ca01-4cba-ab19-84c0e824d346",
        "cursor": {
          "ref": "9f55116f-bcd5-494c-98e0-1e2bdea5cbe5",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "579458ce-5c5c-470a-bec2-6cd0b08bc2bf"
        },
        "item": {
          "id": "21827a12-ca01-4cba-ab19-84c0e824d346",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "90dc5600-3379-469c-a2e9-43f3537d221e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "d737b148-f1c0-4fa5-bacc-c9406c175db3",
        "cursor": {
          "ref": "f33c547a-6a03-4a5b-829c-febcbbbec4fc",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9fed83d3-1aca-47e0-83bb-aaff70a23cad"
        },
        "item": {
          "id": "d737b148-f1c0-4fa5-bacc-c9406c175db3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "bdaea9dd-4871-409d-bbeb-c192155647ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "404dd9f2-e1bb-4781-a2ad-0926992c1fd4",
        "cursor": {
          "ref": "4ed3ca4b-5413-4a8b-9e2a-43c32399a332",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "163e1855-eb89-4550-a5fc-1bc268f245e7"
        },
        "item": {
          "id": "404dd9f2-e1bb-4781-a2ad-0926992c1fd4",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a551b83a-1def-418a-860a-7a7e652d82f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "cc14f211-c720-4e62-a281-cb0f4f41ed52",
        "cursor": {
          "ref": "337133c4-2444-440d-b4d3-7a055e15af61",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "22d55af9-e715-41b4-afd3-48fcf85f8c83"
        },
        "item": {
          "id": "cc14f211-c720-4e62-a281-cb0f4f41ed52",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e52b724e-da11-434d-af63-17ee0dd0ac64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0665e7e0-c98e-4aad-8fd3-f3eeeb38ba2e",
        "cursor": {
          "ref": "8911fd99-abf0-49a6-96c8-0a84594c4502",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "78b7c7e8-a7d0-404b-b44a-7ea80d9c8494"
        },
        "item": {
          "id": "0665e7e0-c98e-4aad-8fd3-f3eeeb38ba2e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b86db6ad-e672-418f-99b1-e1346c55543e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "b74b1332-fb38-493d-8977-83603f2593fb",
        "cursor": {
          "ref": "1cf79911-78f7-4078-8215-87b3a590ac39",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3126ba60-d0e3-414e-9cb6-966a4bd46b8d"
        },
        "item": {
          "id": "b74b1332-fb38-493d-8977-83603f2593fb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "35fbfb71-024f-47d8-831b-515b2d327371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "562bd0f1-7e76-45d1-8461-671b32a6b958",
        "cursor": {
          "ref": "0421051c-f2ae-4207-a5f8-758f6c542f59",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1a9b7298-c837-4bc6-b4a0-85ac7b5ff5cd"
        },
        "item": {
          "id": "562bd0f1-7e76-45d1-8461-671b32a6b958",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4f6097d5-70cc-497f-bbaa-9dc43e1bc68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "e698c68f-d25b-42e0-80e8-987149c2968b",
        "cursor": {
          "ref": "141d622d-2383-4fa4-88d1-b143b356e09d",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4d4a52b8-80b9-406a-99b0-635a09e33467"
        },
        "item": {
          "id": "e698c68f-d25b-42e0-80e8-987149c2968b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "69f91c79-530e-44e3-85b3-9383e0b32e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "a11721d1-d6a3-4b04-9e9c-e0d451a4fa3d",
        "cursor": {
          "ref": "5b3d2077-c081-43bc-b324-083f45a27738",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "455d3a6e-99be-4fb0-83a7-e51a0ae30fde"
        },
        "item": {
          "id": "a11721d1-d6a3-4b04-9e9c-e0d451a4fa3d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a0211356-9267-4934-a04b-7c0962cd9762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "0a8db3cb-e0f3-4e64-9cce-561c3716f892",
        "cursor": {
          "ref": "e8f853c1-05cb-4ac8-b732-3570b301500e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c4377e35-8477-4f08-b7cf-77ca05ec851c"
        },
        "item": {
          "id": "0a8db3cb-e0f3-4e64-9cce-561c3716f892",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "92838808-833b-414d-94c1-31e929dc678d",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "88913827-e1e1-4a01-bb7d-32e2ab3379a2",
        "cursor": {
          "ref": "0d7300fc-f3eb-4c71-88cf-1bdb6fc65c43",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ea03b720-ace4-4919-8330-fd555c6c5212"
        },
        "item": {
          "id": "88913827-e1e1-4a01-bb7d-32e2ab3379a2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "750d4620-49c1-4054-81db-053bf6c06874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "a9f7bc6a-59b1-4d08-be05-ac711b32d373",
        "cursor": {
          "ref": "1746ba8f-90c0-4ee2-b75b-f361032ac4d4",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a3430a63-bdfc-4d2e-ab3d-e9cb6d174487"
        },
        "item": {
          "id": "a9f7bc6a-59b1-4d08-be05-ac711b32d373",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b826fbcf-740a-492b-8e98-e8237508ee04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "be19af53-d4c4-425b-a757-9482ac881c93",
        "cursor": {
          "ref": "274fad7c-cba5-4d6f-ac3b-de3145ba0553",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2a84cd98-3164-4d17-b9ea-f7634c23883f"
        },
        "item": {
          "id": "be19af53-d4c4-425b-a757-9482ac881c93",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "501e923d-6dd7-41b3-a21c-2c1404cab981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "71d31e87-1619-4828-a042-071a32bea6da",
        "cursor": {
          "ref": "0cd3441a-f771-4370-ba49-3b922f584679",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8dd68f36-b9c2-41fe-bb6a-8400ae58ad45"
        },
        "item": {
          "id": "71d31e87-1619-4828-a042-071a32bea6da",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ec1279eb-b36e-445b-9f1c-fb77da9dd77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "e9f95b24-073d-4a35-af8e-e1e7fa1f56f8",
        "cursor": {
          "ref": "1393214f-b19b-48f5-9cf9-24f47ad19d6a",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c73fad1a-ee42-4825-ab30-71d6d77fce00"
        },
        "item": {
          "id": "e9f95b24-073d-4a35-af8e-e1e7fa1f56f8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "368ed77a-d7ec-4ed8-bafa-1770769e03ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "6baf76b7-fc62-463a-9828-e02fec71532e",
        "cursor": {
          "ref": "669a9744-c788-4bd2-bdfe-738a33409136",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e9b60dbc-3048-4a12-b038-2e895216e6e0"
        },
        "item": {
          "id": "6baf76b7-fc62-463a-9828-e02fec71532e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c7e310c3-b418-4ded-bd2a-7a5834eef515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "3ecd7e4e-cdc1-499e-8315-f15f9b273638",
        "cursor": {
          "ref": "101c091a-9e20-4c0e-85f3-eda6bf8e418c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "073dfbfe-b31d-4544-91b0-5a99fff98584"
        },
        "item": {
          "id": "3ecd7e4e-cdc1-499e-8315-f15f9b273638",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "eb51aa39-a517-4603-aa52-261d9da1bef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "c3f4a934-3840-4ec8-901d-a752814e0afa",
        "cursor": {
          "ref": "cd32beb7-3133-44ec-9f36-cabab850ffd3",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9ad35ec0-2ed7-4286-967d-53c8a76dcfd6"
        },
        "item": {
          "id": "c3f4a934-3840-4ec8-901d-a752814e0afa",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5c95bef5-8433-4f5c-b1ac-4c881a3ef093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "bbafdb1e-ca00-40aa-873c-efc4883800c4",
        "cursor": {
          "ref": "a4676f42-6124-408f-9db3-f8aab4f81a2c",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5d15a243-2626-4702-9a3e-4d88306db182"
        },
        "item": {
          "id": "bbafdb1e-ca00-40aa-873c-efc4883800c4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "aeca8934-a693-4ccf-b735-e40072390a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "3fa2de0e-0872-4ccd-add0-411cb83ef00e",
        "cursor": {
          "ref": "3bd9e8ad-5c08-41fa-9f25-c0d265f81447",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c760f33c-e25a-4124-83ad-60444980b55a"
        },
        "item": {
          "id": "3fa2de0e-0872-4ccd-add0-411cb83ef00e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1af00057-558f-4e66-87f1-9c2113c56f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "86bf5d7f-8811-4802-a649-f3695945b327",
        "cursor": {
          "ref": "2c49b435-e73e-473e-b33a-5f39a7cec1c7",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "fae209e1-5746-4ef0-954c-f319b7165b11"
        },
        "item": {
          "id": "86bf5d7f-8811-4802-a649-f3695945b327",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3f659418-e1e0-4a47-bcf9-6e9cf04148f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "3aff6cd4-a6ac-4eb7-914d-56a6408a3a56",
        "cursor": {
          "ref": "5b786848-29ac-4801-90ff-2b6ee5c11518",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7f450583-6bec-41f8-ac9e-4364b03c9b6d"
        },
        "item": {
          "id": "3aff6cd4-a6ac-4eb7-914d-56a6408a3a56",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "23dcb4f2-ac6d-4c9d-b90f-bda6f81c1b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "ef5ede4d-eeb0-44c6-b82e-402ee5b7ae61",
        "cursor": {
          "ref": "89fd3805-607c-4a20-b6ff-460f658d3b6c",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "363d2919-61d5-49eb-a0ff-1b5a4a82abf6"
        },
        "item": {
          "id": "ef5ede4d-eeb0-44c6-b82e-402ee5b7ae61",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f970413f-8f3c-42b7-a033-e54903534ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "67033cfa-9d58-465c-b7b7-afbca6df7cce",
        "cursor": {
          "ref": "b03c9cdd-556b-40ed-a5b5-acc158ec94e1",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1c66a340-4cb2-4336-8931-a5d9e478d8fa"
        },
        "item": {
          "id": "67033cfa-9d58-465c-b7b7-afbca6df7cce",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bea7eb13-fd8d-4067-954f-2501af8e6538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "377425fc-ea46-44bb-939e-8bde6fcaaf2b",
        "cursor": {
          "ref": "efe60c57-08a2-4ee1-afaf-fa3fafaa2787",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "707b5389-1fcc-409e-8b85-fbc5881ae764"
        },
        "item": {
          "id": "377425fc-ea46-44bb-939e-8bde6fcaaf2b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "60df189d-fa4c-4248-97b7-3b0d097c4dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "d0251a98-694c-4b51-aac5-35da2c0b2359",
        "cursor": {
          "ref": "a977eb86-6e52-4cc4-8a38-5e287f7458db",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a9f047db-7536-45ab-9bb4-7d6953d6a146"
        },
        "item": {
          "id": "d0251a98-694c-4b51-aac5-35da2c0b2359",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e6b0d1c3-68d7-4512-88a1-dfe6eb2306f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "e0edf916-7a9c-41b8-bb1f-045073c122f4",
        "cursor": {
          "ref": "2ce7711c-24d9-4a79-9b0d-0cea6d17b152",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "effc4edf-0aa3-40ad-8915-d52c7bd3e881"
        },
        "item": {
          "id": "e0edf916-7a9c-41b8-bb1f-045073c122f4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "01e91529-4a83-42a9-9b9c-e707003f1cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "2ebb2540-1261-43c4-92c2-3a064755fb67",
        "cursor": {
          "ref": "219c4932-ea06-480c-90be-8d4483ab6af5",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d7f66019-16b0-44a2-8e08-9321786a59ae"
        },
        "item": {
          "id": "2ebb2540-1261-43c4-92c2-3a064755fb67",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "bb11cb16-1d3d-4562-9f20-992549ac9065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "86a499da-fc27-4e05-bbb8-6bda5ee1ad0f",
        "cursor": {
          "ref": "256824e7-f99f-470f-9b59-837f0b5378dd",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8d7159ad-4988-4cbc-8b28-d339db6883d1"
        },
        "item": {
          "id": "86a499da-fc27-4e05-bbb8-6bda5ee1ad0f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1a2b7c09-fc0d-47ad-b93a-9519f8a992cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "2c7d179c-6ad6-491c-aaa2-6d15be30c7cf",
        "cursor": {
          "ref": "d2bdcbd0-31e6-4502-a4d6-c0c61142591e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a7daca60-7681-44c2-8e4f-9faa2220fd09"
        },
        "item": {
          "id": "2c7d179c-6ad6-491c-aaa2-6d15be30c7cf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "04fe0f1f-0f4a-4fb8-96b8-09c9449ba838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "4f2170c9-ae9d-42d8-96d6-7accb162603b",
        "cursor": {
          "ref": "c377e78a-e136-4ebd-b068-4e52c6d6a869",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8e47811c-2fe8-4291-97e0-4da62f6ea8d1"
        },
        "item": {
          "id": "4f2170c9-ae9d-42d8-96d6-7accb162603b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f8f58efb-0316-4385-88af-fb09a736c483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "5b3583e0-0d5c-498a-8c5a-03152d155eb4",
        "cursor": {
          "ref": "319ea0cc-022f-476a-a3f2-e3858a97a6c0",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "95ad38b6-8ac9-4347-a389-b6ddfe831987"
        },
        "item": {
          "id": "5b3583e0-0d5c-498a-8c5a-03152d155eb4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "54991a63-223c-4f28-b00f-88e4114ab131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "a228ee0a-e23c-41ec-8ed9-0e39a4af7e86",
        "cursor": {
          "ref": "29e92223-4f44-4266-be37-6757582a9f39",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8cc0d8bf-7920-4fa4-a323-270f0f993fdb"
        },
        "item": {
          "id": "a228ee0a-e23c-41ec-8ed9-0e39a4af7e86",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "52f7a7f3-02cd-47f9-b32f-c8db689c54c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "f92bcdb9-3ce6-402c-9b86-765544cd261e",
        "cursor": {
          "ref": "2dac290c-48d1-40bd-96ac-315e7dea870e",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "27663970-1a28-4cc3-a113-7d91ceaa7004"
        },
        "item": {
          "id": "f92bcdb9-3ce6-402c-9b86-765544cd261e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "946c2f7d-9dac-48e2-93ff-f323257046fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "74509aa6-900c-4cc9-84a7-7e9402b4925d",
        "cursor": {
          "ref": "550ed5f6-9679-4161-915c-fe14b20c5fbb",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c8547d3e-9861-430d-a097-c66c8548c9ae"
        },
        "item": {
          "id": "74509aa6-900c-4cc9-84a7-7e9402b4925d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3a6181f6-4ef3-4c5e-8de9-582c52ea1b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "b1cde469-2eb2-4f6a-8434-adf16376615b",
        "cursor": {
          "ref": "41176229-d44a-411d-8c4e-09530c7ed6f1",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "183bd320-c79a-467f-a2c2-0dbd9ffaeda5"
        },
        "item": {
          "id": "b1cde469-2eb2-4f6a-8434-adf16376615b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a6df9beb-5891-4395-9b99-87e8ee1664b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "37a2def5-f5f6-48bc-8535-748f0987de2c",
        "cursor": {
          "ref": "438800e6-192a-43c9-87d1-dabca9995dc1",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cfa344c3-da1d-43c7-b209-13d9a0241610"
        },
        "item": {
          "id": "37a2def5-f5f6-48bc-8535-748f0987de2c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7ad9c626-d1e6-40c4-8164-a39d5a98240e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "aad7de2e-977d-4fb7-8b0b-3011b1791cce",
        "cursor": {
          "ref": "28532aee-6128-48c8-9535-34d77865f8cb",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e676cdf3-fcfe-4c5b-8bb2-05677d5b950a"
        },
        "item": {
          "id": "aad7de2e-977d-4fb7-8b0b-3011b1791cce",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8125f66d-2afa-470d-a4df-76580d81bdbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "3891b83c-a5d5-47df-b9af-9a3e491cef16",
        "cursor": {
          "ref": "c730f4b2-5c36-45bb-8a79-3c467a59d60e",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d2557e4e-b640-4e44-a1a8-684d49e1a47b"
        },
        "item": {
          "id": "3891b83c-a5d5-47df-b9af-9a3e491cef16",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b622c83b-d078-4aab-9878-4a490876a205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "f4549cd3-d33e-4062-9a46-08861438c965",
        "cursor": {
          "ref": "f5567da5-6710-4d2d-8b59-a78d4a109217",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b24a1681-f383-4404-b040-c698d877b0e1"
        },
        "item": {
          "id": "f4549cd3-d33e-4062-9a46-08861438c965",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6be8693a-1c86-495a-937e-82db0c4c6816",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "2f49ceec-e9f5-4a30-ab84-3504edb5ee28",
        "cursor": {
          "ref": "5eb8a3c2-8ade-40e1-bab5-b4fdcf676cf3",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b869cc6b-0993-43e0-8dac-8624f58ab553"
        },
        "item": {
          "id": "2f49ceec-e9f5-4a30-ab84-3504edb5ee28",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "108991cc-3e91-4bb5-9f4d-f768ab3fa00f",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "b3de2677-e242-4f0c-8670-1b0b287d900d",
        "cursor": {
          "ref": "32591969-f02b-4ed1-9c4c-8aaa81573601",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e2a592a5-c828-4775-b9bd-e56b23776048"
        },
        "item": {
          "id": "b3de2677-e242-4f0c-8670-1b0b287d900d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ad8a07eb-1b07-4419-9323-67ebd15acef9",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "e47c875d-af94-4005-8810-15e61453d43b",
        "cursor": {
          "ref": "699d28a2-02d4-4cff-923a-74677b3820ed",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "357134ae-fe0c-4072-b5fd-950370dc8e1e"
        },
        "item": {
          "id": "e47c875d-af94-4005-8810-15e61453d43b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "414bda8f-478c-4a5b-9349-2bbcc55f18a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "e29607e1-2e55-4a7f-a24b-5bac9d74d321",
        "cursor": {
          "ref": "6bb209b4-f70c-44ce-96f8-f2e8481c5111",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9a449721-77aa-4d0f-8d60-d0f98e1bade1"
        },
        "item": {
          "id": "e29607e1-2e55-4a7f-a24b-5bac9d74d321",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8c5a2d2e-51c4-485c-886d-39c80f4c4bc3",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7354cd52-a8f7-41d7-ba57-db2315bd147d",
        "cursor": {
          "ref": "f564e963-9d66-4559-8ba2-c0ee3ce0960f",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e537440e-8cd0-47b6-a7a8-5bfabce587df"
        },
        "item": {
          "id": "7354cd52-a8f7-41d7-ba57-db2315bd147d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c224f513-b22f-4910-b4ae-1a2bbb477e96",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "40a62056-1dd8-4825-9773-821f247eb3eb",
        "cursor": {
          "ref": "4a03baa6-3cdd-47dd-87f4-0fa36474fd29",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f07d6e3f-0301-419c-8cad-3fdfb027b2fe"
        },
        "item": {
          "id": "40a62056-1dd8-4825-9773-821f247eb3eb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c16c7c20-638c-4f35-9519-2fe52e5131dd",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "d889c736-d40d-41c5-ba69-9081f04e0dd7",
        "cursor": {
          "ref": "fcf49e3f-3591-4ab4-a16a-f336aea672e5",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4c1baaa6-657a-4bc4-a38a-317351c24262"
        },
        "item": {
          "id": "d889c736-d40d-41c5-ba69-9081f04e0dd7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6b0f18aa-4a0d-4be7-b867-0e2052074963",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "34561328-9005-42c7-9d66-66d1d2eecf05",
        "cursor": {
          "ref": "499d7752-bbb4-42f2-aa3c-b67258d414cd",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4503cdce-74e3-474d-b0e0-cf98b86c8855"
        },
        "item": {
          "id": "34561328-9005-42c7-9d66-66d1d2eecf05",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "51346278-0bd2-42e6-a35d-7e97c67b15d3",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "206c74b8-47aa-4a75-a9c3-27c13253c31b",
        "cursor": {
          "ref": "7dae78e3-5099-4a06-8059-4cd532223258",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7761401a-4813-4484-ac5b-4ecd524de7b8"
        },
        "item": {
          "id": "206c74b8-47aa-4a75-a9c3-27c13253c31b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "56d5b47e-1c73-43a9-94ab-b166d1e99feb",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "e6a64ee5-fe2a-4d5a-b6bb-ceb996aed766",
        "cursor": {
          "ref": "10578173-6fb6-4aa1-b7ec-176c04ab105a",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "59aa03e7-75ae-4959-9fec-1a64e44b7501"
        },
        "item": {
          "id": "e6a64ee5-fe2a-4d5a-b6bb-ceb996aed766",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3916aec3-19f4-470d-b23e-223c1b5cf74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "b45431d1-6872-4e24-8e30-a9edc4e82864",
        "cursor": {
          "ref": "b55dbcdc-372e-4deb-8ec6-3a23e7708266",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d586bb9c-d320-4f4e-b356-14acb924679e"
        },
        "item": {
          "id": "b45431d1-6872-4e24-8e30-a9edc4e82864",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b3240b66-b2df-415a-a4d5-bd3a1a28f855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "4b6653f5-252c-4b18-8d6f-bad9e8f945d5",
        "cursor": {
          "ref": "c19aeba3-2786-4a4e-aff4-a5672b465d67",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "aec19214-dbe1-40ed-b628-083f750e9584"
        },
        "item": {
          "id": "4b6653f5-252c-4b18-8d6f-bad9e8f945d5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5c85db83-d8d6-4a0c-81fa-28df483355de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "11dd0a5a-e447-4548-927d-abd3be266b1d",
        "cursor": {
          "ref": "c3479b1f-c28b-4aa7-aa1e-8deada49a297",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c7a8cfbc-13ee-4471-9592-e9c791f7dc0a"
        },
        "item": {
          "id": "11dd0a5a-e447-4548-927d-abd3be266b1d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1c99f26c-e5d5-4a9f-96f7-50b777ae2544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "a9cdd800-4ef1-4a9f-8e08-0005f7c06d61",
        "cursor": {
          "ref": "21a64b40-50b3-4e25-a0cf-87702de35527",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "17e5b21e-8e94-4f6e-86ef-925d4f7205dc"
        },
        "item": {
          "id": "a9cdd800-4ef1-4a9f-8e08-0005f7c06d61",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0362037d-7922-4503-b2b2-28aa5605d651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "f2a092fe-70a3-4b85-b7c9-73c8e2b9a634",
        "cursor": {
          "ref": "f984adcb-d3a9-4c86-8ca4-158996414764",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7d11a477-c46d-443a-9e74-dc26b41ee12b"
        },
        "item": {
          "id": "f2a092fe-70a3-4b85-b7c9-73c8e2b9a634",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3b04b33a-6b86-463c-a3f2-9f9078eccf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "bb0cf185-9cbb-429c-a0c1-774807cd7b72",
        "cursor": {
          "ref": "ac9feacd-3667-4b41-8aa7-c3c1c24e6539",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "aaade19b-f223-4ec0-9452-fbec715fe735"
        },
        "item": {
          "id": "bb0cf185-9cbb-429c-a0c1-774807cd7b72",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "85fc0680-eee8-4dd2-8c84-d0b54d896e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "bcdf5ea6-c38f-416b-997f-2412d7a08e3a",
        "cursor": {
          "ref": "4d508953-cb50-4f4a-983d-7b12689a7dee",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ab6f0546-ccee-4ef6-b264-c0b69a7a4113"
        },
        "item": {
          "id": "bcdf5ea6-c38f-416b-997f-2412d7a08e3a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b980e5ad-71f6-4609-8cc6-221d162703a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "9b09b4c5-40df-4e68-b661-e73ce907a4e2",
        "cursor": {
          "ref": "1e059adb-0d83-4d89-b383-90f89161f7c4",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "309cae0d-879c-4d60-a496-380fdff595f9"
        },
        "item": {
          "id": "9b09b4c5-40df-4e68-b661-e73ce907a4e2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0c697bc0-222b-455c-a567-49425120b7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "7f3f3e1f-4ead-4313-8e7d-4dbb2973e35a",
        "cursor": {
          "ref": "61be35cf-1eeb-4d30-9dc4-0fe93db50911",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "de78a0da-d5cb-4c8b-9cfb-a02fb334cb8c"
        },
        "item": {
          "id": "7f3f3e1f-4ead-4313-8e7d-4dbb2973e35a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c4036ce3-b3cd-45a8-8efb-368130df8ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "f83f20be-c93d-42b8-a050-1d56feddc3a7",
        "cursor": {
          "ref": "c063b56b-5b41-4752-a36b-ce883c0e5bdb",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fe094f6a-aaf3-438c-8ff4-64b36a549157"
        },
        "item": {
          "id": "f83f20be-c93d-42b8-a050-1d56feddc3a7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "76d9b3e7-4d48-4394-af46-639e794094f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "aed54abf-1dd9-4b1d-862d-24032f02b2ef",
        "cursor": {
          "ref": "5a200348-75ba-457a-9b66-c904a87a08e1",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "58cadfdd-7215-4221-947e-06e8d5b5f4b9"
        },
        "item": {
          "id": "aed54abf-1dd9-4b1d-862d-24032f02b2ef",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c2156c54-ec28-47bc-ac37-5fb8211e7bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "949a888b-9246-4213-be9f-a10b464d2006",
        "cursor": {
          "ref": "1621e75f-df91-4119-8e35-d780730d8dad",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d6627a26-33ad-41a0-918b-6c035748f624"
        },
        "item": {
          "id": "949a888b-9246-4213-be9f-a10b464d2006",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ff6afe46-4cfd-4381-abac-054dcb08aeef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "74cfc63d-e4a2-446a-937e-b3da771c5370",
        "cursor": {
          "ref": "fd6069ec-09c7-4c38-9f4e-f9b7b546f4d8",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "73321690-cc23-4b5b-b001-2bdfcea177f9"
        },
        "item": {
          "id": "74cfc63d-e4a2-446a-937e-b3da771c5370",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d2525123-c644-439c-b8e2-81d1b63b9bd6",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "3fc362cc-578e-44aa-9543-ec989d7a8ab4",
        "cursor": {
          "ref": "859f9f59-d87d-4605-bff6-6fb118d67836",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "20d6c278-65b5-4374-95f6-0c00aebf618f"
        },
        "item": {
          "id": "3fc362cc-578e-44aa-9543-ec989d7a8ab4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "14b7a94c-37fa-41ab-8d4d-0b3bd9bd5297",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7f90f391-e200-423f-8281-d4c54c467f85",
        "cursor": {
          "ref": "9f50e5f9-a9b7-4b03-9a90-3f7ef6810b35",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b9b4ab53-cafd-4b7c-8eb3-e41384ef346c"
        },
        "item": {
          "id": "7f90f391-e200-423f-8281-d4c54c467f85",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2052ca5b-4c43-49cc-8be4-c4c3689795a3",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "d831e631-05b3-4ff3-9dfd-80c1f468f273",
        "cursor": {
          "ref": "3c09ce9d-6e7d-4b7f-aa17-92c8559301c8",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "669b68f9-111d-4775-b26b-4afec5d69edb"
        },
        "item": {
          "id": "d831e631-05b3-4ff3-9dfd-80c1f468f273",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "acd9da33-2265-4a65-90ec-3977174a9b45",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "a426cc15-2bd9-49d6-bc1e-8073144a3b4c",
        "cursor": {
          "ref": "db63d43d-b919-4ef6-9c90-b3bc67365293",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1549acc7-1a29-427d-930c-a54b99a96f8a"
        },
        "item": {
          "id": "a426cc15-2bd9-49d6-bc1e-8073144a3b4c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "eed04d3b-77ef-4326-a0c5-feeaa7a74c01",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "2b257f50-15d3-48cb-88a6-00edf514cf16",
        "cursor": {
          "ref": "03286760-b479-46b0-a2bb-e98ae2f63b8b",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e866f83e-5030-47b2-978c-6f07e58930aa"
        },
        "item": {
          "id": "2b257f50-15d3-48cb-88a6-00edf514cf16",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a4585b3f-4abb-426a-be4a-f62a6dee4538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "2145a516-0985-4120-b420-da5a82d923fa",
        "cursor": {
          "ref": "db30bedd-d4e5-4cd8-b352-06635bf4bd0b",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "88d5fd9b-19c8-4321-ab9b-cbc47d09cfcc"
        },
        "item": {
          "id": "2145a516-0985-4120-b420-da5a82d923fa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "81e2a6a7-2020-4a73-8a33-839aebd70dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "86f12e9c-8d42-4547-8929-2609ef24490e",
        "cursor": {
          "ref": "b3b3e025-a17f-449b-957c-b9aa7be6abdb",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ab3260fe-09b7-4307-809c-c5d21ce76208"
        },
        "item": {
          "id": "86f12e9c-8d42-4547-8929-2609ef24490e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ce92dc11-eec2-4e22-95c6-fdd960811c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "aeb670be-cef0-44a2-9c22-fd309eeb7aed",
        "cursor": {
          "ref": "2e701a14-e3c6-4631-bfeb-acbe45000fd4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c4c455db-5b13-4fd6-903b-11433f9fcdc8"
        },
        "item": {
          "id": "aeb670be-cef0-44a2-9c22-fd309eeb7aed",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b8764a79-57ae-4f6c-82b3-c0be01eb4343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "5cc4e535-05f8-40ba-b4a8-2400dca8cbe7",
        "cursor": {
          "ref": "296845c8-cded-406f-8392-2d0d94fc0dd7",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2ce429bf-3f94-4c5a-ac91-83888c4c4741"
        },
        "item": {
          "id": "5cc4e535-05f8-40ba-b4a8-2400dca8cbe7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b820b251-9c72-4775-9b61-7e70de02641e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "d3394781-1225-4155-ac6c-a4c4e5346ba6",
        "cursor": {
          "ref": "02ca7ef3-65d9-4761-9f41-dd9198352100",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "07a8e00e-2d81-493e-b913-ddab0f447c82"
        },
        "item": {
          "id": "d3394781-1225-4155-ac6c-a4c4e5346ba6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "10a4c13f-b375-4aa9-8a63-10589b2f051a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "443756d0-0af1-4b98-b16a-e2f9d5d6f40d",
        "cursor": {
          "ref": "d765d641-9a84-406d-977b-5b735233740f",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "89614394-1bb1-4923-8c20-927d9a214750"
        },
        "item": {
          "id": "443756d0-0af1-4b98-b16a-e2f9d5d6f40d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "541ba111-2e51-4734-a47c-0976ed881d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "8c20623c-9baf-482c-8f98-eb05f985867d",
        "cursor": {
          "ref": "8acdbe48-cbe0-4e3d-b0ba-99f962c727ee",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "684bd489-293e-46cf-9389-a5fa8e6d8237"
        },
        "item": {
          "id": "8c20623c-9baf-482c-8f98-eb05f985867d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "68811703-deb0-4c20-9e9c-53f542a319bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "d9a1aa90-7a48-4bf8-aca7-4d46fd590066",
        "cursor": {
          "ref": "02dd1c60-4ab4-4f35-b09c-0a52b40ab146",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c4a3c74b-3b4c-4efd-909c-f68aaf507ea9"
        },
        "item": {
          "id": "d9a1aa90-7a48-4bf8-aca7-4d46fd590066",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a8a0a526-ba6c-4c10-8905-443ee8698fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "8308d646-243a-4636-a987-4f117ba66e6c",
        "cursor": {
          "ref": "9e862e1a-2c1b-49f1-af85-c7ed30d51fab",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "19469f8f-e98e-48da-a6aa-9f00e37a376a"
        },
        "item": {
          "id": "8308d646-243a-4636-a987-4f117ba66e6c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "07c8d7bb-9a6d-4f5d-97e5-394150a9c35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "7e2c7b9b-ce95-4654-afc4-16d2883d98d9",
        "cursor": {
          "ref": "1c4f7c16-045c-4a67-8aa7-d802bbe8fcd3",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "70b0bb47-f76f-44a7-af5a-e59c0e651f43"
        },
        "item": {
          "id": "7e2c7b9b-ce95-4654-afc4-16d2883d98d9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "67a4092e-cc39-41dc-b2b2-1cf073854281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4509489c-782b-46ed-a016-416152d77d69",
        "cursor": {
          "ref": "6c89412f-7e23-41f5-b825-11a28c923828",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4b02f841-aca3-41b4-a03d-3e1dfe43a9ea"
        },
        "item": {
          "id": "4509489c-782b-46ed-a016-416152d77d69",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c4ed50b6-044f-404a-8bbd-0cd98771d62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "89e6832e-3b13-4ff8-b7eb-55357430f24c",
        "cursor": {
          "ref": "59aa5251-ccfd-4535-b4f0-47f103bd3491",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ea0025d8-4d42-47c7-9b48-8bfe5a3ce2e7"
        },
        "item": {
          "id": "89e6832e-3b13-4ff8-b7eb-55357430f24c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d9b64b1b-08a3-4517-bcce-0bbdc87459d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "4925d74e-502e-4cae-8e9e-48329e391b6b",
        "cursor": {
          "ref": "eb69631d-efd0-4799-91f3-4fe8cbb68e48",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8a795ae5-37ac-418d-9044-8cbdc5388409"
        },
        "item": {
          "id": "4925d74e-502e-4cae-8e9e-48329e391b6b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "db9aa198-6d50-4fae-ad6d-6110dbc61190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1587e057-d97f-4df8-93a9-6746913c7273",
        "cursor": {
          "ref": "109377f6-4445-49f8-9072-b8b5b1330636",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5b6f5bad-15ab-4302-aecb-0ed20384333f"
        },
        "item": {
          "id": "1587e057-d97f-4df8-93a9-6746913c7273",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f52b97d4-72b0-406f-ad4b-0b8090ba435a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "e9f3907e-2a80-49d9-ad38-425d35c8b667",
        "cursor": {
          "ref": "f05095d3-7694-45a1-9e00-73f272b25674",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "933ecd09-a5fb-4486-9bc1-ea35a6c81b47"
        },
        "item": {
          "id": "e9f3907e-2a80-49d9-ad38-425d35c8b667",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a41844dc-592f-42f5-ad0c-6d22edf6fa23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "d75e4d15-75a0-445d-b06f-b9737f57ec2f",
        "cursor": {
          "ref": "ba6ec176-7f2c-4708-bdeb-d38c1ad305e7",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d146a223-1631-47bc-b622-cbeb91a1adf8"
        },
        "item": {
          "id": "d75e4d15-75a0-445d-b06f-b9737f57ec2f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "35ae2167-7c95-40c8-b9e9-91ec2b45325e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "73fdfcf5-d795-4d0c-8ff3-945850ce1db9",
        "cursor": {
          "ref": "a39e7b40-a76d-4f8c-aa2c-32ee9f83f77b",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f2ccea30-2f4a-4b7a-8ad4-7c3ce78bc6c0"
        },
        "item": {
          "id": "73fdfcf5-d795-4d0c-8ff3-945850ce1db9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2cb9d975-cfb8-493d-927f-37ba87d848f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "fd4b917d-2da8-4fc0-abaf-133f1bc72676",
        "cursor": {
          "ref": "ea4c7480-10d3-438a-81e1-468d11ba4cea",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d0fd538d-11d2-411f-b47f-da9ac3144522"
        },
        "item": {
          "id": "fd4b917d-2da8-4fc0-abaf-133f1bc72676",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "615dd7c6-6bd6-47d8-8494-ce1e3aca4a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "e0fe7136-7e0c-4e43-9b5a-2a74ccaa6a23",
        "cursor": {
          "ref": "6fecae0c-371b-4d02-91da-f061cb48bf1c",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1fcc7dc8-3207-4ee5-a336-60a14d159a6e"
        },
        "item": {
          "id": "e0fe7136-7e0c-4e43-9b5a-2a74ccaa6a23",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3f94b64e-8f30-4999-a9dc-4f543620d338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "86a5e4b8-6259-4321-8052-69ba82be676c",
        "cursor": {
          "ref": "7046db7b-f353-4c80-aede-d33b8683f403",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "08b3274f-2286-45b4-a3c0-3857fdacc851"
        },
        "item": {
          "id": "86a5e4b8-6259-4321-8052-69ba82be676c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1ab64a58-3e56-4e99-ad6b-c34c320bb1da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "3ce53a26-9147-4d50-9b88-ee67542e24f3",
        "cursor": {
          "ref": "0f9cceaa-2ec3-4aba-b92d-a3be050f0bf4",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2f7a9c74-2677-44e0-9fbf-58c6481d541f"
        },
        "item": {
          "id": "3ce53a26-9147-4d50-9b88-ee67542e24f3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c093d5fb-62f7-4e02-af61-f261ab05afa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "cd4b523f-72b9-401f-9d24-74f5a0a441e0",
        "cursor": {
          "ref": "e37ecbec-f4bf-4966-8e30-232e039186f6",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "36abb68a-4ee1-456c-86c8-80667e38e814"
        },
        "item": {
          "id": "cd4b523f-72b9-401f-9d24-74f5a0a441e0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ebcfdd56-a338-4354-a5b3-3966837b3c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "08132847-12ca-419a-a625-53006c48415f",
        "cursor": {
          "ref": "b3456885-d00d-4960-97e1-e6f6e051db3c",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "966c0d5a-9575-43c6-bf37-7a3e3a299bd8"
        },
        "item": {
          "id": "08132847-12ca-419a-a625-53006c48415f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1ed0f7af-1de0-4b5d-adf2-c29a884d6a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "d7c789d1-114a-45f4-93d0-dff5052e5bbc",
        "cursor": {
          "ref": "8c9b8a88-3cb6-4e21-9703-e00912add7c6",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "67c06c02-872c-49fc-8684-2f37531da623"
        },
        "item": {
          "id": "d7c789d1-114a-45f4-93d0-dff5052e5bbc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f577ec15-032f-4516-8a9c-0c92dc7fab9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "488383b7-551c-4e4d-a08b-1d773c46cfc4",
        "cursor": {
          "ref": "c524307f-0dcb-49f0-8d1a-9e2f6b6f3b0a",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d0dabf31-c088-4d3a-8669-66d1ca37c265"
        },
        "item": {
          "id": "488383b7-551c-4e4d-a08b-1d773c46cfc4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "dc2c7fac-83d3-4c9b-9cd1-000970ccff31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "7d7d063a-5d39-4066-b066-da016cdbf700",
        "cursor": {
          "ref": "4fe706ee-05a4-48cc-8d22-24b999fca537",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "bcdad86a-78c7-4d04-8150-c4a70d0d5472"
        },
        "item": {
          "id": "7d7d063a-5d39-4066-b066-da016cdbf700",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "aadd4de5-38b9-4132-87bb-b9f25ec8e660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "20678e46-6173-42de-b459-a7991e01ee4b",
        "cursor": {
          "ref": "fb4358c6-7c5d-428d-bd63-5881b34aaa8a",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a3175acd-442a-460f-b872-7aaf94da1d26"
        },
        "item": {
          "id": "20678e46-6173-42de-b459-a7991e01ee4b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9927c3c0-f21f-4360-8c43-5ed8c124507f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "08dc4b15-7de7-4440-b6cb-b1e814aea013",
        "cursor": {
          "ref": "7520e5af-6b62-477f-94aa-bd34517e8ca8",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "45a3b915-db18-4e97-8abc-e25496137f92"
        },
        "item": {
          "id": "08dc4b15-7de7-4440-b6cb-b1e814aea013",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3cc2ea23-bb6b-45a0-88fe-402676ba266b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "4564ab11-4f52-47f0-850a-d8a6664931fd",
        "cursor": {
          "ref": "c0088f96-542e-4a6f-8415-04e5edc411c9",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c93f1685-0653-4e61-bb86-c259703fdf0c"
        },
        "item": {
          "id": "4564ab11-4f52-47f0-850a-d8a6664931fd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a6055967-e718-4ba5-a107-920399422685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "0e8e6fa7-f089-45a7-bcf7-194ed2a17639",
        "cursor": {
          "ref": "ca945c67-f93c-42c3-b14d-fb46c961bf33",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d1c2994d-4066-4ae2-b602-1ecee239fe3a"
        },
        "item": {
          "id": "0e8e6fa7-f089-45a7-bcf7-194ed2a17639",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "93d3b3de-6a8a-450c-bff9-6f7dd42a7fbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b53251fd-782f-4c5b-a8d5-e18fca75d38a",
        "cursor": {
          "ref": "7df77976-6c78-496a-8e56-a3d51e828628",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c315f214-21f4-4115-a5f2-de3a1ac8ae69"
        },
        "item": {
          "id": "b53251fd-782f-4c5b-a8d5-e18fca75d38a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2fed0906-cb25-4119-82df-b2ae02cd2f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9e0c8dea-d202-42a0-8479-945b0250918f",
        "cursor": {
          "ref": "5d23c214-c61f-436b-890c-bd99e43ae4c5",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4c45b024-a9e3-46cc-98ef-2400d1a8c8f1"
        },
        "item": {
          "id": "9e0c8dea-d202-42a0-8479-945b0250918f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4084df6b-b1ba-4e14-a073-0f3b0a144277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "96e4c8c4-6f81-485c-8613-2a630cc5552f",
        "cursor": {
          "ref": "9cd91041-3fa4-4ce0-9493-bd7fe2a3a3df",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1e0a2ceb-4cfa-46b9-87b4-a3cc48fc6ee2"
        },
        "item": {
          "id": "96e4c8c4-6f81-485c-8613-2a630cc5552f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e9e0e8f3-f5af-4c21-96a6-c2011de56889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "ccfb6d5c-ad8d-42d3-b17a-59483a101fa1",
        "cursor": {
          "ref": "f02c0a62-9ca4-468d-baa4-3ffd09fdb4fb",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e8e5cb0a-7af0-458d-b91e-99a063c25883"
        },
        "item": {
          "id": "ccfb6d5c-ad8d-42d3-b17a-59483a101fa1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "dfcbe717-d397-404f-af83-580711338d0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a151e14-8a9f-4887-ae35-b4c4a3bb00e2",
        "cursor": {
          "ref": "73992161-ae89-489d-ae32-2129bfcd525d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c556606d-a0f1-4a2b-860c-fe8dcaac03b3"
        },
        "item": {
          "id": "6a151e14-8a9f-4887-ae35-b4c4a3bb00e2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "eb3b3e70-5fae-474a-81f5-fb3f19e29ad7",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "88100fd6-65b2-4022-b5a8-1de066b00755",
        "cursor": {
          "ref": "d79a4ff6-bc0c-48cd-a0b9-1c74d9e5d28b",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "15c93ed7-81be-416c-9a0f-63d1f216c986"
        },
        "item": {
          "id": "88100fd6-65b2-4022-b5a8-1de066b00755",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dca15a1c-a59d-4cd0-b6c7-dd83d887f505",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef7927a-aeb3-41f0-b181-b16e015004c1",
        "cursor": {
          "ref": "2c44f4a4-9b54-4e78-882c-03951c6805c7",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d5aef3eb-48ce-44ef-9297-8d19b41fc7f9"
        },
        "item": {
          "id": "7ef7927a-aeb3-41f0-b181-b16e015004c1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "39a14f98-7594-4baa-88c2-56703c6868ea",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccbd4a9-5b2a-4be6-b982-08f6c85eefaa",
        "cursor": {
          "ref": "f7a28c9e-bf1f-478b-a64d-fc8191fcf0ef",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b7011c0e-339f-44b1-b547-b0afef8f9dba"
        },
        "item": {
          "id": "2ccbd4a9-5b2a-4be6-b982-08f6c85eefaa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "52e5ccba-9580-494f-9956-ad946a443738",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ccbd4a9-5b2a-4be6-b982-08f6c85eefaa",
        "cursor": {
          "ref": "f7a28c9e-bf1f-478b-a64d-fc8191fcf0ef",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b7011c0e-339f-44b1-b547-b0afef8f9dba"
        },
        "item": {
          "id": "2ccbd4a9-5b2a-4be6-b982-08f6c85eefaa",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "52e5ccba-9580-494f-9956-ad946a443738",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c37c8ed-60e4-41d7-98c6-d240df331081",
        "cursor": {
          "ref": "19d1d1fe-7a6d-4dd9-a487-c3872376abc4",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e6262685-1658-45b8-98c2-987853c526f5"
        },
        "item": {
          "id": "6c37c8ed-60e4-41d7-98c6-d240df331081",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c5260acf-0454-45ff-93ec-2df34678bfa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc10b0af-190e-4bd3-be48-68e8cf890299",
        "cursor": {
          "ref": "c6ad2395-f786-4418-87f7-087a6ba4039a",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "97d83ff7-2c2b-4451-8a11-11c060f5f502"
        },
        "item": {
          "id": "bc10b0af-190e-4bd3-be48-68e8cf890299",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "34e7387a-61c5-4653-afab-ec8475fb4271",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}